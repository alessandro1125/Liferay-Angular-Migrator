{"version":3,"sources":["../../../../../../../../../../../packages/platform-browser-dynamic/testing/src/metadata_overrider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from '@angular/core/testing';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet _nextReferenceId = 0;\n\nexport class MetadataOverrider {\n  private _references = new Map<any, string>();\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata<C extends T, T>(\n      metadataClass: {new (options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = (<any>oldMetadata)[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(<any>props);\n  }\n}\n\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const removeObjects = new Set<string>();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (removeValue instanceof Array) {\n      removeValue.forEach(\n          (value: any) => { removeObjects.add(_propHashKey(prop, value, references)); });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (propValue instanceof Array) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && propValue instanceof Array) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n\n\nfunction _valueProps(obj: any): string[] {\n  const props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n"],"sourceRoot":""}