Liferay.Loader.define('@example-angular-liferay$angular/platform-browser-dynamic@6.1.10/esm5/testing/src/dom_test_component_renderer', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Inject, Injectable } from '@angular/core';
    import { TestComponentRenderer } from '@angular/core/testing';
    import { DOCUMENT, ÉµgetDOM as getDOM } from '@angular/platform-browser';
    /**
     * A DOM based implementation of the TestComponentRenderer.
     */
    var DOMTestComponentRenderer = /** @class */function (_super) {
        tslib_1.__extends(DOMTestComponentRenderer, _super);
        function DOMTestComponentRenderer(_doc /** TODO #9100 */) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            return _this;
        }
        DOMTestComponentRenderer.prototype.insertRootElement = function (rootElId) {
            var rootEl = getDOM().firstChild(getDOM().content(getDOM().createTemplate("<div id=\"" + rootElId + "\"></div>")));
            // TODO(juliemr): can/should this be optional?
            var oldRoots = getDOM().querySelectorAll(this._doc, '[id^=root]');
            for (var i = 0; i < oldRoots.length; i++) {
                getDOM().remove(oldRoots[i]);
            }
            getDOM().appendChild(this._doc.body, rootEl);
        };
        DOMTestComponentRenderer = tslib_1.__decorate([Injectable(), tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__metadata("design:paramtypes", [Object])], DOMTestComponentRenderer);
        return DOMTestComponentRenderer;
    }(TestComponentRenderer);
    export { DOMTestComponentRenderer };
});
//# sourceMappingURL=dom_test_component_renderer.js.map