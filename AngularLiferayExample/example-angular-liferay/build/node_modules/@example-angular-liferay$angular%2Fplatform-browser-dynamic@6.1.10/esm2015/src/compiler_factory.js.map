{"version":3,"sources":["../../../../../../packages/platform-browser-dynamic/src/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerFactory, ComponentFactory, CompilerOptions, ModuleWithComponentFactories, Inject, InjectionToken, Optional, PACKAGE_ROOT_URL, PlatformRef, StaticProvider, TRANSLATIONS, Type, isDevMode, platformCore, ÉµConsole as Console, ViewEncapsulation, Injector, NgModuleFactory, TRANSLATIONS_FORMAT, MissingTranslationStrategy,} from '@angular/core';\n\nimport {StaticSymbolCache, JitCompiler, ProviderMeta, ExternalReference, I18NHtmlParser, Identifiers, ViewCompiler, CompileMetadataResolver, UrlResolver, TemplateParser, NgModuleCompiler, JitSummaryResolver, SummaryResolver, StyleCompiler, PipeResolver, ElementSchemaRegistry, DomElementSchemaRegistry, ResourceLoader, NgModuleResolver, HtmlParser, CompileReflector, CompilerConfig, DirectiveNormalizer, DirectiveResolver, Lexer, Parser} from '@angular/compiler';\n\nimport {JitReflector} from './compiler_reflector';\n\nexport const ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');\n\n/**\n * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.\n */\nexport const DEFAULT_PACKAGE_URL_PROVIDER = {\n  provide: PACKAGE_ROOT_URL,\n  useValue: '/'\n};\n\nconst _NO_RESOURCE_LOADER: ResourceLoader = {\n  get(url: string): Promise<string>{\n      throw new Error(\n          `No ResourceLoader implementation has been provided. Can't read the url \"${url}\"`);}\n};\n\nconst baseHtmlParser = new InjectionToken('HtmlParser');\n\nexport class CompilerImpl implements Compiler {\n  private _delegate: JitCompiler;\n  public readonly injector: Injector;\n  constructor(\n      injector: Injector, private _metadataResolver: CompileMetadataResolver,\n      templateParser: TemplateParser, styleCompiler: StyleCompiler, viewCompiler: ViewCompiler,\n      ngModuleCompiler: NgModuleCompiler, summaryResolver: SummaryResolver<Type<any>>,\n      compileReflector: CompileReflector, compilerConfig: CompilerConfig, console: Console) {\n    this._delegate = new JitCompiler(\n        _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler,\n        summaryResolver, compileReflector, compilerConfig, console,\n        this.getExtraNgModuleProviders.bind(this));\n    this.injector = injector;\n  }\n\n  private getExtraNgModuleProviders() {\n    return [this._metadataResolver.getProviderMetadata(\n        new ProviderMeta(Compiler, {useValue: this}))];\n  }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._delegate.compileModuleSync(moduleType) as NgModuleFactory<T>;\n  }\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._delegate.compileModuleAsync(moduleType) as Promise<NgModuleFactory<T>>;\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    const result = this._delegate.compileModuleAndAllComponentsSync(moduleType);\n    return {\n      ngModuleFactory: result.ngModuleFactory as NgModuleFactory<T>,\n      componentFactories: result.componentFactories as ComponentFactory<any>[],\n    };\n  }\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._delegate.compileModuleAndAllComponentsAsync(moduleType)\n        .then((result) => ({\n                ngModuleFactory: result.ngModuleFactory as NgModuleFactory<T>,\n                componentFactories: result.componentFactories as ComponentFactory<any>[],\n              }));\n  }\n  loadAotSummaries(summaries: () => any[]) { this._delegate.loadAotSummaries(summaries); }\n  hasAotSummary(ref: Type<any>): boolean { return this._delegate.hasAotSummary(ref); }\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._delegate.getComponentFactory(component) as ComponentFactory<T>;\n  }\n  clearCache(): void { this._delegate.clearCache(); }\n  clearCacheFor(type: Type<any>) { this._delegate.clearCacheFor(type); }\n  getModuleId(moduleType: Type<any>): string|undefined {\n    const meta = this._metadataResolver.getNgModuleMetadata(moduleType);\n    return meta && meta.id || undefined;\n  }\n}\n\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n */\nexport const COMPILER_PROVIDERS = <StaticProvider[]>[\n  {provide: CompileReflector, useValue: new JitReflector()},\n  {provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER},\n  {provide: JitSummaryResolver, deps: []},\n  {provide: SummaryResolver, useExisting: JitSummaryResolver},\n  {provide: Console, deps: []},\n  {provide: Lexer, deps: []},\n  {provide: Parser, deps: [Lexer]},\n  {\n    provide: baseHtmlParser,\n    useClass: HtmlParser,\n    deps: [],\n  },\n  {\n    provide: I18NHtmlParser,\n    useFactory: (parser: HtmlParser, translations: string | null, format: string,\n                 config: CompilerConfig, console: Console) => {\n      translations = translations || '';\n      const missingTranslation =\n          translations ? config.missingTranslation ! : MissingTranslationStrategy.Ignore;\n      return new I18NHtmlParser(parser, translations, format, missingTranslation, console);\n    },\n    deps: [\n      baseHtmlParser,\n      [new Optional(), new Inject(TRANSLATIONS)],\n      [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\n      [CompilerConfig],\n      [Console],\n    ]\n  },\n  {\n    provide: HtmlParser,\n    useExisting: I18NHtmlParser,\n  },\n  {\n    provide: TemplateParser, deps: [CompilerConfig, CompileReflector,\n    Parser, ElementSchemaRegistry,\n    I18NHtmlParser, Console]\n  },\n  { provide: DirectiveNormalizer, deps: [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig]},\n  { provide: CompileMetadataResolver, deps: [CompilerConfig, HtmlParser, NgModuleResolver,\n                      DirectiveResolver, PipeResolver,\n                      SummaryResolver,\n                      ElementSchemaRegistry,\n                      DirectiveNormalizer, Console,\n                      [Optional, StaticSymbolCache],\n                      CompileReflector,\n                      [Optional, ERROR_COLLECTOR_TOKEN]]},\n  DEFAULT_PACKAGE_URL_PROVIDER,\n  { provide: StyleCompiler, deps: [UrlResolver]},\n  { provide: ViewCompiler, deps: [CompileReflector]},\n  { provide: NgModuleCompiler, deps: [CompileReflector] },\n  { provide: CompilerConfig, useValue: new CompilerConfig()},\n  { provide: Compiler, useClass: CompilerImpl, deps: [Injector, CompileMetadataResolver,\n                                TemplateParser, StyleCompiler,\n                                ViewCompiler, NgModuleCompiler,\n                                SummaryResolver, CompileReflector, CompilerConfig,\n                                Console]},\n  { provide: DomElementSchemaRegistry, deps: []},\n  { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry},\n  { provide: UrlResolver, deps: [PACKAGE_ROOT_URL]},\n  { provide: DirectiveResolver, deps: [CompileReflector]},\n  { provide: PipeResolver, deps: [CompileReflector]},\n  { provide: NgModuleResolver, deps: [CompileReflector]},\n];\n\n/**\n * @experimental\n */\nexport class JitCompilerFactory implements CompilerFactory {\n  private _defaultOptions: CompilerOptions[];\n\n  /* @internal */\n  constructor(defaultOptions: CompilerOptions[]) {\n    const compilerOptions: CompilerOptions = {\n      useJit: true,\n      defaultEncapsulation: ViewEncapsulation.Emulated,\n      missingTranslation: MissingTranslationStrategy.Warning,\n    };\n\n    this._defaultOptions = [compilerOptions, ...defaultOptions];\n  }\n  createCompiler(options: CompilerOptions[] = []): Compiler {\n    const opts = _mergeOptions(this._defaultOptions.concat(options));\n    const injector = Injector.create([\n      COMPILER_PROVIDERS, {\n        provide: CompilerConfig,\n        useFactory: () => {\n          return new CompilerConfig({\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            useJit: opts.useJit,\n            jitDevMode: isDevMode(),\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            defaultEncapsulation: opts.defaultEncapsulation,\n            missingTranslation: opts.missingTranslation,\n            preserveWhitespaces: opts.preserveWhitespaces,\n          });\n        },\n        deps: []\n      },\n      opts.providers !\n    ]);\n    return injector.get(Compiler);\n  }\n}\n\nfunction _mergeOptions(optionsArr: CompilerOptions[]): CompilerOptions {\n  return {\n    useJit: _lastDefined(optionsArr.map(options => options.useJit)),\n    defaultEncapsulation: _lastDefined(optionsArr.map(options => options.defaultEncapsulation)),\n    providers: _mergeArrays(optionsArr.map(options => options.providers !)),\n    missingTranslation: _lastDefined(optionsArr.map(options => options.missingTranslation)),\n    preserveWhitespaces: _lastDefined(optionsArr.map(options => options.preserveWhitespaces)),\n  };\n}\n\nfunction _lastDefined<T>(args: T[]): T|undefined {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(parts: any[][]): any[] {\n  const result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n"],"sourceRoot":""}