{"version":3,"sources":["../../../../../../../packages/platform-browser-dynamic/testing/src/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, DirectiveResolver, ERROR_COMPONENT_TYPE, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver} from '@angular/compiler/testing';\nimport {Compiler, CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injectable, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, PlatformRef, StaticProvider, Type, createPlatformFactory, ɵstringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵCompilerImpl as CompilerImpl, ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {MetadataOverrider} from './metadata_overrider';\n\nexport const COMPILER_PROVIDERS: StaticProvider[] = [\n  {provide: MockPipeResolver, deps: [CompileReflector]},\n  {provide: PipeResolver, useExisting: MockPipeResolver},\n  {provide: MockDirectiveResolver, deps: [CompileReflector]},\n  {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n  {provide: MockNgModuleResolver, deps: [CompileReflector]},\n  {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n];\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _injector: Injector, private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <CompilerImpl>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: CompilerImpl, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector { return this._compiler.injector; }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n    this.clearCacheFor(ngModule);\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata !, override));\n    this.clearCacheFor(directive);\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata !, override));\n    this.clearCacheFor(component);\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n    this.clearCacheFor(pipe);\n  }\n  loadAotSummaries(summaries: () => any[]) { this._compiler.loadAotSummaries(summaries); }\n  clearCache(): void { this._compiler.clearCache(); }\n  clearCacheFor(type: Type<any>) { this._compiler.clearCacheFor(type); }\n\n  getComponentFromError(error: Error) { return (error as any)[ERROR_COMPONENT_TYPE] || null; }\n\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return this._moduleResolver.resolve(moduleType, true).id;\n  }\n}\n"],"sourceRoot":""}