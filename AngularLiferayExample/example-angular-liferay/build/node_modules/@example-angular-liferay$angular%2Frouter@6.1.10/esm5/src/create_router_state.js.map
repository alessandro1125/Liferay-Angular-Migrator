{"version":3,"sources":["../../../../../../../../../packages/router/src/create_router_state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject} from 'rxjs';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n\n    // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else {\n    const detachedRouteHandle =\n        <DetachedRouteHandleInternal>routeReuseStrategy.retrieve(curr.value);\n    if (detachedRouteHandle) {\n      const tree: TreeNode<ActivatedRoute> = detachedRouteHandle.route;\n      setFutureSnapshotsOfActivatedRoutes(curr, tree);\n      return tree;\n\n    } else {\n      const value = createActivatedRoute(curr.value);\n      const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n      return new TreeNode<ActivatedRoute>(value, children);\n    }\n  }\n}\n\nfunction setFutureSnapshotsOfActivatedRoutes(\n    curr: TreeNode<ActivatedRouteSnapshot>, result: TreeNode<ActivatedRoute>): void {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n  result.value._futureSnapshot = curr.value;\n  for (let i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n"],"sourceRoot":""}