Liferay.Loader.define('@example-angular-liferay$angular/router@6.1.10/esm5/src/router_config_loader', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { InjectionToken, NgModuleFactory } from '@angular/core';
    // TODO(i): switch to fromPromise once it's expored in rxjs
    import { from, of } from 'rxjs';
    import { map, mergeMap } from 'rxjs/operators';
    import { LoadedRouterConfig, standardizeConfig } from './config';
    import { flatten, wrapIntoObservable } from './utils/collection';
    /**
     * @docsNotRequired
     * @experimental
     */
    export var ROUTES = new InjectionToken('ROUTES');
    var RouterConfigLoader = /** @class */function () {
        function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
            this.loader = loader;
            this.compiler = compiler;
            this.onLoadStartListener = onLoadStartListener;
            this.onLoadEndListener = onLoadEndListener;
        }
        RouterConfigLoader.prototype.load = function (parentInjector, route) {
            var _this = this;
            if (this.onLoadStartListener) {
                this.onLoadStartListener(route);
            }
            var moduleFactory$ = this.loadModuleFactory(route.loadChildren);
            return moduleFactory$.pipe(map(function (factory) {
                if (_this.onLoadEndListener) {
                    _this.onLoadEndListener(route);
                }
                var module = factory.create(parentInjector);
                return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);
            }));
        };
        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
            var _this = this;
            if (typeof loadChildren === 'string') {
                return from(this.loader.load(loadChildren));
            } else {
                return wrapIntoObservable(loadChildren()).pipe(mergeMap(function (t) {
                    if (t instanceof NgModuleFactory) {
                        return of(t);
                    } else {
                        return from(_this.compiler.compileModuleAsync(t));
                    }
                }));
            }
        };
        return RouterConfigLoader;
    }();
    export { RouterConfigLoader };
});
//# sourceMappingURL=router_config_loader.js.map