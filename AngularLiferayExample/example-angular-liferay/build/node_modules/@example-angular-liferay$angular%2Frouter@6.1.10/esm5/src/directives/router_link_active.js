Liferay.Loader.define('@example-angular-liferay$angular/router@6.1.10/esm5/src/directives/router_link_active', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { ChangeDetectorRef, ContentChildren, Directive, ElementRef, Input, QueryList, Renderer2 } from '@angular/core';
    import { NavigationEnd } from '../events';
    import { Router } from '../router';
    import { RouterLink, RouterLinkWithHref } from './router_link';
    /**
     *
     * @description
     *
     * Lets you add a CSS class to an element when the link's route becomes active.
     *
     * This directive lets you add a CSS class to an element when the link's route
     * becomes active.
     *
     * Consider the following example:
     *
     * ```
     * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
     * ```
     *
     * When the url is either '/user' or '/user/bob', the active-link class will
     * be added to the `a` tag. If the url changes, the class will be removed.
     *
     * You can set more than one class, as follows:
     *
     * ```
     * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
     * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
     * ```
     *
     * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
     * only when the url matches the link exactly.
     *
     * ```
     * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
     * true}">Bob</a>
     * ```
     *
     * You can assign the RouterLinkActive instance to a template variable and directly check
     * the `isActive` status.
     * ```
     * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
     *   Bob {{ rla.isActive ? '(already open)' : ''}}
     * </a>
     * ```
     *
     * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
     *
     * ```
     * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
     *   <a routerLink="/user/jim">Jim</a>
     *   <a routerLink="/user/bob">Bob</a>
     * </div>
     * ```
     *
     * This will set the active-link class on the div tag if the url is either '/user/jim' or
     * '/user/bob'.
     *
     * @ngModule RouterModule
     *
     *
     */
    var RouterLinkActive = /** @class */function () {
        function RouterLinkActive(router, element, renderer, cdr) {
            var _this = this;
            this.router = router;
            this.element = element;
            this.renderer = renderer;
            this.cdr = cdr;
            this.classes = [];
            this.isActive = false;
            this.routerLinkActiveOptions = { exact: false };
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof NavigationEnd) {
                    _this.update();
                }
            });
        }
        RouterLinkActive.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.links.changes.subscribe(function (_) {
                return _this.update();
            });
            this.linksWithHrefs.changes.subscribe(function (_) {
                return _this.update();
            });
            this.update();
        };
        Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
            set: function (data) {
                var classes = Array.isArray(data) ? data : data.split(' ');
                this.classes = classes.filter(function (c) {
                    return !!c;
                });
            },
            enumerable: true,
            configurable: true
        });
        RouterLinkActive.prototype.ngOnChanges = function (changes) {
            this.update();
        };
        RouterLinkActive.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        RouterLinkActive.prototype.update = function () {
            var _this = this;
            if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
            Promise.resolve().then(function () {
                var hasActiveLinks = _this.hasActiveLinks();
                if (_this.isActive !== hasActiveLinks) {
                    _this.isActive = hasActiveLinks;
                    _this.classes.forEach(function (c) {
                        if (hasActiveLinks) {
                            _this.renderer.addClass(_this.element.nativeElement, c);
                        } else {
                            _this.renderer.removeClass(_this.element.nativeElement, c);
                        }
                    });
                }
            });
        };
        RouterLinkActive.prototype.isLinkActive = function (router) {
            var _this = this;
            return function (link) {
                return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
            };
        };
        RouterLinkActive.prototype.hasActiveLinks = function () {
            return this.links.some(this.isLinkActive(this.router)) || this.linksWithHrefs.some(this.isLinkActive(this.router));
        };
        tslib_1.__decorate([ContentChildren(RouterLink, { descendants: true }), tslib_1.__metadata("design:type", QueryList)], RouterLinkActive.prototype, "links", void 0);
        tslib_1.__decorate([ContentChildren(RouterLinkWithHref, { descendants: true }), tslib_1.__metadata("design:type", QueryList)], RouterLinkActive.prototype, "linksWithHrefs", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object)], RouterLinkActive.prototype, "routerLinkActiveOptions", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], RouterLinkActive.prototype, "routerLinkActive", null);
        RouterLinkActive = tslib_1.__decorate([Directive({
            selector: '[routerLinkActive]',
            exportAs: 'routerLinkActive'
        }), tslib_1.__metadata("design:paramtypes", [Router, ElementRef, Renderer2, ChangeDetectorRef])], RouterLinkActive);
        return RouterLinkActive;
    }();
    export { RouterLinkActive };
});
//# sourceMappingURL=router_link_active.js.map