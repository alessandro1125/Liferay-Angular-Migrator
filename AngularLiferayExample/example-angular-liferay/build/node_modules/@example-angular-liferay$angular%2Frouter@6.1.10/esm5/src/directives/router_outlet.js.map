{"version":3,"sources":["../../../../../../../../../../packages/router/src/directives/router_outlet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Injector, OnDestroy, OnInit, Output, ViewContainerRef} from '@angular/core';\n\nimport {Data} from '../config';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * @ngModule RouterModule\n *\n *\n */\n@Directive({selector: 'router-outlet', exportAs: 'outlet'})\nexport class RouterOutlet implements OnDestroy, OnInit {\n  private activated: ComponentRef<any>|null = null;\n  private _activatedRoute: ActivatedRoute|null = null;\n  private name: string;\n\n  @Output('activate') activateEvents = new EventEmitter<any>();\n  @Output('deactivate') deactivateEvents = new EventEmitter<any>();\n\n  constructor(\n      private parentContexts: ChildrenOutletContexts, private location: ViewContainerRef,\n      private resolver: ComponentFactoryResolver, @Attribute('name') name: string,\n      private changeDetector: ChangeDetectorRef) {\n    this.name = name || PRIMARY_OUTLET;\n    parentContexts.onChildOutletCreated(this.name, this);\n  }\n\n  ngOnDestroy(): void { this.parentContexts.onChildOutletDestroyed(this.name); }\n\n  ngOnInit(): void {\n    if (!this.activated) {\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n      const context = this.parentContexts.getContext(this.name);\n      if (context && context.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.resolver || null);\n        }\n      }\n    }\n  }\n\n  get isActivated(): boolean { return !!this.activated; }\n\n  get component(): Object {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n\n  get activatedRoute(): ActivatedRoute {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this._activatedRoute as ActivatedRoute;\n  }\n\n  get activatedRouteData(): Data {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n    return {};\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   */\n  detach(): ComponentRef<any> {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    const cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    return cmp;\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   */\n  attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n  }\n\n  deactivate(): void {\n    if (this.activated) {\n      const c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n\n  activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n    this._activatedRoute = activatedRoute;\n    const snapshot = activatedRoute._futureSnapshot;\n    const component = <any>snapshot.routeConfig !.component;\n    resolver = resolver || this.resolver;\n    const factory = resolver.resolveComponentFactory(component);\n    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n    this.activated = this.location.createComponent(factory, this.location.length, injector);\n    // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n    this.changeDetector.markForCheck();\n    this.activateEvents.emit(this.activated.instance);\n  }\n}\n\nclass OutletInjector implements Injector {\n  constructor(\n      private route: ActivatedRoute, private childContexts: ChildrenOutletContexts,\n      private parent: Injector) {}\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n"],"sourceRoot":""}