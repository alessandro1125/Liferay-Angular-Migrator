Liferay.Loader.define('@example-angular-liferay$angular/router@6.1.10/esm5/src/directives/router_link', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { LocationStrategy } from '@angular/common';
    import { Attribute, Directive, ElementRef, HostBinding, HostListener, Input, Renderer2, isDevMode } from '@angular/core';
    import { NavigationEnd } from '../events';
    import { Router } from '../router';
    import { ActivatedRoute } from '../router_state';
    /**
     * @description
     *
     * Lets you link to specific routes in your app.
     *
     * Consider the following route configuration:
     * `[{ path: 'user/:name', component: UserCmp }]`.
     * When linking to this `user/:name` route, you use the `RouterLink` directive.
     *
     * If the link is static, you can use the directive as follows:
     * `<a routerLink="/user/bob">link to user component</a>`
     *
     * If you use dynamic values to generate the link, you can pass an array of path
     * segments, followed by the params for each segment.
     *
     * For instance `['/team', teamId, 'user', userName, {details: true}]`
     * means that we want to generate a link to `/team/11/user/bob;details=true`.
     *
     * Multiple static segments can be merged into one
     * (e.g., `['/team/11/user', userName, {details: true}]`).
     *
     * The first segment name can be prepended with `/`, `./`, or `../`:
     * * If the first segment begins with `/`, the router will look up the route from the root of the
     *   app.
     * * If the first segment begins with `./`, or doesn't begin with a slash, the router will
     *   instead look in the children of the current activated route.
     * * And if the first segment begins with `../`, the router will go up one level.
     *
     * You can set query params and fragment as follows:
     *
     * ```
     * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
     *   link to user component
     * </a>
     * ```
     * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.
     *
     * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the
     * directive to preserve the current query params and fragment:
     *
     * ```
     * <a [routerLink]="['/user/bob']" preserveQueryParams preserveFragment>
     *   link to user component
     * </a>
     * ```
     *
     * You can tell the directive to how to handle queryParams, available options are:
     *  - `'merge'`: merge the queryParams into the current queryParams
     *  - `'preserve'`: preserve the current queryParams
     *  - default/`''`: use the queryParams only
     *
     * Same options for {@link NavigationExtras#queryParamsHandling
     * NavigationExtras#queryParamsHandling}.
     *
     * ```
     * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
     *   link to user component
     * </a>
     * ```
     *
     * The router link directive always treats the provided input as a delta to the current url.
     *
     * For instance, if the current url is `/user/(box//aux:team)`.
     *
     * Then the following link `<a [routerLink]="['/user/jim']">Jim</a>` will generate the link
     * `/user/(jim//aux:team)`.
     *
     * See {@link Router#createUrlTree createUrlTree} for more information.
     *
     * @ngModule RouterModule
     *
     *
     */
    var RouterLink = /** @class */function () {
        function RouterLink(router, route, tabIndex, renderer, el) {
            this.router = router;
            this.route = route;
            this.commands = [];
            if (tabIndex == null) {
                renderer.setAttribute(el.nativeElement, 'tabindex', '0');
            }
        }
        Object.defineProperty(RouterLink.prototype, "routerLink", {
            set: function (commands) {
                if (commands != null) {
                    this.commands = Array.isArray(commands) ? commands : [commands];
                } else {
                    this.commands = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterLink.prototype, "preserveQueryParams", {
            /**
             * @deprecated 4.0.0 use `queryParamsHandling` instead.
             */
            set: function (value) {
                if (isDevMode() && console && console.warn) {
                    console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');
                }
                this.preserve = value;
            },
            enumerable: true,
            configurable: true
        });
        RouterLink.prototype.onClick = function () {
            var extras = {
                skipLocationChange: attrBoolValue(this.skipLocationChange),
                replaceUrl: attrBoolValue(this.replaceUrl)
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return true;
        };
        Object.defineProperty(RouterLink.prototype, "urlTree", {
            get: function () {
                return this.router.createUrlTree(this.commands, {
                    relativeTo: this.route,
                    queryParams: this.queryParams,
                    fragment: this.fragment,
                    preserveQueryParams: attrBoolValue(this.preserve),
                    queryParamsHandling: this.queryParamsHandling,
                    preserveFragment: attrBoolValue(this.preserveFragment)
                });
            },
            enumerable: true,
            configurable: true
        });
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object)], RouterLink.prototype, "queryParams", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], RouterLink.prototype, "fragment", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], RouterLink.prototype, "queryParamsHandling", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean)], RouterLink.prototype, "preserveFragment", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean)], RouterLink.prototype, "skipLocationChange", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean)], RouterLink.prototype, "replaceUrl", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], RouterLink.prototype, "routerLink", null);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean), tslib_1.__metadata("design:paramtypes", [Boolean])], RouterLink.prototype, "preserveQueryParams", null);
        tslib_1.__decorate([HostListener('click'), tslib_1.__metadata("design:type", Function), tslib_1.__metadata("design:paramtypes", []), tslib_1.__metadata("design:returntype", Boolean)], RouterLink.prototype, "onClick", null);
        RouterLink = tslib_1.__decorate([Directive({ selector: ':not(a)[routerLink]' }), tslib_1.__param(2, Attribute('tabindex')), tslib_1.__metadata("design:paramtypes", [Router, ActivatedRoute, String, Renderer2, ElementRef])], RouterLink);
        return RouterLink;
    }();
    export { RouterLink };
    /**
     * @description
     *
     * Lets you link to specific routes in your app.
     *
     * See `RouterLink` for more information.
     *
     * @ngModule RouterModule
     *
     *
     */
    var RouterLinkWithHref = /** @class */function () {
        function RouterLinkWithHref(router, route, locationStrategy) {
            var _this = this;
            this.router = router;
            this.route = route;
            this.locationStrategy = locationStrategy;
            this.commands = [];
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof NavigationEnd) {
                    _this.updateTargetUrlAndHref();
                }
            });
        }
        Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
            set: function (commands) {
                if (commands != null) {
                    this.commands = Array.isArray(commands) ? commands : [commands];
                } else {
                    this.commands = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterLinkWithHref.prototype, "preserveQueryParams", {
            set: function (value) {
                if (isDevMode() && console && console.warn) {
                    console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
                }
                this.preserve = value;
            },
            enumerable: true,
            configurable: true
        });
        RouterLinkWithHref.prototype.ngOnChanges = function (changes) {
            this.updateTargetUrlAndHref();
        };
        RouterLinkWithHref.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey, shiftKey) {
            if (button !== 0 || ctrlKey || metaKey || shiftKey) {
                return true;
            }
            if (typeof this.target === 'string' && this.target != '_self') {
                return true;
            }
            var extras = {
                skipLocationChange: attrBoolValue(this.skipLocationChange),
                replaceUrl: attrBoolValue(this.replaceUrl)
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return false;
        };
        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
        };
        Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
            get: function () {
                return this.router.createUrlTree(this.commands, {
                    relativeTo: this.route,
                    queryParams: this.queryParams,
                    fragment: this.fragment,
                    preserveQueryParams: attrBoolValue(this.preserve),
                    queryParamsHandling: this.queryParamsHandling,
                    preserveFragment: attrBoolValue(this.preserveFragment)
                });
            },
            enumerable: true,
            configurable: true
        });
        tslib_1.__decorate([HostBinding('attr.target'), Input(), tslib_1.__metadata("design:type", String)], RouterLinkWithHref.prototype, "target", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object)], RouterLinkWithHref.prototype, "queryParams", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], RouterLinkWithHref.prototype, "fragment", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], RouterLinkWithHref.prototype, "queryParamsHandling", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean)], RouterLinkWithHref.prototype, "preserveFragment", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean)], RouterLinkWithHref.prototype, "skipLocationChange", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean)], RouterLinkWithHref.prototype, "replaceUrl", void 0);
        tslib_1.__decorate([HostBinding(), tslib_1.__metadata("design:type", String)], RouterLinkWithHref.prototype, "href", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], RouterLinkWithHref.prototype, "routerLink", null);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Boolean), tslib_1.__metadata("design:paramtypes", [Boolean])], RouterLinkWithHref.prototype, "preserveQueryParams", null);
        tslib_1.__decorate([HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']), tslib_1.__metadata("design:type", Function), tslib_1.__metadata("design:paramtypes", [Number, Boolean, Boolean, Boolean]), tslib_1.__metadata("design:returntype", Boolean)], RouterLinkWithHref.prototype, "onClick", null);
        RouterLinkWithHref = tslib_1.__decorate([Directive({ selector: 'a[routerLink]' }), tslib_1.__metadata("design:paramtypes", [Router, ActivatedRoute, LocationStrategy])], RouterLinkWithHref);
        return RouterLinkWithHref;
    }();
    export { RouterLinkWithHref };
    function attrBoolValue(s) {
        return s === '' || !!s;
    }
});
//# sourceMappingURL=router_link.js.map