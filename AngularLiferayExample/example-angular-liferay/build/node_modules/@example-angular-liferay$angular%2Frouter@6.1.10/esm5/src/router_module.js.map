{"version":3,"sources":["../../../../../../../../../packages/router/src/router_module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation, ViewportScroller} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, ComponentRef, Inject, Injectable, InjectionToken, Injector, ModuleWithProviders, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, Provider, SkipSelf, SystemJsNgModuleLoader} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Subject, of } from 'rxjs';\n\nimport {EmptyOutletComponent} from './components/empty_outlet';\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {RouterEvent} from './events';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer, UrlTree} from './url_tree';\nimport {flatten} from './utils/collection';\n\n\n\n/**\n * @description\n *\n * Contains a list of directives\n *\n *\n */\nconst ROUTER_DIRECTIVES =\n    [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, EmptyOutletComponent];\n\n/**\n * @description\n *\n * Is used in DI to configure the router.\n *\n *\n */\nexport const ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n\n/**\n * @docsNotRequired\n */\nexport const ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,\n      NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,\n      [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  ChildrenOutletContexts,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  {provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n\n/**\n * @usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n *\n *\n */\n@NgModule({\n  declarations: ROUTER_DIRECTIVES,\n  exports: ROUTER_DIRECTIVES,\n  entryComponents: [EmptyOutletComponent]\n})\nexport class RouterModule {\n  // Note: We are injecting the Router so it gets created eagerly...\n  constructor(@Optional() @Inject(ROUTER_FORROOT_GUARD) guard: any, @Optional() router: Router) {}\n\n  /**\n   * Creates a module with all the router providers and directives. It also optionally sets up an\n   * application listener to perform an initial navigation.\n   *\n   * Options (see `ExtraOptions`):\n   * * `enableTracing` makes the router log all its internal events to the console.\n   * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n   * API.\n   * * `initialNavigation` disables the initial navigation.\n   * * `errorHandler` provides a custom error handler.\n   * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\n   * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n   * `ExtraOptions` for more details.\n   * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\n   * from parent to child routes.\n   */\n  static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps: [\n            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n          ]\n        },\n        {\n          provide: RouterScroller,\n          useFactory: createRouterScroller,\n          deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n\n  /**\n   * Creates a module with all the router directives and a provider registering routes.\n   */\n  static forChild(routes: Routes): ModuleWithProviders<RouterModule> {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\n}\n\nexport function createRouterScroller(\n    router: Router, viewportScroller: ViewportScroller, config: ExtraOptions): RouterScroller {\n  if (config.scrollOffset) {\n    viewportScroller.setOffset(config.scrollOffset);\n  }\n  return new RouterScroller(router, viewportScroller, config);\n}\n\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n\nexport function provideForRootGuard(router: Router): any {\n  if (router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n\n/**\n * @description\n *\n * Registers routes.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n *\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n/**\n * @description\n *\n * Represents an option to configure when the initial navigation is performed.\n *\n * * 'enabled' - the initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete.\n * * 'disabled' - the initial navigation is not performed. The location listener is set up before\n * the root component gets created.\n * * 'legacy_enabled'- the initial navigation starts after the root component has been created.\n * The bootstrap is not blocked until the initial navigation is complete. @deprecated\n * * 'legacy_disabled'- the initial navigation is not performed. The location listener is set up\n * after @deprecated\n * the root component gets created.\n * * `true` - same as 'legacy_enabled'. @deprecated since v4\n * * `false` - same as 'legacy_disabled'. @deprecated since v4\n *\n * The 'enabled' option should be used for applications unless there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic. In this case, 'disabled' should be used.\n *\n * The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n *\n * @experimental\n */\nexport type InitialNavigation =\n    true | false | 'enabled' | 'disabled' | 'legacy_enabled' | 'legacy_disabled';\n\n/**\n * @description\n *\n * Represents options to configure the router.\n *\n *\n */\nexport interface ExtraOptions {\n  /**\n   * Makes the router log all its internal events to the console.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * Enables the location strategy that uses the URL fragment instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * Disables the initial navigation.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * A custom error handler.\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy. See `PreloadAllModules`.\n   */\n  preloadingStrategy?: any;\n\n  /**\n   * Define what the router should do if it receives a navigation request to the current URL.\n   * By default, the router will ignore this navigation. However, this prevents features such\n   * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n   * current URL. Default is 'ignore'.\n   */\n  onSameUrlNavigation?: 'reload'|'ignore';\n\n  /**\n   * Configures if the scroll position needs to be restored when navigating back.\n   *\n   * * 'disabled'--does nothing (default).\n   * * 'top'--set the scroll position to 0,0..\n   * * 'enabled'--set the scroll position to the stored position. This option will be the default in\n   * the future.\n   *\n   * When enabled, the router stores and restores scroll positions during navigation.\n   * When navigating forward, the scroll position will be set to [0, 0], or to the anchor\n   * if one is provided.\n   *\n   * You can implement custom scroll restoration behavior as follows.\n   * ```typescript\n   * class AppModule {\n   *  constructor(router: Router, viewportScroller: ViewportScroller, store: Store<AppState>) {\n   *    router.events.pipe(filter(e => e instanceof Scroll), switchMap(e => {\n   *      return store.pipe(first(), timeout(200), map(() => e));\n   *    }).subscribe(e => {\n   *      if (e.position) {\n   *        viewportScroller.scrollToPosition(e.position);\n   *      } else if (e.anchor) {\n   *        viewportScroller.scrollToAnchor(e.anchor);\n   *      } else {\n   *        viewportScroller.scrollToPosition([0, 0]);\n   *      }\n   *    });\n   *  }\n   * }\n   * ```\n   *\n   * You can also implement component-specific scrolling like this:\n   *\n   * ```typescript\n   * class ListComponent {\n   *   list: any[];\n   *   constructor(router: Router, viewportScroller: ViewportScroller, fetcher: ListFetcher) {\n   *     const scrollEvents = router.events.filter(e => e instanceof Scroll);\n   *     listFetcher.fetch().pipe(withLatestFrom(scrollEvents)).subscribe(([list, e]) => {\n   *       this.list = list;\n   *       if (e.position) {\n   *         viewportScroller.scrollToPosition(e.position);\n   *       } else {\n   *         viewportScroller.scrollToPosition([0, 0]);\n   *       }\n   *     });\n   *   }\n   * }\n   */\n  scrollPositionRestoration?: 'disabled'|'enabled'|'top';\n\n  /**\n   * Configures if the router should scroll to the element when the url has a fragment.\n   *\n   * * 'disabled'--does nothing (default).\n   * * 'enabled'--scrolls to the element. This option will be the default in the future.\n   *\n   * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n   * that we stored or scroll to the top.\n   */\n  anchorScrolling?: 'disabled'|'enabled';\n\n  /**\n   * Configures the scroll offset the router will use when scrolling to an element.\n   *\n   * When given a tuple with two numbers, the router will always use the numbers.\n   * When given a function, the router will invoke the function every time it restores scroll\n   * position.\n   */\n  scrollOffset?: [number, number]|(() => [number, number]);\n\n  /**\n   * Defines how the router merges params, data and resolved data from parent to child\n   * routes. Available options are:\n   *\n   * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n   *   routes.\n   * - `'always'`, enables unconditional inheritance of parent params.\n   */\n  paramsInheritanceStrategy?: 'emptyOnly'|'always';\n\n  /**\n   * A custom malformed uri error handler function. This handler is invoked when encodedURI contains\n   * invalid character sequences. The default implementation is to redirect to the root url dropping\n   * any path or param info. This function passes three parameters:\n   *\n   * - `'URIError'` - Error thrown when parsing a bad URL\n   * - `'UrlSerializer'` - UrlSerializer thatâs configured with the router.\n   * - `'url'` -  The malformed URL that caused the URIError\n   * */\n  malformedUriErrorHandler?:\n      (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n\n  /**\n   * Defines when the router updates the browser URL. The default behavior is to update after\n   * successful navigation. However, some applications may prefer a mode where the URL gets\n   * updated at the beginning of navigation. The most common use case would be updating the\n   * URL early so if navigation fails, you can show an error message with the URL that failed.\n   * Available options are:\n   *\n   * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n   * - `'eager'`, updates browser URL at the beginning of navigation.\n   */\n  urlUpdateStrategy?: 'deferred'|'eager';\n\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * Example:\n   *\n   * ```\n   * const routes = [\n   *   {\n   *     path: '',\n   *     component: ContainerComponent,\n   *     children: [\n   *       { path: 'a', component: AComponent },\n   *       { path: 'b', component: BComponent },\n   *     ]\n   *   }\n   * ];\n   * ```\n   *\n   * From the `ContainerComponent`, this will not work:\n   *\n   * `<a [routerLink]=\"['./a']\">Link to A</a>`\n   *\n   * However, this will work:\n   *\n   * `<a [routerLink]=\"['../a']\">Link to A</a>`\n   *\n   * In other words, you're required to use `../` rather than `./`. The current default in v6\n   * is `legacy`, and this option will be removed in v7 to default to the corrected behavior.\n   */\n  relativeLinkResolution?: 'legacy'|'corrected';\n}\n\nexport function setupRouter(\n    ref: ApplicationRef, urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts,\n    location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler,\n    config: Route[][], opts: ExtraOptions = {}, urlHandlingStrategy?: UrlHandlingStrategy,\n    routeReuseStrategy?: RouteReuseStrategy) {\n  const router = new Router(\n      null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.malformedUriErrorHandler) {\n    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n  }\n\n  if (opts.enableTracing) {\n    const dom = getDOM();\n    router.events.subscribe((e: RouterEvent) => {\n      dom.logGroup(`Router Event: ${(<any>e.constructor).name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  if (opts.onSameUrlNavigation) {\n    router.onSameUrlNavigation = opts.onSameUrlNavigation;\n  }\n\n  if (opts.paramsInheritanceStrategy) {\n    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n  }\n\n  if (opts.urlUpdateStrategy) {\n    router.urlUpdateStrategy = opts.urlUpdateStrategy;\n  }\n\n  if (opts.relativeLinkResolution) {\n    router.relativeLinkResolution = opts.relativeLinkResolution;\n  }\n\n  return router;\n}\n\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n\n/**\n * To initialize the router properly we need to do in two steps:\n *\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n *\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\n@Injectable()\nexport class RouterInitializer {\n  private initNavigation: boolean = false;\n  private resultOfPreactivationDone = new Subject<void>();\n\n  constructor(private injector: Injector) {}\n\n  appInitializer(): Promise<any> {\n    const p: Promise<any> = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(() => {\n      let resolve: Function = null !;\n      const res = new Promise(r => resolve = r);\n      const router = this.injector.get(Router);\n      const opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'enabled') {\n        router.hooks.afterPreactivation = () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone;\n\n            // subsequent navigations should not be delayed\n          } else {\n            return of (null) as any;\n          }\n        };\n        router.initialNavigation();\n\n      } else {\n        throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n      }\n\n      return res;\n    });\n  }\n\n  bootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void {\n    const opts = this.injector.get(ROUTER_CONFIGURATION);\n    const preloader = this.injector.get(RouterPreloader);\n    const routerScroller = this.injector.get(RouterScroller);\n    const router = this.injector.get(Router);\n    const ref = this.injector.get<ApplicationRef>(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    if (this.isLegacyEnabled(opts)) {\n      router.initialNavigation();\n    } else if (this.isLegacyDisabled(opts)) {\n      router.setUpLocationChangeListener();\n    }\n\n    preloader.setUpPreloading();\n    routerScroller.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next(null !);\n    this.resultOfPreactivationDone.complete();\n  }\n\n  private isLegacyEnabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n        opts.initialNavigation === undefined;\n  }\n\n  private isLegacyDisabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n  }\n}\n\nexport function getAppInitializer(r: RouterInitializer) {\n  return r.appInitializer.bind(r);\n}\n\nexport function getBootstrapListener(r: RouterInitializer) {\n  return r.bootstrapListener.bind(r);\n}\n\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * @experimental\n */\nexport const ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n\nexport function provideRouterInitializer() {\n  return [\n    RouterInitializer,\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: getAppInitializer,\n      deps: [RouterInitializer]\n    },\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n"],"sourceRoot":""}