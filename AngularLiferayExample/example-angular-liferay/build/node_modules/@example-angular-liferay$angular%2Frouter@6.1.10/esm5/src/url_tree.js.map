{"version":3,"sources":["../../../../../../../../../packages/router/src/url_tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nimport {forEach, shallowEqual} from './utils/collection';\n\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n\nfunction equalQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\n\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n\nfunction containsQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => containee[key] === container[key]);\n}\n\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n *\n */\nexport class UrlTree {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap !: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The root segment group of the URL tree */\n      public root: UrlSegmentGroup,\n      /** The query params of the URL */\n      public queryParams: Params,\n      /** The fragment of the URL */\n      public fragment: string|null) {}\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return DEFAULT_SERIALIZER.serialize(this); }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n *\n */\nexport class UrlSegmentGroup {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _sourceSegment !: UrlSegmentGroup;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _segmentIndexShift !: number;\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup|null = null;\n\n  constructor(\n      /** The URL segments of this group. See `UrlSegment` for more information */\n      public segments: UrlSegment[],\n      /** The list of children of this group */\n      public children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n\n  /** Whether the segment has child segments */\n  hasChildren(): boolean { return this.numberOfChildren > 0; }\n\n  /** Number of child segments */\n  get numberOfChildren(): number { return Object.keys(this.children).length; }\n\n  /** @docsNotRequired */\n  toString(): string { return serializePaths(this); }\n}\n\n\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n *\n */\nexport class UrlSegment {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _parameterMap !: ParamMap;\n\n  constructor(\n      /** The path part of a URL segment */\n      public path: string,\n\n      /** The matrix parameters associated with a segment */\n      public parameters: {[name: string]: string}) {}\n\n  get parameterMap() {\n    if (!this._parameterMap) {\n      this._parameterMap = convertToParamMap(this.parameters);\n    }\n    return this._parameterMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return serializePath(this); }\n}\n\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\n\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n\n\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n *\n */\nexport abstract class UrlSerializer {\n  /** Parse a url into a `UrlTree` */\n  abstract parse(url: string): UrlTree;\n\n  /** Converts a `UrlTree` into a url */\n  abstract serialize(tree: UrlTree): string;\n}\n\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n *\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url: string): UrlTree {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n\n  /** Converts a `UrlTree` into a url */\n  serialize(tree: UrlTree): string {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment =\n        typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment !)}` : '';\n\n    return `${segment}${query}${fragment}`;\n  }\n}\n\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const children: string[] = [];\n\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n\n  } else {\n    const children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n\n    });\n\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s: string): string {\n  return encodeURIComponent(s)\n      .replace(/%40/g, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/g, '$')\n      .replace(/%2C/gi, ',');\n}\n\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriQuery(s: string): string {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriFragment(s: string): string {\n  return encodeURI(s);\n}\n\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriSegment(s: string): string {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nexport function decodeQuery(s: string): string {\n  return decode(s.replace(/\\+/g, '%20'));\n}\n\nexport function serializePath(path: UrlSegment): string {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n\nfunction serializeMatrixParams(params: {[key: string]: string}): string {\n  return Object.keys(params)\n      .map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`)\n      .join('');\n}\n\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const strParams: string[] = Object.keys(params).map((name) => {\n    const value = params[name];\n    return Array.isArray(value) ?\n        value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') :\n        `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\n\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchSegments(str: string): string {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str: string): string {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str: string): string {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\n\nclass UrlParser {\n  private remaining: string;\n\n  constructor(private url: string) { this.remaining = url; }\n\n  parseRootSegment(): UrlSegmentGroup {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n\n  parseQueryParams(): Params {\n    const params: Params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n\n  parseFragment(): string|null {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n\n  private parseChildren(): {[outlet: string]: UrlSegmentGroup} {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n\n    const segments: UrlSegment[] = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n\n    let children: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let res: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  }\n\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  private parseSegment(): UrlSegment {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n\n  private parseMatrixParams(): {[key: string]: any} {\n    const params: {[key: string]: any} = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n\n  private parseParam(params: {[key: string]: any}): void {\n    const key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n\n  // Parse a single query parameter `name[=value]`\n  private parseQueryParam(params: Params): void {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n\n  // parse `(a/b//outlet_name:c/d)`\n  private parseParens(allowPrimary: boolean): {[outlet: string]: UrlSegmentGroup} {\n    const segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n\n      const next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let outletName: string = undefined !;\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n\n  private peekStartsWith(str: string): boolean { return this.remaining.startsWith(str); }\n\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  private consumeOptional(str: string): boolean {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n\n  private capture(str: string): void {\n    if (!this.consumeOptional(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n  }\n}\n"],"sourceRoot":""}