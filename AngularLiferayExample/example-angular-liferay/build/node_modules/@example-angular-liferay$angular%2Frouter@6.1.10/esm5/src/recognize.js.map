{"version":3,"sources":["../../../../../../../../../packages/router/src/recognize.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable, Observer, of } from 'rxjs';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, ParamsInheritanceStrategy, RouterStateSnapshot, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {forEach, last} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\nclass NoMatch {}\n\nexport function recognize(\n    rootComponentType: Type<any>| null, config: Routes, urlTree: UrlTree, url: string,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly',\n    relativeLinkResolution: 'legacy' | 'corrected' = 'legacy'): Observable<RouterStateSnapshot> {\n  return new Recognizer(\n             rootComponentType, config, urlTree, url, paramsInheritanceStrategy,\n             relativeLinkResolution)\n      .recognize();\n}\n\nclass Recognizer {\n  constructor(\n      private rootComponentType: Type<any>|null, private config: Routes, private urlTree: UrlTree,\n      private url: string, private paramsInheritanceStrategy: ParamsInheritanceStrategy,\n      private relativeLinkResolution: 'legacy'|'corrected') {}\n\n  recognize(): Observable<RouterStateSnapshot> {\n    try {\n      const rootSegmentGroup =\n          split(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\n\n      const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\n      const root = new ActivatedRouteSnapshot(\n          [], Object.freeze({}), Object.freeze({...this.urlTree.queryParams}),\n          this.urlTree.fragment !, {}, PRIMARY_OUTLET, this.rootComponentType, null,\n          this.urlTree.root, -1, {});\n\n      const rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n      const routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheritParamsAndData(routeState._root);\n      return of (routeState);\n\n    } catch (e) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n\n  inheritParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const route = routeNode.value;\n\n    const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheritParamsAndData(n));\n  }\n\n  processSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    }\n\n    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n  }\n\n  processChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    const children = mapChildrenIntoArray(\n        segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n\n  processSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    for (const r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch (e) {\n        if (!(e instanceof NoMatch)) throw e;\n      }\n    }\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    }\n\n    throw new NoMatch();\n  }\n\n  private noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n\n  processSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    if (route.redirectTo) throw new NoMatch();\n\n    if ((route.outlet || PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n    let snapshot: ActivatedRouteSnapshot;\n    let consumedSegments: UrlSegment[] = [];\n    let rawSlicedSegments: UrlSegment[] = [];\n\n    if (route.path === '**') {\n      const params = segments.length > 0 ? last(segments) !.parameters : {};\n      snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze({...this.urlTree.queryParams}), this.urlTree.fragment !,\n          getData(route), outlet, route.component !, route, getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n    } else {\n      const result: MatchResult = match(rawSegment, route, segments);\n      consumedSegments = result.consumedSegments;\n      rawSlicedSegments = segments.slice(result.lastChild);\n\n      snapshot = new ActivatedRouteSnapshot(\n          consumedSegments, result.parameters, Object.freeze({...this.urlTree.queryParams}),\n          this.urlTree.fragment !, getData(route), outlet, route.component !, route,\n          getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n    }\n\n    const childConfig: Route[] = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} = split(\n        rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution);\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n\n    if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  }\n\n  if (route.loadChildren) {\n    return route._loadedConfig !.routes;\n  }\n\n  return [];\n}\n\ninterface MatchResult {\n  consumedSegments: UrlSegment[];\n  lastChild: number;\n  parameters: any;\n}\n\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): MatchResult {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    }\n\n    return {consumedSegments: [], lastChild: 0, parameters: {}};\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch();\n\n  const posParams: {[n: string]: string} = {};\n  forEach(res.posParams !, (v: UrlSegment, k: string) => { posParams[k] = v.path; });\n  const parameters = res.consumed.length > 0 ?\n      {...posParams, ...res.consumed[res.consumed.length - 1].parameters} :\n      posParams;\n\n  return {consumedSegments: res.consumed, lastChild: res.consumed.length, parameters};\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let s = segmentGroup;\n  let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[], relativeLinkResolution: 'legacy' | 'corrected') {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, consumedSegments, slicedSegments, config,\n                                   segmentGroup.children, relativeLinkResolution));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  s._sourceSegment = segmentGroup;\n  s._segmentIndexShift = consumedSegments.length;\n  return {segmentGroup: s, slicedSegments};\n}\n\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    routes: Route[], children: {[name: string]: UrlSegmentGroup},\n    relativeLinkResolution: 'legacy' | 'corrected'): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      if (relativeLinkResolution === 'legacy') {\n        s._segmentIndexShift = segmentGroup.segments.length;\n      } else {\n        s._segmentIndexShift = consumedSegments.length;\n      }\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {...children, ...res};\n}\n\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo === undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n\nfunction getData(route: Route): Data {\n  return route.data || {};\n}\n\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve || {};\n}\n"],"sourceRoot":""}