Liferay.Loader.define("@example-angular-liferay$angular/router@6.1.10/esm5/src/events", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    /**
     * @description
     *
     * Base for events the Router goes through, as opposed to events tied to a specific
     * Route. `RouterEvent`s will only be fired one time for any given navigation.
     *
     * Example:
     *
     * ```
     * class MyService {
     *   constructor(public router: Router, logger: Logger) {
     *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {
     *       logger.log(e.id, e.url);
     *     });
     *   }
     * }
     * ```
     *
     * @experimental
     */
    var RouterEvent = /** @class */function () {
        function RouterEvent(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url) {
            this.id = id;
            this.url = url;
        }
        return RouterEvent;
    }();
    export { RouterEvent };
    /**
     * @description
     *
     * Represents an event triggered when a navigation starts.
     *
     *
     */
    var NavigationStart = /** @class */function (_super) {
        tslib_1.__extends(NavigationStart, _super);
        function NavigationStart(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        navigationTrigger,
        /** @docsNotRequired */
        restoredState) {
            if (navigationTrigger === void 0) {
                /** @docsNotRequired */
                navigationTrigger = 'imperative';
            }
            if (restoredState === void 0) {
                /** @docsNotRequired */
                restoredState = null;
            }
            var _this = _super.call(this, id, url) || this;
            _this.navigationTrigger = navigationTrigger;
            _this.restoredState = restoredState;
            return _this;
        }
        /** @docsNotRequired */
        NavigationStart.prototype.toString = function () {
            return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationStart;
    }(RouterEvent);
    export { NavigationStart };
    /**
     * @description
     *
     * Represents an event triggered when a navigation ends successfully.
     *
     *
     */
    var NavigationEnd = /** @class */function (_super) {
        tslib_1.__extends(NavigationEnd, _super);
        function NavigationEnd(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects) {
            var _this = _super.call(this, id, url) || this;
            _this.urlAfterRedirects = urlAfterRedirects;
            return _this;
        }
        /** @docsNotRequired */
        NavigationEnd.prototype.toString = function () {
            return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
        };
        return NavigationEnd;
    }(RouterEvent);
    export { NavigationEnd };
    /**
     * @description
     *
     * Represents an event triggered when a navigation is canceled.
     *
     *
     */
    var NavigationCancel = /** @class */function (_super) {
        tslib_1.__extends(NavigationCancel, _super);
        function NavigationCancel(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        reason) {
            var _this = _super.call(this, id, url) || this;
            _this.reason = reason;
            return _this;
        }
        /** @docsNotRequired */
        NavigationCancel.prototype.toString = function () {
            return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationCancel;
    }(RouterEvent);
    export { NavigationCancel };
    /**
     * @description
     *
     * Represents an event triggered when a navigation fails due to an unexpected error.
     *
     *
     */
    var NavigationError = /** @class */function (_super) {
        tslib_1.__extends(NavigationError, _super);
        function NavigationError(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        error) {
            var _this = _super.call(this, id, url) || this;
            _this.error = error;
            return _this;
        }
        /** @docsNotRequired */
        NavigationError.prototype.toString = function () {
            return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
        };
        return NavigationError;
    }(RouterEvent);
    export { NavigationError };
    /**
     * @description
     *
     * Represents an event triggered when routes are recognized.
     *
     *
     */
    var RoutesRecognized = /** @class */function (_super) {
        tslib_1.__extends(RoutesRecognized, _super);
        function RoutesRecognized(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
            var _this = _super.call(this, id, url) || this;
            _this.urlAfterRedirects = urlAfterRedirects;
            _this.state = state;
            return _this;
        }
        /** @docsNotRequired */
        RoutesRecognized.prototype.toString = function () {
            return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return RoutesRecognized;
    }(RouterEvent);
    export { RoutesRecognized };
    /**
     * @description
     *
     * Represents the start of the Guard phase of routing.
     *
     * @experimental
     */
    var GuardsCheckStart = /** @class */function (_super) {
        tslib_1.__extends(GuardsCheckStart, _super);
        function GuardsCheckStart(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
            var _this = _super.call(this, id, url) || this;
            _this.urlAfterRedirects = urlAfterRedirects;
            _this.state = state;
            return _this;
        }
        GuardsCheckStart.prototype.toString = function () {
            return "GuardsCheckStart(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return GuardsCheckStart;
    }(RouterEvent);
    export { GuardsCheckStart };
    /**
     * @description
     *
     * Represents the end of the Guard phase of routing.
     *
     * @experimental
     */
    var GuardsCheckEnd = /** @class */function (_super) {
        tslib_1.__extends(GuardsCheckEnd, _super);
        function GuardsCheckEnd(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state,
        /** @docsNotRequired */
        shouldActivate) {
            var _this = _super.call(this, id, url) || this;
            _this.urlAfterRedirects = urlAfterRedirects;
            _this.state = state;
            _this.shouldActivate = shouldActivate;
            return _this;
        }
        GuardsCheckEnd.prototype.toString = function () {
            return "GuardsCheckEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ", shouldActivate: " + this.shouldActivate + ")";
        };
        return GuardsCheckEnd;
    }(RouterEvent);
    export { GuardsCheckEnd };
    /**
     * @description
     *
     * Represents the start of the Resolve phase of routing. The timing of this
     * event may change, thus it's experimental. In the current iteration it will run
     * in the "resolve" phase whether there's things to resolve or not. In the future this
     * behavior may change to only run when there are things to be resolved.
     *
     * @experimental
     */
    var ResolveStart = /** @class */function (_super) {
        tslib_1.__extends(ResolveStart, _super);
        function ResolveStart(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
            var _this = _super.call(this, id, url) || this;
            _this.urlAfterRedirects = urlAfterRedirects;
            _this.state = state;
            return _this;
        }
        ResolveStart.prototype.toString = function () {
            return "ResolveStart(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return ResolveStart;
    }(RouterEvent);
    export { ResolveStart };
    /**
     * @description
     *
     * Represents the end of the Resolve phase of routing. See note on
     * `ResolveStart` for use of this experimental API.
     *
     * @experimental
     */
    var ResolveEnd = /** @class */function (_super) {
        tslib_1.__extends(ResolveEnd, _super);
        function ResolveEnd(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
            var _this = _super.call(this, id, url) || this;
            _this.urlAfterRedirects = urlAfterRedirects;
            _this.state = state;
            return _this;
        }
        ResolveEnd.prototype.toString = function () {
            return "ResolveEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return ResolveEnd;
    }(RouterEvent);
    export { ResolveEnd };
    /**
     * @description
     *
     * Represents an event triggered before lazy loading a route config.
     *
     * @experimental
     */
    var RouteConfigLoadStart = /** @class */function () {
        function RouteConfigLoadStart(
        /** @docsNotRequired */
        route) {
            this.route = route;
        }
        RouteConfigLoadStart.prototype.toString = function () {
            return "RouteConfigLoadStart(path: " + this.route.path + ")";
        };
        return RouteConfigLoadStart;
    }();
    export { RouteConfigLoadStart };
    /**
     * @description
     *
     * Represents an event triggered when a route has been lazy loaded.
     *
     * @experimental
     */
    var RouteConfigLoadEnd = /** @class */function () {
        function RouteConfigLoadEnd(
        /** @docsNotRequired */
        route) {
            this.route = route;
        }
        RouteConfigLoadEnd.prototype.toString = function () {
            return "RouteConfigLoadEnd(path: " + this.route.path + ")";
        };
        return RouteConfigLoadEnd;
    }();
    export { RouteConfigLoadEnd };
    /**
     * @description
     *
     * Represents the start of end of the Resolve phase of routing. See note on
     * `ChildActivationEnd` for use of this experimental API.
     *
     * @experimental
     */
    var ChildActivationStart = /** @class */function () {
        function ChildActivationStart(
        /** @docsNotRequired */
        snapshot) {
            this.snapshot = snapshot;
        }
        ChildActivationStart.prototype.toString = function () {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ChildActivationStart(path: '" + path + "')";
        };
        return ChildActivationStart;
    }();
    export { ChildActivationStart };
    /**
     * @description
     *
     * Represents the start of end of the Resolve phase of routing. See note on
     * `ChildActivationStart` for use of this experimental API.
     *
     * @experimental
     */
    var ChildActivationEnd = /** @class */function () {
        function ChildActivationEnd(
        /** @docsNotRequired */
        snapshot) {
            this.snapshot = snapshot;
        }
        ChildActivationEnd.prototype.toString = function () {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ChildActivationEnd(path: '" + path + "')";
        };
        return ChildActivationEnd;
    }();
    export { ChildActivationEnd };
    /**
     * @description
     *
     * Represents the start of end of the Resolve phase of routing. See note on
     * `ActivationEnd` for use of this experimental API.
     *
     * @experimental
     */
    var ActivationStart = /** @class */function () {
        function ActivationStart(
        /** @docsNotRequired */
        snapshot) {
            this.snapshot = snapshot;
        }
        ActivationStart.prototype.toString = function () {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ActivationStart(path: '" + path + "')";
        };
        return ActivationStart;
    }();
    export { ActivationStart };
    /**
     * @description
     *
     * Represents the start of end of the Resolve phase of routing. See note on
     * `ActivationStart` for use of this experimental API.
     *
     * @experimental
     */
    var ActivationEnd = /** @class */function () {
        function ActivationEnd(
        /** @docsNotRequired */
        snapshot) {
            this.snapshot = snapshot;
        }
        ActivationEnd.prototype.toString = function () {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ActivationEnd(path: '" + path + "')";
        };
        return ActivationEnd;
    }();
    export { ActivationEnd };
    /**
     * @description
     *
     * Represents a scrolling event.
     */
    var Scroll = /** @class */function () {
        function Scroll(
        /** @docsNotRequired */
        routerEvent,
        /** @docsNotRequired */
        position,
        /** @docsNotRequired */
        anchor) {
            this.routerEvent = routerEvent;
            this.position = position;
            this.anchor = anchor;
        }
        Scroll.prototype.toString = function () {
            var pos = this.position ? this.position[0] + ", " + this.position[1] : null;
            return "Scroll(anchor: '" + this.anchor + "', position: '" + pos + "')";
        };
        return Scroll;
    }();
    export { Scroll };
});
//# sourceMappingURL=events.js.map