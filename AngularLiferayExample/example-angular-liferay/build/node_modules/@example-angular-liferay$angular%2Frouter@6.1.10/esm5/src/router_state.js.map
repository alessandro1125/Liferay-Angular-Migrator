{"version":3,"sources":["../../../../../../../../../packages/router/src/router_state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n\n/**\n * @description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n *\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /** @internal */\n  constructor(\n      root: TreeNode<ActivatedRoute>,\n      /** The current snapshot of the router state */\n      public snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterState(<RouterState>this, root);\n  }\n\n  toString(): string { return this.snapshot.toString(); }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>| null): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>| null): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * @Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n *\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  // TODO(issue/24571): remove '!'.\n  snapshot !: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _routerState !: RouterState;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _paramMap !: Observable<ParamMap>;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap !: Observable<ParamMap>;\n\n  /** @internal */\n  constructor(\n      /** An observable of the URL segments matched by this route */\n      public url: Observable<UrlSegment[]>,\n      /** An observable of the matrix parameters scoped to this route */\n      public params: Observable<Params>,\n      /** An observable of the query parameters shared by all the routes */\n      public queryParams: Observable<Params>,\n      /** An observable of the URL fragment shared by all the routes */\n      public fragment: Observable<string>,\n      /** An observable of the static and resolved data of this route. */\n      public data: Observable<Data>,\n      /** The outlet name of the route. It's a constant */\n      public outlet: string,\n      /** The component of the route. It's a constant */\n      // TODO(vsavkin): remove |string\n      public component: Type<any>|string|null, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  /** The configuration used to match this route */\n  get routeConfig(): Route|null { return this._futureSnapshot.routeConfig; }\n\n  /** The root of the router state */\n  get root(): ActivatedRoute { return this._routerState.root; }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRoute|null { return this._routerState.parent(this); }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRoute|null { return this._routerState.firstChild(this); }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRoute[] { return this._routerState.children(this); }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n\n  get paramMap(): Observable<ParamMap> {\n    if (!this._paramMap) {\n      this._paramMap = this.params.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._paramMap;\n  }\n\n  get queryParamMap(): Observable<ParamMap> {\n    if (!this._queryParamMap) {\n      this._queryParamMap =\n          this.queryParams.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nexport type ParamsInheritanceStrategy = 'emptyOnly' | 'always';\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * @internal\n */\nexport function inheritedParamsDataResolve(\n    route: ActivatedRouteSnapshot,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly'): Inherited {\n  const pathFromRoot = route.pathFromRoot;\n\n  let inheritingStartingFrom = 0;\n  if (paramsInheritanceStrategy !== 'always') {\n    inheritingStartingFrom = pathFromRoot.length - 1;\n\n    while (inheritingStartingFrom >= 1) {\n      const current = pathFromRoot[inheritingStartingFrom];\n      const parent = pathFromRoot[inheritingStartingFrom - 1];\n      // current route is an empty path => inherits its parent's params and data\n      if (current.routeConfig && current.routeConfig.path === '') {\n        inheritingStartingFrom--;\n\n        // parent is componentless => current route should inherit its params and data\n      } else if (!parent.component) {\n        inheritingStartingFrom--;\n\n      } else {\n        break;\n      }\n    }\n  }\n\n  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n\n/** @internal */\nfunction flattenInherited(pathFromRoot: ActivatedRouteSnapshot[]): Inherited {\n  return pathFromRoot.reduce((res, curr) => {\n    const params = {...res.params, ...curr.params};\n    const data = {...res.data, ...curr.data};\n    const resolve = {...res.resolve, ...curr._resolvedData};\n    return {params, data, resolve};\n  }, <any>{params: {}, data: {}, resolve: {}});\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n *\n */\nexport class ActivatedRouteSnapshot {\n  /** The configuration used to match this route **/\n  public readonly routeConfig: Route|null;\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n  /** @internal */\n  _lastPathIndex: number;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _resolvedData !: Data;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _routerState !: RouterStateSnapshot;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _paramMap !: ParamMap;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap !: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The URL segments matched by this route */\n      public url: UrlSegment[],\n      /** The matrix parameters scoped to this route */\n      public params: Params,\n      /** The query parameters shared by all the routes */\n      public queryParams: Params,\n      /** The URL fragment shared by all the routes */\n      public fragment: string,\n      /** The static and resolved data of this route */\n      public data: Data,\n      /** The outlet name of the route */\n      public outlet: string,\n      /** The component of the route */\n      public component: Type<any>|string|null, routeConfig: Route|null, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this.routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n\n  /** The root of the router state */\n  get root(): ActivatedRouteSnapshot { return this._routerState.root; }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRouteSnapshot|null { return this._routerState.parent(this); }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRouteSnapshot|null { return this._routerState.firstChild(this); }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n\n  get paramMap(): ParamMap {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n    return this._paramMap;\n  }\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n *\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /** @internal */\n  constructor(\n      /** The url from which this snapshot was created */\n      public url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterState(<RouterStateSnapshot>this, root);\n  }\n\n  toString(): string { return serializeNode(this._root); }\n}\n\nfunction setRouterState<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      (<any>route.queryParams).next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      (<any>route.fragment).next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      (<any>route.params).next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      (<any>route.url).next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      (<any>route.data).next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    (<any>route.data).next(route._futureSnapshot.data);\n  }\n}\n\n\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent !));\n}\n"],"sourceRoot":""}