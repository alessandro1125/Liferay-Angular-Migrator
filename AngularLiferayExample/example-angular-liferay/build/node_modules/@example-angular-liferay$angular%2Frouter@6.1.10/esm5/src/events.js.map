{"version":3,"sources":["../../../../../../../../../packages/router/src/events.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n\n/**\n * @description\n *\n * Identifies the trigger of the navigation.\n *\n * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n * * 'popstate'--triggered by a popstate event\n * * 'hashchange'--triggered by a hashchange event\n *\n * @experimental\n */\nexport type NavigationTrigger = 'imperative' | 'popstate' | 'hashchange';\n\n/**\n * @description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @experimental\n */\nexport class RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      public id: number,\n      /** @docsNotRequired */\n      public url: string) {}\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation starts.\n *\n *\n */\nexport class NavigationStart extends RouterEvent {\n  /**\n   * Identifies the trigger of the navigation.\n   *\n   * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n   * * 'popstate'--triggered by a popstate event\n   * * 'hashchange'--triggered by a hashchange event\n   */\n  navigationTrigger?: 'imperative'|'popstate'|'hashchange';\n\n  /**\n   * This contains the navigation id that pushed the history record that the router navigates\n   * back to. This is not null only when the navigation is triggered by a popstate event.\n   *\n   * The router assigns a navigationId to every router transition/navigation. Even when the user\n   * clicks on the back button in the browser, a new navigation id will be created. So from\n   * the perspective of the router, the router never \"goes back\". By using the `restoredState`\n   * and its navigationId, you can implement behavior that differentiates between creating new\n   * states\n   * and popstate events. In the latter case you can restore some remembered state (e.g., scroll\n   * position).\n   */\n  restoredState?: {navigationId: number}|null;\n\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      navigationTrigger: 'imperative'|'popstate'|'hashchange' = 'imperative',\n      /** @docsNotRequired */\n      restoredState: {navigationId: number}|null = null) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n *\n */\nexport class NavigationEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n *\n */\nexport class NavigationCancel extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public reason: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n *\n */\nexport class NavigationError extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public error: any) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when routes are recognized.\n *\n *\n */\nexport class RoutesRecognized extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of the Guard phase of routing.\n *\n * @experimental\n */\nexport class GuardsCheckStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the end of the Guard phase of routing.\n *\n * @experimental\n */\nexport class GuardsCheckEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot,\n      /** @docsNotRequired */\n      public shouldActivate: boolean) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * @experimental\n */\nexport class ResolveStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * @experimental\n */\nexport class ResolveEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * @experimental\n */\nexport class RouteConfigLoadStart {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * @experimental\n */\nexport class RouteConfigLoadEnd {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * @experimental\n */\nexport class ChildActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * @experimental\n */\nexport class ChildActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * @experimental\n */\nexport class ActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * @experimental\n */\nexport class ActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents a scrolling event.\n */\nexport class Scroll {\n  constructor(\n      /** @docsNotRequired */\n      readonly routerEvent: NavigationEnd,\n\n      /** @docsNotRequired */\n      readonly position: [number, number]|null,\n\n      /** @docsNotRequired */\n      readonly anchor: string|null) {}\n\n  toString(): string {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents a router event, allowing you to track the lifecycle of the router.\n *\n * The sequence of router events is:\n *\n * - `NavigationStart`,\n * - `RouteConfigLoadStart`,\n * - `RouteConfigLoadEnd`,\n * - `RoutesRecognized`,\n * - `GuardsCheckStart`,\n * - `ChildActivationStart`,\n * - `ActivationStart`,\n * - `GuardsCheckEnd`,\n * - `ResolveStart`,\n * - `ResolveEnd`,\n * - `ActivationEnd`\n * - `ChildActivationEnd`\n * - `NavigationEnd`,\n * - `NavigationCancel`,\n * - `NavigationError`\n * - `Scroll`\n *\n *\n */\nexport type Event = RouterEvent | RouteConfigLoadStart | RouteConfigLoadEnd | ChildActivationStart |\n    ChildActivationEnd | ActivationStart | ActivationEnd | Scroll;\n"],"sourceRoot":""}