{"version":3,"sources":["../../../../../../../../../packages/router/src/router_preloader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef, OnDestroy} from '@angular/core';\nimport {Observable, Subscription, from, of } from 'rxjs';\nimport {catchError, concatMap, filter, map, mergeAll, mergeMap} from 'rxjs/operators';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {Event, NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @experimental\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @experimental\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return fn().pipe(catchError(() => of (null)));\n  }\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @experimental\n */\nexport class NoPreloading implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n *\n */\n@Injectable()\nexport class RouterPreloader implements OnDestroy {\n  private loader: RouterConfigLoader;\n  // TODO(issue/24571): remove '!'.\n  private subscription !: Subscription;\n\n  constructor(\n      private router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\n      private injector: Injector, private preloadingStrategy: PreloadingStrategy) {\n    const onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  }\n\n  setUpPreloading(): void {\n    this.subscription =\n        this.router.events\n            .pipe(filter((e: Event) => e instanceof NavigationEnd), concatMap(() => this.preload()))\n            .subscribe(() => {});\n  }\n\n  preload(): Observable<any> {\n    const ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n\n  // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n  // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n  // should be refactored.\n  ngOnDestroy(): void { this.subscription.unsubscribe(); }\n\n  private processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const res: Observable<any>[] = [];\n    for (const route of routes) {\n      // we already have the config loaded, just recurse\n      if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n        const childConfig = route._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (route.loadChildren && !route.canLoad) {\n        res.push(this.preloadConfig(ngModule, route));\n\n        // recurse into children\n      } else if (route.children) {\n        res.push(this.processRoutes(ngModule, route.children));\n      }\n    }\n    return from(res).pipe(mergeAll(), map((_) => void 0));\n  }\n\n  private preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const loaded$ = this.loader.load(ngModule.injector, route);\n      return loaded$.pipe(mergeMap((config: LoadedRouterConfig) => {\n        route._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      }));\n    });\n  }\n}\n"],"sourceRoot":""}