Liferay.Loader.define('@example-angular-liferay$angular/router@6.1.10/esm5/src/utils/collection', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { ɵisObservable as isObservable, ɵisPromise as isPromise } from '@angular/core';
    import { from, of } from 'rxjs';
    import { concatAll, every, last as lastValue, map, mergeAll } from 'rxjs/operators';
    import { PRIMARY_OUTLET } from '../shared';
    export function shallowEqualArrays(a, b) {
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
            if (!shallowEqual(a[i], b[i])) return false;
        }
        return true;
    }
    export function shallowEqual(a, b) {
        var k1 = Object.keys(a);
        var k2 = Object.keys(b);
        if (k1.length != k2.length) {
            return false;
        }
        var key;
        for (var i = 0; i < k1.length; i++) {
            key = k1[i];
            if (a[key] !== b[key]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Flattens single-level nested arrays.
     */
    export function flatten(arr) {
        return Array.prototype.concat.apply([], arr);
    }
    /**
     * Return the last element of an array.
     */
    export function last(a) {
        return a.length > 0 ? a[a.length - 1] : null;
    }
    /**
     * Verifys all booleans in an array are `true`.
     */
    export function and(bools) {
        return !bools.some(function (v) {
            return !v;
        });
    }
    export function forEach(map, callback) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                callback(map[prop], prop);
            }
        }
    }
    export function waitForMap(obj, fn) {
        if (Object.keys(obj).length === 0) {
            return of({});
        }
        var waitHead = [];
        var waitTail = [];
        var res = {};
        forEach(obj, function (a, k) {
            var mapped = fn(k, a).pipe(map(function (r) {
                return res[k] = r;
            }));
            if (k === PRIMARY_OUTLET) {
                waitHead.push(mapped);
            } else {
                waitTail.push(mapped);
            }
        });
        // Closure compiler has problem with using spread operator here. So just using Array.concat.
        return of.apply(null, waitHead.concat(waitTail)).pipe(concatAll(), lastValue(), map(function () {
            return res;
        }));
    }
    /**
     * ANDs Observables by merging all input observables, reducing to an Observable verifying all
     * input Observables return `true`.
     */
    export function andObservables(observables) {
        return observables.pipe(mergeAll(), every(function (result) {
            return result === true;
        }));
    }
    export function wrapIntoObservable(value) {
        if (isObservable(value)) {
            return value;
        }
        if (isPromise(value)) {
            // Use `Promise.resolve()` to wrap promise-like instances.
            // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the
            // change detection.
            return from(Promise.resolve(value));
        }
        return of(value);
    }
});
//# sourceMappingURL=collection.js.map