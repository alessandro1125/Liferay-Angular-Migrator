Liferay.Loader.define("@example-angular-liferay$angular/router@6.1.10/esm5/src/utils/tree", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    var Tree = /** @class */function () {
        function Tree(root) {
            this._root = root;
        }
        Object.defineProperty(Tree.prototype, "root", {
            get: function () {
                return this._root.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @internal
         */
        Tree.prototype.parent = function (t) {
            var p = this.pathFromRoot(t);
            return p.length > 1 ? p[p.length - 2] : null;
        };
        /**
         * @internal
         */
        Tree.prototype.children = function (t) {
            var n = findNode(t, this._root);
            return n ? n.children.map(function (t) {
                return t.value;
            }) : [];
        };
        /**
         * @internal
         */
        Tree.prototype.firstChild = function (t) {
            var n = findNode(t, this._root);
            return n && n.children.length > 0 ? n.children[0].value : null;
        };
        /**
         * @internal
         */
        Tree.prototype.siblings = function (t) {
            var p = findPath(t, this._root);
            if (p.length < 2) return [];
            var c = p[p.length - 2].children.map(function (c) {
                return c.value;
            });
            return c.filter(function (cc) {
                return cc !== t;
            });
        };
        /**
         * @internal
         */
        Tree.prototype.pathFromRoot = function (t) {
            return findPath(t, this._root).map(function (s) {
                return s.value;
            });
        };
        return Tree;
    }();
    export { Tree };
    // DFS for the node matching the value
    function findNode(value, node) {
        var e_1, _a;
        if (value === node.value) return node;
        try {
            for (var _b = tslib_1.__values(node.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var node_1 = findNode(value, child);
                if (node_1) return node_1;
            }
        } catch (e_1_1) {
            e_1 = { error: e_1_1 };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
        return null;
    }
    // Return the path to the node with the given value using DFS
    function findPath(value, node) {
        var e_2, _a;
        if (value === node.value) return [node];
        try {
            for (var _b = tslib_1.__values(node.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var path = findPath(value, child);
                if (path.length) {
                    path.unshift(node);
                    return path;
                }
            }
        } catch (e_2_1) {
            e_2 = { error: e_2_1 };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_2) throw e_2.error;
            }
        }
        return [];
    }
    var TreeNode = /** @class */function () {
        function TreeNode(value, children) {
            this.value = value;
            this.children = children;
        }
        TreeNode.prototype.toString = function () {
            return "TreeNode(" + this.value + ")";
        };
        return TreeNode;
    }();
    export { TreeNode };
    // Return the list of T indexed by outlet name
    export function nodeChildrenAsMap(node) {
        var map = {};
        if (node) {
            node.children.forEach(function (child) {
                return map[child.value.outlet] = child;
            });
        }
        return map;
    }
});
//# sourceMappingURL=tree.js.map