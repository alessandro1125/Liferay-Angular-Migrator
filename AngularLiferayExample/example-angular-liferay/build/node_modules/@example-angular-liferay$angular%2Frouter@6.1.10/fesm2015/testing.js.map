{"version":3,"sources":["testing.js"],"names":["Location","LocationStrategy","MockLocationStrategy","SpyLocation","Compiler","Injectable","Injector","NgModule","NgModuleFactoryLoader","Optional","ChildrenOutletContexts","NoPreloading","PreloadingStrategy","ROUTER_CONFIGURATION","ROUTES","Router","RouterModule","UrlHandlingStrategy","UrlSerializer","provideRoutes","ɵROUTER_PROVIDERS","ɵflatten","SpyNgModuleFactoryLoader","constructor","compiler","_stubbedModules","stubbedModules","modules","res","t","Object","keys","compileModuleAsync","load","path","Promise","reject","Error","decorators","type","ctorParameters","isUrlHandlingStrategy","opts","setupTestingRouter","urlSerializer","contexts","location","loader","injector","routes","urlHandlingStrategy","router","malformedUriErrorHandler","paramsInheritanceStrategy","RouterTestingModule","withRoutes","config","ngModule","providers","provide","useValue","args","exports","useClass","useFactory","deps","useExisting"],"mappings":"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","file":"testing.js","sourcesContent":["/**\n * @license Angular v6.1.10\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\nimport { Location, LocationStrategy } from '@angular/common';\nimport { MockLocationStrategy, SpyLocation } from '@angular/common/testing';\nimport { Compiler, Injectable, Injector, NgModule, NgModuleFactoryLoader, Optional } from '@angular/core';\nimport { ChildrenOutletContexts, NoPreloading, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTES, Router, RouterModule, UrlHandlingStrategy, UrlSerializer, provideRoutes, ɵROUTER_PROVIDERS, ɵflatten } from '@angular/router';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * \\@Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * \\@NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n *\n */\nclass SpyNgModuleFactoryLoader {\n    /**\n     * @param {?} compiler\n     */\n    constructor(compiler) {\n        this.compiler = compiler;\n        /**\n         * \\@docsNotRequired\n         */\n        this._stubbedModules = {};\n    }\n    /**\n     * \\@docsNotRequired\n     * @param {?} modules\n     * @return {?}\n     */\n    set stubbedModules(modules) {\n        /** @type {?} */\n        const res = {};\n        for (const t of Object.keys(modules)) {\n            res[t] = this.compiler.compileModuleAsync(modules[t]);\n        }\n        this._stubbedModules = res;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    get stubbedModules() { return this._stubbedModules; }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    load(path) {\n        if (this._stubbedModules[path]) {\n            return this._stubbedModules[path];\n        }\n        else {\n            return /** @type {?} */ (Promise.reject(new Error(`Cannot find module ${path}`)));\n        }\n    }\n}\nSpyNgModuleFactoryLoader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSpyNgModuleFactoryLoader.ctorParameters = () => [\n    { type: Compiler }\n];\n/**\n * @param {?} opts\n * @return {?}\n */\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n *\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} loader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} routes\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @return {?}\n */\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    /** @type {?} */\n    const router = new Router(/** @type {?} */ ((null)), urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\n    if (opts) {\n        // Handle deprecated argument ordering.\n        if (isUrlHandlingStrategy(opts)) {\n            router.urlHandlingStrategy = opts;\n        }\n        else {\n            // Handle ExtraOptions\n            if (opts.malformedUriErrorHandler) {\n                router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n            }\n            if (opts.paramsInheritanceStrategy) {\n                router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n            }\n        }\n    }\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router;\n}\n/**\n * \\@description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {\\@link\n * NgModuleFactoryLoader}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n *\n */\nclass RouterTestingModule {\n    /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    static withRoutes(routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                provideRoutes(routes),\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ]\n        };\n    }\n}\nRouterTestingModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [RouterModule],\n                providers: [\n                    ɵROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\n                    { provide: LocationStrategy, useClass: MockLocationStrategy },\n                    { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n                        provide: Router,\n                        useFactory: setupTestingRouter,\n                        deps: [\n                            UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n                            ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n                        ]\n                    },\n                    { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { setupTestingRouter, SpyNgModuleFactoryLoader, RouterTestingModule };\n//# sourceMappingURL=testing.js.map\n"]}