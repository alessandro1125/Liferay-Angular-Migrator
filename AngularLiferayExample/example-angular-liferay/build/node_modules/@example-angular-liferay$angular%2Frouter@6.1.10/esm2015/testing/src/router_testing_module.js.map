{"version":3,"sources":["../../../../../../../packages/router/testing/src/router_testing_module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, LocationStrategy} from '@angular/common';\nimport {MockLocationStrategy, SpyLocation} from '@angular/common/testing';\nimport {Compiler, Injectable, Injector, ModuleWithProviders, NgModule, NgModuleFactory, NgModuleFactoryLoader, Optional} from '@angular/core';\nimport {ChildrenOutletContexts, ExtraOptions, NoPreloading, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTES, Route, Router, RouterModule, Routes, UrlHandlingStrategy, UrlSerializer, provideRoutes, ɵROUTER_PROVIDERS as ROUTER_PROVIDERS, ɵflatten as flatten} from '@angular/router';\n\n\n\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n *\n */\n@Injectable()\nexport class SpyNgModuleFactoryLoader implements NgModuleFactoryLoader {\n  /**\n   * @docsNotRequired\n   */\n  private _stubbedModules: {[path: string]: Promise<NgModuleFactory<any>>} = {};\n\n  /**\n   * @docsNotRequired\n   */\n  set stubbedModules(modules: {[path: string]: any}) {\n    const res: {[path: string]: any} = {};\n    for (const t of Object.keys(modules)) {\n      res[t] = this.compiler.compileModuleAsync(modules[t]);\n    }\n    this._stubbedModules = res;\n  }\n\n  /**\n   * @docsNotRequired\n   */\n  get stubbedModules(): {[path: string]: any} { return this._stubbedModules; }\n\n  constructor(private compiler: Compiler) {}\n\n  load(path: string): Promise<NgModuleFactory<any>> {\n    if (this._stubbedModules[path]) {\n      return this._stubbedModules[path];\n    } else {\n      return <any>Promise.reject(new Error(`Cannot find module ${path}`));\n    }\n  }\n}\n\nfunction isUrlHandlingStrategy(opts: ExtraOptions | UrlHandlingStrategy):\n    opts is UrlHandlingStrategy {\n  // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n  // runtime.\n  return 'shouldProcessUrl' in opts;\n}\n\n/**\n * Router setup factory function used for testing.\n *\n *\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    opts?: ExtraOptions, urlHandlingStrategy?: UrlHandlingStrategy): Router;\n\n/**\n * Router setup factory function used for testing.\n *\n * @deprecated As of v5.2. The 2nd-to-last argument should be `ExtraOptions`, not\n * `UrlHandlingStrategy`\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    urlHandlingStrategy?: UrlHandlingStrategy): Router;\n\n/**\n * Router setup factory function used for testing.\n *\n *\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    opts?: ExtraOptions | UrlHandlingStrategy, urlHandlingStrategy?: UrlHandlingStrategy) {\n  const router = new Router(\n      null !, urlSerializer, contexts, location, injector, loader, compiler, flatten(routes));\n  if (opts) {\n    // Handle deprecated argument ordering.\n    if (isUrlHandlingStrategy(opts)) {\n      router.urlHandlingStrategy = opts;\n    } else {\n      // Handle ExtraOptions\n\n      if (opts.malformedUriErrorHandler) {\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n      }\n\n      if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n      }\n    }\n  }\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n  return router;\n}\n\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n *\n */\n@NgModule({\n  exports: [RouterModule],\n  providers: [\n    ROUTER_PROVIDERS, {provide: Location, useClass: SpyLocation},\n    {provide: LocationStrategy, useClass: MockLocationStrategy},\n    {provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader}, {\n      provide: Router,\n      useFactory: setupTestingRouter,\n      deps: [\n        UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n        ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n      ]\n    },\n    {provide: PreloadingStrategy, useExisting: NoPreloading}, provideRoutes([])\n  ]\n})\nexport class RouterTestingModule {\n  static withRoutes(routes: Routes, config?: ExtraOptions):\n      ModuleWithProviders<RouterTestingModule> {\n    return {\n      ngModule: RouterTestingModule,\n      providers: [\n        provideRoutes(routes),\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n      ]\n    };\n  }\n}\n"],"sourceRoot":""}