{"version":3,"sources":["../../../../../../packages/router/src/events.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n\n/**\n * @description\n *\n * Identifies the trigger of the navigation.\n *\n * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n * * 'popstate'--triggered by a popstate event\n * * 'hashchange'--triggered by a hashchange event\n *\n * @experimental\n */\nexport type NavigationTrigger = 'imperative' | 'popstate' | 'hashchange';\n\n/**\n * @description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @experimental\n */\nexport class RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      public id: number,\n      /** @docsNotRequired */\n      public url: string) {}\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation starts.\n *\n *\n */\nexport class NavigationStart extends RouterEvent {\n  /**\n   * Identifies the trigger of the navigation.\n   *\n   * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n   * * 'popstate'--triggered by a popstate event\n   * * 'hashchange'--triggered by a hashchange event\n   */\n  navigationTrigger?: 'imperative'|'popstate'|'hashchange';\n\n  /**\n   * This contains the navigation id that pushed the history record that the router navigates\n   * back to. This is not null only when the navigation is triggered by a popstate event.\n   *\n   * The router assigns a navigationId to every router transition/navigation. Even when the user\n   * clicks on the back button in the browser, a new navigation id will be created. So from\n   * the perspective of the router, the router never \"goes back\". By using the `restoredState`\n   * and its navigationId, you can implement behavior that differentiates between creating new\n   * states\n   * and popstate events. In the latter case you can restore some remembered state (e.g., scroll\n   * position).\n   */\n  restoredState?: {navigationId: number}|null;\n\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      navigationTrigger: 'imperative'|'popstate'|'hashchange' = 'imperative',\n      /** @docsNotRequired */\n      restoredState: {navigationId: number}|null = null) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n *\n */\nexport class NavigationEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n *\n */\nexport class NavigationCancel extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public reason: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n *\n */\nexport class NavigationError extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public error: any) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when routes are recognized.\n *\n *\n */\nexport class RoutesRecognized extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of the Guard phase of routing.\n *\n * @experimental\n */\nexport class GuardsCheckStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the end of the Guard phase of routing.\n *\n * @experimental\n */\nexport class GuardsCheckEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot,\n      /** @docsNotRequired */\n      public shouldActivate: boolean) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * @experimental\n */\nexport class ResolveStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * @experimental\n */\nexport class ResolveEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * @experimental\n */\nexport class RouteConfigLoadStart {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n\n/**\n * @description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * @experimental\n */\nexport class RouteConfigLoadEnd {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * @experimental\n */\nexport class ChildActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * @experimental\n */\nexport class ChildActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * @experimental\n */\nexport class ActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * @experimental\n */\nexport class ActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents a scrolling event.\n */\nexport class Scroll {\n  constructor(\n      /** @docsNotRequired */\n      readonly routerEvent: NavigationEnd,\n\n      /** @docsNotRequired */\n      readonly position: [number, number]|null,\n\n      /** @docsNotRequired */\n      readonly anchor: string|null) {}\n\n  toString(): string {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents a router event, allowing you to track the lifecycle of the router.\n *\n * The sequence of router events is:\n *\n * - `NavigationStart`,\n * - `RouteConfigLoadStart`,\n * - `RouteConfigLoadEnd`,\n * - `RoutesRecognized`,\n * - `GuardsCheckStart`,\n * - `ChildActivationStart`,\n * - `ActivationStart`,\n * - `GuardsCheckEnd`,\n * - `ResolveStart`,\n * - `ResolveEnd`,\n * - `ActivationEnd`\n * - `ChildActivationEnd`\n * - `NavigationEnd`,\n * - `NavigationCancel`,\n * - `NavigationError`\n * - `Scroll`\n *\n *\n */\nexport type Event = RouterEvent | RouteConfigLoadStart | RouteConfigLoadEnd | ChildActivationStart |\n    ChildActivationEnd | ActivationStart | ActivationEnd | Scroll;\n"],"sourceRoot":""}