{"version":3,"sources":["../../../../../../packages/router/src/router_state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n\n/**\n * @description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n *\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /** @internal */\n  constructor(\n      root: TreeNode<ActivatedRoute>,\n      /** The current snapshot of the router state */\n      public snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterState(<RouterState>this, root);\n  }\n\n  toString(): string { return this.snapshot.toString(); }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>| null): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>| null): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * @Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n *\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  // TODO(issue/24571): remove '!'.\n  snapshot !: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _routerState !: RouterState;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _paramMap !: Observable<ParamMap>;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap !: Observable<ParamMap>;\n\n  /** @internal */\n  constructor(\n      /** An observable of the URL segments matched by this route */\n      public url: Observable<UrlSegment[]>,\n      /** An observable of the matrix parameters scoped to this route */\n      public params: Observable<Params>,\n      /** An observable of the query parameters shared by all the routes */\n      public queryParams: Observable<Params>,\n      /** An observable of the URL fragment shared by all the routes */\n      public fragment: Observable<string>,\n      /** An observable of the static and resolved data of this route. */\n      public data: Observable<Data>,\n      /** The outlet name of the route. It's a constant */\n      public outlet: string,\n      /** The component of the route. It's a constant */\n      // TODO(vsavkin): remove |string\n      public component: Type<any>|string|null, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  /** The configuration used to match this route */\n  get routeConfig(): Route|null { return this._futureSnapshot.routeConfig; }\n\n  /** The root of the router state */\n  get root(): ActivatedRoute { return this._routerState.root; }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRoute|null { return this._routerState.parent(this); }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRoute|null { return this._routerState.firstChild(this); }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRoute[] { return this._routerState.children(this); }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n\n  get paramMap(): Observable<ParamMap> {\n    if (!this._paramMap) {\n      this._paramMap = this.params.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._paramMap;\n  }\n\n  get queryParamMap(): Observable<ParamMap> {\n    if (!this._queryParamMap) {\n      this._queryParamMap =\n          this.queryParams.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nexport type ParamsInheritanceStrategy = 'emptyOnly' | 'always';\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * @internal\n */\nexport function inheritedParamsDataResolve(\n    route: ActivatedRouteSnapshot,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly'): Inherited {\n  const pathFromRoot = route.pathFromRoot;\n\n  let inheritingStartingFrom = 0;\n  if (paramsInheritanceStrategy !== 'always') {\n    inheritingStartingFrom = pathFromRoot.length - 1;\n\n    while (inheritingStartingFrom >= 1) {\n      const current = pathFromRoot[inheritingStartingFrom];\n      const parent = pathFromRoot[inheritingStartingFrom - 1];\n      // current route is an empty path => inherits its parent's params and data\n      if (current.routeConfig && current.routeConfig.path === '') {\n        inheritingStartingFrom--;\n\n        // parent is componentless => current route should inherit its params and data\n      } else if (!parent.component) {\n        inheritingStartingFrom--;\n\n      } else {\n        break;\n      }\n    }\n  }\n\n  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n\n/** @internal */\nfunction flattenInherited(pathFromRoot: ActivatedRouteSnapshot[]): Inherited {\n  return pathFromRoot.reduce((res, curr) => {\n    const params = {...res.params, ...curr.params};\n    const data = {...res.data, ...curr.data};\n    const resolve = {...res.resolve, ...curr._resolvedData};\n    return {params, data, resolve};\n  }, <any>{params: {}, data: {}, resolve: {}});\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n *\n */\nexport class ActivatedRouteSnapshot {\n  /** The configuration used to match this route **/\n  public readonly routeConfig: Route|null;\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n  /** @internal */\n  _lastPathIndex: number;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _resolvedData !: Data;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _routerState !: RouterStateSnapshot;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _paramMap !: ParamMap;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap !: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The URL segments matched by this route */\n      public url: UrlSegment[],\n      /** The matrix parameters scoped to this route */\n      public params: Params,\n      /** The query parameters shared by all the routes */\n      public queryParams: Params,\n      /** The URL fragment shared by all the routes */\n      public fragment: string,\n      /** The static and resolved data of this route */\n      public data: Data,\n      /** The outlet name of the route */\n      public outlet: string,\n      /** The component of the route */\n      public component: Type<any>|string|null, routeConfig: Route|null, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this.routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n\n  /** The root of the router state */\n  get root(): ActivatedRouteSnapshot { return this._routerState.root; }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRouteSnapshot|null { return this._routerState.parent(this); }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRouteSnapshot|null { return this._routerState.firstChild(this); }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n\n  get paramMap(): ParamMap {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n    return this._paramMap;\n  }\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n *\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /** @internal */\n  constructor(\n      /** The url from which this snapshot was created */\n      public url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterState(<RouterStateSnapshot>this, root);\n  }\n\n  toString(): string { return serializeNode(this._root); }\n}\n\nfunction setRouterState<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      (<any>route.queryParams).next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      (<any>route.fragment).next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      (<any>route.params).next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      (<any>route.url).next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      (<any>route.data).next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    (<any>route.data).next(route._futureSnapshot.data);\n  }\n}\n\n\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent !));\n}\n"],"sourceRoot":""}