{"version":3,"sources":["../../../../../../packages/router/src/create_url_tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  let qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\n\nclass Navigation {\n  constructor(\n      public isAbsolute: boolean, public numberOfDoubleDots: number, public commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n\n  public toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n\n  const res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\n\nclass Position {\n  constructor(\n      public segmentGroup: UrlSegmentGroup, public processChildren: boolean, public index: number) {\n  }\n}\n\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent !;\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n\nfunction getPath(command: any): any {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n  return `${command}`;\n}\n\nfunction getOutlets(commands: any[]): {[k: string]: any[]} {\n  if (!(typeof commands[0] === 'object')) return {[PRIMARY_OUTLET]: commands};\n  if (commands[0].outlets === undefined) return {[PRIMARY_OUTLET]: commands};\n  return commands[0].outlets;\n}\n\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands: any, outlet: string) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n\n  const noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const curr = getPath(commands[currentCommandIndex]);\n    const next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n\n  let i = 0;\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      const children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const curr = getPath(commands[i]);\n    const next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n\nfunction createNewSegmentChildren(outlets: {[name: string]: any}): any {\n  const children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands: any, outlet: string) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n"],"sourceRoot":""}