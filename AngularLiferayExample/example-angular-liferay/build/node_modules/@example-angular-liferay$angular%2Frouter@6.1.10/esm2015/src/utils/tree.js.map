{"version":3,"sources":["../../../../../../../packages/router/src/utils/tree.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAQA,WAAM,MAAA,IAAA,CAAA;;;;AAIJ,oBAAY,IAAZ,EAA6B;AAAI,iBAAK,KAAL,GAAa,IAAb;AAAoB;;;;AAErD,YAAI,IAAJ,GAAQ;AAAQ,mBAAO,KAAK,KAAL,CAAW,KAAlB;AAA0B;;;;;;AAK1C,eAAO,CAAP,EAAW;;AACT,kBAAM,IAAI,KAAK,YAAL,CAAkB,CAAlB,CAAV;AACA,mBAAO,EAAE,MAAF,GAAW,CAAX,GAAe,EAAE,EAAE,MAAF,GAAW,CAAb,CAAf,GAAiC,IAAxC;AACD;;;;;;AAKD,iBAAS,CAAT,EAAa;;AACX,kBAAM,IAAI,SAAS,CAAT,EAAY,KAAK,KAAjB,CAAV;AACA,mBAAO,IAAI,EAAE,QAAF,CAAW,GAAX,CAAe,KAAK,EAAE,KAAtB,CAAJ,GAAmC,EAA1C;AACD;;;;;;AAKD,mBAAW,CAAX,EAAe;;AACb,kBAAM,IAAI,SAAS,CAAT,EAAY,KAAK,KAAjB,CAAV;AACA,mBAAO,KAAK,EAAE,QAAF,CAAW,MAAX,GAAoB,CAAzB,GAA6B,EAAE,QAAF,CAAW,CAAX,EAAc,KAA3C,GAAmD,IAA1D;AACD;;;;;;AAKD,iBAAS,CAAT,EAAa;;AACX,kBAAM,IAAI,SAAS,CAAT,EAAY,KAAK,KAAjB,CAAV;AACA,gBAAI,EAAE,MAAF,GAAW,CAAf,EAAkB,OAAO,EAAP;;AAElB,kBAAM,IAAI,EAAE,EAAE,MAAF,GAAW,CAAb,EAAgB,QAAhB,CAAyB,GAAzB,CAA6B,KAAK,EAAE,KAApC,CAAV;AACA,mBAAO,EAAE,MAAF,CAAS,MAAM,OAAO,CAAtB,CAAP;AACD;;;;;;AAKD,qBAAa,CAAb,EAAiB;AAAS,mBAAO,SAAS,CAAT,EAAY,KAAK,KAAjB,EAAwB,GAAxB,CAA4B,KAAK,EAAE,KAAnC,CAAP;AAAmD;AA9CzE;;;;;;;;;;;;;;AAmDN,aAAA,QAAA,CAAqB,KAArB,EAA+B,IAA/B,EAAgD;AAC9C,YAAI,UAAU,KAAK,KAAnB,EAA0B,OAAO,IAAP;AAE1B,aAAK,MAAM,KAAX,IAAoB,KAAK,QAAzB,EAAmC;;AACjC,kBAAM,OAAO,SAAS,KAAT,EAAgB,KAAhB,CAAb;AACA,gBAAI,IAAJ,EAAU,OAAO,IAAP;AACX;AAED,eAAO,IAAP;AACD;;;;;;;AAGD,aAAA,QAAA,CAAqB,KAArB,EAA+B,IAA/B,EAAgD;AAC9C,YAAI,UAAU,KAAK,KAAnB,EAA0B,OAAO,CAAC,IAAD,CAAP;AAE1B,aAAK,MAAM,KAAX,IAAoB,KAAK,QAAzB,EAAmC;;AACjC,kBAAM,OAAO,SAAS,KAAT,EAAgB,KAAhB,CAAb;AACA,gBAAI,KAAK,MAAT,EAAiB;AACf,qBAAK,OAAL,CAAa,IAAb;AACA,uBAAO,IAAP;AACD;AACF;AAED,eAAO,EAAP;AACD;;;;AAED,WAAM,MAAA,QAAA,CAAA;;;;;AACJ,oBAAmB,KAAnB,EAAoC,QAApC,EAA2D;AAAxC,iBAAA,KAAA,GAAA,KAAA;AAAiB,iBAAA,QAAA,GAAA,QAAA;AAA2B;;;;AAE/D,mBAAQ;AAAa,mBAAO,YAAY,KAAK,KAAK,GAA7B;AAAmC;AAHpD;;;;;;;;;;;;AAON,WAAM,SAAA,iBAAA,CAAuD,IAAvD,EAA8E;;AAClF,cAAM,MAAuC,EAA7C;AAEA,YAAI,IAAJ,EAAU;AACR,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAS,IAAI,MAAM,KAAN,CAAY,MAAhB,IAA0B,KAAzD;AACD;AAED,eAAO,GAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport class Tree<T> {\n  /** @internal */\n  _root: TreeNode<T>;\n\n  constructor(root: TreeNode<T>) { this._root = root; }\n\n  get root(): T { return this._root.value; }\n\n  /**\n   * @internal\n   */\n  parent(t: T): T|null {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n\n  /**\n   * @internal\n   */\n  children(t: T): T[] {\n    const n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n\n  /**\n   * @internal\n   */\n  firstChild(t: T): T|null {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n\n  /**\n   * @internal\n   */\n  siblings(t: T): T[] {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n\n    const c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n\n  /**\n   * @internal\n   */\n  pathFromRoot(t: T): T[] { return findPath(t, this._root).map(s => s.value); }\n}\n\n\n// DFS for the node matching the value\nfunction findNode<T>(value: T, node: TreeNode<T>): TreeNode<T>|null {\n  if (value === node.value) return node;\n\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n}\n\n// Return the path to the node with the given value using DFS\nfunction findPath<T>(value: T, node: TreeNode<T>): TreeNode<T>[] {\n  if (value === node.value) return [node];\n\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\n\nexport class TreeNode<T> {\n  constructor(public value: T, public children: TreeNode<T>[]) {}\n\n  toString(): string { return `TreeNode(${this.value})`; }\n}\n\n// Return the list of T indexed by outlet name\nexport function nodeChildrenAsMap<T extends{outlet: string}>(node: TreeNode<T>| null) {\n  const map: {[outlet: string]: TreeNode<T>} = {};\n\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n\n  return map;\n}"],"sourceRoot":""}