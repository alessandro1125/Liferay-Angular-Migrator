{"version":3,"sources":["../../../../../../../../../../../packages/core/testing/src/fake_async.ts"],"names":[],"mappings":";;;;;;;;;AAOA,aAAQ,4BAAR,EAAsC,iBAAtC,EAAyD,aAAzD,EAAwE,uBAAxE,EAAiG,0BAAjG,EAA6H,YAA7H,QAAgJ,uBAAhJ;AAEA,QAAM,QAAa,OAAO,IAAP,KAAgB,WAAhB,GAA8B,IAA9B,GAAqC,IAAxD;AACA,QAAM,sBAAsB,SAAS,MAAM,MAAM,UAAN,CAAiB,eAAjB,CAAN,CAArC;AAEA;;;;;;AAMA,WAAM,SAAA,kBAAA,GAAA;AACJ,YAAI,mBAAJ,EAAyB;AACvB,mBAAO,oBAAoB,kBAApB,EAAP;AACD,SAFD,MAEO;AACL,mBAAO,4BAAP;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;AAmBA,WAAM,SAAA,SAAA,CAAoB,EAApB,EAAgC;AACpC,YAAI,mBAAJ,EAAyB;AACvB,mBAAO,oBAAoB,SAApB,CAA8B,EAA9B,CAAP;AACD,SAFD,MAEO;AACL,mBAAO,kBAAkB,EAAlB,CAAP;AACD;AACF;AAED;;;;;;;;;;;;;AAaA,WAAM,SAAA,IAAA,CAAe,MAAf,EAAiC;AAAlB,YAAA,WAAA,KAAA,CAAA,EAAA;AAAA,qBAAA,CAAA;AAAkB;AACrC,YAAI,mBAAJ,EAAyB;AACvB,mBAAO,oBAAoB,IAApB,CAAyB,MAAzB,CAAP;AACD,SAFD,MAEO;AACL,mBAAO,aAAa,MAAb,CAAP;AACD;AACF;AAED;;;;;;;;;;AAUA,WAAM,SAAA,KAAA,CAAgB,QAAhB,EAAiC;AACrC,YAAI,mBAAJ,EAAyB;AACvB,mBAAO,oBAAoB,KAApB,CAA0B,QAA1B,CAAP;AACD,SAFD,MAEO;AACL,mBAAO,cAAc,QAAd,CAAP;AACD;AACF;AAED;;;;;AAKA,WAAM,SAAA,oBAAA,GAAA;AACJ,YAAI,mBAAJ,EAAyB;AACvB,mBAAO,oBAAoB,oBAApB,EAAP;AACD,SAFD,MAEO;AACL;AACD;AACF;AAED;;;;;AAKA,WAAM,SAAA,eAAA,GAAA;AACJ,YAAI,mBAAJ,EAAyB;AACvB,mBAAO,oBAAoB,eAApB,EAAP;AACD,SAFD,MAEO;AACL,mBAAO,yBAAP;AACD;AACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {discardPeriodicTasksFallback, fakeAsyncFallback, flushFallback, flushMicrotasksFallback, resetFakeAsyncZoneFallback, tickFallback} from './fake_async_fallback';\n\nconst _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nexport function resetFakeAsyncZone(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  } else {\n    return resetFakeAsyncZoneFallback();\n  }\n}\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nexport function fakeAsync(fn: Function): (...args: any[]) => any {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  } else {\n    return fakeAsyncFallback(fn);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nexport function tick(millis: number = 0): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis);\n  } else {\n    return tickFallback(millis);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @experimental\n */\nexport function flush(maxTurns?: number): number {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  } else {\n    return flushFallback(maxTurns);\n  }\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nexport function discardPeriodicTasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  } else {\n    discardPeriodicTasksFallback();\n  }\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nexport function flushMicrotasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  } else {\n    return flushMicrotasksFallback();\n  }\n}\n"],"sourceRoot":""}