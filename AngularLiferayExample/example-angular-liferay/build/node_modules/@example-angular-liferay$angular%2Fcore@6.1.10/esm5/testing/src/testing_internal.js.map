{"version":3,"sources":["../../../../../../../../../../../packages/core/testing/src/testing_internal.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ÉµisPromise as isPromise} from '@angular/core';\nimport {global} from '@angular/core/src/util';\n\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {getTestBed, inject} from './test_bed';\n\nexport {AsyncTestCompleter} from './async_test_completer';\nexport {inject} from './test_bed';\n\nexport * from './logger';\nexport * from './ng_zone_mock';\n\nexport const proxy: ClassDecorator = (t: any) => t;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\nexport const afterEach: Function = _global.afterEach;\nexport const expect: <T>(actual: T) => jasmine.Matchers<T> = _global.expect;\n\nconst jsmBeforeEach = _global.beforeEach;\nconst jsmDescribe = _global.describe;\nconst jsmDDescribe = _global.fdescribe;\nconst jsmXDescribe = _global.xdescribe;\nconst jsmIt = _global.it;\nconst jsmFIt = _global.fit;\nconst jsmXIt = _global.xit;\n\nconst runnerStack: BeforeEachRunner[] = [];\njasmine.DEFAULT_TIMEOUT_INTERVAL = 3000;\nconst globalTimeOut = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n\nconst testBed = getTestBed();\n\n/**\n * Mechanism to run `beforeEach()` functions of Angular tests.\n *\n * Note: Jasmine own `beforeEach` is used by this library to handle DI providers.\n */\nclass BeforeEachRunner {\n  private _fns: Array<Function> = [];\n\n  constructor(private _parent: BeforeEachRunner) {}\n\n  beforeEach(fn: Function): void { this._fns.push(fn); }\n\n  run(): void {\n    if (this._parent) this._parent.run();\n    this._fns.forEach((fn) => { fn(); });\n  }\n}\n\n// Reset the test providers before each test\njsmBeforeEach(() => { testBed.resetTestingModule(); });\n\nfunction _describe(jsmFn: Function, ...args: any[]) {\n  const parentRunner = runnerStack.length === 0 ? null : runnerStack[runnerStack.length - 1];\n  const runner = new BeforeEachRunner(parentRunner !);\n  runnerStack.push(runner);\n  const suite = jsmFn(...args);\n  runnerStack.pop();\n  return suite;\n}\n\nexport function describe(...args: any[]): void {\n  return _describe(jsmDescribe, ...args);\n}\n\nexport function ddescribe(...args: any[]): void {\n  return _describe(jsmDDescribe, ...args);\n}\n\nexport function xdescribe(...args: any[]): void {\n  return _describe(jsmXDescribe, ...args);\n}\n\nexport function beforeEach(fn: Function): void {\n  if (runnerStack.length > 0) {\n    // Inside a describe block, beforeEach() uses a BeforeEachRunner\n    runnerStack[runnerStack.length - 1].beforeEach(fn);\n  } else {\n    // Top level beforeEach() are delegated to jasmine\n    jsmBeforeEach(fn);\n  }\n}\n\n/**\n * Allows overriding default providers defined in test_injector.js.\n *\n * The given function must return a list of DI providers.\n *\n * Example:\n *\n *   beforeEachProviders(() => [\n *     {provide: Compiler, useClass: MockCompiler},\n *     {provide: SomeToken, useValue: myValue},\n *   ]);\n */\nexport function beforeEachProviders(fn: Function): void {\n  jsmBeforeEach(() => {\n    const providers = fn();\n    if (!providers) return;\n    testBed.configureTestingModule({providers: providers});\n  });\n}\n\n\nfunction _it(\n    jsmFn: Function, testName: string, testFn: (done?: DoneFn) => any, testTimeout = 0): void {\n  if (runnerStack.length == 0) {\n    // This left here intentionally, as we should never get here, and it aids debugging.\n    debugger;\n    throw new Error('Empty Stack!');\n  }\n  const runner = runnerStack[runnerStack.length - 1];\n  const timeout = Math.max(globalTimeOut, testTimeout);\n\n  jsmFn(testName, (done: DoneFn) => {\n    const completerProvider = {\n      provide: AsyncTestCompleter,\n      useFactory: () => {\n        // Mark the test as async when an AsyncTestCompleter is injected in an it()\n        return new AsyncTestCompleter();\n      }\n    };\n    testBed.configureTestingModule({providers: [completerProvider]});\n    runner.run();\n\n    if (testFn.length === 0) {\n      const retVal = testFn();\n      if (isPromise(retVal)) {\n        // Asynchronous test function that returns a Promise - wait for completion.\n        retVal.then(done, done.fail);\n      } else {\n        // Synchronous test function - complete immediately.\n        done();\n      }\n    } else {\n      // Asynchronous test function that takes in 'done' parameter.\n      testFn(done);\n    }\n  }, timeout);\n}\n\nexport function it(expectation: string, assertion: (done: DoneFn) => any, timeout?: number): void {\n  return _it(jsmIt, expectation, assertion, timeout);\n}\n\nexport function fit(expectation: string, assertion: (done: DoneFn) => any, timeout?: number): void {\n  return _it(jsmFIt, expectation, assertion, timeout);\n}\n\nexport function xit(expectation: string, assertion: (done: DoneFn) => any, timeout?: number): void {\n  return _it(jsmXIt, expectation, assertion, timeout);\n}\n\nexport class SpyObject {\n  constructor(type?: any) {\n    if (type) {\n      for (const prop in type.prototype) {\n        let m: any = null;\n        try {\n          m = type.prototype[prop];\n        } catch (e) {\n          // As we are creating spys for abstract classes,\n          // these classes might have getters that throw when they are accessed.\n          // As we are only auto creating spys for methods, this\n          // should not matter.\n        }\n        if (typeof m === 'function') {\n          this.spy(prop);\n        }\n      }\n    }\n  }\n\n  spy(name: string) {\n    if (!(this as any)[name]) {\n      (this as any)[name] = jasmine.createSpy(name);\n    }\n    return (this as any)[name];\n  }\n\n  prop(name: string, value: any) { (this as any)[name] = value; }\n\n  static stub(object: any = null, config: any = null, overrides: any = null) {\n    if (!(object instanceof SpyObject)) {\n      overrides = config;\n      config = object;\n      object = new SpyObject();\n    }\n\n    const m = {...config, ...overrides};\n    Object.keys(m).forEach(key => { object.spy(key).and.returnValue(m[key]); });\n    return object;\n  }\n}\n"],"sourceRoot":""}