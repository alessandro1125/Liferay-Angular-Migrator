{"version":3,"sources":["../../../../../../../../../../packages/core/src/sanitization/url_sanitizer.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,SAAR,QAAwB,oBAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,QAAM,mBAAmB,6DAAzB;AAEA;AACA,QAAM,sBAAsB,8CAA5B;AAEA;AACA,QAAM,mBACF,sIADJ;AAGA,WAAM,SAAA,YAAA,CAAuB,GAAvB,EAAkC;AACtC,cAAM,OAAO,GAAP,CAAN;AACA,YAAI,IAAI,KAAJ,CAAU,gBAAV,KAA+B,IAAI,KAAJ,CAAU,gBAAV,CAAnC,EAAgE,OAAO,GAAP;AAEhE,YAAI,WAAJ,EAAiB;AACf,oBAAQ,IAAR,CAAa,0CAAwC,GAAxC,GAA2C,oCAAxD;AACD;AAED,eAAO,YAAY,GAAnB;AACD;AAED,WAAM,SAAA,cAAA,CAAyB,MAAzB,EAAuC;AAC3C,iBAAS,OAAO,MAAP,CAAT;AACA,eAAO,OAAO,KAAP,CAAa,GAAb,EAAkB,GAAlB,CAAsB,UAAC,MAAD,EAAO;AAAK,mBAAA,aAAa,OAAb,IAAa,EAAb,CAAA;AAA2B,SAA7D,EAA+D,IAA/D,CAAoE,IAApE,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '../application_ref';\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/* A pattern that matches safe srcset values */\nconst SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nconst DATA_URL_PATTERN =\n    /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n\nexport function _sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n\n  if (isDevMode()) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n\nexport function sanitizeSrcset(srcset: string): string {\n  srcset = String(srcset);\n  return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');\n}\n"],"sourceRoot":""}