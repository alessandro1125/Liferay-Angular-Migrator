{"version":3,"sources":["../../../../../../../../../../packages/core/src/sanitization/style_sanitizer.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,SAAR,QAAwB,oBAAxB;AACA,aAAQ,YAAR,QAA2B,iBAA3B;AAGA;;;;;;;;;;;;;;AAcA,QAAM,SAAS,yBAAf;AACA,QAAM,qBAAqB,+DAA3B;AACA,QAAM,YAAY,eAAlB;AACA,QAAM,YAAY,2CAAlB;AACA,QAAM,WAAW,eAAjB;AACA,QAAM,UAAU,0BAAhB;AACA,QAAM,mBAAmB,IAAI,MAAJ,CACrB,OAAK,MAAL,GAAW,GAAX,IACI,QAAM,kBAAN,GAAwB,GAAxB,GAA4B,SAA5B,GAAqC,GAArC,GAAyC,SAAzC,GAAkD,GAAlD,GAAsD,QAAtD,GAA8D,GADlE,KAEO,UAAO,IAFd,CADqB,EAIrB,GAJqB,CAAzB;AAMA;;;;;;;;;;;;;;;;;;AAkBA,QAAM,SAAS,kBAAf;AAEA;;;;;;;;AAQA,aAAA,iBAAA,CAA2B,KAA3B,EAAwC;AACtC,YAAI,gBAAgB,IAApB;AACA,YAAI,gBAAgB,IAApB;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,gBAAM,IAAI,MAAM,MAAN,CAAa,CAAb,CAAV;AACA,gBAAI,MAAM,IAAN,IAAc,aAAlB,EAAiC;AAC/B,gCAAgB,CAAC,aAAjB;AACD,aAFD,MAEO,IAAI,MAAM,GAAN,IAAa,aAAjB,EAAgC;AACrC,gCAAgB,CAAC,aAAjB;AACD;AACF;AACD,eAAO,iBAAiB,aAAxB;AACD;AAED;;;;AAIA,WAAM,SAAA,cAAA,CAAyB,KAAzB,EAAsC;AAC1C,gBAAQ,OAAO,KAAP,EAAc,IAAd,EAAR,CAD0C,CACX;AAC/B,YAAI,CAAC,KAAL,EAAY,OAAO,EAAP;AAEZ;AACA;AACA,YAAM,WAAW,MAAM,KAAN,CAAY,MAAZ,CAAjB;AACA,YAAK,YAAY,aAAa,SAAS,CAAT,CAAb,MAA8B,SAAS,CAAT,CAA3C,IACA,MAAM,KAAN,CAAY,gBAAZ,KAAiC,kBAAkB,KAAlB,CADrC,EAC+D;AAC7D,mBAAO,KAAP,CAD6D,CAC9C;AAChB;AAED,YAAI,WAAJ,EAAiB;AACf,oBAAQ,IAAR,CACI,4CAA0C,KAA1C,GAA+C,qCADnD;AAED;AAED,eAAO,QAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '../application_ref';\nimport {_sanitizeUrl} from './url_sanitizer';\n\n\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nconst COLOR_FNS = '(?:rgb|hsl)a?';\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nconst CSS3_FNS = '(?:calc|attr)';\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nconst SAFE_STYLE_VALUE = new RegExp(\n    `^(${VALUES}|` +\n        `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n        `${FN_ARGS})$`,\n    'g');\n\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n */\nfunction hasBalancedQuotes(value: string) {\n  let outsideSingle = true;\n  let outsideDouble = true;\n  for (let i = 0; i < value.length; i++) {\n    const c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n */\nexport function _sanitizeStyle(value: string): string {\n  value = String(value).trim();  // Make sure it's actually a string.\n  if (!value) return '';\n\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  const urlMatch = value.match(URL_RE);\n  if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n      value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value;  // Safe style values.\n  }\n\n  if (isDevMode()) {\n    console.warn(\n        `WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n\n  return 'unsafe';\n}\n\n\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n */\nexport interface StyleSanitizeFn {\n  /** This mode is designed to instruct whether the property will be used for sanitization\n   * at a later point */\n  (prop: string): boolean;\n  /** This mode is designed to sanitize the provided value */\n  (prop: string, value: string): string;\n}\n"],"sourceRoot":""}