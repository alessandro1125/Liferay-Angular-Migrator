{"version":3,"sources":["../../../../../../../../../../packages/core/src/di/forward_ref.ts"],"names":[],"mappings":";;;;;;;;;AASA,aAAQ,SAAR,QAAwB,SAAxB;AAeA;;;;;;;;;;;;AAYA,WAAM,SAAA,UAAA,CAAqB,YAArB,EAA+C;AAC7C,qBAAc,eAAd,GAAgC,UAAhC;AACA,qBAAc,QAAd,GAAyB,YAAA;AAAa,mBAAO,UAAU,MAAV,CAAP;AAA2B,SAAjE;AACN,eAAwB,YAAxB;AACD;AAED;;;;;;;;;;;;;AAaA,WAAM,SAAA,iBAAA,CAA4B,IAA5B,EAAqC;AACzC,YAAI,OAAO,IAAP,KAAgB,UAAhB,IAA8B,KAAK,cAAL,CAAoB,iBAApB,CAA9B,IACA,KAAK,eAAL,KAAyB,UAD7B,EACyC;AACvC,mBAAsB,MAAtB;AACD,SAHD,MAGO;AACL,mBAAO,IAAP;AACD;AACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @experimental\n */\nexport interface ForwardRefFn { (): any; }\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @experimental\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (<any>forwardRefFn).__forward_ref__ = forwardRef;\n  (<any>forwardRefFn).toString = function() { return stringify(this()); };\n  return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @experimental\n */\nexport function resolveForwardRef(type: any): any {\n  if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n      type.__forward_ref__ === forwardRef) {\n    return (<ForwardRefFn>type)();\n  } else {\n    return type;\n  }\n}\n"],"sourceRoot":""}