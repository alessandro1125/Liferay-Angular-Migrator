{"version":3,"sources":["../../../../../../../../../packages/core/src/application_module.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,eAAR,EAAyB,qBAAzB,QAAqD,oBAArD;AACA,aAAQ,cAAR,QAA6B,mBAA7B;AACA,aAAQ,sBAAR,QAAqC,sBAArC;AACA,aAAQ,eAAR,EAAyB,eAAzB,EAA0C,sBAA1C,EAAkE,sBAAlE,QAA+F,qCAA/F;AACA,aAAQ,OAAR,QAAsB,WAAtB;AACA,aAAwB,QAAxB,QAAuD,MAAvD;AACA,aAAQ,MAAR,EAAgB,QAAhB,EAA0B,QAA1B,QAAyC,eAAzC;AACA,aAAQ,YAAR,QAA2B,iBAA3B;AACA,aAAQ,SAAR,QAAwB,eAAxB;AACA,aAAQ,wBAAR,QAAuC,UAAvC;AACA,aAAQ,QAAR,QAAuB,mBAAvB;AACA,aAAQ,QAAR,QAAuB,YAAvB;AACA,aAAQ,MAAR,QAAqB,QAArB;AAEA,WAAM,SAAA,uBAAA,GAAA;AACJ,eAAO,sBAAP;AACD;AAED,WAAM,SAAA,uBAAA,GAAA;AACJ,eAAO,sBAAP;AACD;AAED,WAAM,SAAA,cAAA,CAAyB,MAAzB,EAAwC;AAC5C,eAAO,UAAU,OAAjB;AACD;AAED;;;;AAIA,WAAO,IAAM,+BAAiD,CAC5D;AACE,iBAAS,cADX;AAEE,kBAAU,cAFZ;AAGE,cACI,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,YAA5B,EAA0C,wBAA1C,EAAoE,qBAApE;AAJN,KAD4D,EAO5D;AACE,iBAAS,qBADX;AAEE,kBAAU,qBAFZ;AAGE,cAAM,CAAC,CAAC,IAAI,QAAJ,EAAD,EAAiB,eAAjB,CAAD;AAHR,KAP4D,EAY5D,EAAC,SAAS,QAAV,EAAoB,UAAU,QAA9B,EAAwC,MAAM,EAA9C,EAZ4D,EAa5D,sBAb4D,EAc5D,EAAC,SAAS,eAAV,EAA2B,YAAY,uBAAvC,EAAgE,MAAM,EAAtE,EAd4D,EAe5D,EAAC,SAAS,eAAV,EAA2B,YAAY,uBAAvC,EAAgE,MAAM,EAAtE,EAf4D,EAgB5D;AACE,iBAAS,SADX;AAEE,oBAAY,cAFd;AAGE,cAAM,CAAC,CAAC,IAAI,MAAJ,CAAW,SAAX,CAAD,EAAwB,IAAI,QAAJ,EAAxB,EAAwC,IAAI,QAAJ,EAAxC,CAAD;AAHR,KAhB4D,CAAvD;AAuBP;;;;;;;;;;AAWA,QAAA,oBAAA,aAAA,YAAA;AACE;AACA,iBAAA,iBAAA,CAAY,MAAZ,EAAkC,CAAI;AAF3B,4BAAiB,QAAA,UAAA,CAAA,CAD7B,SAAS,EAAC,WAAW,4BAAZ,EAAT,CAC6B,E,yCAER,c,EAFQ,CAAA,EAAjB,iBAAiB,CAAjB;AAGb,eAAA,iBAAA;AAAC,KAHD,EAAA;aAAa,iB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus} from './application_init';\nimport {ApplicationRef} from './application_ref';\nimport {APP_ID_RANDOM_PROVIDER} from './application_tokens';\nimport {IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers} from './change_detection/change_detection';\nimport {Console} from './console';\nimport {InjectionToken, Injector, StaticProvider} from './di';\nimport {Inject, Optional, SkipSelf} from './di/metadata';\nimport {ErrorHandler} from './error_handler';\nimport {LOCALE_ID} from './i18n/tokens';\nimport {ComponentFactoryResolver} from './linker';\nimport {Compiler} from './linker/compiler';\nimport {NgModule} from './metadata';\nimport {NgZone} from './zone';\n\nexport function _iterableDiffersFactory() {\n  return defaultIterableDiffers;\n}\n\nexport function _keyValueDiffersFactory() {\n  return defaultKeyValueDiffers;\n}\n\nexport function _localeFactory(locale?: string): string {\n  return locale || 'en-US';\n}\n\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport const APPLICATION_MODULE_PROVIDERS: StaticProvider[] = [\n  {\n    provide: ApplicationRef,\n    useClass: ApplicationRef,\n    deps:\n        [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n  },\n  {\n    provide: ApplicationInitStatus,\n    useClass: ApplicationInitStatus,\n    deps: [[new Optional(), APP_INITIALIZER]]\n  },\n  {provide: Compiler, useClass: Compiler, deps: []},\n  APP_ID_RANDOM_PROVIDER,\n  {provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: []},\n  {provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: []},\n  {\n    provide: LOCALE_ID,\n    useFactory: _localeFactory,\n    deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n  },\n];\n\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @experimental\n */\n@NgModule({providers: APPLICATION_MODULE_PROVIDERS})\nexport class ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  constructor(appRef: ApplicationRef) {}\n}\n"],"sourceRoot":""}