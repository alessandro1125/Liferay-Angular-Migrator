{"version":3,"sources":["../../../../../../../../../packages/core/src/error_handler.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,oBAAR,EAA8B,eAA9B,EAA+C,cAA/C,EAA+D,gBAA/D,QAAsF,UAAtF;AAIA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,QAAA,eAAA,aAAA,YAAA;AAAA,iBAAA,YAAA,GAAA;AACE;;;AAGA,iBAAA,QAAA,GAAoB,OAApB;AAqCD;AAnCC,qBAAA,SAAA,CAAA,WAAA,GAAA,UAAY,KAAZ,EAAsB;AACpB,gBAAM,gBAAgB,KAAK,kBAAL,CAAwB,KAAxB,CAAtB;AACA,gBAAM,UAAU,KAAK,YAAL,CAAkB,KAAlB,CAAhB;AACA;AACA;AACA,gBAAM,cAAc,eAAe,KAAf,CAApB;AAEA,wBAAY,KAAK,QAAjB,EAA2B,OAA3B,EAAoC,KAApC;AACA,gBAAI,aAAJ,EAAmB;AACjB,4BAAY,KAAK,QAAjB,EAA2B,gBAA3B,EAA6C,aAA7C;AACD;AACD,gBAAI,OAAJ,EAAa;AACX,4BAAY,KAAK,QAAjB,EAA2B,eAA3B,EAA4C,OAA5C;AACD;AACF,SAdD;AAgBA;AACA,qBAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAAuB;AACrB,gBAAI,KAAJ,EAAW;AACT,uBAAO,gBAAgB,KAAhB,IAAyB,gBAAgB,KAAhB,CAAzB,GACyB,KAAK,YAAL,CAAkB,iBAAiB,KAAjB,CAAlB,CADhC;AAED;AAED,mBAAO,IAAP;AACD,SAPD;AASA;AACA,qBAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,KAAnB,EAA+B;AAC7B,gBAAI,IAAI,iBAAiB,KAAjB,CAAR;AACA,mBAAO,KAAK,iBAAiB,CAAjB,CAAZ,EAAiC;AAC/B,oBAAI,iBAAiB,CAAjB,CAAJ;AACD;AAED,mBAAO,CAAP;AACD,SAPD;AAQF,eAAA,YAAA;AAAC,KAzCD,EAAA;;AA2CA,WAAM,SAAA,YAAA,CAAuB,OAAvB,EAAwC,aAAxC,EAA0D;AAC9D,YAAM,MACC,UAAO,cAAP,IAAsB,yBAAyB,KAAzB,GAAiC,cAAc,OAA/C,GAAwD,aAA9E,CADP;AAEA,YAAM,QAAQ,MAAM,GAAN,CAAd;AACC,cAAc,oBAAd,IAAsC,aAAtC;AACD,eAAO,KAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError} from './errors';\n\n\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    const originalError = this._findOriginalError(error);\n    const context = this._findContext(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    const errorLogger = getErrorLogger(error);\n\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n    if (context) {\n      errorLogger(this._console, 'ERROR CONTEXT', context);\n    }\n  }\n\n  /** @internal */\n  _findContext(error: any): any {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) :\n                                      this._findContext(getOriginalError(error));\n    }\n\n    return null;\n  }\n\n  /** @internal */\n  _findOriginalError(error: Error): any {\n    let e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e;\n  }\n}\n\nexport function wrappedError(message: string, originalError: any): Error {\n  const msg =\n      `${message} caused by: ${originalError instanceof Error ? originalError.message: originalError }`;\n  const error = Error(msg);\n  (error as any)[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n"],"sourceRoot":""}