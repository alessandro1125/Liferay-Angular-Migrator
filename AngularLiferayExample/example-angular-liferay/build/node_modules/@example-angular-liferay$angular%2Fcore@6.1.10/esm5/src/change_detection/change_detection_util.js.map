{"version":3,"sources":["../../../../../../../../../../packages/core/src/change_detection/change_detection_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getSymbolIterator, looseIdentical} from '../util';\n\nexport function devModeEqual(a: any, b: any): boolean {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return looseIdentical(a, b);\n    }\n  }\n}\n\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nexport class WrappedValue {\n  /** @deprecated from 5.3, use `unwrap()` instead - will switch to protected */\n  wrapped: any;\n\n  constructor(value: any) { this.wrapped = value; }\n\n  /** Creates a wrapped value. */\n  static wrap(value: any): WrappedValue { return new WrappedValue(value); }\n\n  /**\n   * Returns the underlying value of a wrapped value.\n   * Returns the given `value` when it is not wrapped.\n   **/\n  static unwrap(value: any): any { return WrappedValue.isWrapped(value) ? value.wrapped : value; }\n\n  /** Returns true if `value` is a wrapped value. */\n  static isWrapped(value: any): value is WrappedValue { return value instanceof WrappedValue; }\n}\n\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nexport class SimpleChange {\n  constructor(public previousValue: any, public currentValue: any, public firstChange: boolean) {}\n\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange(): boolean { return this.firstChange; }\n}\n\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) ||\n      (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n       getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual(\n    a: any, b: any, comparator: (a: any, b: any) => boolean): boolean {\n  const iterator1 = a[getSymbolIterator()]();\n  const iterator2 = b[getSymbolIterator()]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nexport function iterateListLike(obj: any, fn: (p: any) => any) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[getSymbolIterator()]();\n    let item: any;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n"],"sourceRoot":""}