{"version":3,"sources":["../../../../../../../../../../packages/core/src/change_detection/constants.ts"],"names":[],"mappings":";;;;;;;;;AASA;;;;;AAKA,SAAA,IAAY,uBAAZ;AAAA,GAAA,UAAY,uBAAZ,EAAmC;AACjC;;;;;AAKA,4BAAA,wBAAA,QAAA,IAAA,CAAA,IAAA,QAAA;AAEA;;;;AAIA,4BAAA,wBAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AACD,GAbD,EAAY,4BAAA,0BAAuB,EAAvB,CAAZ;AAeA;;;;AAIA,SAAA,IAAY,oBAAZ;AAAA,GAAA,UAAY,oBAAZ,EAAgC;AAC9B;;;;AAIA,yBAAA,qBAAA,WAAA,IAAA,CAAA,IAAA,WAAA;AAEA;;;;AAIA,yBAAA,qBAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AAEA;;;;AAIA,yBAAA,qBAAA,aAAA,IAAA,CAAA,IAAA,aAAA;AAEA;;;;AAIA,yBAAA,qBAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AAEA;;;;;AAKA,yBAAA,qBAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AAEA;;;AAGA,yBAAA,qBAAA,WAAA,IAAA,CAAA,IAAA,WAAA;AACD,GApCD,EAAY,yBAAA,uBAAoB,EAApB,CAAZ;AAsCA;;;;;;;AAOA,SAAM,SAAA,gCAAA,CAA2C,uBAA3C,EAA2F;AAE/F,WAAO,2BAA2B,IAA3B,IACH,4BAA4B,wBAAwB,OADxD;AAED","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n */\nexport enum ChangeDetectionStrategy {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explictly invoked.\n   */\n  OnPush = 0,\n\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default = 1,\n}\n\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nexport enum ChangeDetectorStatus {\n  /**\n   * A state in which, after calling `detectChanges()`, the change detector\n   * state becomes `Checked`, and must be explicitly invoked or reactivated.\n   */\n  CheckOnce,\n\n  /**\n   * A state in which change detection is skipped until the change detector mode\n   * becomes `CheckOnce`.\n   */\n  Checked,\n\n  /**\n   * A state in which change detection continues automatically until explictly\n   * deactivated.\n   */\n  CheckAlways,\n\n  /**\n   * A state in which a change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n  Detached,\n\n  /**\n   * Indicates that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state do not detect changes.\n   */\n  Errored,\n\n  /**\n   * Indicates that the change detector has been destroyed.\n   */\n  Destroyed,\n}\n\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef` \n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy):\n    boolean {\n  return changeDetectionStrategy == null ||\n      changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n"],"sourceRoot":""}