Liferay.Loader.define("@example-angular-liferay$angular/core@6.1.10/esm5/src/change_detection/change_detector_ref", ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Base class for Angular Views, provides change detection functionality.
   * A change-detection tree collects all views that are to be checked for changes.
   * Use the methods to add and remove views from the tree, initiate change-detection,
   * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.
   *
   * @usageNotes
   *
   * The following examples demonstrate how to modify default change-detection behavior
   * to perform explicit detection when needed.
   *
   * ### Use `markForCheck()` with `CheckOnce` strategy
   *
   * The following example sets the `OnPush` change-detection strategy for a component
   * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
   * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).
   *
   * <code-example path="core/ts/change_detect/change-detection.ts"
   * region="mark-for-check"></code-example>
   *
   * ### Detach change detector to limit how often check occurs
   *
   * The following example defines a component with a large list of read-only data
   * that is expected to change constantly, many times per second.
   * To improve performance, we want to check and update the list
   * less often than the changes actually occur. To do that, we detach
   * the component's change detector and perform an explicit local check every five seconds.
   *
   * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
   *
   *
   * ### Reattaching a detached component
   *
   * The following example creates a component displaying live data.
   * The component detaches its change detector from the main change detector tree
   * when the `live` property is set to false, and reattaches it when the property
   * becomes true.
   *
   * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
   *
   */
  var ChangeDetectorRef = /** @class */function () {
    function ChangeDetectorRef() {}
    return ChangeDetectorRef;
  }();
  export { ChangeDetectorRef };
});
//# sourceMappingURL=change_detector_ref.js.map