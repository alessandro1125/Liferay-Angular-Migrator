{"version":3,"sources":["../../../../../../../../../../../packages/core/src/change_detection/differs/default_iterable_differ.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {looseIdentical, stringify} from '../../util';\nimport {isListLikeIterable, iterateListLike} from '../change_detection_util';\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\n\n\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\n  constructor() {}\n  supports(obj: Object|null|undefined): boolean { return isListLikeIterable(obj); }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn);\n  }\n}\n\nconst trackByIdentity = (index: number, item: any) => item;\n\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n  public readonly length: number = 0;\n  // TODO(issue/24571): remove '!'.\n  public readonly collection !: V[] | Iterable<V>| null;\n  // Keeps track of the used records at any point in time (during & across `_check()` calls)\n  private _linkedRecords: _DuplicateMap<V>|null = null;\n  // Keeps track of the removed records at any point in time during `_check()` calls.\n  private _unlinkedRecords: _DuplicateMap<V>|null = null;\n  private _previousItHead: IterableChangeRecord_<V>|null = null;\n  private _itHead: IterableChangeRecord_<V>|null = null;\n  private _itTail: IterableChangeRecord_<V>|null = null;\n  private _additionsHead: IterableChangeRecord_<V>|null = null;\n  private _additionsTail: IterableChangeRecord_<V>|null = null;\n  private _movesHead: IterableChangeRecord_<V>|null = null;\n  private _movesTail: IterableChangeRecord_<V>|null = null;\n  private _removalsHead: IterableChangeRecord_<V>|null = null;\n  private _removalsTail: IterableChangeRecord_<V>|null = null;\n  // Keeps track of records where custom track by is the same, but item identity has changed\n  private _identityChangesHead: IterableChangeRecord_<V>|null = null;\n  private _identityChangesTail: IterableChangeRecord_<V>|null = null;\n  private _trackByFn: TrackByFunction<V>;\n\n  constructor(trackByFn?: TrackByFunction<V>) { this._trackByFn = trackByFn || trackByIdentity; }\n\n  forEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachOperation(\n      fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>\n          void) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets: number[]|null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record: IterableChangeRecord<V> = !nextRemove ||\n              nextIt &&\n                  nextIt.currentIndex ! <\n                      getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n          nextIt ! :\n          nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt !._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex ! - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n\n  forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n\n  diff(collection: NgIterable<V>): DefaultIterableDiffer<V>|null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(\n          `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n\n  onDestroy() {}\n\n  check(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let record: IterableChangeRecord_<V>|null = this._itHead;\n    let mayBeDirty: boolean = false;\n    let index: number;\n    let item: V;\n    let itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      (this as{length: number}).length = collection.length;\n\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      (this as{length: number}).length = index;\n    }\n\n    this._truncate(record);\n    (this as{collection: V[] | Iterable<V>}).collection = collection;\n    return this.isDirty;\n  }\n\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record: IterableChangeRecord_<V>|null;\n      let nextRecord: IterableChangeRecord_<V>|null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let previousRecord: IterableChangeRecord_<V>|null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let reinsertRecord: IterableChangeRecord_<V>|null =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev !, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record: IterableChangeRecord_<V>|null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord: IterableChangeRecord_<V>|null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n\n  /** @internal */\n  _reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _moveAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _addAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const next: IterableChangeRecord_<V>|null =\n        prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n\n  /** @internal */\n  _remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n\n  /** @internal */\n  _unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const prev = record._prev;\n    const next = record._next;\n\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n\n  /** @internal */\n  _addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n\n  private _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\n\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number|null = null;\n  previousIndex: number|null = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V>|null = null;\n\n\n  constructor(public item: V, public trackById: any) {}\n}\n\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V>|null = null;\n\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail !._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex !) &&\n          looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record: IterableChangeRecord_<V>): boolean {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const prev: IterableChangeRecord_<V>|null = record._prevDup;\n    const next: IterableChangeRecord_<V>|null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n\n  put(record: IterableChangeRecord_<V>) {\n    const key = record.trackById;\n\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const key = record.trackById;\n    const recordList: _DuplicateItemRecordList<V> = this.map.get(key) !;\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n\n  get isEmpty(): boolean { return this.map.size === 0; }\n\n  clear() { this.map.clear(); }\n}\n\nfunction getPreviousIndex(\n    item: any, addRemoveOffset: number, moveOffsets: number[] | null): number {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n"],"sourceRoot":""}