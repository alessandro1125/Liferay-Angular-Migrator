{"version":3,"sources":["../../../../../../../../../../packages/core/src/view/errors.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,mBAAR,EAA6B,YAA7B,EAA2C,eAA3C,QAAiE,WAAjE;AAGA,WAAM,SAAA,2CAAA,CACF,OADE,EACqB,QADrB,EACoC,SADpC,EACoD,YADpD,EACyE;AAC7E,YAAI,MACA,gHAA8G,QAA9G,GAAsH,qBAAtH,GAA4I,SAA5I,GAAqJ,IADzJ;AAEA,YAAI,YAAJ,EAAkB;AAChB,mBACI,wGACA,mDAFJ;AAGD;AACD,eAAO,eAAe,GAAf,EAAoB,OAApB,CAAP;AACD;AAED,WAAM,SAAA,qBAAA,CAAgC,GAAhC,EAA0C,OAA1C,EAA+D;AACnE,YAAI,EAAE,eAAe,KAAjB,CAAJ,EAA6B;AAC3B;AACA;AACA,kBAAM,IAAI,KAAJ,CAAU,IAAI,QAAJ,EAAV,CAAN;AACD;AACD,yBAAiB,GAAjB,EAAsB,OAAtB;AACA,eAAO,GAAP;AACD;AAED,WAAM,SAAA,cAAA,CAAyB,GAAzB,EAAsC,OAAtC,EAA2D;AAC/D,YAAM,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAZ;AACA,yBAAiB,GAAjB,EAAsB,OAAtB;AACA,eAAO,GAAP;AACD;AAED,aAAA,gBAAA,CAA0B,GAA1B,EAAsC,OAAtC,EAA2D;AACxD,YAAY,mBAAZ,IAAmC,OAAnC;AACA,YAAY,YAAZ,IAA4B,QAAQ,QAAR,CAAiB,IAAjB,CAAsB,OAAtB,CAA5B;AACF;AAED,WAAM,SAAA,gBAAA,CAA2B,GAA3B,EAAqC;AACzC,eAAO,CAAC,CAAC,gBAAgB,GAAhB,CAAT;AACD;AAED,WAAM,SAAA,kBAAA,CAA6B,MAA7B,EAA2C;AAC/C,eAAO,IAAI,KAAJ,CAAU,0DAAwD,MAAlE,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext} from '../errors';\nimport {DebugContext, ViewState} from './types';\n\nexport function expressionChangedAfterItHasBeenCheckedError(\n    context: DebugContext, oldValue: any, currValue: any, isFirstCheck: boolean): Error {\n  let msg =\n      `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (isFirstCheck) {\n    msg +=\n        ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n        ` Has it been created in a change detection hook ?`;\n  }\n  return viewDebugError(msg, context);\n}\n\nexport function viewWrappedDebugError(err: any, context: DebugContext): Error {\n  if (!(err instanceof Error)) {\n    // errors that are not Error instances don't have a stack,\n    // so it is ok to wrap them into a new Error object...\n    err = new Error(err.toString());\n  }\n  _addDebugContext(err, context);\n  return err;\n}\n\nexport function viewDebugError(msg: string, context: DebugContext): Error {\n  const err = new Error(msg);\n  _addDebugContext(err, context);\n  return err;\n}\n\nfunction _addDebugContext(err: Error, context: DebugContext) {\n  (err as any)[ERROR_DEBUG_CONTEXT] = context;\n  (err as any)[ERROR_LOGGER] = context.logError.bind(context);\n}\n\nexport function isViewDebugError(err: Error): boolean {\n  return !!getDebugContext(err);\n}\n\nexport function viewDestroyedError(action: string): Error {\n  return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n"],"sourceRoot":""}