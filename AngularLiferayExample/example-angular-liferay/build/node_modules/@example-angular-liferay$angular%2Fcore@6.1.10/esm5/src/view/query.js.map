{"version":3,"sources":["../../../../../../../../../../packages/core/src/view/query.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '../linker/element_ref';\nimport {QueryList} from '../linker/query_list';\n\nimport {NodeDef, NodeFlags, QueryBindingDef, QueryBindingType, QueryDef, QueryValueType, ViewData, asElementData, asProviderData, asQueryList} from './types';\nimport {declaredViewContainer, filterQueryId, isEmbeddedView} from './util';\n\nexport function queryDef(\n    flags: NodeFlags, id: number, bindings: {[propName: string]: QueryBindingType}): NodeDef {\n  let bindingDefs: QueryBindingDef[] = [];\n  for (let propName in bindings) {\n    const bindingType = bindings[propName];\n    bindingDefs.push({propName, bindingType});\n  }\n\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    // TODO(vicb): check\n    checkIndex: -1, flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    ngContentIndex: -1,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    childCount: 0,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: {id, filterId: filterQueryId(id), bindings: bindingDefs},\n    ngContent: null\n  };\n}\n\nexport function createQuery(): QueryList<any> {\n  return new QueryList();\n}\n\nexport function dirtyParentQueries(view: ViewData) {\n  const queryIds = view.def.nodeMatchedQueries;\n  while (view.parent && isEmbeddedView(view)) {\n    let tplDef = view.parentNodeDef !;\n    view = view.parent;\n    // content queries\n    const end = tplDef.nodeIndex + tplDef.childCount;\n    for (let i = 0; i <= end; i++) {\n      const nodeDef = view.def.nodes[i];\n      if ((nodeDef.flags & NodeFlags.TypeContentQuery) &&\n          (nodeDef.flags & NodeFlags.DynamicQuery) &&\n          (nodeDef.query !.filterId & queryIds) === nodeDef.query !.filterId) {\n        asQueryList(view, i).setDirty();\n      }\n      if ((nodeDef.flags & NodeFlags.TypeElement && i + nodeDef.childCount < tplDef.nodeIndex) ||\n          !(nodeDef.childFlags & NodeFlags.TypeContentQuery) ||\n          !(nodeDef.childFlags & NodeFlags.DynamicQuery)) {\n        // skip elements that don't contain the template element or no query.\n        i += nodeDef.childCount;\n      }\n    }\n  }\n\n  // view queries\n  if (view.def.nodeFlags & NodeFlags.TypeViewQuery) {\n    for (let i = 0; i < view.def.nodes.length; i++) {\n      const nodeDef = view.def.nodes[i];\n      if ((nodeDef.flags & NodeFlags.TypeViewQuery) && (nodeDef.flags & NodeFlags.DynamicQuery)) {\n        asQueryList(view, i).setDirty();\n      }\n      // only visit the root nodes\n      i += nodeDef.childCount;\n    }\n  }\n}\n\nexport function checkAndUpdateQuery(view: ViewData, nodeDef: NodeDef) {\n  const queryList = asQueryList(view, nodeDef.nodeIndex);\n  if (!queryList.dirty) {\n    return;\n  }\n  let directiveInstance: any;\n  let newValues: any[] = undefined !;\n  if (nodeDef.flags & NodeFlags.TypeContentQuery) {\n    const elementDef = nodeDef.parent !.parent !;\n    newValues = calcQueryValues(\n        view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query !,\n        []);\n    directiveInstance = asProviderData(view, nodeDef.parent !.nodeIndex).instance;\n  } else if (nodeDef.flags & NodeFlags.TypeViewQuery) {\n    newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query !, []);\n    directiveInstance = view.component;\n  }\n  queryList.reset(newValues);\n  const bindings = nodeDef.query !.bindings;\n  let notify = false;\n  for (let i = 0; i < bindings.length; i++) {\n    const binding = bindings[i];\n    let boundValue: any;\n    switch (binding.bindingType) {\n      case QueryBindingType.First:\n        boundValue = queryList.first;\n        break;\n      case QueryBindingType.All:\n        boundValue = queryList;\n        notify = true;\n        break;\n    }\n    directiveInstance[binding.propName] = boundValue;\n  }\n  if (notify) {\n    queryList.notifyOnChanges();\n  }\n}\n\nfunction calcQueryValues(\n    view: ViewData, startIndex: number, endIndex: number, queryDef: QueryDef,\n    values: any[]): any[] {\n  for (let i = startIndex; i <= endIndex; i++) {\n    const nodeDef = view.def.nodes[i];\n    const valueType = nodeDef.matchedQueries[queryDef.id];\n    if (valueType != null) {\n      values.push(getQueryValue(view, nodeDef, valueType));\n    }\n    if (nodeDef.flags & NodeFlags.TypeElement && nodeDef.element !.template &&\n        (nodeDef.element !.template !.nodeMatchedQueries & queryDef.filterId) ===\n            queryDef.filterId) {\n      const elementData = asElementData(view, i);\n      // check embedded views that were attached at the place of their template,\n      // but process child nodes first if some match the query (see issue #16568)\n      if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n        calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n        i += nodeDef.childCount;\n      }\n      if (nodeDef.flags & NodeFlags.EmbeddedViews) {\n        const embeddedViews = elementData.viewContainer !._embeddedViews;\n        for (let k = 0; k < embeddedViews.length; k++) {\n          const embeddedView = embeddedViews[k];\n          const dvc = declaredViewContainer(embeddedView);\n          if (dvc && dvc === elementData) {\n            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n          }\n        }\n      }\n      const projectedViews = elementData.template._projectedViews;\n      if (projectedViews) {\n        for (let k = 0; k < projectedViews.length; k++) {\n          const projectedView = projectedViews[k];\n          calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n        }\n      }\n    }\n    if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n      // if no child matches the query, skip the children.\n      i += nodeDef.childCount;\n    }\n  }\n  return values;\n}\n\nexport function getQueryValue(\n    view: ViewData, nodeDef: NodeDef, queryValueType: QueryValueType): any {\n  if (queryValueType != null) {\n    // a match\n    switch (queryValueType) {\n      case QueryValueType.RenderElement:\n        return asElementData(view, nodeDef.nodeIndex).renderElement;\n      case QueryValueType.ElementRef:\n        return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n      case QueryValueType.TemplateRef:\n        return asElementData(view, nodeDef.nodeIndex).template;\n      case QueryValueType.ViewContainerRef:\n        return asElementData(view, nodeDef.nodeIndex).viewContainer;\n      case QueryValueType.Provider:\n        return asProviderData(view, nodeDef.nodeIndex).instance;\n    }\n  }\n}\n"],"sourceRoot":""}