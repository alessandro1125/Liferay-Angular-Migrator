Liferay.Loader.define('@example-angular-liferay$angular/core@6.1.10/esm5/src/metadata/ng_module', ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  import * as tslib_1 from "tslib";
  import { defineInjector } from '../di/defs';
  import { convertInjectableProviderToFactory } from '../di/injectable';
  import { R3_COMPILE_NGMODULE } from '../ivy_switch';
  import { makeDecorator } from '../util/decorators';
  /**
   * Defines a schema that allows an NgModule to contain the following:
   * - Non-Angular elements named with dash case (`-`).
   * - Element properties named with dash case (`-`).
   * Dash case is the naming convention for custom elements.
   *
   *
   */
  export var CUSTOM_ELEMENTS_SCHEMA = {
    name: 'custom-elements'
  };
  /**
   * Defines a schema that allows any property on any element.
   *
   * @experimental
   */
  export var NO_ERRORS_SCHEMA = {
    name: 'no-errors-schema'
  };
  function preR3NgModuleCompile(moduleType, metadata) {
    var imports = metadata && metadata.imports || [];
    if (metadata && metadata.exports) {
      imports = tslib_1.__spread(imports, [metadata.exports]);
    }
    moduleType.ngInjectorDef = defineInjector({
      factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),
      providers: metadata && metadata.providers,
      imports: imports
    });
  }
  /**
   * @Annotation
   */
  export var NgModule = makeDecorator('NgModule', function (ngModule) {
    return ngModule;
  }, undefined, undefined,
  /**
   * Decorator that marks the following class as an NgModule, and supplies
   * configuration metadata for it.
   *
   * * The `declarations` and `entryComponents` options configure the compiler
   * with information about what belongs to the NgModule.
   * * The `providers` options configures the NgModule's injector to provide
   * dependencies the NgModule members.
   * * The `imports` and `exports` options bring in members from other modules, and make
   * this module's members available to others.
   */
  function (type, meta) {
    return (R3_COMPILE_NGMODULE || preR3NgModuleCompile)(type, meta);
  });
});
//# sourceMappingURL=ng_module.js.map