{"version":3,"sources":["../../../../../../../../../../packages/core/src/render3/assert.ts"],"names":[],"mappings":";;;;;;;;;AAQA;AACA;AACA;AAEA,WAAM,SAAA,YAAA,CAAuB,MAAvB,EAAoC,GAApC,EAA+C;AACnD,YAAI,OAAO,MAAP,IAAiB,QAArB,EAA+B;AAC7B,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,WAAA,CAAyB,MAAzB,EAAoC,QAApC,EAAiD,GAAjD,EAA4D;AAChE,YAAI,UAAU,QAAd,EAAwB;AACtB,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,cAAA,CAA4B,MAA5B,EAAuC,QAAvC,EAAoD,GAApD,EAA+D;AACnE,YAAI,UAAU,QAAd,EAAwB;AACtB,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,UAAA,CAAwB,MAAxB,EAAmC,QAAnC,EAAgD,GAAhD,EAA2D;AAC/D,YAAI,WAAW,QAAf,EAAyB;AACvB,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,cAAA,CAA4B,MAA5B,EAAuC,QAAvC,EAAoD,GAApD,EAA+D;AACnE,YAAI,UAAU,QAAd,EAAwB;AACtB,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,iBAAA,CAA+B,MAA/B,EAA0C,QAA1C,EAAuD,GAAvD,EAAkE;AACtE,YAAI,UAAU,QAAd,EAAwB;AACtB,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,gBAAA,CAA8B,MAA9B,EAAyC,GAAzC,EAAoD;AACxD,YAAI,UAAU,IAAd,EAAoB;AAClB,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,aAAA,CAA2B,MAA3B,EAAsC,GAAtC,EAAiD;AACrD,YAAI,UAAU,IAAd,EAAoB;AAClB,uBAAW,GAAX;AACD;AACF;AAED,WAAM,SAAA,mBAAA,CACF,MADE,EAEF,GAFE,EAGsF;AADxF,YAAA,QAAA,KAAA,CAAA,EAAA;AAAA,kBAAA,oFAAA;AACwF;AAC1F,YAAI,CAAC,OAAO,cAAZ,EAA4B;AAC1B;AACA,uBAAW,GAAX;AACD;AACF;AAED,aAAA,UAAA,CAAoB,GAApB,EAA+B;AAC7B,iBAD6B,CAClB;AACX,cAAM,IAAI,KAAJ,CAAU,sBAAoB,GAA9B,CAAN;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n\nexport function assertNumber(actual: any, msg: string) {\n  if (typeof actual != 'number') {\n    throwError(msg);\n  }\n}\n\nexport function assertEqual<T>(actual: T, expected: T, msg: string) {\n  if (actual != expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertNotEqual<T>(actual: T, expected: T, msg: string) {\n  if (actual == expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertSame<T>(actual: T, expected: T, msg: string) {\n  if (actual !== expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertLessThan<T>(actual: T, expected: T, msg: string) {\n  if (actual >= expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertGreaterThan<T>(actual: T, expected: T, msg: string) {\n  if (actual <= expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertNotDefined<T>(actual: T, msg: string) {\n  if (actual != null) {\n    throwError(msg);\n  }\n}\n\nexport function assertDefined<T>(actual: T, msg: string) {\n  if (actual == null) {\n    throwError(msg);\n  }\n}\n\nexport function assertComponentType(\n    actual: any,\n    msg: string =\n        'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n  if (!actual.ngComponentDef) {\n    debugger;\n    throwError(msg);\n  }\n}\n\nfunction throwError(msg: string): never {\n  debugger;  // Left intentionally for better debugger experience.\n  throw new Error(`ASSERTION ERROR: ${msg}`);\n}\n"],"sourceRoot":""}