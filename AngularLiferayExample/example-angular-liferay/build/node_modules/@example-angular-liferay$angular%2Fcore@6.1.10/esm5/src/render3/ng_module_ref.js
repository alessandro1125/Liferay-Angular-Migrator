Liferay.Loader.define('@example-angular-liferay$angular/core@6.1.10/esm5/src/render3/ng_module_ref', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { createInjector } from '../di/r3_injector';
    import { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';
    import { NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';
    import { stringify } from '../util';
    import { assertDefined } from './assert';
    import { ComponentFactoryResolver } from './component_ref';
    export var COMPONENT_FACTORY_RESOLVER = {
        provide: viewEngine_ComponentFactoryResolver,
        useFactory: function () {
            return new ComponentFactoryResolver();
        },
        deps: []
    };
    var NgModuleRef = /** @class */function (_super) {
        tslib_1.__extends(NgModuleRef, _super);
        function NgModuleRef(ngModuleType, parentInjector) {
            var _this = _super.call(this) || this;
            // tslint:disable-next-line:require-internal-with-underscore
            _this._bootstrapComponents = [];
            _this.destroyCbs = [];
            var ngModuleDef = ngModuleType.ngModuleDef;
            ngDevMode && assertDefined(ngModuleDef, "NgModule '" + stringify(ngModuleType) + "' is not a subtype of 'NgModuleType'.");
            _this._bootstrapComponents = ngModuleDef.bootstrap;
            var additionalProviders = [COMPONENT_FACTORY_RESOLVER, {
                provide: viewEngine_NgModuleRef,
                useValue: _this
            }];
            _this.injector = createInjector(ngModuleType, parentInjector, additionalProviders);
            _this.instance = _this.injector.get(ngModuleType);
            _this.componentFactoryResolver = new ComponentFactoryResolver();
            return _this;
        }
        NgModuleRef.prototype.destroy = function () {
            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
            this.destroyCbs.forEach(function (fn) {
                return fn();
            });
            this.destroyCbs = null;
        };
        NgModuleRef.prototype.onDestroy = function (callback) {
            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
            this.destroyCbs.push(callback);
        };
        return NgModuleRef;
    }(viewEngine_NgModuleRef);
    export { NgModuleRef };
    var NgModuleFactory = /** @class */function (_super) {
        tslib_1.__extends(NgModuleFactory, _super);
        function NgModuleFactory(moduleType) {
            var _this = _super.call(this) || this;
            _this.moduleType = moduleType;
            return _this;
        }
        NgModuleFactory.prototype.create = function (parentInjector) {
            return new NgModuleRef(this.moduleType, parentInjector);
        };
        return NgModuleFactory;
    }(viewEngine_NgModuleFactory);
    export { NgModuleFactory };
});
//# sourceMappingURL=ng_module_ref.js.map