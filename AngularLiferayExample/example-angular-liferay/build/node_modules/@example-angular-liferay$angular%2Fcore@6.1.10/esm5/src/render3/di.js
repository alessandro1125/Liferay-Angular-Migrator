Liferay.Loader.define('@example-angular-liferay$angular/core@6.1.10/esm5/src/render3/di', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { inject, setCurrentInjector } from '../di/injector';
    import { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';
    import { assertDefined, assertGreaterThan, assertLessThan } from './assert';
    import { ComponentFactoryResolver } from './component_ref';
    import { addToViewTree, assertPreviousIsParent, createEmbeddedViewNode, createLContainer, createLNodeObject, createTNode, getPreviousOrParentNode, getRenderer, isComponent, renderEmbeddedTemplate, resolveDirective } from './instructions';
    import { VIEWS } from './interfaces/container';
    import { DIRECTIVES, HOST_NODE, INJECTOR, QUERIES, RENDERER, TVIEW } from './interfaces/view';
    import { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';
    import { addRemoveViewFromContainer, appendChild, detachView, getChildLNode, getParentLNode, insertView, removeView } from './node_manipulation';
    import { stringify } from './util';
    import { ViewRef } from './view_ref';
    /**
     * If a directive is diPublic, bloomAdd sets a property on the instance with this constant as
     * the key and the directive's unique ID as the value. This allows us to map directives to their
     * bloom filter bit for DI.
     */
    var NG_ELEMENT_ID = '__NG_ELEMENT_ID__';
    /**
     * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
     * directives that will share slots, and thus, the fewer false positives when checking for
     * the existence of a directive.
     */
    var BLOOM_SIZE = 256;
    /** Counter used to generate unique IDs for directives. */
    var nextNgElementId = 0;
    /**
     * Registers this directive as present in its node's injector by flipping the directive's
     * corresponding bit in the injector's bloom filter.
     *
     * @param injector The node injector in which the directive should be registered
     * @param type The directive to register
     */
    export function bloomAdd(injector, type) {
        var id = type[NG_ELEMENT_ID];
        // Set a unique ID on the directive type, so if something tries to inject the directive,
        // we can easily retrieve the ID and hash it into the bloom bit that should be checked.
        if (id == null) {
            id = type[NG_ELEMENT_ID] = nextNgElementId++;
        }
        // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
        // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.
        // This means that after 255, some directives will share slots, leading to some false positives
        // when checking for a directive's presence.
        var bloomBit = id % BLOOM_SIZE;
        // Create a mask that targets the specific bit associated with the directive.
        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
        // to bit positions 0 - 31 in a 32 bit integer.
        var mask = 1 << bloomBit;
        // Use the raw bloomBit number to determine which bloom filter bucket we should check
        // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc
        if (bloomBit < 128) {
            // Then use the mask to flip on the bit (0-31) associated with the directive in that bucket
            bloomBit < 64 ? bloomBit < 32 ? injector.bf0 |= mask : injector.bf1 |= mask : bloomBit < 96 ? injector.bf2 |= mask : injector.bf3 |= mask;
        } else {
            bloomBit < 192 ? bloomBit < 160 ? injector.bf4 |= mask : injector.bf5 |= mask : bloomBit < 224 ? injector.bf6 |= mask : injector.bf7 |= mask;
        }
    }
    export function getOrCreateNodeInjector() {
        ngDevMode && assertPreviousIsParent();
        return getOrCreateNodeInjectorForNode(getPreviousOrParentNode());
    }
    /**
     * Creates (or gets an existing) injector for a given element or container.
     *
     * @param node for which an injector should be retrieved / created.
     * @returns Node injector
     */
    export function getOrCreateNodeInjectorForNode(node) {
        var nodeInjector = node.nodeInjector;
        var parent = getParentLNode(node);
        var parentInjector = parent && parent.nodeInjector;
        if (nodeInjector != parentInjector) {
            return nodeInjector;
        }
        return node.nodeInjector = {
            parent: parentInjector,
            node: node,
            bf0: 0,
            bf1: 0,
            bf2: 0,
            bf3: 0,
            bf4: 0,
            bf5: 0,
            bf6: 0,
            bf7: 0,
            cbf0: parentInjector == null ? 0 : parentInjector.cbf0 | parentInjector.bf0,
            cbf1: parentInjector == null ? 0 : parentInjector.cbf1 | parentInjector.bf1,
            cbf2: parentInjector == null ? 0 : parentInjector.cbf2 | parentInjector.bf2,
            cbf3: parentInjector == null ? 0 : parentInjector.cbf3 | parentInjector.bf3,
            cbf4: parentInjector == null ? 0 : parentInjector.cbf4 | parentInjector.bf4,
            cbf5: parentInjector == null ? 0 : parentInjector.cbf5 | parentInjector.bf5,
            cbf6: parentInjector == null ? 0 : parentInjector.cbf6 | parentInjector.bf6,
            cbf7: parentInjector == null ? 0 : parentInjector.cbf7 | parentInjector.bf7,
            templateRef: null,
            viewContainerRef: null,
            elementRef: null,
            changeDetectorRef: null
        };
    }
    /**
     * Makes a directive public to the DI system by adding it to an injector's bloom filter.
     *
     * @param di The node injector in which a directive will be added
     * @param def The definition of the directive to be made public
     */
    export function diPublicInInjector(di, def) {
        bloomAdd(di, def.type);
    }
    /**
     * Makes a directive public to the DI system by adding it to an injector's bloom filter.
     *
     * @param def The definition of the directive to be made public
     */
    export function diPublic(def) {
        diPublicInInjector(getOrCreateNodeInjector(), def);
    }
    export function directiveInject(token, flags) {
        if (flags === void 0) {
            flags = 0 /* Default */;
        }
        return getOrCreateInjectable(getOrCreateNodeInjector(), token, flags);
    }
    /**
     * Creates an ElementRef and stores it on the injector.
     * Or, if the ElementRef already exists, retrieves the existing ElementRef.
     *
     * @returns The ElementRef instance to use
     */
    export function injectElementRef() {
        return getOrCreateElementRef(getOrCreateNodeInjector());
    }
    /**
     * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already
     * exists, retrieves the existing TemplateRef.
     *
     * @returns The TemplateRef instance to use
     */
    export function injectTemplateRef() {
        return getOrCreateTemplateRef(getOrCreateNodeInjector());
    }
    /**
     * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
     * already exists, retrieves the existing ViewContainerRef.
     *
     * @returns The ViewContainerRef instance to use
     */
    export function injectViewContainerRef() {
        return getOrCreateContainerRef(getOrCreateNodeInjector());
    }
    /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */
    export function injectChangeDetectorRef() {
        return getOrCreateChangeDetectorRef(getOrCreateNodeInjector(), null);
    }
    /**
     * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
     * ComponentFactoryResolver
     * already exists, retrieves the existing ComponentFactoryResolver.
     *
     * @returns The ComponentFactoryResolver instance to use
     */
    export function injectComponentFactoryResolver() {
        return componentFactoryResolver;
    }
    var componentFactoryResolver = new ComponentFactoryResolver();
    /**
     * Inject static attribute value into directive constructor.
     *
     * This method is used with `factory` functions which are generated as part of
     * `defineDirective` or `defineComponent`. The method retrieves the static value
     * of an attribute. (Dynamic attributes are not supported since they are not resolved
     *  at the time of injection and can change over time.)
     *
     * # Example
     * Given:
     * ```
     * @Component(...)
     * class MyComponent {
     *   constructor(@Attribute('title') title: string) { ... }
     * }
     * ```
     * When instantiated with
     * ```
     * <my-component title="Hello"></my-component>
     * ```
     *
     * Then factory method generated is:
     * ```
     * MyComponent.ngComponentDef = defineComponent({
     *   factory: () => new MyComponent(injectAttribute('title'))
     *   ...
     * })
     * ```
     *
     * @experimental
     */
    export function injectAttribute(attrNameToInject) {
        ngDevMode && assertPreviousIsParent();
        var lElement = getPreviousOrParentNode();
        ngDevMode && assertNodeType(lElement, 3 /* Element */);
        var tElement = lElement.tNode;
        ngDevMode && assertDefined(tElement, 'expecting tNode');
        var attrs = tElement.attrs;
        if (attrs) {
            for (var i = 0; i < attrs.length; i = i + 2) {
                var attrName = attrs[i];
                if (attrName === 1 /* SelectOnly */) break;
                if (attrName == attrNameToInject) {
                    return attrs[i + 1];
                }
            }
        }
        return undefined;
    }
    /**
     * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
     * Or, if it already exists, retrieves the existing instance.
     *
     * @returns The ChangeDetectorRef to use
     */
    export function getOrCreateChangeDetectorRef(di, context) {
        if (di.changeDetectorRef) return di.changeDetectorRef;
        var currentNode = di.node;
        if (isComponent(currentNode.tNode)) {
            return di.changeDetectorRef = new ViewRef(currentNode.data, context);
        } else if (currentNode.tNode.type === 3 /* Element */) {
                return di.changeDetectorRef = getOrCreateHostChangeDetector(currentNode.view[HOST_NODE]);
            }
        return null;
    }
    /** Gets or creates ChangeDetectorRef for the closest host component */
    function getOrCreateHostChangeDetector(currentNode) {
        var hostNode = getClosestComponentAncestor(currentNode);
        var hostInjector = hostNode.nodeInjector;
        var existingRef = hostInjector && hostInjector.changeDetectorRef;
        return existingRef ? existingRef : new ViewRef(hostNode.data, hostNode.view[DIRECTIVES][hostNode.tNode.flags >> 14 /* DirectiveStartingIndexShift */]);
    }
    /**
     * If the node is an embedded view, traverses up the view tree to return the closest
     * ancestor view that is attached to a component. If it's already a component node,
     * returns itself.
     */
    function getClosestComponentAncestor(node) {
        while (node.tNode.type === 2 /* View */) {
            node = node.view[HOST_NODE];
        }
        return node;
    }
    /**
     * Searches for an instance of the given directive type up the injector tree and returns
     * that instance if found.
     *
     * Specifically, it gets the bloom filter bit associated with the directive (see bloomHashBit),
     * checks that bit against the bloom filter structure to identify an injector that might have
     * the directive (see bloomFindPossibleInjector), then searches the directives on that injector
     * for a match.
     *
     * If not found, it will propagate up to the next parent injector until the token
     * is found or the top is reached.
     *
     * @param di Node injector where the search should start
     * @param token The directive type to search for
     * @param flags Injection flags (e.g. CheckParent)
     * @returns The instance found
     */
    export function getOrCreateInjectable(di, token, flags) {
        if (flags === void 0) {
            flags = 0 /* Default */;
        }
        var bloomHash = bloomHashBit(token);
        // If the token has a bloom hash, then it is a directive that is public to the injection system
        // (diPublic). If there is no hash, fall back to the module injector.
        if (bloomHash === null) {
            var moduleInjector = getPreviousOrParentNode().view[INJECTOR];
            var formerInjector = setCurrentInjector(moduleInjector);
            try {
                return inject(token, flags);
            } finally {
                setCurrentInjector(formerInjector);
            }
        } else {
            var injector = di;
            while (injector) {
                // Get the closest potential matching injector (upwards in the injector tree) that
                // *potentially* has the token.
                injector = bloomFindPossibleInjector(injector, bloomHash, flags);
                // If no injector is found, we *know* that there is no ancestor injector that contains the
                // token, so we abort.
                if (!injector) {
                    break;
                }
                // At this point, we have an injector which *may* contain the token, so we step through the
                // directives associated with the injector's corresponding node to get the directive instance.
                var node = injector.node;
                var nodeFlags = node.tNode.flags;
                var count = nodeFlags & 4095 /* DirectiveCountMask */;
                if (count !== 0) {
                    var start = nodeFlags >> 14 /* DirectiveStartingIndexShift */;
                    var end = start + count;
                    var defs = node.view[TVIEW].directives;
                    for (var i = start; i < end; i++) {
                        // Get the definition for the directive at this index and, if it is injectable (diPublic),
                        // and matches the given token, return the directive instance.
                        var directiveDef = defs[i];
                        if (directiveDef.type === token && directiveDef.diPublic) {
                            return node.view[DIRECTIVES][i];
                        }
                    }
                }
                // If we *didn't* find the directive for the token and we are searching the current node's
                // injector, it's possible the directive is on this node and hasn't been created yet.
                var instance = void 0;
                if (injector === di && (instance = searchMatchesQueuedForCreation(node, token))) {
                    return instance;
                }
                // The def wasn't found anywhere on this node, so it was a false positive.
                // If flags permit, traverse up the tree and continue searching.
                if (flags & 2 /* Self */ || flags & 1 /* Host */ && !sameHostView(injector)) {
                    injector = null;
                } else {
                    injector = injector.parent;
                }
            }
        }
        // No directive was found for the given token.
        if (flags & 8 /* Optional */) return null;
        throw new Error("Injector: NOT_FOUND [" + stringify(token) + "]");
    }
    function searchMatchesQueuedForCreation(node, token) {
        var matches = node.view[TVIEW].currentMatches;
        if (matches) {
            for (var i = 0; i < matches.length; i += 2) {
                var def = matches[i];
                if (def.type === token) {
                    return resolveDirective(def, i + 1, matches, node.view[TVIEW]);
                }
            }
        }
        return null;
    }
    /**
     * Given a directive type, this function returns the bit in an injector's bloom filter
     * that should be used to determine whether or not the directive is present.
     *
     * When the directive was added to the bloom filter, it was given a unique ID that can be
     * retrieved on the class. Since there are only BLOOM_SIZE slots per bloom filter, the directive's
     * ID must be modulo-ed by BLOOM_SIZE to get the correct bloom bit (directives share slots after
     * BLOOM_SIZE is reached).
     *
     * @param type The directive type
     * @returns The bloom bit to check for the directive
     */
    function bloomHashBit(type) {
        var id = type[NG_ELEMENT_ID];
        return typeof id === 'number' ? id % BLOOM_SIZE : null;
    }
    /**
     * Finds the closest injector that might have a certain directive.
     *
     * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to
     * check and a starting injector, this function traverses up injectors until it finds an
     * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the
     * injector may have that directive. It only *may* have the directive because directives begin
     * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a
     * different directive sharing the bit.
     *
     * Note: We can skip checking further injectors up the tree if an injector's cbf structure
     * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent
     * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain
     * the directive and do not need to be checked.
     *
     * @param injector The starting node injector to check
     * @param  bloomBit The bit to check in each injector's bloom filter
     * @param  flags The injection flags for this injection site (e.g. Optional or SkipSelf)
     * @returns An injector that might have the directive
     */
    export function bloomFindPossibleInjector(startInjector, bloomBit, flags) {
        // Create a mask that targets the specific bit associated with the directive we're looking for.
        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
        // to bit positions 0 - 31 in a 32 bit integer.
        var mask = 1 << bloomBit;
        // Traverse up the injector tree until we find a potential match or until we know there *isn't* a
        // match.
        var injector = flags & 4 /* SkipSelf */ ? startInjector.parent : startInjector;
        while (injector) {
            // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:
            // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.
            // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.
            var value = void 0;
            if (bloomBit < 128) {
                value = bloomBit < 64 ? bloomBit < 32 ? injector.bf0 : injector.bf1 : bloomBit < 96 ? injector.bf2 : injector.bf3;
            } else {
                value = bloomBit < 192 ? bloomBit < 160 ? injector.bf4 : injector.bf5 : bloomBit < 224 ? injector.bf6 : injector.bf7;
            }
            // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
            // this injector is a potential match.
            if ((value & mask) === mask) {
                return injector;
            } else if (flags & 2 /* Self */ || flags & 1 /* Host */ && !sameHostView(injector)) {
                return null;
            }
            // If the current injector does not have the directive, check the bloom filters for the ancestor
            // injectors (cbf0 - cbf7). These filters capture *all* ancestor injectors.
            if (bloomBit < 128) {
                value = bloomBit < 64 ? bloomBit < 32 ? injector.cbf0 : injector.cbf1 : bloomBit < 96 ? injector.cbf2 : injector.cbf3;
            } else {
                value = bloomBit < 192 ? bloomBit < 160 ? injector.cbf4 : injector.cbf5 : bloomBit < 224 ? injector.cbf6 : injector.cbf7;
            }
            // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to
            // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.
            injector = value & mask ? injector.parent : null;
        }
        return null;
    }
    /**
     * Checks whether the current injector and its parent are in the same host view.
     *
     * This is necessary to support @Host() decorators. If @Host() is set, we should stop searching once
     * the injector and its parent view don't match because it means we'd cross the view boundary.
     */
    function sameHostView(injector) {
        return !!injector.parent && injector.parent.node.view === injector.node.view;
    }
    var ReadFromInjectorFn = /** @class */function () {
        function ReadFromInjectorFn(read) {
            this.read = read;
        }
        return ReadFromInjectorFn;
    }();
    export { ReadFromInjectorFn };
    /**
     * Creates an ElementRef for a given node injector and stores it on the injector.
     * Or, if the ElementRef already exists, retrieves the existing ElementRef.
     *
     * @param di The node injector where we should store a created ElementRef
     * @returns The ElementRef instance to use
     */
    export function getOrCreateElementRef(di) {
        return di.elementRef || (di.elementRef = new ElementRef(di.node.native));
    }
    export var QUERY_READ_TEMPLATE_REF = new ReadFromInjectorFn(function (injector) {
        return getOrCreateTemplateRef(injector);
    });
    export var QUERY_READ_CONTAINER_REF = new ReadFromInjectorFn(function (injector) {
        return getOrCreateContainerRef(injector);
    });
    export var QUERY_READ_ELEMENT_REF = new ReadFromInjectorFn(function (injector) {
        return getOrCreateElementRef(injector);
    });
    export var QUERY_READ_FROM_NODE = new ReadFromInjectorFn(function (injector, node, directiveIdx) {
        ngDevMode && assertNodeOfPossibleTypes(node, 0 /* Container */, 3 /* Element */);
        if (directiveIdx > -1) {
            return node.view[DIRECTIVES][directiveIdx];
        } else if (node.tNode.type === 3 /* Element */) {
                return getOrCreateElementRef(injector);
            } else if (node.tNode.type === 0 /* Container */) {
                return getOrCreateTemplateRef(injector);
            }
        throw new Error('fail');
    });
    /** A ref to a node's native element. */
    var ElementRef = /** @class */function () {
        function ElementRef(nativeElement) {
            this.nativeElement = nativeElement;
        }
        return ElementRef;
    }();
    /**
     * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
     * already exists, retrieves the existing ViewContainerRef.
     *
     * @returns The ViewContainerRef instance to use
     */
    export function getOrCreateContainerRef(di) {
        if (!di.viewContainerRef) {
            var vcRefHost = di.node;
            ngDevMode && assertNodeOfPossibleTypes(vcRefHost, 0 /* Container */, 3 /* Element */);
            var hostParent = getParentLNode(vcRefHost);
            var lContainer = createLContainer(hostParent, vcRefHost.view, true);
            var comment = vcRefHost.view[RENDERER].createComment(ngDevMode ? 'container' : '');
            var lContainerNode = createLNodeObject(0 /* Container */, vcRefHost.view, hostParent, comment, lContainer, null);
            appendChild(hostParent, comment, vcRefHost.view);
            if (vcRefHost.queries) {
                lContainerNode.queries = vcRefHost.queries.container();
            }
            var hostTNode = vcRefHost.tNode;
            if (!hostTNode.dynamicContainerNode) {
                hostTNode.dynamicContainerNode = createTNode(0 /* Container */, -1, null, null, hostTNode, null);
            }
            lContainerNode.tNode = hostTNode.dynamicContainerNode;
            vcRefHost.dynamicLContainerNode = lContainerNode;
            addToViewTree(vcRefHost.view, hostTNode.index, lContainer);
            di.viewContainerRef = new ViewContainerRef(lContainerNode);
        }
        return di.viewContainerRef;
    }
    /**
     * A ref to a container that enables adding and removing views from that container
     * imperatively.
     */
    var ViewContainerRef = /** @class */function () {
        function ViewContainerRef(_lContainerNode) {
            this._lContainerNode = _lContainerNode;
            this._viewRefs = [];
        }
        ViewContainerRef.prototype.clear = function () {
            var lContainer = this._lContainerNode.data;
            while (lContainer[VIEWS].length) {
                this.remove(0);
            }
        };
        ViewContainerRef.prototype.get = function (index) {
            return this._viewRefs[index] || null;
        };
        Object.defineProperty(ViewContainerRef.prototype, "length", {
            get: function () {
                var lContainer = this._lContainerNode.data;
                return lContainer[VIEWS].length;
            },
            enumerable: true,
            configurable: true
        });
        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) {
            var adjustedIdx = this._adjustIndex(index);
            var viewRef = templateRef.createEmbeddedView(context || {}, this._lContainerNode, adjustedIdx);
            viewRef.attachToViewContainerRef(this);
            this._viewRefs.splice(adjustedIdx, 0, viewRef);
            return viewRef;
        };
        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
            var contextInjector = injector || this.parentInjector;
            if (!ngModuleRef && contextInjector) {
                ngModuleRef = contextInjector.get(viewEngine_NgModuleRef);
            }
            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
            this.insert(componentRef.hostView, index);
            return componentRef;
        };
        ViewContainerRef.prototype.insert = function (viewRef, index) {
            if (viewRef.destroyed) {
                throw new Error('Cannot insert a destroyed View in a ViewContainer!');
            }
            var lViewNode = viewRef._lViewNode;
            var adjustedIdx = this._adjustIndex(index);
            insertView(this._lContainerNode, lViewNode, adjustedIdx);
            var views = this._lContainerNode.data[VIEWS];
            var beforeNode = adjustedIdx + 1 < views.length ? getChildLNode(views[adjustedIdx + 1]).native : this._lContainerNode.native;
            addRemoveViewFromContainer(this._lContainerNode, lViewNode, true, beforeNode);
            viewRef.attachToViewContainerRef(this);
            this._viewRefs.splice(adjustedIdx, 0, viewRef);
            return viewRef;
        };
        ViewContainerRef.prototype.move = function (viewRef, newIndex) {
            var index = this.indexOf(viewRef);
            this.detach(index);
            this.insert(viewRef, this._adjustIndex(newIndex));
            return viewRef;
        };
        ViewContainerRef.prototype.indexOf = function (viewRef) {
            return this._viewRefs.indexOf(viewRef);
        };
        ViewContainerRef.prototype.remove = function (index) {
            var adjustedIdx = this._adjustIndex(index, -1);
            removeView(this._lContainerNode, adjustedIdx);
            this._viewRefs.splice(adjustedIdx, 1);
        };
        ViewContainerRef.prototype.detach = function (index) {
            var adjustedIdx = this._adjustIndex(index, -1);
            var lViewNode = detachView(this._lContainerNode, adjustedIdx);
            return this._viewRefs.splice(adjustedIdx, 1)[0] || null;
        };
        ViewContainerRef.prototype._adjustIndex = function (index, shift) {
            if (shift === void 0) {
                shift = 0;
            }
            if (index == null) {
                return this._lContainerNode.data[VIEWS].length + shift;
            }
            if (ngDevMode) {
                assertGreaterThan(index, -1, 'index must be positive');
                // +1 because it's legal to insert at the end.
                assertLessThan(index, this._lContainerNode.data[VIEWS].length + 1 + shift, 'index');
            }
            return index;
        };
        return ViewContainerRef;
    }();
    /**
     * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already
     * exists, retrieves the existing TemplateRef.
     *
     * @param di The node injector where we should store a created TemplateRef
     * @returns The TemplateRef instance to use
     */
    export function getOrCreateTemplateRef(di) {
        if (!di.templateRef) {
            ngDevMode && assertNodeType(di.node, 0 /* Container */);
            var hostNode = di.node;
            var hostTNode = hostNode.tNode;
            ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
            di.templateRef = new TemplateRef(getOrCreateElementRef(di), hostTNode.tViews, getRenderer(), hostNode.data[QUERIES]);
        }
        return di.templateRef;
    }
    var TemplateRef = /** @class */function () {
        function TemplateRef(elementRef, _tView, _renderer, _queries) {
            this._tView = _tView;
            this._renderer = _renderer;
            this._queries = _queries;
            this.elementRef = elementRef;
        }
        TemplateRef.prototype.createEmbeddedView = function (context, containerNode, index) {
            var viewNode = createEmbeddedViewNode(this._tView, context, this._renderer, this._queries);
            if (containerNode) {
                insertView(containerNode, viewNode, index);
            }
            renderEmbeddedTemplate(viewNode, this._tView, context, 1 /* Create */);
            var viewRef = new ViewRef(viewNode.data, context);
            viewRef._lViewNode = viewNode;
            return viewRef;
        };
        return TemplateRef;
    }();
});
//# sourceMappingURL=di.js.map