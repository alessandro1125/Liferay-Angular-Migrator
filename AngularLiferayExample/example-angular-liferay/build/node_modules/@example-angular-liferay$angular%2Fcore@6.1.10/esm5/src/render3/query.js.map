{"version":3,"sources":["../../../../../../../../../../packages/core/src/render3/query.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine_from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Observable} from 'rxjs';\n\nimport {EventEmitter} from '../event_emitter';\nimport {QueryList as viewEngine_QueryList} from '../linker/query_list';\nimport {Type} from '../type';\nimport {getSymbolIterator} from '../util';\n\nimport {assertDefined, assertEqual} from './assert';\nimport {ReadFromInjectorFn, getOrCreateNodeInjectorForNode} from './di';\nimport {assertPreviousIsParent, getCurrentQueries, store, storeCleanupWithContext} from './instructions';\nimport {DirectiveDefInternal, unusedValueExportToPlacateAjd as unused1} from './interfaces/definition';\nimport {LInjector, unusedValueExportToPlacateAjd as unused2} from './interfaces/injector';\nimport {LContainerNode, LElementNode, LNode, TNode, TNodeFlags, unusedValueExportToPlacateAjd as unused3} from './interfaces/node';\nimport {LQueries, QueryReadType, unusedValueExportToPlacateAjd as unused4} from './interfaces/query';\nimport {DIRECTIVES, TVIEW} from './interfaces/view';\nimport {flatten} from './util';\n\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n */\nexport interface QueryPredicate<T> {\n  /**\n   * If looking for directives then it contains the directive type.\n   */\n  type: Type<T>|null;\n\n  /**\n   * If selector then contains local names to query for.\n   */\n  selector: string[]|null;\n\n  /**\n   * Indicates which token should be read from DI for this query.\n   */\n  read: QueryReadType<T>|Type<T>|null;\n}\n\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n */\nexport interface LQuery<T> {\n  /**\n   * Next query. Used when queries are stored as a linked list in `LQueries`.\n   */\n  next: LQuery<any>|null;\n\n  /**\n   * Destination to which the value should be added.\n   */\n  list: QueryList<T>;\n\n  /**\n   * A predicate which determines if a given element/directive should be included in the query\n   * results.\n   */\n  predicate: QueryPredicate<T>;\n\n  /**\n   * Values which have been located.\n   *\n   * This is what builds up the `QueryList._valuesTree`.\n   */\n  values: any[];\n\n  /**\n   * A pointer to an array that stores collected values from views. This is necessary so we know a\n   * container into which to insert nodes collected from views.\n   */\n  containerValues: any[]|null;\n}\n\nexport class LQueries_ implements LQueries {\n  shallow: LQuery<any>|null = null;\n  deep: LQuery<any>|null = null;\n\n  constructor(deep?: LQuery<any>) { this.deep = deep == null ? null : deep; }\n\n  track<T>(\n      queryList: viewEngine_QueryList<T>, predicate: Type<T>|string[], descend?: boolean,\n      read?: QueryReadType<T>|Type<T>): void {\n    if (descend) {\n      this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n    } else {\n      this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n    }\n  }\n\n  clone(): LQueries|null { return this.deep ? new LQueries_(this.deep) : null; }\n\n  child(): LQueries|null {\n    if (this.deep === null) {\n      // if we don't have any deep queries then no need to track anything more.\n      return null;\n    }\n    if (this.shallow === null) {\n      // DeepQuery: We can reuse the current state if the child state would be same as current\n      // state.\n      return this;\n    } else {\n      // We need to create new state\n      return new LQueries_(this.deep);\n    }\n  }\n\n  container(): LQueries|null {\n    let result: LQuery<any>|null = null;\n    let query = this.deep;\n\n    while (query) {\n      const containerValues: any[] = [];  // prepare room for views\n      query.values.push(containerValues);\n      const clonedQuery: LQuery<any> = {\n        next: null,\n        list: query.list,\n        predicate: query.predicate,\n        values: containerValues,\n        containerValues: null\n      };\n      clonedQuery.next = result;\n      result = clonedQuery;\n      query = query.next;\n    }\n\n    return result ? new LQueries_(result) : null;\n  }\n\n  createView(): LQueries|null {\n    let result: LQuery<any>|null = null;\n    let query = this.deep;\n\n    while (query) {\n      const clonedQuery: LQuery<any> = {\n        next: null,\n        list: query.list,\n        predicate: query.predicate,\n        values: [],\n        containerValues: query.values\n      };\n      clonedQuery.next = result;\n      result = clonedQuery;\n      query = query.next;\n    }\n\n    return result ? new LQueries_(result) : null;\n  }\n\n  insertView(index: number): void {\n    let query = this.deep;\n    while (query) {\n      ngDevMode &&\n          assertDefined(\n              query.containerValues, 'View queries need to have a pointer to container values.');\n      query.containerValues !.splice(index, 0, query.values);\n      query = query.next;\n    }\n  }\n\n  addNode(node: LNode): void {\n    add(this.shallow, node);\n    add(this.deep, node);\n  }\n\n  removeView(): void {\n    let query = this.deep;\n    while (query) {\n      ngDevMode &&\n          assertDefined(\n              query.containerValues, 'View queries need to have a pointer to container values.');\n\n      const containerValues = query.containerValues !;\n      const viewValuesIdx = containerValues.indexOf(query.values);\n      const removed = containerValues.splice(viewValuesIdx, 1);\n\n      // mark a query as dirty only when removed view had matching modes\n      ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n      if (removed[0].length) {\n        query.list.setDirty();\n      }\n\n      query = query.next;\n    }\n  }\n}\n\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode: TNode, selector: string): number|null {\n  const localNames = tNode.localNames;\n  if (localNames) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1] as number;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Iterates over all the directives for a node and returns index of a directive for a given type.\n *\n * @param node Node on which directives are present.\n * @param type Type of a directive to look for.\n * @returns Index of a found directive or null when none found.\n */\nfunction getIdxOfMatchingDirective(node: LNode, type: Type<any>): number|null {\n  const defs = node.view[TVIEW].directives !;\n  const flags = node.tNode.flags;\n  const count = flags & TNodeFlags.DirectiveCountMask;\n  const start = flags >> TNodeFlags.DirectiveStartingIndexShift;\n  const end = start + count;\n  for (let i = start; i < end; i++) {\n    const def = defs[i] as DirectiveDefInternal<any>;\n    if (def.type === type && def.diPublic) {\n      return i;\n    }\n  }\n  return null;\n}\n\nfunction readFromNodeInjector(\n    nodeInjector: LInjector, node: LNode, read: QueryReadType<any>| Type<any>,\n    directiveIdx: number): any {\n  if (read instanceof ReadFromInjectorFn) {\n    return read.read(nodeInjector, node, directiveIdx);\n  } else {\n    const matchingIdx = getIdxOfMatchingDirective(node, read as Type<any>);\n    if (matchingIdx !== null) {\n      return node.view[DIRECTIVES] ![matchingIdx];\n    }\n  }\n  return null;\n}\n\nfunction add(query: LQuery<any>| null, node: LNode) {\n  const nodeInjector = getOrCreateNodeInjectorForNode(node as LElementNode | LContainerNode);\n  while (query) {\n    const predicate = query.predicate;\n    const type = predicate.type;\n    if (type) {\n      const directiveIdx = getIdxOfMatchingDirective(node, type);\n      if (directiveIdx !== null) {\n        // a node is matching a predicate - determine what to read\n        // if read token and / or strategy is not specified, use type as read token\n        const result =\n            readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);\n        if (result !== null) {\n          addMatch(query, result);\n        }\n      }\n    } else {\n      const selector = predicate.selector !;\n      for (let i = 0; i < selector.length; i++) {\n        const directiveIdx = getIdxOfMatchingSelector(node.tNode, selector[i]);\n        if (directiveIdx !== null) {\n          // a node is matching a predicate - determine what to read\n          // note that queries using name selector must specify read strategy\n          ngDevMode && assertDefined(predicate.read, 'the node should have a predicate');\n          const result = readFromNodeInjector(nodeInjector, node, predicate.read !, directiveIdx);\n          if (result !== null) {\n            addMatch(query, result);\n          }\n        }\n      }\n    }\n    query = query.next;\n  }\n}\n\nfunction addMatch(query: LQuery<any>, matchingValue: any): void {\n  query.values.push(matchingValue);\n  query.list.setDirty();\n}\n\nfunction createPredicate<T>(\n    predicate: Type<T>| string[], read: QueryReadType<T>| Type<T>| null): QueryPredicate<T> {\n  const isArray = Array.isArray(predicate);\n  return {\n    type: isArray ? null : predicate as Type<T>,\n    selector: isArray ? predicate as string[] : null,\n    read: read\n  };\n}\n\nfunction createQuery<T>(\n    previous: LQuery<any>| null, queryList: QueryList<T>, predicate: Type<T>| string[],\n    read: QueryReadType<T>| Type<T>| null): LQuery<T> {\n  return {\n    next: previous,\n    list: queryList,\n    predicate: createPredicate(predicate, read),\n    values: (queryList as any as QueryList_<T>)._valuesTree,\n    containerValues: null\n  };\n}\n\nclass QueryList_<T>/* implements viewEngine_QueryList<T> */ {\n  readonly dirty = true;\n  readonly changes: Observable<T> = new EventEmitter();\n  private _values: T[] = [];\n  /** @internal */\n  _valuesTree: any[] = [];\n\n  get length(): number { return this._values.length; }\n\n  get first(): T|null {\n    let values = this._values;\n    return values.length ? values[0] : null;\n  }\n\n  get last(): T|null {\n    let values = this._values;\n    return values.length ? values[values.length - 1] : null;\n  }\n\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[] { return this._values.map(fn); }\n\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._values.filter(fn);\n  }\n\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn: (item: T, index: number, array: T[]) => boolean): T|undefined {\n    return this._values.find(fn);\n  }\n\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._values.reduce(fn, init);\n  }\n\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn: (item: T, index: number, array: T[]) => void): void { this._values.forEach(fn); }\n\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._values.some(fn);\n  }\n\n  toArray(): T[] { return this._values.slice(0); }\n\n  [getSymbolIterator()](): Iterator<T> { return (this._values as any)[getSymbolIterator()](); }\n\n  toString(): string { return this._values.toString(); }\n\n  reset(res: (any[]|T)[]): void {\n    this._values = flatten(res);\n    (this as{dirty: boolean}).dirty = false;\n  }\n\n  notifyOnChanges(): void { (this.changes as EventEmitter<any>).emit(this); }\n  setDirty(): void { (this as{dirty: boolean}).dirty = true; }\n  destroy(): void {\n    (this.changes as EventEmitter<any>).complete();\n    (this.changes as EventEmitter<any>).unsubscribe();\n  }\n}\n\n// NOTE: this hack is here because IQueryList has private members and therefore\n// it can't be implemented only extended.\nexport type QueryList<T> = viewEngine_QueryList<T>;\nexport const QueryList: typeof viewEngine_QueryList = QueryList_ as any;\n\n/**\n * Creates and returns a QueryList.\n *\n * @param memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nexport function query<T>(\n    memoryIndex: number | null, predicate: Type<any>| string[], descend?: boolean,\n    read?: QueryReadType<T>| Type<T>): QueryList<T> {\n  ngDevMode && assertPreviousIsParent();\n  const queryList = new QueryList<T>();\n  const queries = getCurrentQueries(LQueries_);\n  queries.track(queryList, predicate, descend, read);\n  storeCleanupWithContext(null, queryList, queryList.destroy);\n  if (memoryIndex != null) {\n    store(memoryIndex, queryList);\n  }\n  return queryList;\n}\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n */\nexport function queryRefresh(queryList: QueryList<any>): boolean {\n  const queryListImpl = (queryList as any as QueryList_<any>);\n  if (queryList.dirty) {\n    queryList.reset(queryListImpl._valuesTree);\n    queryList.notifyOnChanges();\n    return true;\n  }\n  return false;\n}\n"],"sourceRoot":""}