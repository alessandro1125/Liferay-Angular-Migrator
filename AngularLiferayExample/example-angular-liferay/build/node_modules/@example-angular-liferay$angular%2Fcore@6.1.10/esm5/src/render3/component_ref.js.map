{"version":3,"sources":["../../../../../../../../../../packages/core/src/render3/component_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector, inject} from '../di/injector';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {RendererFactory2} from '../render/api';\nimport {Type} from '../type';\n\nimport {assertComponentType, assertDefined} from './assert';\nimport {LifecycleHooksFeature, createRootContext} from './component';\nimport {baseDirectiveCreate, createLNode, createLViewData, createTView, elementCreate, enterView, hostElement, initChangeDetectorIfExisting, locateHostElement, renderEmbeddedTemplate} from './instructions';\nimport {ComponentDefInternal, ComponentType, RenderFlags} from './interfaces/definition';\nimport {LElementNode, TNode, TNodeType} from './interfaces/node';\nimport {RElement, domRendererFactory3} from './interfaces/renderer';\nimport {FLAGS, INJECTOR, LViewData, LViewFlags, RootContext, TVIEW} from './interfaces/view';\nimport {ViewRef} from './view_ref';\n\nexport class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = (component as ComponentType<T>).ngComponentDef;\n    return new ComponentFactory(componentDef);\n  }\n}\n\nfunction toRefArray(map: {[key: string]: string}): {propName: string; templateName: string;}[] {\n  const array: {propName: string; templateName: string;}[] = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({propName: minified, templateName: nonMinified});\n    }\n  }\n  return array;\n}\n\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport const ROOT_CONTEXT = new InjectionToken<RootContext>(\n    'ROOT_CONTEXT_TOKEN',\n    {providedIn: 'root', factory: () => createRootContext(inject(SCHEDULER))});\n\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport const SCHEDULER = new InjectionToken<((fn: () => void) => void)>(\n    'SCHEDULER_TOKEN', {providedIn: 'root', factory: () => requestAnimationFrame.bind(window)});\n\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n  selector: string;\n  componentType: Type<any>;\n  ngContentSelectors: string[];\n  get inputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.inputs);\n  }\n  get outputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  constructor(private componentDef: ComponentDefInternal<any>) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = componentDef.selectors[0][0] as string;\n    this.ngContentSelectors = [];\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,\n      ngModule?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<T> {\n    const isInternalRootView = rootSelectorOrNode === undefined;\n\n    const rendererFactory =\n        ngModule ? ngModule.injector.get(RendererFactory2) : domRendererFactory3;\n    const hostNode = isInternalRootView ?\n        elementCreate(\n            this.selector, rendererFactory.createRenderer(null, this.componentDef.rendererType)) :\n        locateHostElement(rendererFactory, rootSelectorOrNode);\n\n    // The first index of the first selector is the tag name.\n    const componentTag = this.componentDef.selectors ![0] ![0] as string;\n\n    const rootContext: RootContext = ngModule && !isInternalRootView ?\n        ngModule.injector.get(ROOT_CONTEXT) :\n        createRootContext(requestAnimationFrame.bind(window));\n\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootView: LViewData = createLViewData(\n        rendererFactory.createRenderer(hostNode, this.componentDef.rendererType),\n        createTView(-1, null, null, null, null), rootContext,\n        this.componentDef.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);\n    rootView[INJECTOR] = ngModule && ngModule.injector || null;\n\n    // rootView is the parent when bootstrapping\n    const oldView = enterView(rootView, null !);\n\n    let component: T;\n    let elementNode: LElementNode;\n    try {\n      if (rendererFactory.begin) rendererFactory.begin();\n\n      // Create element node at index 0 in data array\n      elementNode = hostElement(componentTag, hostNode, this.componentDef);\n\n      // Create directive instance with factory() and store at index 0 in directives array\n      rootContext.components.push(\n          component = baseDirectiveCreate(0, this.componentDef.factory(), this.componentDef) as T);\n      initChangeDetectorIfExisting(elementNode.nodeInjector, component, elementNode.data !);\n\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      LifecycleHooksFeature(component, this.componentDef);\n\n      // Transform the arrays of native nodes into a LNode structure that can be consumed by the\n      // projection instruction. This is needed to support the reprojection of these nodes.\n      if (projectableNodes) {\n        let index = 0;\n        const projection: TNode[] = elementNode.tNode.projection = [];\n        for (let i = 0; i < projectableNodes.length; i++) {\n          const nodeList = projectableNodes[i];\n          let firstTNode: TNode|null = null;\n          let previousTNode: TNode|null = null;\n          for (let j = 0; j < nodeList.length; j++) {\n            const lNode =\n                createLNode(++index, TNodeType.Element, nodeList[j] as RElement, null, null);\n            if (previousTNode) {\n              previousTNode.next = lNode.tNode;\n            } else {\n              firstTNode = lNode.tNode;\n            }\n            previousTNode = lNode.tNode;\n          }\n          projection.push(firstTNode !);\n        }\n      }\n\n      // Execute the template in creation mode only, and then turn off the CreationMode flag\n      renderEmbeddedTemplate(elementNode, elementNode.data ![TVIEW], component, RenderFlags.Create);\n      elementNode.data ![FLAGS] &= ~LViewFlags.CreationMode;\n    } finally {\n      enterView(oldView, null);\n      if (rendererFactory.end) rendererFactory.end();\n    }\n\n    const componentRef =\n        new ComponentRef(this.componentType, component, rootView, injector, hostNode !);\n    if (isInternalRootView) {\n      // The host element of the internal root view is attached to the component's host view node\n      componentRef.hostView._lViewNode !.tNode.child = elementNode.tNode;\n    }\n    return componentRef;\n  }\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n  destroyCbs: (() => void)[]|null = [];\n  location: ElementRef<any>;\n  injector: Injector;\n  instance: T;\n  hostView: ViewRef<T>;\n  changeDetectorRef: ChangeDetectorRef;\n  componentType: Type<T>;\n\n  constructor(\n      componentType: Type<T>, instance: T, rootView: LViewData, injector: Injector,\n      hostNode: RElement) {\n    super();\n    this.instance = instance;\n    /* TODO(jasonaden): This is incomplete, to be adjusted in follow-up PR. Notes from Kara:When\n     * ViewRef.detectChanges is called from ApplicationRef.tick, it will call detectChanges at the\n     * component instance level. I suspect this means that lifecycle hooks and host bindings on the\n     * given component won't work (as these are always called at the level above a component).\n     *\n     * In render2, ViewRef.detectChanges uses the root view instance for view checks, not the\n     * component instance. So passing in the root view (1 level above the component) is sufficient.\n     * We might  want to think about creating a fake component for the top level? Or overwrite\n     * detectChanges with a function that calls tickRootContext? */\n    this.hostView = this.changeDetectorRef = new ViewRef(rootView, instance);\n    this.hostView._lViewNode = createLNode(-1, TNodeType.View, null, null, null, rootView);\n    this.injector = injector;\n    this.location = new ElementRef(hostNode);\n    this.componentType = componentType;\n  }\n\n  destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.push(callback);\n  }\n}\n"],"sourceRoot":""}