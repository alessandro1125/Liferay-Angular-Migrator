{"version":3,"sources":["../../../../../../../../../../packages/core/src/render3/pure_function.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertReservedSlotInitialized, bindingUpdated, bindingUpdated2, bindingUpdated4, checkAndUpdateBinding, consumeBinding, getCreationMode, moveBindingIndexToReservedSlot, restoreBindingIndex} from './instructions';\n\n\n\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param pureFn Function that returns a value\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param thisArg Optional calling context of pureFn\n * @returns value\n */\nexport function pureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 1);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = getCreationMode() ?\n      checkAndUpdateBinding(thisArg ? pureFn.call(thisArg) : pureFn()) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction1(\n    slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 2);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = bindingUpdated(exp) ?\n      checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction2(\n    slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any,\n    thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 3);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = bindingUpdated2(exp1, exp2) ?\n      checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction3(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 4);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated2(exp1, exp2);\n  const value = bindingUpdated(exp3) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction4(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any,\n    exp3: any, exp4: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 5);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const value = bindingUpdated4(exp1, exp2, exp3, exp4) ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction5(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 6);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  const value = bindingUpdated(exp5) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction6(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 7);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  const value = bindingUpdated2(exp5, exp6) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction7(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 8);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  let different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  different = bindingUpdated2(exp5, exp6) || different;\n  const value = bindingUpdated(exp7) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction8(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any,\n    thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, 9);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n  const different = bindingUpdated4(exp1, exp2, exp3, exp4);\n  const value = bindingUpdated4(exp5, exp6, exp7, exp8) || different ?\n      checkAndUpdateBinding(\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n      consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset in the reserved slot space {@link reserveSlots}\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunctionV(\n    slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any {\n  ngDevMode && assertReservedSlotInitialized(slotOffset, exps.length + 1);\n  const index = moveBindingIndexToReservedSlot(slotOffset);\n\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(exps[i]) && (different = true);\n  }\n  const value = different ? checkAndUpdateBinding(pureFn.apply(thisArg, exps)) : consumeBinding();\n  restoreBindingIndex(index);\n  return value;\n}\n"],"sourceRoot":""}