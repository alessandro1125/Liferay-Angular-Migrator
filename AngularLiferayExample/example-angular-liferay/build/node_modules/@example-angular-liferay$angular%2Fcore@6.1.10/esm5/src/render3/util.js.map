{"version":3,"sources":["../../../../../../../../../../packages/core/src/render3/util.ts"],"names":[],"mappings":";;;;;;;;;AAOA,aAAQ,cAAR,QAA6B,UAA7B;AAEA,aAAQ,aAAR,QAAuC,mBAAvC;AAGA;;;AAGA,WAAM,SAAA,WAAA,CAAsB,CAAtB,EAA8B,CAA9B,EAAoC;AACxC;AACA;AACA,eAAO,EAAE,MAAM,CAAN,IAAW,MAAM,CAAnB,KAAyB,MAAM,CAAtC;AACD;AAED,WAAM,SAAA,SAAA,CAAoB,KAApB,EAA8B;AAClC,YAAI,OAAO,KAAP,IAAgB,UAApB,EAAgC,OAAO,MAAM,IAAN,IAAc,KAArB;AAChC,YAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B,OAAO,KAAP;AAC9B,YAAI,SAAS,IAAb,EAAmB,OAAO,EAAP;AACnB,eAAO,KAAK,KAAZ;AACD;AAED;;;;;;AAMA,WAAM,SAAA,cAAA,GAAA;AACJ,eAAO,IAAI,KAAJ,CAAU,gBAAV,CAAP;AACD;AAED;;;AAGA,WAAM,SAAA,OAAA,CAAkB,IAAlB,EAA6B;AACjC,YAAM,SAAgB,EAAtB;AACA,YAAI,IAAI,CAAR;AAEA,eAAO,IAAI,KAAK,MAAhB,EAAwB;AACtB,gBAAM,OAAO,KAAK,CAAL,CAAb;AACA,gBAAI,MAAM,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,oBAAI,KAAK,MAAL,GAAc,CAAlB,EAAqB;AACnB,2BAAO,KAAK,MAAL,CAAY,KAAK,KAAL,CAAW,IAAI,CAAf,CAAZ,CAAP;AACA,wBAAI,CAAJ;AACD,iBAHD,MAGO;AACL;AACD;AACF,aAPD,MAOO;AACL,uBAAO,IAAP,CAAY,IAAZ;AACA;AACD;AACF;AAED,eAAO,MAAP;AACD;AAED;AACA,WAAM,SAAA,YAAA,CAA0B,KAA1B,EAAyC,GAAzC,EAAuD;AAC3D,qBAAa,0BAA0B,QAAQ,aAAlC,EAAiD,GAAjD,CAAb;AACA,eAAO,IAAI,QAAQ,aAAZ,CAAP;AACD;AAED,WAAM,SAAA,yBAAA,CAAoC,KAApC,EAAmD,GAAnD,EAA6D;AACjE,uBAAe,KAAf,EAAsB,MAAM,IAAI,MAAV,GAAmB,CAAzC,EAA4C,yCAA5C;AACD;AAED;;;;;AAKA,WAAM,SAAA,mBAAA,CAA8B,KAA9B,EAA6C,GAA7C,EAA2D;AAC/D,YAAM,QAAQ,aAA2B,KAA3B,EAAkC,GAAlC,CAAd;AACA,eAAO,iBAAiB,KAAjB,CAAP;AACD;AAED,WAAM,SAAA,gBAAA,CAA2B,KAA3B,EAAsD;AAC1D,eAAQ,MAAM,OAAN,CAAc,KAAd,IAAwB,MAAuB,CAAvB,CAAxB,GAAoD,KAA5D;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertLessThan} from './assert';\nimport {LElementNode} from './interfaces/node';\nimport {HEADER_OFFSET, LViewData} from './interfaces/view';\n\n\n/**\n* Must use this method for CD (instead of === ) since NaN !== NaN\n*/\nexport function isDifferent(a: any, b: any): boolean {\n  // NaN is the only value that is not equal to itself so the first\n  // test checks if both a and b are not NaN\n  return !(a !== a && b !== b) && a !== b;\n}\n\nexport function stringify(value: any): string {\n  if (typeof value == 'function') return value.name || value;\n  if (typeof value == 'string') return value;\n  if (value == null) return '';\n  return '' + value;\n}\n\n/**\n *  Function that throws a \"not implemented\" error so it's clear certain\n *  behaviors/methods aren't yet ready.\n *\n * @returns Not implemented error\n */\nexport function notImplemented(): Error {\n  return new Error('NotImplemented');\n}\n\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport function flatten(list: any[]): any[] {\n  const result: any[] = [];\n  let i = 0;\n\n  while (i < list.length) {\n    const item = list[i];\n    if (Array.isArray(item)) {\n      if (item.length > 0) {\n        list = item.concat(list.slice(i + 1));\n        i = 0;\n      } else {\n        i++;\n      }\n    } else {\n      result.push(item);\n      i++;\n    }\n  }\n\n  return result;\n}\n\n/** Retrieves a value from any `LViewData`. */\nexport function loadInternal<T>(index: number, arr: LViewData): T {\n  ngDevMode && assertDataInRangeInternal(index + HEADER_OFFSET, arr);\n  return arr[index + HEADER_OFFSET];\n}\n\nexport function assertDataInRangeInternal(index: number, arr: any[]) {\n  assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n\n/** Retrieves an element value from the provided `viewData`.\n  *\n  * Elements that are read may be wrapped in a style context,\n  * therefore reading the value may involve unwrapping that.\n  */\nexport function loadElementInternal(index: number, arr: LViewData): LElementNode {\n  const value = loadInternal<LElementNode>(index, arr);\n  return readElementValue(value);\n}\n\nexport function readElementValue(value: LElementNode | any[]): LElementNode {\n  return (Array.isArray(value) ? (value as any as any[])[0] : value) as LElementNode;\n}\n"],"sourceRoot":""}