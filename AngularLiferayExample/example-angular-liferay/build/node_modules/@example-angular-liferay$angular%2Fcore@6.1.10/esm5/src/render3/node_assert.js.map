{"version":3,"sources":["../../../../../../../../../../packages/core/src/render3/node_assert.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,aAAR,EAAuB,WAAvB,QAAyC,UAAzC;AAGA,WAAM,SAAA,cAAA,CAAyB,IAAzB,EAAsC,IAAtC,EAAqD;AACzD,sBAAc,IAAd,EAAoB,8BAApB;AACA,oBAAY,KAAK,KAAL,CAAW,IAAvB,EAA6B,IAA7B,EAAmC,iBAAe,SAAS,IAAT,CAAlD;AACD;AAED,WAAM,SAAA,yBAAA,CAAoC,IAApC,EAA+C;AAAE,YAAA,QAAA,EAAA;aAAA,IAAA,KAAA,C,EAAA,KAAA,UAAA,M,EAAA,I,EAAqB;AAArB,kBAAA,KAAA,CAAA,IAAA,UAAA,EAAA,CAAA;;AACrD,sBAAc,IAAd,EAAoB,8BAApB;AACA,YAAM,QAAQ,MAAM,IAAN,CAAW,UAAA,IAAA,EAAI;AAAI,mBAAA,KAAK,KAAL,CAAW,IAAX,KAAA,IAAA;AAAwB,SAA3C,CAAd;AACA,oBAAY,KAAZ,EAAmB,IAAnB,EAAyB,sBAAoB,MAAM,GAAN,CAAU,QAAV,EAAoB,IAApB,CAAyB,IAAzB,CAA7C;AACD;AAED,aAAA,QAAA,CAAkB,IAAlB,EAAiC;AAC/B,YAAI,QAAI,CAAR,CAAQ,gBAAR,EAAkC,OAAO,YAAP;AAClC,YAAI,QAAI,CAAR,CAAQ,eAAR,EAAiC,OAAO,WAAP;AACjC,YAAI,QAAI,CAAR,CAAQ,UAAR,EAA4B,OAAO,MAAP;AAC5B,YAAI,QAAI,CAAR,CAAQ,aAAR,EAA+B,OAAO,SAAP;AAC/B,eAAO,WAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined, assertEqual} from './assert';\nimport {LNode, TNodeType} from './interfaces/node';\n\nexport function assertNodeType(node: LNode, type: TNodeType) {\n  assertDefined(node, 'should be called with a node');\n  assertEqual(node.tNode.type, type, `should be a ${typeName(type)}`);\n}\n\nexport function assertNodeOfPossibleTypes(node: LNode, ...types: TNodeType[]) {\n  assertDefined(node, 'should be called with a node');\n  const found = types.some(type => node.tNode.type === type);\n  assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')}`);\n}\n\nfunction typeName(type: TNodeType): string {\n  if (type == TNodeType.Projection) return 'Projection';\n  if (type == TNodeType.Container) return 'Container';\n  if (type == TNodeType.View) return 'View';\n  if (type == TNodeType.Element) return 'Element';\n  return '<unknown>';\n}\n"],"sourceRoot":""}