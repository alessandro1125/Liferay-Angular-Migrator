{"version":3,"sources":["../../../../../../../../../../packages/core/src/render3/component.ts"],"names":[],"mappings":";;;;;;;;;AAcA,aAAQ,mBAAR,EAA6B,aAA7B,QAAiD,UAAjD;AACA,aAAQ,cAAR,EAAwB,mBAAxB,QAAkD,SAAlD;AACA,aAAQ,aAAR,EAAuB,sBAAvB,EAA+C,6BAA/C,EAA8E,mBAA9E,EAAmG,eAAnG,EAAoH,WAApH,EAAiI,qBAAjI,EAAwJ,SAAxJ,EAAmK,0BAAnK,EAA+L,WAA/L,EAA4M,WAA5M,EAAyN,4BAAzN,EAAuP,SAAvP,EAAkQ,iBAAlQ,EAAqR,eAArR,QAA4S,gBAA5S;AAGA,aAAoC,mBAApC,QAA8D,uBAA9D;AACA,aAA4C,QAA5C,EAAsD,OAAtD,EAA+D,KAA/D,QAA2E,mBAA3E;AACA,aAAQ,SAAR,QAAwB,QAAxB;AAiDA;AACA,WAAO,IAAM,gBAA0B;AACrC,aAAK,UAAC,KAAD,EAAa,aAAb,EAAgC;AACnC,kBAAM,IAAI,KAAJ,CAAU,8BAA8B,UAAU,KAAV,CAAxC,CAAN;AACD;AAHoC,KAAhC;AAMP;;;;;;;;;;;;;AAaA,WAAM,SAAA,eAAA,CACF,aADE,CAES,8DAFT,EAIF,IAJE,EAI+B;AAAjC,YAAA,SAAA,KAAA,CAAA,EAAA;AAAA,mBAAA,EAAA;AAAiC;AACnC,qBAAa,oBAAoB,aAApB,CAAb;AACA,YAAM,kBAAkB,KAAK,eAAL,IAAwB,mBAAhD;AACA,YAAM,YAAY,KAAK,SAAL,IAAkB,IAApC;AACA,YAAM,eACD,cAAmC,cADxC;AAEA,YAAI,aAAa,IAAb,IAAqB,aAAzB,EAAwC,aAAa,IAAb,GAAoB,aAApB;AACxC,YAAI,SAAJ;AACA;AACA,YAAM,eAAe,aAAa,SAAb,CAAyB,CAAzB,EAA8B,CAA9B,CAArB;AACA,YAAM,WAAW,kBAAkB,eAAlB,EAAmC,KAAK,IAAL,IAAa,YAAhD,CAAjB;AACA,YAAM,cAAc,kBAAkB,KAAK,SAAL,IAAkB,sBAAsB,IAAtB,CAA2B,MAA3B,CAApC,CAApB;AAEA,YAAM,WAAsB,gBACxB,gBAAgB,cAAhB,CAA+B,QAA/B,EAAyC,aAAa,YAAtD,CADwB,EAExB,YAAY,CAAC,CAAb,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,CAFwB,EAEiB,WAFjB,EAGxB,aAAa,MAAb,GAAqB,CAArB,CAAqB,WAArB,GAAwC,CAHhB,CAGgB,iBAHhB,CAA5B;AAIA,iBAAS,QAAT,IAAqB,KAAK,QAAL,IAAiB,IAAtC;AAEA,YAAM,UAAU,UAAU,QAAV,EAAoB,IAApB,CAAhB;AACA,YAAI,WAAJ;AACA,YAAI;AACF,gBAAI,gBAAgB,KAApB,EAA2B,gBAAgB,KAAhB;AAE3B;AACA,0BAAc,YAAY,YAAZ,EAA0B,QAA1B,EAAoC,YAApC,EAAkD,SAAlD,CAAd;AAEA;AACA,wBAAY,UAAZ,CAAuB,IAAvB,CACI,YAAY,oBAAoB,CAApB,EAAuB,aAAa,OAAb,EAAvB,EAA+C,YAA/C,CADhB;AAEA,yCAA6B,YAAY,YAAzC,EAAuD,SAAvD,EAAkE,YAAY,IAA9E;AAEA,iBAAK,YAAL,IAAqB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,UAAC,OAAD,EAAQ;AAAK,uBAAA,QAAQ,SAAR,EAAA,YAAA,CAAA;AAAgC,aAAvE,CAArB;AAEA;AACA,4BAAgB,sBAAhB;AACA,kCAAsB,YAAY,IAAlC,EAAqD,WAArD,EAAkE,SAAlE;AACD,SAhBD,SAgBU;AACR,sBAAU,OAAV;AACA,gBAAI,gBAAgB,GAApB,EAAyB,gBAAgB,GAAhB;AAC1B;AAED,eAAO,SAAP;AACD;AAED,WAAM,SAAA,iBAAA,CAA4B,SAA5B,EAAmE;AACvE,eAAO;AACL,wBAAY,EADP;AAEL,uBAAW,SAFN;AAGL,mBAAO;AAHF,SAAP;AAKD;AAED;;;;;;;;;;;;;AAaA,WAAM,SAAA,qBAAA,CAAgC,SAAhC,EAAgD,GAAhD,EAA8E;AAClF,YAAM,cAAc,8BAA8B,SAA9B,CAApB;AAEA;AACA,YAAM,QAAQ,YAAY,IAAZ,CAAiB,KAAjB,CAAd;AACA,uBAAe,CAAf,EAAkB,IAAI,MAAtB,EAA8B,IAAI,OAAlC,EAA2C,KAA3C;AACA,4BAAoB,YAAY,KAAZ,CAAkB,KAAtC,EAA6C,KAA7C;AACD;AAED;;;;;;AAMA,aAAA,cAAA,CAAwB,SAAxB,EAAsC;AACpC,YAAM,cAAc,YAAY,SAAZ,EAAuB,OAAvB,CAApB;AACA,qBAAa,cAAc,WAAd,EAA2B,aAA3B,CAAb;AACA,eAAO,WAAP;AACD;AAED;;;;;;;;AAQA,WAAM,SAAA,cAAA,CAA4B,SAA5B,EAAwC;AAC5C,eAAO,8BAA8B,SAA9B,EAAyC,MAAhD;AACD;AAED;;;;;;;;;;AAUA,WAAM,SAAA,eAAA,CAA0B,SAA1B,EAAwC;AAC5C,YAAM,cAAc,eAAe,SAAf,CAApB;AACA,eAAO,YAAY,WAAZ,IAA2B,EAAlC;AACD;AAED;;;;;;;;;;;;;;;;AAgBA,WAAM,SAAA,YAAA,CAAuB,SAAvB,EAAqC;AACzC,eAAO,eAAe,SAAf,EAA0B,KAAjC;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Type} from '../core';\nimport {Injector} from '../di/injector';\nimport {Sanitizer} from '../sanitization/security';\n\nimport {assertComponentType, assertDefined} from './assert';\nimport {queueInitHooks, queueLifecycleHooks} from './hooks';\nimport {CLEAN_PROMISE, ROOT_DIRECTIVE_INDICES, _getComponentHostLElementNode, baseDirectiveCreate, createLViewData, createTView, detectChangesInternal, enterView, executeInitAndContentHooks, getRootView, hostElement, initChangeDetectorIfExisting, leaveView, locateHostElement, setHostBindings,} from './instructions';\nimport {ComponentDef, ComponentDefInternal, ComponentType} from './interfaces/definition';\nimport {LElementNode} from './interfaces/node';\nimport {RElement, RendererFactory3, domRendererFactory3} from './interfaces/renderer';\nimport {LViewData, LViewFlags, RootContext, INJECTOR, CONTEXT, TVIEW} from './interfaces/view';\nimport {stringify} from './util';\n\n\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n  /** Which renderer factory to use. */\n  rendererFactory?: RendererFactory3;\n\n  /** A custom sanitizer instance */\n  sanitizer?: Sanitizer;\n\n  /**\n   * Host element on which the component will be bootstrapped. If not specified,\n   * the component definition's `tag` is used to query the existing DOM for the\n   * element to bootstrap.\n   */\n  host?: RElement|string;\n\n  /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n  injector?: Injector;\n\n  /**\n   * List of features to be applied to the created component. Features are simply\n   * functions that decorate a component with a certain behavior.\n   *\n   * Typically, the features in this list are features that cannot be added to the\n   * other features list in the component definition because they rely on other factors.\n   *\n   * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n   * to root components in a tree-shakable way. It cannot be added to the component\n   * features list because there's no way of knowing when the component will be used as\n   * a root component.\n   */\n  hostFeatures?: (<T>(component: T, componentDef: ComponentDef<T, string>) => void)[];\n\n  /**\n   * A function which is used to schedule change detection work in the future.\n   *\n   * When marking components as dirty, it is necessary to schedule the work of\n   * change detection in the future. This is done to coalesce multiple\n   * {@link markDirty} calls into a single changed detection processing.\n   *\n   * The default value of the scheduler is the `requestAnimationFrame` function.\n   *\n   * It is also useful to override this function for testing purposes.\n   */\n  scheduler?: (work: () => void) => void;\n}\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throw new Error('NullInjector: Not found: ' + stringify(token));\n  }\n};\n\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent<T>(\n    componentType: ComponentType<T>|\n        Type<T>/* Type as workaround for: Microsoft/TypeScript/issues/4881 */\n    ,\n    opts: CreateComponentOptions = {}): T {\n  ngDevMode && assertComponentType(componentType);\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  const sanitizer = opts.sanitizer || null;\n  const componentDef =\n      (componentType as ComponentType<T>).ngComponentDef as ComponentDefInternal<T>;\n  if (componentDef.type != componentType) componentDef.type = componentType;\n  let component: T;\n  // The first index of the first selector is the tag name.\n  const componentTag = componentDef.selectors ![0] ![0] as string;\n  const hostNode = locateHostElement(rendererFactory, opts.host || componentTag);\n  const rootContext = createRootContext(opts.scheduler || requestAnimationFrame.bind(window));\n\n  const rootView: LViewData = createLViewData(\n      rendererFactory.createRenderer(hostNode, componentDef.rendererType),\n      createTView(-1, null, null, null, null), rootContext,\n      componentDef.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);\n  rootView[INJECTOR] = opts.injector || null;\n\n  const oldView = enterView(rootView, null !);\n  let elementNode: LElementNode;\n  try {\n    if (rendererFactory.begin) rendererFactory.begin();\n\n    // Create element node at index 0 in data array\n    elementNode = hostElement(componentTag, hostNode, componentDef, sanitizer);\n\n    // Create directive instance with factory() and store at index 0 in directives array\n    rootContext.components.push(\n        component = baseDirectiveCreate(0, componentDef.factory(), componentDef) as T);\n    initChangeDetectorIfExisting(elementNode.nodeInjector, component, elementNode.data !);\n\n    opts.hostFeatures && opts.hostFeatures.forEach((feature) => feature(component, componentDef));\n\n    executeInitAndContentHooks();\n    setHostBindings(ROOT_DIRECTIVE_INDICES);\n    detectChangesInternal(elementNode.data as LViewData, elementNode, component);\n  } finally {\n    leaveView(oldView);\n    if (rendererFactory.end) rendererFactory.end();\n  }\n\n  return component;\n}\n\nexport function createRootContext(scheduler: (workFn: () => void) => void): RootContext {\n  return {\n    components: [],\n    scheduler: scheduler,\n    clean: CLEAN_PROMISE,\n  };\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport function LifecycleHooksFeature(component: any, def: ComponentDefInternal<any>): void {\n  const elementNode = _getComponentHostLElementNode(component);\n\n  // Root component is always created at dir index 0\n  const tView = elementNode.view[TVIEW];\n  queueInitHooks(0, def.onInit, def.doCheck, tView);\n  queueLifecycleHooks(elementNode.tNode.flags, tView);\n}\n\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param component any component\n */\nfunction getRootContext(component: any): RootContext {\n  const rootContext = getRootView(component)[CONTEXT] as RootContext;\n  ngDevMode && assertDefined(rootContext, 'rootContext');\n  return rootContext;\n}\n\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param component Component for which the host element should be retrieved.\n */\nexport function getHostElement<T>(component: T): HTMLElement {\n  return _getComponentHostLElementNode(component).native as any;\n}\n\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component: any): string {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component: any): Promise<null> {\n  return getRootContext(component).clean;\n}\n"],"sourceRoot":""}