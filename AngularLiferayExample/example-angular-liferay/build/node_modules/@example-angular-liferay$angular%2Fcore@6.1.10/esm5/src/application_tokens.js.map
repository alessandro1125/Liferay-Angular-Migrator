{"version":3,"sources":["../../../../../../../../../packages/core/src/application_tokens.ts"],"names":[],"mappings":";;;;;;;;;AAQA,WAAQ,cAAR,QAA6B,MAA7B;AAIA;;;;;;;;;;AAUA,SAAO,IAAM,SAAS,IAAI,cAAJ,CAA2B,OAA3B,CAAf;AAEP,SAAM,SAAA,2BAAA,GAAA;AACJ,WAAO,KAAG,aAAH,GAAmB,aAAnB,GAAmC,aAA1C;AACD;AAED;;;;AAIA,SAAO,IAAM,yBAAyB;AACpC,aAAS,MAD2B;AAEpC,gBAAY,2BAFwB;AAGpC,UAAa;AAHuB,GAA/B;AAMP,WAAA,WAAA,GAAA;AACE,WAAO,OAAO,YAAP,CAAoB,KAAK,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,EAA3B,CAAzB,CAAP;AACD;AAED;;;;AAIA,SAAO,IAAM,uBAAuB,IAAI,cAAJ,CAAsC,sBAAtC,CAA7B;AAEP;;;;AAIA,SAAO,IAAM,cAAc,IAAI,cAAJ,CAA2B,aAA3B,CAApB;AAEP;;;;;;;;AAQA,SAAO,IAAM,yBACT,IAAI,cAAJ,CAAgE,sBAAhE,CADG;AAGP;;;;AAIA,SAAO,IAAM,mBAAmB,IAAI,cAAJ,CAA2B,+BAA3B,CAAzB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './di';\nimport {ComponentRef} from './linker/component_factory';\n\n\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @experimental\n */\nexport const APP_ID = new InjectionToken<string>('AppId');\n\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @experimental\n */\nexport const APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: <any[]>[],\n};\n\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n\n/**\n * A function that will be executed when a platform is initialized.\n * @experimental\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n\n/**\n * A token that indicates an opaque platform id.\n * @experimental\n */\nexport const PLATFORM_ID = new InjectionToken<Object>('Platform ID');\n\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @experimental\n */\nexport const APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n\n/**\n * A token which indicates the root directory of the application\n * @experimental\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n"],"sourceRoot":""}