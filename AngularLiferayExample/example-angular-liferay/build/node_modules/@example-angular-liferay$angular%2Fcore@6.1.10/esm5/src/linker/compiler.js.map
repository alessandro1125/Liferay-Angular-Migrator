{"version":3,"sources":["../../../../../../../../../../packages/core/src/linker/compiler.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,WAAQ,UAAR,EAAoB,cAApB,QAAyD,OAAzD;AASA;;;;;AAKA,MAAA,+BAAA,aAAA,YAAA;AACE,aAAA,4BAAA,CACW,eADX,EAEW,kBAFX,EAEsD;AAD3C,WAAA,eAAA,GAAA,eAAA;AACA,WAAA,kBAAA,GAAA,kBAAA;AAA+C;AAC5D,WAAA,4BAAA;AAAC,GAJD,EAAA;;AAOA,WAAA,WAAA,GAAA;AACE,UAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;AAED;;;;;;;;;;AAWA,MAAA,WAAA,aAAA,YAAA;AAAA,aAAA,QAAA,GAAA,CAyCC;AAxCC;;;;AAIA,aAAA,SAAA,CAAA,iBAAA,GAAA,UAAqB,UAArB,EAAwC;AAAwB,YAAM,aAAN;AAAsB,KAAtF;AAEA;;;AAGA,aAAA,SAAA,CAAA,kBAAA,GAAA,UAAsB,UAAtB,EAAyC;AAAiC,YAAM,aAAN;AAAsB,KAAhG;AAEA;;;AAGA,aAAA,SAAA,CAAA,iCAAA,GAAA,UAAqC,UAArC,EAAwD;AACtD,YAAM,aAAN;AACD,KAFD;AAIA;;;AAGA,aAAA,SAAA,CAAA,kCAAA,GAAA,UAAsC,UAAtC,EAAyD;AAEvD,YAAM,aAAN;AACD,KAHD;AAKA;;;AAGA,aAAA,SAAA,CAAA,UAAA,GAAA,YAAA,CAAqB,CAArB;AAEA;;;AAGA,aAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAA6B,CAAI,CAAjC;AAEA;;;AAGA,aAAA,SAAA,CAAA,WAAA,GAAA,UAAY,UAAZ,EAAiC;AAAsB,aAAO,SAAP;AAAmB,KAA1E;AAxCW,eAAQ,QAAA,UAAA,CAAA,CADpB,YACoB,CAAA,EAAR,QAAQ,CAAR;AAyCb,WAAA,QAAA;AAAC,GAzCD,EAAA;WAAa,Q;AAwDb;;;;;AAKA,SAAO,IAAM,mBAAmB,IAAI,cAAJ,CAAsC,iBAAtC,CAAzB;AAEP;;;;;AAKA,MAAA,kBAAA,aAAA,YAAA;AAAA,aAAA,eAAA,GAAA,CAEC;AAAD,WAAA,eAAA;AAAC,GAFD,EAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, StaticProvider} from '../di';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {ViewEncapsulation} from '../metadata';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @experimental\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n */\n@Injectable()\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> { throw _throwError(); }\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> { throw _throwError(); }\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    throw _throwError();\n  }\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    throw _throwError();\n  }\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string|undefined { return undefined; }\n}\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @experimental\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n"],"sourceRoot":""}