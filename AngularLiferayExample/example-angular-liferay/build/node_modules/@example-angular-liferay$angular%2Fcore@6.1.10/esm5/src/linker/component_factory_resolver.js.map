{"version":3,"sources":["../../../../../../../../../../packages/core/src/linker/component_factory_resolver.ts"],"names":[],"mappings":";;;;;;;;;;AAUA,aAAQ,SAAR,QAAwB,SAAxB;AAEA,aAAQ,gBAAR,QAA6C,qBAA7C;AAGA,WAAM,SAAA,uBAAA,CAAkC,SAAlC,EAAqD;AACzD,YAAM,QAAQ,MACV,oCAAkC,UAAU,SAAV,CAAlC,GAAsD,gDAD5C,CAAd;AAEC,cAAc,eAAd,IAAiC,SAAjC;AACD,eAAO,KAAP;AACD;AAED,QAAM,kBAAkB,aAAxB;AAEA,WAAM,SAAA,YAAA,CAAuB,KAAvB,EAAmC;AACvC,eAAQ,MAAc,eAAd,CAAR;AACD;AAGD,QAAA,gCAAA,aAAA,YAAA;AAAA,iBAAA,6BAAA,GAAA,CAIC;AAHC,sCAAA,SAAA,CAAA,uBAAA,GAAA,UAA2B,SAA3B,EAA+D;AAC7D,kBAAM,wBAAwB,SAAxB,CAAN;AACD,SAFD;AAGF,eAAA,6BAAA;AAAC,KAJD,EAAA;AAMA,QAAA,2BAAA,aAAA,YAAA;AAAA,iBAAA,wBAAA,GAAA,CAGC;AAFQ,iCAAA,IAAA,GAAiC,IAAI,6BAAJ,EAAjC;AAET,eAAA,wBAAA;AAAC,KAHD,EAAA;aAAsB,wB;AAKtB,QAAA,kCAAA,aAAA,YAAA;AAGE,iBAAA,+BAAA,CACI,SADJ,EACgD,OADhD,EAEY,SAFZ,EAEuC;AADS,iBAAA,OAAA,GAAA,OAAA;AACpC,iBAAA,SAAA,GAAA,SAAA;AAJJ,iBAAA,UAAA,GAAa,IAAI,GAAJ,EAAb;AAKN,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,oBAAM,UAAU,UAAU,CAAV,CAAhB;AACA,qBAAK,UAAL,CAAgB,GAAhB,CAAoB,QAAQ,aAA5B,EAA2C,OAA3C;AACD;AACF;AAED,wCAAA,SAAA,CAAA,uBAAA,GAAA,UAA2B,SAA3B,EAA+D;AAC7D,gBAAI,UAAU,KAAK,UAAL,CAAgB,GAAhB,CAAoB,SAApB,CAAd;AACA,gBAAI,CAAC,OAAD,IAAY,KAAK,OAArB,EAA8B;AAC5B,0BAAU,KAAK,OAAL,CAAa,uBAAb,CAAqC,SAArC,CAAV;AACD;AACD,gBAAI,CAAC,OAAL,EAAc;AACZ,sBAAM,wBAAwB,SAAxB,CAAN;AACD;AACD,mBAAO,IAAI,6BAAJ,CAAkC,OAAlC,EAA2C,KAAK,SAAhD,CAAP;AACD,SATD;AAUF,eAAA,+BAAA;AAAC,KAtBD,EAAA;;AAwBA,QAAA,gCAAA,aAAA,UAAA,MAAA,EAAA;AAAsD,gBAAA,SAAA,CAAA,6BAAA,EAAA,MAAA;AAOpD,iBAAA,6BAAA,CAAoB,OAApB,EAA0D,QAA1D,EAAoF;AAApF,gBAAA,QACE,OAAA,IAAA,CAAA,IAAA,KAAO,IADT;AAAoB,kBAAA,OAAA,GAAA,OAAA;AAAsC,kBAAA,QAAA,GAAA,QAAA;AAExD,kBAAK,QAAL,GAAgB,QAAQ,QAAxB;AACA,kBAAK,aAAL,GAAqB,QAAQ,aAA7B;AACA,kBAAK,kBAAL,GAA0B,QAAQ,kBAAlC;AACA,kBAAK,MAAL,GAAc,QAAQ,MAAtB;AACA,kBAAK,OAAL,GAAe,QAAQ,OAAvB;;AACD;AAED,sCAAA,SAAA,CAAA,MAAA,GAAA,UACI,QADJ,EACwB,gBADxB,EACoD,kBADpD,EAEI,QAFJ,EAE+B;AAC7B,mBAAO,KAAK,OAAL,CAAa,MAAb,CACH,QADG,EACO,gBADP,EACyB,kBADzB,EAC6C,YAAY,KAAK,QAD9D,CAAP;AAED,SALD;AAMF,eAAA,6BAAA;AAAC,KAtBD,CAAsD,gBAAtD,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {NgModuleRef} from './ng_module_factory';\n\nexport function noComponentFactoryError(component: Function) {\n  const error = Error(\n      `No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  (error as any)[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nexport function getComponent(error: Error): Type<any> {\n  return (error as any)[ERROR_COMPONENT];\n}\n\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = new _NullComponentFactoryResolver();\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n\nexport class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n  private _factories = new Map<any, ComponentFactory<any>>();\n\n  constructor(\n      factories: ComponentFactory<any>[], private _parent: ComponentFactoryResolver,\n      private _ngModule: NgModuleRef<any>) {\n    for (let i = 0; i < factories.length; i++) {\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    let factory = this._factories.get(component);\n    if (!factory && this._parent) {\n      factory = this._parent.resolveComponentFactory(component);\n    }\n    if (!factory) {\n      throw noComponentFactoryError(component);\n    }\n    return new ComponentFactoryBoundToModule(factory, this._ngModule);\n  }\n}\n\nexport class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n  readonly selector: string;\n  readonly componentType: Type<any>;\n  readonly ngContentSelectors: string[];\n  readonly inputs: {propName: string, templateName: string}[];\n  readonly outputs: {propName: string, templateName: string}[];\n\n  constructor(private factory: ComponentFactory<C>, private ngModule: NgModuleRef<any>) {\n    super();\n    this.selector = factory.selector;\n    this.componentType = factory.componentType;\n    this.ngContentSelectors = factory.ngContentSelectors;\n    this.inputs = factory.inputs;\n    this.outputs = factory.outputs;\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C> {\n    return this.factory.create(\n        injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n  }\n}\n"],"sourceRoot":""}