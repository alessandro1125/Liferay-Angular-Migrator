{"version":3,"sources":["../../../../../../../../../../packages/core/src/linker/query_list.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {EventEmitter} from '../event_emitter';\nimport {getSymbolIterator} from '../util';\n\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n */\nexport class QueryList<T>/* implements Iterable<T> */ {\n  public readonly dirty = true;\n  private _results: Array<T> = [];\n  public readonly changes: Observable<any> = new EventEmitter();\n\n  readonly length: number = 0;\n  // TODO(issue/24571): remove '!'.\n  readonly first !: T;\n  // TODO(issue/24571): remove '!'.\n  readonly last !: T;\n\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[] { return this._results.map(fn); }\n\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._results.filter(fn);\n  }\n\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn: (item: T, index: number, array: T[]) => boolean): T|undefined {\n    return this._results.find(fn);\n  }\n\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._results.reduce(fn, init);\n  }\n\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn: (item: T, index: number, array: T[]) => void): void { this._results.forEach(fn); }\n\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._results.some(fn);\n  }\n\n  toArray(): T[] { return this._results.slice(); }\n\n  [getSymbolIterator()](): Iterator<T> { return (this._results as any)[getSymbolIterator()](); }\n\n  toString(): string { return this._results.toString(); }\n\n  reset(res: Array<T|any[]>): void {\n    this._results = flatten(res);\n    (this as{dirty: boolean}).dirty = false;\n    (this as{length: number}).length = this._results.length;\n    (this as{last: T}).last = this._results[this.length - 1];\n    (this as{first: T}).first = this._results[0];\n  }\n\n  notifyOnChanges(): void { (this.changes as EventEmitter<any>).emit(this); }\n\n  /** internal */\n  setDirty() { (this as{dirty: boolean}).dirty = true; }\n\n  /** internal */\n  destroy(): void {\n    (this.changes as EventEmitter<any>).complete();\n    (this.changes as EventEmitter<any>).unsubscribe();\n  }\n}\n\nfunction flatten<T>(list: Array<T|T[]>): T[] {\n  return list.reduce((flat: any[], item: T | T[]): T[] => {\n    const flatItem = Array.isArray(item) ? flatten(item) : item;\n    return (<T[]>flat).concat(flatItem);\n  }, []);\n}\n"],"sourceRoot":""}