{"version":3,"sources":["../../../../../../../../../../packages/core/src/linker/ng_module_factory_loader.ts"],"names":[],"mappings":";;;;;;;;;AAUA;;;;AAIA,QAAA,wBAAA,aAAA,YAAA;AAAA,iBAAA,qBAAA,GAAA,CAEC;AAAD,eAAA,qBAAA;AAAC,KAFD,EAAA;;AAIA,QAAI,kBAAkB,IAAI,GAAJ,EAAtB;AAEA;;;;AAIA,WAAM,SAAA,qBAAA,CAAgC,EAAhC,EAA4C,OAA5C,EAAyE;AAC7E,YAAM,WAAW,gBAAgB,GAAhB,CAAoB,EAApB,CAAjB;AACA,YAAI,QAAJ,EAAc;AACZ,kBAAM,IAAI,KAAJ,CAAU,qCAAmC,EAAnC,GAAqC,KAArC,GACM,SAAS,UAAT,CAAoB,IAD1B,GAC8B,MAD9B,GACqC,QAAQ,UAAR,CAAmB,IADlE,CAAN;AAED;AACD,wBAAgB,GAAhB,CAAoB,EAApB,EAAwB,OAAxB;AACD;AAED,WAAM,SAAA,mBAAA,GAAA;AACJ,0BAAkB,IAAI,GAAJ,EAAlB;AACD;AAED;;;;;;AAMA,WAAM,SAAA,gBAAA,CAA2B,EAA3B,EAAqC;AACzC,YAAM,UAAU,gBAAgB,GAAhB,CAAoB,EAApB,CAAhB;AACA,YAAI,CAAC,OAAL,EAAc,MAAM,IAAI,KAAJ,CAAU,uBAAqB,EAArB,GAAuB,SAAjC,CAAN;AACd,eAAO,OAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory} from './ng_module_factory';\n\n/**\n * Used to load ng module factories.\n *\n */\nexport abstract class NgModuleFactoryLoader {\n  abstract load(path: string): Promise<NgModuleFactory<any>>;\n}\n\nlet moduleFactories = new Map<string, NgModuleFactory<any>>();\n\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * @experimental\n */\nexport function registerModuleFactory(id: string, factory: NgModuleFactory<any>) {\n  const existing = moduleFactories.get(id);\n  if (existing) {\n    throw new Error(`Duplicate module registered for ${id\n                    } - ${existing.moduleType.name} vs ${factory.moduleType.name}`);\n  }\n  moduleFactories.set(id, factory);\n}\n\nexport function clearModulesForTest() {\n  moduleFactories = new Map<string, NgModuleFactory<any>>();\n}\n\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * @experimental\n */\nexport function getModuleFactory(id: string): NgModuleFactory<any> {\n  const factory = moduleFactories.get(id);\n  if (!factory) throw new Error(`No module with ID ${id} loaded`);\n  return factory;\n}\n"],"sourceRoot":""}