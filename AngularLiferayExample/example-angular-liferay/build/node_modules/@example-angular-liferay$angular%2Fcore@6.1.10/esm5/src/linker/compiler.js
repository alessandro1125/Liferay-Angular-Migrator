Liferay.Loader.define("@example-angular-liferay$angular/core@6.1.10/esm5/src/linker/compiler", ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  import * as tslib_1 from "tslib";
  import { Injectable, InjectionToken } from '../di';
  /**
   * Combination of NgModuleFactory and ComponentFactorys.
   *
   * @experimental
   */
  var ModuleWithComponentFactories = /** @class */function () {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
      this.ngModuleFactory = ngModuleFactory;
      this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
  }();
  export { ModuleWithComponentFactories };
  function _throwError() {
    throw new Error("Runtime compiler is not loaded");
  }
  /**
   * Low-level service for running the angular compiler during runtime
   * to create {@link ComponentFactory}s, which
   * can later be used to create and render a Component instance.
   *
   * Each `@NgModule` provides an own `Compiler` to its injector,
   * that will use the directives/pipes of the ng module for compilation
   * of components.
   *
   */
  var Compiler = /** @class */function () {
    function Compiler() {}
    /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     */
    Compiler.prototype.compileModuleSync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Compiles the given NgModule and all of its components
     */
    Compiler.prototype.compileModuleAsync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
     */
    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
     */
    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
      throw _throwError();
    };
    /**
     * Clears all caches.
     */
    Compiler.prototype.clearCache = function () {};
    /**
     * Clears the cache for the given component/ngModule.
     */
    Compiler.prototype.clearCacheFor = function (type) {};
    /**
     * Returns the id for a given NgModule, if one is defined and known to the compiler.
     */
    Compiler.prototype.getModuleId = function (moduleType) {
      return undefined;
    };
    Compiler = tslib_1.__decorate([Injectable()], Compiler);
    return Compiler;
  }();
  export { Compiler };
  /**
   * Token to provide CompilerOptions in the platform injector.
   *
   * @experimental
   */
  export var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
  /**
   * A factory for creating a Compiler
   *
   * @experimental
   */
  var CompilerFactory = /** @class */function () {
    function CompilerFactory() {}
    return CompilerFactory;
  }();
  export { CompilerFactory };
});
//# sourceMappingURL=compiler.js.map