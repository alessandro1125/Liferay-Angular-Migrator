{"version":3,"sources":["../../../../../../../../../packages/core/src/event_emitter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject, Subscription} from 'rxjs';\n\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n */\nexport class EventEmitter<T> extends Subject<T> {\n  // TODO: mark this as internal once all the facades are gone\n  // we can't mark it as internal now because EventEmitter exported via @angular/core would not\n  // contain this property making it incompatible with all the code that uses EventEmitter via\n  // facades, which are local to the code and do not have this property stripped.\n  /**\n   * Internal\n   */\n  __isAsync: boolean;  // tslint:disable-line\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param isAsync When true, deliver events asynchronously.\n   *\n   */\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T) { super.next(value); }\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param generatorOrNext When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification\n   * from this emitter.\n   * @param complete When supplied, a custom handler for a completion\n   * notification from this emitter.\n   */\n  subscribe(generatorOrNext?: any, error?: any, complete?: any): any {\n    let schedulerFn: (t: any) => any;\n    let errorFn = (err: any): any => null;\n    let completeFn = (): any => null;\n\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : (value: any) => { generatorOrNext.next(value); };\n\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                                   (err) => { generatorOrNext.error(err); };\n      }\n\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                                      () => { generatorOrNext.complete(); };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => { setTimeout(() => generatorOrNext(value)); } :\n                                     (value: any) => { generatorOrNext(value); };\n\n      if (error) {\n        errorFn =\n            this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n      }\n\n      if (complete) {\n        completeFn =\n            this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n      }\n    }\n\n    const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n\n    if (generatorOrNext instanceof Subscription) {\n      generatorOrNext.add(sink);\n    }\n\n    return sink;\n  }\n}\n"],"sourceRoot":""}