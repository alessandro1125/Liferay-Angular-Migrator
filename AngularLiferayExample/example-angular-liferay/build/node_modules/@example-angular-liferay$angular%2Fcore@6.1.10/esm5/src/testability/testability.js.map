{"version":3,"sources":["../../../../../../../../../../packages/core/src/testability/testability.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,UAAR,QAAyB,OAAzB;AACA,aAAQ,iBAAR,QAAgC,SAAhC;AACA,aAAQ,MAAR,QAAqB,iBAArB;AAmCA;;;;;;AAOA,QAAA,cAAA,aAAA,YAAA;AAcE,iBAAA,WAAA,CAAoB,OAApB,EAAmC;AAAnC,gBAAA,QAAA,IAAA;AAAoB,iBAAA,OAAA,GAAA,OAAA;AAbZ,iBAAA,aAAA,GAAwB,CAAxB;AACA,iBAAA,aAAA,GAAyB,IAAzB;AACR;;;;;;AAMQ,iBAAA,QAAA,GAAoB,KAApB;AACA,iBAAA,UAAA,GAA6B,EAA7B;AAKN,iBAAK,mBAAL;AACA,oBAAQ,GAAR,CAAY,YAAA;AAAQ,sBAAK,gBAAL,GAAwB,KAAK,OAAL,CAAa,GAAb,CAAiB,kBAAjB,CAAxB;AAA+D,aAAnF;AACD;AAEO,oBAAA,SAAA,CAAA,mBAAA,GAAR,YAAA;AAAA,gBAAA,QAAA,IAAA;AACE,iBAAK,OAAL,CAAa,UAAb,CAAwB,SAAxB,CAAkC;AAChC,sBAAM,YAAA;AACJ,0BAAK,QAAL,GAAgB,IAAhB;AACA,0BAAK,aAAL,GAAqB,KAArB;AACD;AAJ+B,aAAlC;AAOA,iBAAK,OAAL,CAAa,iBAAb,CAA+B,YAAA;AAC7B,sBAAK,OAAL,CAAa,QAAb,CAAsB,SAAtB,CAAgC;AAC9B,0BAAM,YAAA;AACJ,+BAAO,sBAAP;AACA,0CAAkB,YAAA;AAChB,kCAAK,aAAL,GAAqB,IAArB;AACA,kCAAK,oBAAL;AACD,yBAHD;AAID;AAP6B,iBAAhC;AASD,aAVD;AAWD,SAnBO;AAqBR;;;;AAIA,oBAAA,SAAA,CAAA,2BAAA,GAAA,YAAA;AACE,iBAAK,aAAL,IAAsB,CAAtB;AACA,iBAAK,QAAL,GAAgB,IAAhB;AACA,mBAAO,KAAK,aAAZ;AACD,SAJD;AAMA;;;;AAIA,oBAAA,SAAA,CAAA,2BAAA,GAAA,YAAA;AACE,iBAAK,aAAL,IAAsB,CAAtB;AACA,gBAAI,KAAK,aAAL,GAAqB,CAAzB,EAA4B;AAC1B,sBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;AACD,iBAAK,oBAAL;AACA,mBAAO,KAAK,aAAZ;AACD,SAPD;AASA;;;AAGA,oBAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,mBAAO,KAAK,aAAL,IAAsB,KAAK,aAAL,KAAuB,CAA7C,IAAkD,CAAC,KAAK,OAAL,CAAa,oBAAvE;AACD,SAFD;AAIQ,oBAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AAAA,gBAAA,QAAA,IAAA;AACE,gBAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB;AACA,kCAAkB,YAAA;AAChB,2BAAO,MAAK,UAAL,CAAgB,MAAhB,KAA2B,CAAlC,EAAqC;AACnC,4BAAI,KAAK,MAAK,UAAL,CAAgB,GAAhB,EAAT;AACA,qCAAa,GAAG,SAAhB;AACA,2BAAG,MAAH,CAAU,MAAK,QAAf;AACD;AACD,0BAAK,QAAL,GAAgB,KAAhB;AACD,iBAPD;AAQD,aAVD,MAUO;AACL;AACA,oBAAI,YAAU,KAAK,eAAL,EAAd;AACA,qBAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,EAAD,EAAG;AAC1C,wBAAI,GAAG,QAAH,IAAe,GAAG,QAAH,CAAY,SAAZ,CAAnB,EAAyC;AACvC,qCAAa,GAAG,SAAhB;AACA,+BAAO,KAAP;AACD;AAED,2BAAO,IAAP;AACD,iBAPiB,CAAlB;AASA,qBAAK,QAAL,GAAgB,IAAhB;AACD;AACF,SAzBO;AA2BA,oBAAA,SAAA,CAAA,eAAA,GAAR,YAAA;AACE,gBAAI,CAAC,KAAK,gBAAV,EAA4B;AAC1B,uBAAO,EAAP;AACD;AAED,mBAAO,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,GAAjC,CAAqC,UAAC,CAAD,EAAQ;AAClD,uBAAO;AACL,4BAAQ,EAAE,MADL;AAEL,gCAAY,EAAE,IAAF,CAAO,UAFd;AAGL,2BAAO,EAAE,IAAF,CAAO,KAHT;AAIL;AACA;AACA,sCAAmB,EAAU,gBANxB;AAOL;AACA;AACA,yBAAM,EAAE,IAAF,CAAe;AAThB,iBAAP;AAWD,aAZM,CAAP;AAaD,SAlBO;AAoBA,oBAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,EAApB,EAAsC,OAAtC,EAAwD,QAAxD,EAAiF;AAAjF,gBAAA,QAAA,IAAA;AACE,gBAAI,YAAiB,CAAC,CAAtB;AACA,gBAAI,WAAW,UAAU,CAAzB,EAA4B;AAC1B,4BAAY,WAAW,YAAA;AACrB,0BAAK,UAAL,GAAkB,MAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,EAAD,EAAG;AAAK,+BAAA,GAAG,SAAH,KAAA,SAAA;AAA0B,qBAAzD,CAAlB;AACA,uBAAG,MAAK,QAAR,EAAkB,MAAK,eAAL,EAAlB;AACD,iBAHW,EAGT,OAHS,CAAZ;AAID;AACD,iBAAK,UAAL,CAAgB,IAAhB,CAAmC,EAAC,QAAQ,EAAT,EAAa,WAAW,SAAxB,EAAmC,UAAU,QAA7C,EAAnC;AACD,SATO;AAWR;;;;;;;;;;;;AAYA,oBAAA,SAAA,CAAA,UAAA,GAAA,UAAW,MAAX,EAA6B,OAA7B,EAA+C,QAA/C,EAAkE;AAChE,gBAAI,YAAY,CAAC,KAAK,gBAAtB,EAAwC;AACtC,sBAAM,IAAI,KAAJ,CACF,uEACA,0DAFE,CAAN;AAGD;AACD;AACA,iBAAK,WAAL,CAAiB,MAAjB,EAAyC,OAAzC,EAAkD,QAAlD;AACA,iBAAK,oBAAL;AACD,SATD;AAWA;;;;AAIA,oBAAA,SAAA,CAAA,sBAAA,GAAA,YAAA;AAAmC,mBAAO,KAAK,aAAZ;AAA4B,SAA/D;AAEA;;;;;;AAMA,oBAAA,SAAA,CAAA,aAAA,GAAA,UAAc,KAAd,EAA0B,QAA1B,EAA4C,UAA5C,EAA+D;AAC7D;AACA,mBAAO,EAAP;AACD,SAHD;AAnKW,sBAAW,QAAA,UAAA,CAAA,CADvB,YACuB,E,yCAcO,M,EAdP,CAAA,EAAX,WAAW,CAAX;AAuKb,eAAA,WAAA;AAAC,KAvKD,EAAA;aAAa,W;AAyKb;;;;AAKA,QAAA,sBAAA,aAAA,YAAA;AAIE,iBAAA,mBAAA,GAAA;AAHA;AACA,iBAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AAEgB,+BAAmB,WAAnB,CAA+B,IAA/B;AAAuC;AAEvD;;;;;AAKA,4BAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,KAApB,EAAgC,WAAhC,EAAwD;AACtD,iBAAK,aAAL,CAAmB,GAAnB,CAAuB,KAAvB,EAA8B,WAA9B;AACD,SAFD;AAIA;;;;AAIA,4BAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,KAAtB,EAAgC;AAAI,iBAAK,aAAL,CAAmB,MAAnB,CAA0B,KAA1B;AAAmC,SAAvE;AAEA;;;AAGA,4BAAA,SAAA,CAAA,yBAAA,GAAA,YAAA;AAA8B,iBAAK,aAAL,CAAmB,KAAnB;AAA6B,SAA3D;AAEA;;;;AAIA,4BAAA,SAAA,CAAA,cAAA,GAAA,UAAe,IAAf,EAAwB;AAAsB,mBAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,KAAgC,IAAvC;AAA8C,SAA5F;AAEA;;;AAGA,4BAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;AAAuC,mBAAO,MAAM,IAAN,CAAW,KAAK,aAAL,CAAmB,MAAnB,EAAX,CAAP;AAAiD,SAAxF;AAEA;;;AAGA,4BAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAA8B,mBAAO,MAAM,IAAN,CAAW,KAAK,aAAL,CAAmB,IAAnB,EAAX,CAAP;AAA+C,SAA7E;AAEA;;;;;;AAMA,4BAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,IAAtB,EAAkC,eAAlC,EAAiE;AAA/B,gBAAA,oBAAA,KAAA,CAAA,EAAA;AAAA,kCAAA,IAAA;AAA+B;AAC/D,mBAAO,mBAAmB,qBAAnB,CAAyC,IAAzC,EAA+C,IAA/C,EAAqD,eAArD,CAAP;AACD,SAFD;AAhDW,8BAAmB,QAAA,UAAA,CAAA,CAD/B,YAC+B,E,2CAAA,CAAA,EAAnB,mBAAmB,CAAnB;AAmDb,eAAA,mBAAA;AAAC,KAnDD,EAAA;aAAa,mB;AAkEb,QAAA,sBAAA,aAAA,YAAA;AAAA,iBAAA,mBAAA,GAAA,CAMC;AALC,4BAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAyC,CAAU,CAAnD;AACA,4BAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,QAAtB,EAAqD,IAArD,EAAgE,eAAhE,EAAwF;AAEtF,mBAAO,IAAP;AACD,SAHD;AAIF,eAAA,mBAAA;AAAC,KAND,EAAA;AAQA;;;;AAIA,WAAM,SAAA,oBAAA,CAA+B,MAA/B,EAAqD;AACzD,6BAAqB,MAArB;AACD;AAED,QAAI,qBAAqC,IAAI,mBAAJ,EAAzC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../util';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @experimental\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  isPeriodic: boolean;\n  delay?: number;\n  creationLocation: Error;\n  xhr?: XMLHttpRequest;\n}\n\n// Angular internal, not intended for public API.\nexport type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: DoneCallback;\n  updateCb?: UpdateCallback;\n}\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @experimental\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _pendingCount: number = 0;\n  private _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  private _didWork: boolean = false;\n  private _callbacks: WaitCallback[] = [];\n\n  private taskTrackingZone: any;\n\n  constructor(private _ngZone: NgZone) {\n    this._watchAngularEvents();\n    _ngZone.run(() => { this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });\n  }\n\n  private _watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop() !;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n\n      this._didWork = true;\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n\n    return this.taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        isPeriodic: t.data.isPeriodic,\n        delay: t.data.delay,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        // Added by Zones for XHRs\n        // https://github.com/angular/zone.js/blob/master/lib/browser/browser.ts#L133\n        xhr: (t.data as any).target\n      };\n    });\n  }\n\n  private addCallback(cb: DoneCallback, timeout?: number, updateCb?: UpdateCallback) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error(\n          'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb as DoneCallback, timeout, updateCb as UpdateCallback);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount(): number { return this._pendingCount; }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @experimental\n */\n@Injectable()\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  constructor() { _testabilityGetter.addToWindow(this); }\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) { this._applications.delete(token); }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() { this._applications.clear(); }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability|null { return this._applications.get(elem) || null; }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] { return Array.from(this._applications.values()); }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] { return Array.from(this._applications.keys()); }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\n\nclass _NoopGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {}\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    return null;\n  }\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @experimental\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability = new _NoopGetTestability();\n"],"sourceRoot":""}