Liferay.Loader.define('@example-angular-liferay$angular/core@6.1.10/esm5/src/application_init', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { isPromise } from '../src/util/lang';
    import { Inject, Injectable, InjectionToken, Optional } from './di';
    /**
     * A function that will be executed when an application is initialized.
     */
    export var APP_INITIALIZER = new InjectionToken('Application Initializer');
    /**
     * A class that reflects the state of running {@link APP_INITIALIZER}s.
     */
    var ApplicationInitStatus = /** @class */function () {
        function ApplicationInitStatus(appInits) {
            var _this = this;
            this.appInits = appInits;
            this.initialized = false;
            this.done = false;
            this.donePromise = new Promise(function (res, rej) {
                _this.resolve = res;
                _this.reject = rej;
            });
        }
        /** @internal */
        ApplicationInitStatus.prototype.runInitializers = function () {
            var _this = this;
            if (this.initialized) {
                return;
            }
            var asyncInitPromises = [];
            var complete = function () {
                _this.done = true;
                _this.resolve();
            };
            if (this.appInits) {
                for (var i = 0; i < this.appInits.length; i++) {
                    var initResult = this.appInits[i]();
                    if (isPromise(initResult)) {
                        asyncInitPromises.push(initResult);
                    }
                }
            }
            Promise.all(asyncInitPromises).then(function () {
                complete();
            }).catch(function (e) {
                _this.reject(e);
            });
            if (asyncInitPromises.length === 0) {
                complete();
            }
            this.initialized = true;
        };
        ApplicationInitStatus = tslib_1.__decorate([Injectable(), tslib_1.__param(0, Inject(APP_INITIALIZER)), tslib_1.__param(0, Optional()), tslib_1.__metadata("design:paramtypes", [Array])], ApplicationInitStatus);
        return ApplicationInitStatus;
    }();
    export { ApplicationInitStatus };
});
//# sourceMappingURL=application_init.js.map