{"version":3,"sources":["testing.js"],"names":["RendererFactory2","getDebugNode","Compiler","Injectable","ApplicationInitStatus","Component","InjectionToken","Injector","NgModule","NgZone","Optional","SkipSelf","ɵAPP_ROOT","ɵclearOverrides","ɵoverrideComponentView","ɵoverrideProvider","ɵstringify","_global","window","global","asyncFallback","fn","jasmine","done","fail","e","runInTestZone","err","Error","Promise","finishCallback","failCallback","context","currentZone","Zone","current","AsyncTestZoneSpec","undefined","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","async","_Zone","reject","asyncTest","__symbol__","ComponentFixture","constructor","componentRef","ngZone","_autoDetect","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","resolve","res","_getRenderer","_renderer","injector","whenRenderingDone","renderer","destroy","unsubscribe","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","fakeAsyncFallback","args","lastProxyZoneSpec","apply","flushMicrotasksFallback","pendingPeriodicTimers","length","pendingTimers","_getFakeAsyncZoneSpec","tickFallback","millis","tick","flushFallback","maxTurns","flush","discardPeriodicTasksFallback","zoneSpec","flushMicrotasks","_Zone$1","fakeAsyncTestModule","resetFakeAsyncZone","fakeAsync","discardPeriodicTasks","AsyncTestCompleter","rej","_reject","value","stackTrace","promise","unimplemented","TestingCompiler","overrideModule","module","overrides","overrideDirective","directive","overrideComponent","component","overridePipe","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","decorators","type","TestingCompilerFactory","UNDEFINED","Object","TestComponentRenderer","insertRootElement","rootElementId","_nextRootElementId","ComponentFixtureAutoDetect","ComponentFixtureNoNgZone","TestBed","_instantiated","_compiler","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","platform","ngModule","initTestEnvironment","aotSummaries","testBed","getTestBed","resetTestEnvironment","resetTestingModule","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","override","pipe","overrideTemplate","template","set","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","THROW_IF_NOT_FOUND","createComponent","forEach","fixture","console","stacktrace","_assertNotInstantiated","push","providers","declarations","imports","schemas","moduleType","_createCompilerAndModule","compileModuleAndAllComponentsAsync","then","moduleAndComponentFactories","ngModuleFactory","_initIfNeeded","compileModuleAndAllComponentsSync","errorCompType","templateOf","compFactory","enableLongStackTrace","provide","useValue","ngZoneInjector","create","name","runInitializers","concat","map","entry","rootScopeImports","rootProviderOverrides","RootScopeModule","jit","DynamicTestModule","compilerFactory","createTestingCompiler","summary","methodName","methodDescription","result","execute","tokens","params","t","overrideProviderImpl","deprecated","ngInjectableDef","providedIn","useFactory","deps","flags","dep","depFlags","depToken","Array","isArray","deprecatedBehavior","OverrideComponent","selector","componentFactory","noNgZone","testComponentRenderer","rootElId","initComponent","NULL","_testBed","inject","indexOf","completer","InjectSetupWrapper","_moduleDef","_addModule","self","call","withModule","_global$1","beforeEach","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory"],"mappings":"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","file":"testing.js","sourcesContent":["/**\n * @license Angular v6.1.10\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\nimport { RendererFactory2, getDebugNode, Compiler, Injectable, ApplicationInitStatus, Component, InjectionToken, Injector, NgModule, NgZone, Optional, SkipSelf, ɵAPP_ROOT, ɵclearOverrides, ɵoverrideComponentView, ɵoverrideProvider, ɵstringify } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst _global = /** @type {?} */ ((typeof window === 'undefined' ? global : window));\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {\\@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n * @param {?} fn\n * @return {?}\n */\nfunction asyncFallback(fn) {\n    // If we're running using the Jasmine test framework, adapt to call the 'done'\n    // function when asynchronous activity is finished.\n    if (_global.jasmine) {\n        // Not using an arrow function to preserve context passed from call site\n        return function (done) {\n            if (!done) {\n                // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                // fake it here and assume sync.\n                done = function () { };\n                done.fail = function (e) { throw e; };\n            }\n            runInTestZone(fn, this, done, (err) => {\n                if (typeof err === 'string') {\n                    return done.fail(new Error(/** @type {?} */ (err)));\n                }\n                else {\n                    done.fail(err);\n                }\n            });\n        };\n    }\n    // Otherwise, return a promise which will resolve when asynchronous activity\n    // is finished. This will be correctly consumed by the Mocha framework with\n    // it('...', async(myFn)); or can be used in a custom framework.\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        return new Promise((finishCallback, failCallback) => {\n            runInTestZone(fn, this, finishCallback, failCallback);\n        });\n    };\n}\n/**\n * @param {?} fn\n * @param {?} context\n * @param {?} finishCallback\n * @param {?} failCallback\n * @return {?}\n */\nfunction runInTestZone(fn, context, finishCallback, failCallback) {\n    /** @type {?} */\n    const currentZone = Zone.current;\n    /** @type {?} */\n    const AsyncTestZoneSpec = (/** @type {?} */ (Zone))['AsyncTestZoneSpec'];\n    if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/async-test.js');\n    }\n    /** @type {?} */\n    const ProxyZoneSpec = /** @type {?} */ ((/** @type {?} */ (Zone))['ProxyZoneSpec']);\n    if (ProxyZoneSpec === undefined) {\n        throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/proxy.js');\n    }\n    /** @type {?} */\n    const proxyZoneSpec = ProxyZoneSpec.get();\n    ProxyZoneSpec.assertPresent();\n    /** @type {?} */\n    const proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n    /** @type {?} */\n    const previousDelegate = proxyZoneSpec.getDelegate();\n    proxyZone.parent.run(() => {\n        /** @type {?} */\n        const testZoneSpec = new AsyncTestZoneSpec(() => {\n            // Need to restore the original zone.\n            currentZone.run(() => {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                finishCallback();\n            });\n        }, (error) => {\n            // Need to restore the original zone.\n            currentZone.run(() => {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                failCallback(error);\n            });\n        }, 'test');\n        proxyZoneSpec.setDelegate(testZoneSpec);\n    });\n    return Zone.current.runGuarded(fn, context);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {\\@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n * @param {?} fn\n * @return {?}\n */\nfunction async(fn) {\n    /** @type {?} */\n    const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    if (!_Zone) {\n        return function () {\n            return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/zone.js');\n        };\n    }\n    /** @type {?} */\n    const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n    if (typeof asyncTest === 'function') {\n        return asyncTest(fn);\n    }\n    // not using new version of zone.js\n    // TODO @JiaLiPassion, remove this after all library updated to\n    // newest version of zone.js(0.8.25)\n    return asyncFallback(fn);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Fixture for debugging and testing a component.\n *\n *\n * @template T\n */\nclass ComponentFixture {\n    /**\n     * @param {?} componentRef\n     * @param {?} ngZone\n     * @param {?} _autoDetect\n     */\n    constructor(componentRef, ngZone, _autoDetect) {\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = /** @type {?} */ (getDebugNode(this.elementRef.nativeElement));\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(() => {\n                this._onUnstableSubscription =\n                    ngZone.onUnstable.subscribe({ next: () => { this._isStable = false; } });\n                this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: () => {\n                        if (this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            this.detectChanges(true);\n                        }\n                    }\n                });\n                this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: () => {\n                        this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(() => {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (this._promise !== null) {\n                                        /** @type {?} */ ((this._resolve))(true);\n                                        this._resolve = null;\n                                        this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                this._onErrorSubscription =\n                    ngZone.onError.subscribe({ next: (error) => { throw error; } });\n            });\n        }\n    }\n    /**\n     * @param {?} checkNoChanges\n     * @return {?}\n     */\n    _tick(checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    }\n    /**\n     * Trigger a change detection cycle for the component.\n     * @param {?=} checkNoChanges\n     * @return {?}\n     */\n    detectChanges(checkNoChanges = true) {\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(() => { this._tick(checkNoChanges); });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    }\n    /**\n     * Do a change detection run to make sure there were no changes.\n     * @return {?}\n     */\n    checkNoChanges() { this.changeDetectorRef.checkNoChanges(); }\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     * @param {?=} autoDetect\n     * @return {?}\n     */\n    autoDetectChanges(autoDetect = true) {\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    }\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     * @return {?}\n     */\n    isStable() { return this._isStable && !/** @type {?} */ ((this.ngZone)).hasPendingMacrotasks; }\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     * @return {?}\n     */\n    whenStable() {\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(res => { this._resolve = res; });\n            return this._promise;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getRenderer() {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n        }\n        return /** @type {?} */ (this._renderer);\n    }\n    /**\n     * Get a promise that resolves when the ui state is stable following animations.\n     * @return {?}\n     */\n    whenRenderingDone() {\n        /** @type {?} */\n        const renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    }\n    /**\n     * Trigger component destruction.\n     * @return {?}\n     */\n    destroy() {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    }\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** *\n * fakeAsync has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n  @type {?} */\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\n/** @type {?} */\nconst FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n/** @type {?} */\nconst ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n/** @type {?} */\nlet _fakeAsyncTestZoneSpec = null;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * \\@experimental\n * @return {?}\n */\nfunction resetFakeAsyncZoneFallback() {\n    _fakeAsyncTestZoneSpec = null;\n    // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n    ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n}\n/** @type {?} */\nlet _inFakeAsyncCall = false;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/testing/ts/fake_async.ts region='basic'}\n *\n * \\@experimental\n * @param {?} fn\n * @return {?} The function wrapped to be executed in the fakeAsync zone\n *\n */\nfunction fakeAsyncFallback(fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function (...args) {\n        /** @type {?} */\n        const proxyZoneSpec = ProxyZoneSpec.assertPresent();\n        if (_inFakeAsyncCall) {\n            throw new Error('fakeAsync() calls can not be nested');\n        }\n        _inFakeAsyncCall = true;\n        try {\n            if (!_fakeAsyncTestZoneSpec) {\n                if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                    throw new Error('fakeAsync() calls can not be nested');\n                }\n                _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n            }\n            /** @type {?} */\n            let res;\n            /** @type {?} */\n            const lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n            proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n            try {\n                res = fn.apply(this, args);\n                flushMicrotasksFallback();\n            }\n            finally {\n                proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                throw new Error(`${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n                    `periodic timer(s) still in the queue.`);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                throw new Error(`${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n            }\n            return res;\n        }\n        finally {\n            _inFakeAsyncCall = false;\n            resetFakeAsyncZoneFallback();\n        }\n    };\n}\n/**\n * @return {?}\n */\nfunction _getFakeAsyncZoneSpec() {\n    if (_fakeAsyncTestZoneSpec == null) {\n        throw new Error('The code should be running in the fakeAsync zone to call this function');\n    }\n    return _fakeAsyncTestZoneSpec;\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/testing/ts/fake_async.ts region='basic'}\n *\n * \\@experimental\n * @param {?=} millis\n * @return {?}\n */\nfunction tickFallback(millis = 0) {\n    _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * \\@experimental\n * @param {?=} maxTurns\n * @return {?} The simulated time elapsed, in millis.\n *\n */\nfunction flushFallback(maxTurns) {\n    return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * \\@experimental\n * @return {?}\n */\nfunction discardPeriodicTasksFallback() {\n    /** @type {?} */\n    const zoneSpec = _getFakeAsyncZoneSpec();\n    zoneSpec.pendingPeriodicTimers.length = 0;\n}\n/**\n * Flush any pending microtasks.\n *\n * \\@experimental\n * @return {?}\n */\nfunction flushMicrotasksFallback() {\n    _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n/** @type {?} */\nconst fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * \\@experimental\n * @return {?}\n */\nfunction resetFakeAsyncZone() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.resetFakeAsyncZone();\n    }\n    else {\n        return resetFakeAsyncZoneFallback();\n    }\n}\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/testing/ts/fake_async.ts region='basic'}\n *\n * \\@experimental\n * @param {?} fn\n * @return {?} The function wrapped to be executed in the fakeAsync zone\n *\n */\nfunction fakeAsync(fn) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.fakeAsync(fn);\n    }\n    else {\n        return fakeAsyncFallback(fn);\n    }\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/testing/ts/fake_async.ts region='basic'}\n *\n * \\@experimental\n * @param {?=} millis\n * @return {?}\n */\nfunction tick(millis = 0) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.tick(millis);\n    }\n    else {\n        return tickFallback(millis);\n    }\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * \\@experimental\n * @param {?=} maxTurns\n * @return {?} The simulated time elapsed, in millis.\n *\n */\nfunction flush(maxTurns) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flush(maxTurns);\n    }\n    else {\n        return flushFallback(maxTurns);\n    }\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * \\@experimental\n * @return {?}\n */\nfunction discardPeriodicTasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.discardPeriodicTasks();\n    }\n    else {\n        discardPeriodicTasksFallback();\n    }\n}\n/**\n * Flush any pending microtasks.\n *\n * \\@experimental\n * @return {?}\n */\nfunction flushMicrotasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flushMicrotasks();\n    }\n    else {\n        return flushMicrotasksFallback();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nclass AsyncTestCompleter {\n    constructor() {\n        this._promise = new Promise((res, rej) => {\n            this._resolve = res;\n            this._reject = rej;\n        });\n    }\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    done(value) { this._resolve(value); }\n    /**\n     * @param {?=} error\n     * @param {?=} stackTrace\n     * @return {?}\n     */\n    fail(error, stackTrace) { this._reject(error); }\n    /**\n     * @return {?}\n     */\n    get promise() { return this._promise; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * \\@experimental\n */\nclass TestingCompiler extends Compiler {\n    /**\n     * @return {?}\n     */\n    get injector() { throw unimplemented(); }\n    /**\n     * @param {?} module\n     * @param {?} overrides\n     * @return {?}\n     */\n    overrideModule(module, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * @param {?} directive\n     * @param {?} overrides\n     * @return {?}\n     */\n    overrideDirective(directive, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * @param {?} component\n     * @param {?} overrides\n     * @return {?}\n     */\n    overrideComponent(component, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * @param {?} directive\n     * @param {?} overrides\n     * @return {?}\n     */\n    overridePipe(directive, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     * @param {?} summaries\n     * @return {?}\n     */\n    loadAotSummaries(summaries) { throw unimplemented(); }\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    getComponentFactory(component) { throw unimplemented(); }\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     * @param {?} error\n     * @return {?}\n     */\n    getComponentFromError(error) { throw unimplemented(); }\n}\nTestingCompiler.decorators = [\n    { type: Injectable }\n];\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nclass TestingCompilerFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UNDEFINED = new Object();\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * \\@experimental\n */\nclass TestComponentRenderer {\n    /**\n     * @param {?} rootElementId\n     * @return {?}\n     */\n    insertRootElement(rootElementId) { }\n}\n/** @type {?} */\nlet _nextRootElementId = 0;\n/** *\n * \\@experimental\n  @type {?} */\nconst ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/** *\n * \\@experimental\n  @type {?} */\nconst ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n/**\n * \\@description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n *\n */\nclass TestBed {\n    constructor() {\n        this._instantiated = false;\n        this._compiler = /** @type {?} */ ((null));\n        this._moduleRef = /** @type {?} */ ((null));\n        this._moduleFactory = /** @type {?} */ ((null));\n        this._compilerOptions = [];\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._activeFixtures = [];\n        this._testEnvAotSummaries = () => [];\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this.platform = /** @type {?} */ ((null));\n        this.ngModule = /** @type {?} */ ((null));\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '\\@angular/<platform_name>/testing'.\n     *\n     * \\@experimental\n     * @param {?} ngModule\n     * @param {?} platform\n     * @param {?=} aotSummaries\n     * @return {?}\n     */\n    static initTestEnvironment(ngModule, platform, aotSummaries) {\n        /** @type {?} */\n        const testBed = getTestBed();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * \\@experimental\n     * @return {?}\n     */\n    static resetTestEnvironment() { getTestBed().resetTestEnvironment(); }\n    /**\n     * @return {?}\n     */\n    static resetTestingModule() {\n        getTestBed().resetTestingModule();\n        return TestBed;\n    }\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     * @param {?} config\n     * @return {?}\n     */\n    static configureCompiler(config) {\n        getTestBed().configureCompiler(config);\n        return TestBed;\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     * @param {?} moduleDef\n     * @return {?}\n     */\n    static configureTestingModule(moduleDef) {\n        getTestBed().configureTestingModule(moduleDef);\n        return TestBed;\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     * @return {?}\n     */\n    static compileComponents() { return getTestBed().compileComponents(); }\n    /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    static overrideModule(ngModule, override) {\n        getTestBed().overrideModule(ngModule, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    static overrideComponent(component, override) {\n        getTestBed().overrideComponent(component, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    static overrideDirective(directive, override) {\n        getTestBed().overrideDirective(directive, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    static overridePipe(pipe, override) {\n        getTestBed().overridePipe(pipe, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @return {?}\n     */\n    static overrideTemplate(component, template) {\n        getTestBed().overrideComponent(component, { set: { template, templateUrl: /** @type {?} */ ((null)) } });\n        return TestBed;\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     * @param {?} component\n     * @param {?} template\n     * @return {?}\n     */\n    static overrideTemplateUsingTestingModule(component, template) {\n        getTestBed().overrideTemplateUsingTestingModule(component, template);\n        return TestBed;\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    static overrideProvider(token, provider) {\n        getTestBed().overrideProvider(token, /** @type {?} */ (provider));\n        return TestBed;\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    static deprecatedOverrideProvider(token, provider) {\n        getTestBed().deprecatedOverrideProvider(token, /** @type {?} */ (provider));\n        return TestBed;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        return getTestBed().get(token, notFoundValue);\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    static createComponent(component) {\n        return getTestBed().createComponent(component);\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '\\@angular/<platform_name>/testing'.\n     *\n     * \\@experimental\n     * @param {?} ngModule\n     * @param {?} platform\n     * @param {?=} aotSummaries\n     * @return {?}\n     */\n    initTestEnvironment(ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        if (aotSummaries) {\n            this._testEnvAotSummaries = aotSummaries;\n        }\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * \\@experimental\n     * @return {?}\n     */\n    resetTestEnvironment() {\n        this.resetTestingModule();\n        this.platform = /** @type {?} */ ((null));\n        this.ngModule = /** @type {?} */ ((null));\n        this._testEnvAotSummaries = () => [];\n    }\n    /**\n     * @return {?}\n     */\n    resetTestingModule() {\n        ɵclearOverrides();\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._compiler = /** @type {?} */ ((null));\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this._moduleRef = /** @type {?} */ ((null));\n        this._moduleFactory = /** @type {?} */ ((null));\n        this._compilerOptions = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._instantiated = false;\n        this._activeFixtures.forEach((fixture) => {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    configureCompiler(config) {\n        this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n        this._compilerOptions.push(config);\n    }\n    /**\n     * @param {?} moduleDef\n     * @return {?}\n     */\n    configureTestingModule(moduleDef) {\n        this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        if (moduleDef.providers) {\n            this._providers.push(...moduleDef.providers);\n        }\n        if (moduleDef.declarations) {\n            this._declarations.push(...moduleDef.declarations);\n        }\n        if (moduleDef.imports) {\n            this._imports.push(...moduleDef.imports);\n        }\n        if (moduleDef.schemas) {\n            this._schemas.push(...moduleDef.schemas);\n        }\n        if (moduleDef.aotSummaries) {\n            this._aotSummaries.push(moduleDef.aotSummaries);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    compileComponents() {\n        if (this._moduleFactory || this._instantiated) {\n            return Promise.resolve(null);\n        }\n        /** @type {?} */\n        const moduleType = this._createCompilerAndModule();\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n            .then((moduleAndComponentFactories) => {\n            this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _initIfNeeded() {\n        if (this._instantiated) {\n            return;\n        }\n        if (!this._moduleFactory) {\n            try {\n                /** @type {?} */\n                const moduleType = this._createCompilerAndModule();\n                this._moduleFactory =\n                    this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n            }\n            catch (e) {\n                /** @type {?} */\n                const errorCompType = this._compiler.getComponentFromError(e);\n                if (errorCompType) {\n                    throw new Error(`This test module uses the component ${ɵstringify(errorCompType)} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n                        `Please call \"TestBed.compileComponents\" before your test.`);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        for (const { component, templateOf } of this._templateOverrides) {\n            /** @type {?} */\n            const compFactory = this._compiler.getComponentFactory(templateOf);\n            ɵoverrideComponentView(component, compFactory);\n        }\n        /** @type {?} */\n        const ngZone = new NgZone({ enableLongStackTrace: true });\n        /** @type {?} */\n        const providers = [{ provide: NgZone, useValue: ngZone }];\n        /** @type {?} */\n        const ngZoneInjector = Injector.create({\n            providers: providers,\n            parent: this.platform.injector,\n            name: this._moduleFactory.moduleType.name\n        });\n        this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        (/** @type {?} */ (this._moduleRef.injector.get(ApplicationInitStatus))).runInitializers();\n        this._instantiated = true;\n    }\n    /**\n     * @return {?}\n     */\n    _createCompilerAndModule() {\n        /** @type {?} */\n        const providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n        /** @type {?} */\n        const declarations = [...this._declarations, ...this._templateOverrides.map(entry => entry.templateOf)];\n        /** @type {?} */\n        const rootScopeImports = [];\n        /** @type {?} */\n        const rootProviderOverrides = this._rootProviderOverrides;\n        if (this._isRoot) {\n            class RootScopeModule {\n            }\n            RootScopeModule.decorators = [\n                { type: NgModule, args: [{\n                            providers: [\n                                ...rootProviderOverrides,\n                            ],\n                            jit: true,\n                        },] },\n            ];\n            rootScopeImports.push(RootScopeModule);\n        }\n        providers.push({ provide: ɵAPP_ROOT, useValue: this._isRoot });\n        /** @type {?} */\n        const imports = [rootScopeImports, this.ngModule, this._imports];\n        /** @type {?} */\n        const schemas = this._schemas;\n        class DynamicTestModule {\n        }\n        DynamicTestModule.decorators = [\n            { type: NgModule, args: [{ providers, declarations, imports, schemas, jit: true },] },\n        ];\n        /** @type {?} */\n        const compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n        this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n        for (const summary of [this._testEnvAotSummaries, ...this._aotSummaries]) {\n            this._compiler.loadAotSummaries(summary);\n        }\n        this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n        this._componentOverrides.forEach((entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n        this._directiveOverrides.forEach((entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n        this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n        return DynamicTestModule;\n    }\n    /**\n     * @param {?} methodName\n     * @param {?} methodDescription\n     * @return {?}\n     */\n    _assertNotInstantiated(methodName, methodDescription) {\n        if (this._instantiated) {\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        this._initIfNeeded();\n        if (token === TestBed) {\n            return this;\n        }\n        /** @type {?} */\n        const result = this._moduleRef.injector.get(token, UNDEFINED);\n        return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n    }\n    /**\n     * @param {?} tokens\n     * @param {?} fn\n     * @param {?=} context\n     * @return {?}\n     */\n    execute(tokens, fn, context) {\n        this._initIfNeeded();\n        /** @type {?} */\n        const params = tokens.map(t => this.get(t));\n        return fn.apply(context, params);\n    }\n    /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    overrideModule(ngModule, override) {\n        this._assertNotInstantiated('overrideModule', 'override module metadata');\n        this._moduleOverrides.push([ngModule, override]);\n    }\n    /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    overrideComponent(component, override) {\n        this._assertNotInstantiated('overrideComponent', 'override component metadata');\n        this._componentOverrides.push([component, override]);\n    }\n    /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    overrideDirective(directive, override) {\n        this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this._directiveOverrides.push([directive, override]);\n    }\n    /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    overridePipe(pipe, override) {\n        this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this._pipeOverrides.push([pipe, override]);\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    overrideProvider(token, provider) {\n        this.overrideProviderImpl(token, provider);\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    deprecatedOverrideProvider(token, provider) {\n        this.overrideProviderImpl(token, provider, /* deprecated */ /* deprecated */ true);\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @param {?=} deprecated\n     * @return {?}\n     */\n    overrideProviderImpl(token, provider, deprecated = false) {\n        if (typeof token !== 'string' && token.ngInjectableDef &&\n            token.ngInjectableDef.providedIn === 'root') {\n            if (provider.useFactory) {\n                this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n            }\n            else {\n                this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n            }\n        }\n        /** @type {?} */\n        let flags = 0;\n        /** @type {?} */\n        let value;\n        if (provider.useFactory) {\n            flags |= 1024 /* TypeFactoryProvider */;\n            value = provider.useFactory;\n        }\n        else {\n            flags |= 256 /* TypeValueProvider */;\n            value = provider.useValue;\n        }\n        /** @type {?} */\n        const deps = (provider.deps || []).map((dep) => {\n            /** @type {?} */\n            let depFlags = 0 /* None */;\n            /** @type {?} */\n            let depToken;\n            if (Array.isArray(dep)) {\n                dep.forEach((entry) => {\n                    if (entry instanceof Optional) {\n                        depFlags |= 2 /* Optional */;\n                    }\n                    else if (entry instanceof SkipSelf) {\n                        depFlags |= 1 /* SkipSelf */;\n                    }\n                    else {\n                        depToken = entry;\n                    }\n                });\n            }\n            else {\n                depToken = dep;\n            }\n            return [depFlags, depToken];\n        });\n        ɵoverrideProvider({ token, flags, deps, value, deprecatedBehavior: deprecated });\n    }\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @return {?}\n     */\n    overrideTemplateUsingTestingModule(component, template) {\n        this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n        class OverrideComponent {\n        }\n        OverrideComponent.decorators = [\n            { type: Component, args: [{ selector: 'empty', template, jit: true },] },\n        ];\n        this._templateOverrides.push({ component, templateOf: OverrideComponent });\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    createComponent(component) {\n        this._initIfNeeded();\n        /** @type {?} */\n        const componentFactory = this._compiler.getComponentFactory(component);\n        if (!componentFactory) {\n            throw new Error(`Cannot create the component ${ɵstringify(component)} as it was not imported into the testing module!`);\n        }\n        /** @type {?} */\n        const noNgZone = this.get(ComponentFixtureNoNgZone, false);\n        /** @type {?} */\n        const autoDetect = this.get(ComponentFixtureAutoDetect, false);\n        /** @type {?} */\n        const ngZone = noNgZone ? null : this.get(NgZone, null);\n        /** @type {?} */\n        const testComponentRenderer = this.get(TestComponentRenderer);\n        /** @type {?} */\n        const rootElId = `root${_nextRootElementId++}`;\n        testComponentRenderer.insertRootElement(rootElId);\n        /** @type {?} */\n        const initComponent = () => {\n            /** @type {?} */\n            const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        /** @type {?} */\n        const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n        this._activeFixtures.push(fixture);\n        return fixture;\n    }\n}\n/** @type {?} */\nlet _testBed = /** @type {?} */ ((null));\n/**\n * \\@experimental\n * @return {?}\n */\nfunction getTestBed() {\n    return _testBed = _testBed || new TestBed();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', \\@Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n *\n * @param {?} tokens\n * @param {?} fn\n * @return {?}\n */\nfunction inject(tokens, fn) {\n    /** @type {?} */\n    const testBed = getTestBed();\n    if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n            // the injected tokens.\n            return testBed.compileComponents().then(() => {\n                /** @type {?} */\n                const completer = testBed.get(AsyncTestCompleter);\n                testBed.execute(tokens, fn, this);\n                return completer.promise;\n            });\n        };\n    }\n    else {\n        // Not using an arrow function to preserve context passed from call site\n        return function () { return testBed.execute(tokens, fn, this); };\n    }\n}\n/**\n * \\@experimental\n */\nclass InjectSetupWrapper {\n    /**\n     * @param {?} _moduleDef\n     */\n    constructor(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    /**\n     * @return {?}\n     */\n    _addModule() {\n        /** @type {?} */\n        const moduleDef = this._moduleDef();\n        if (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n        }\n    }\n    /**\n     * @param {?} tokens\n     * @param {?} fn\n     * @return {?}\n     */\n    inject(tokens, fn) {\n        /** @type {?} */\n        const self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    }\n}\n/**\n * @param {?} moduleDef\n * @param {?=} fn\n * @return {?}\n */\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            /** @type {?} */\n            const testBed = getTestBed();\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(() => moduleDef);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _global$1 = /** @type {?} */ ((typeof window === 'undefined' ? global : window));\n// Reset the test providers and the fake async zone before each test.\nif (_global$1.beforeEach) {\n    _global$1.beforeEach(() => {\n        TestBed.resetTestingModule();\n        resetFakeAsyncZone();\n    });\n}\n/** @type {?} */\nconst __core_private_testing_placeholder__ = '';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { async, ComponentFixture, resetFakeAsyncZone, fakeAsync, tick, flush, discardPeriodicTasks, flushMicrotasks, getTestBed, inject, withModule, TestComponentRenderer, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBed, InjectSetupWrapper, __core_private_testing_placeholder__, TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory };\n//# sourceMappingURL=testing.js.map\n"]}