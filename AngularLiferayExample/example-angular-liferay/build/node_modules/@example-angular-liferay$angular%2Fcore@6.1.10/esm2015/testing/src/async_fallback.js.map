{"version":3,"sources":["../../../../../../../packages/core/testing/src/async_fallback.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA,UAAM,UAAO,gBAAS,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAhC,GAAyC,MAA/D;;;;;;;;;;;;;;;;;;;;AAmBA,WAAM,SAAA,aAAA,CAAwB,EAAxB,EAAoC;;;AAGxC,YAAI,QAAQ,OAAZ,EAAqB;;AAEnB,mBAAO,UAAS,IAAT,EAAkB;AACvB,oBAAI,CAAC,IAAL,EAAW;;;AAGT,2BAAO,YAAA,CAAa,CAApB;AACA,yBAAK,IAAL,GAAY,UAAS,CAAT,EAAe;AAAI,8BAAM,CAAN;AAAU,qBAAzC;AACD;AACD,8BAAc,EAAd,EAAkB,IAAlB,EAAwB,IAAxB,EAA+B,GAAD,IAAa;AACzC,wBAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,+BAAO,KAAK,IAAL,CAAU,IAAI,KAAJ,EAAS,gBAAS,GAAlB,CAAV,CAAP;AACD,qBAFD,MAEO;AACL,6BAAK,IAAL,CAAU,GAAV;AACD;AACF,iBAND;AAOD,aAdD;AAeD;;;;;AAKD,eAAO,YAAA;AACL,mBAAO,IAAI,OAAJ,CAAkB,CAAC,cAAD,EAAiB,YAAjB,KAAiC;AACxD,8BAAc,EAAd,EAAkB,IAAlB,EAAwB,cAAxB,EAAwC,YAAxC;AACD,aAFM,CAAP;AAGD,SAJD;AAKD;;;;;;;;AAED,aAAA,aAAA,CACI,EADJ,EACkB,OADlB,EACgC,cADhC,EAC0D,YAD1D,EACgF;;AAC9E,cAAM,cAAc,KAAK,OAAzB;;AACA,cAAM,oBAAoB,gBAAC,IAAD,CAAc,mBAAd,CAA1B;AACA,YAAI,sBAAsB,SAA1B,EAAqC;AACnC,kBAAM,IAAI,KAAJ,CACF,qFACA,4EAFE,CAAN;AAGD;;AACD,cAAM,gBAAa,gBAAG,CAAA,gBAAC,IAAD,CAAc,eAAd,CAAtB;AAIA,YAAI,kBAAkB,SAAtB,EAAiC;AAC/B,kBAAM,IAAI,KAAJ,CACF,iFACA,uEAFE,CAAN;AAGD;;AACD,cAAM,gBAAgB,cAAc,GAAd,EAAtB;AACA,sBAAc,aAAd;;AAGA,cAAM,YAAY,KAAK,OAAL,CAAa,WAAb,CAAyB,eAAzB,CAAlB;;AACA,cAAM,mBAAmB,cAAc,WAAd,EAAzB;AACA,kBAAU,MAAV,CAAiB,GAAjB,CAAqB,MAAK;;AACxB,kBAAM,eAAyB,IAAI,iBAAJ,CAC3B,MAAK;;AAEH,4BAAY,GAAZ,CAAgB,MAAK;AACnB,wBAAI,cAAc,WAAd,MAA+B,YAAnC,EAAiD;;AAE/C,sCAAc,WAAd,CAA0B,gBAA1B;AACD;AACD;AACD,iBAND;AAOD,aAV0B,EAW1B,KAAD,IAAe;;AAEb,4BAAY,GAAZ,CAAgB,MAAK;AACnB,wBAAI,cAAc,WAAd,MAA+B,YAAnC,EAAiD;;AAE/C,sCAAc,WAAd,CAA0B,gBAA1B;AACD;AACD,iCAAa,KAAb;AACD,iBAND;AAOD,aApB0B,EAqB3B,MArB2B,CAA/B;AAsBA,0BAAc,WAAd,CAA0B,YAA1B;AACD,SAxBD;AAyBA,eAAO,KAAK,OAAL,CAAa,UAAb,CAAwB,EAAxB,EAA4B,OAA5B,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * async has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n */\ndeclare var global: any;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nexport function asyncFallback(fn: Function): (done: any) => any {\n  // If we're running using the Jasmine test framework, adapt to call the 'done'\n  // function when asynchronous activity is finished.\n  if (_global.jasmine) {\n    // Not using an arrow function to preserve context passed from call site\n    return function(done: any) {\n      if (!done) {\n        // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n        // fake it here and assume sync.\n        done = function() {};\n        done.fail = function(e: any) { throw e; };\n      }\n      runInTestZone(fn, this, done, (err: any) => {\n        if (typeof err === 'string') {\n          return done.fail(new Error(<string>err));\n        } else {\n          done.fail(err);\n        }\n      });\n    };\n  }\n  // Otherwise, return a promise which will resolve when asynchronous activity\n  // is finished. This will be correctly consumed by the Mocha framework with\n  // it('...', async(myFn)); or can be used in a custom framework.\n  // Not using an arrow function to preserve context passed from call site\n  return function() {\n    return new Promise<void>((finishCallback, failCallback) => {\n      runInTestZone(fn, this, finishCallback, failCallback);\n    });\n  };\n}\n\nfunction runInTestZone(\n    fn: Function, context: any, finishCallback: Function, failCallback: Function) {\n  const currentZone = Zone.current;\n  const AsyncTestZoneSpec = (Zone as any)['AsyncTestZoneSpec'];\n  if (AsyncTestZoneSpec === undefined) {\n    throw new Error(\n        'AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/async-test.js');\n  }\n  const ProxyZoneSpec = (Zone as any)['ProxyZoneSpec'] as {\n    get(): {setDelegate(spec: ZoneSpec): void; getDelegate(): ZoneSpec;};\n    assertPresent: () => void;\n  };\n  if (ProxyZoneSpec === undefined) {\n    throw new Error(\n        'ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/proxy.js');\n  }\n  const proxyZoneSpec = ProxyZoneSpec.get();\n  ProxyZoneSpec.assertPresent();\n  // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n  // If we do it in ProxyZone then we will get to infinite recursion.\n  const proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n  const previousDelegate = proxyZoneSpec.getDelegate();\n  proxyZone.parent.run(() => {\n    const testZoneSpec: ZoneSpec = new AsyncTestZoneSpec(\n        () => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            finishCallback();\n          });\n        },\n        (error: any) => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            failCallback(error);\n          });\n        },\n        'test');\n    proxyZoneSpec.setDelegate(testZoneSpec);\n  });\n  return Zone.current.runGuarded(fn, context);\n}"],"sourceRoot":""}