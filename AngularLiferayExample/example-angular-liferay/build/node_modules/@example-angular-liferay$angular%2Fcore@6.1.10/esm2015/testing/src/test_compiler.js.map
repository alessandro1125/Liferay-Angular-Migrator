{"version":3,"sources":["../../../../../../../packages/core/testing/src/test_compiler.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,WAAQ,QAAR,EAA2E,UAA3E,QAA4H,eAA5H;;;;AAIA,WAAA,aAAA,GAAA;AACE,UAAM,MAAM,eAAN,CAAN;AACD;;;;;;AAQD,SAAM,MAAA,eAAA,SAA+B,QAA/B,CAAuC;;;;AAC3C,QAAI,QAAJ,GAAY;AAAe,YAAM,eAAN;AAAwB;;;;;;AACnD,mBAAe,MAAf,EAAkC,SAAlC,EAAuE;AACrE,YAAM,eAAN;AACD;;;;;;AACD,sBAAkB,SAAlB,EAAwC,SAAxC,EAA8E;AAC5E,YAAM,eAAN;AACD;;;;;;AACD,sBAAkB,SAAlB,EAAwC,SAAxC,EAA8E;AAC5E,YAAM,eAAN;AACD;;;;;;AACD,iBAAa,SAAb,EAAmC,SAAnC,EAAoE;AAClE,YAAM,eAAN;AACD;;;;;;;AAKD,qBAAiB,SAAjB,EAAuC;AAAI,YAAM,eAAN;AAAwB;;;;;;;;;AAOnE,wBAAuB,SAAvB,EAAyC;AAAyB,YAAM,eAAN;AAAwB;;;;;;;AAM1F,0BAAsB,KAAtB,EAAkC;AAAoB,YAAM,eAAN;AAAwB;AA/BnC;wCAD5C,U;;;;;;;AAwCD,SAAM,MAAA,sBAAA,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Component, ComponentFactory, Directive, Injectable, Injector, NgModule, Pipe, Type} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\n\nfunction unimplemented(): any {\n  throw Error('unimplemented');\n}\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\n@Injectable()\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector { throw unimplemented(); }\n  overrideModule(module: Type<any>, overrides: MetadataOverride<NgModule>): void {\n    throw unimplemented();\n  }\n  overrideDirective(directive: Type<any>, overrides: MetadataOverride<Directive>): void {\n    throw unimplemented();\n  }\n  overrideComponent(component: Type<any>, overrides: MetadataOverride<Component>): void {\n    throw unimplemented();\n  }\n  overridePipe(directive: Type<any>, overrides: MetadataOverride<Pipe>): void {\n    throw unimplemented();\n  }\n  /**\n   * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n   * so that it can use the code generated by AOT.\n   */\n  loadAotSummaries(summaries: () => any[]) { throw unimplemented(); }\n\n  /**\n   * Gets the component factory for the given component.\n   * This assumes that the component has been compiled before calling this call using\n   * `compileModuleAndAllComponents*`.\n   */\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> { throw unimplemented(); }\n\n  /**\n   * Returns the component type that is stored in the given error.\n   * This can be used for errors created by compileModule...\n   */\n  getComponentFromError(error: Error): Type<any>|null { throw unimplemented(); }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n"],"sourceRoot":""}