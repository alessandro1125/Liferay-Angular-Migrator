{"version":3,"sources":["../../../../../../../packages/core/testing/src/test_bed.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationInitStatus, CompilerOptions, Component, Directive, InjectionToken, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, NgModuleRef, NgZone, Optional, Pipe, PlatformRef, Provider, SchemaMetadata, SkipSelf, StaticProvider, Type, ɵAPP_ROOT as APP_ROOT, ɵDepFlags as DepFlags, ɵNodeFlags as NodeFlags, ɵclearOverrides as clearOverrides, ɵgetComponentViewDefinitionFactory as getComponentViewDefinitionFactory, ɵoverrideComponentView as overrideComponentView, ɵoverrideProvider as overrideProvider, ɵstringify as stringify} from '@angular/core';\n\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {TestingCompiler, TestingCompilerFactory} from './test_compiler';\n\nconst UNDEFINED = new Object();\n\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nexport class TestComponentRenderer {\n  insertRootElement(rootElementId: string) {}\n}\n\nlet _nextRootElementId = 0;\n\n/**\n * @experimental\n */\nexport const ComponentFixtureAutoDetect =\n    new InjectionToken<boolean[]>('ComponentFixtureAutoDetect');\n\n/**\n * @experimental\n */\nexport const ComponentFixtureNoNgZone = new InjectionToken<boolean[]>('ComponentFixtureNoNgZone');\n\n/**\n * @experimental\n */\nexport type TestModuleMetadata = {\n  providers?: any[],\n  declarations?: any[],\n  imports?: any[],\n  schemas?: Array<SchemaMetadata|any[]>,\n  aotSummaries?: () => any[],\n};\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n *\n */\nexport class TestBed implements Injector {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed {\n    const testBed = getTestBed();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  static resetTestEnvironment() { getTestBed().resetTestEnvironment(); }\n\n  static resetTestingModule(): typeof TestBed {\n    getTestBed().resetTestingModule();\n    return TestBed;\n  }\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): typeof TestBed {\n    getTestBed().configureCompiler(config);\n    return TestBed;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): typeof TestBed {\n    getTestBed().configureTestingModule(moduleDef);\n    return TestBed;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> { return getTestBed().compileComponents(); }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): typeof TestBed {\n    getTestBed().overrideModule(ngModule, override);\n    return TestBed;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      typeof TestBed {\n    getTestBed().overrideComponent(component, override);\n    return TestBed;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      typeof TestBed {\n    getTestBed().overrideDirective(directive, override);\n    return TestBed;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): typeof TestBed {\n    getTestBed().overridePipe(pipe, override);\n    return TestBed;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): typeof TestBed {\n    getTestBed().overrideComponent(component, {set: {template, templateUrl: null !}});\n    return TestBed;\n  }\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component: Type<any>, template: string):\n      typeof TestBed {\n    getTestBed().overrideTemplateUsingTestingModule(component, template);\n    return TestBed;\n  }\n\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): typeof TestBed;\n  static overrideProvider(token: any, provider: {useValue: any;}): typeof TestBed;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): typeof TestBed {\n    getTestBed().overrideProvider(token, provider as any);\n    return TestBed;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  static deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): typeof TestBed {\n    getTestBed().deprecatedOverrideProvider(token, provider as any);\n    return TestBed;\n  }\n\n  static get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    return getTestBed().get(token, notFoundValue);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return getTestBed().createComponent(component);\n  }\n\n  private _instantiated: boolean = false;\n\n  private _compiler: TestingCompiler = null !;\n  private _moduleRef: NgModuleRef<any> = null !;\n  private _moduleFactory: NgModuleFactory<any> = null !;\n\n  private _compilerOptions: CompilerOptions[] = [];\n\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  private _testEnvAotSummaries: () => any[] = () => [];\n  private _aotSummaries: Array<() => any[]> = [];\n  private _templateOverrides: Array<{component: Type<any>, templateOf: Type<any>}> = [];\n\n  private _isRoot: boolean = true;\n  private _rootProviderOverrides: Provider[] = [];\n\n  platform: PlatformRef = null !;\n\n  ngModule: Type<any>|Type<any>[] = null !;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n    if (aotSummaries) {\n      this._testEnvAotSummaries = aotSummaries;\n    }\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  resetTestEnvironment() {\n    this.resetTestingModule();\n    this.platform = null !;\n    this.ngModule = null !;\n    this._testEnvAotSummaries = () => [];\n  }\n\n  resetTestingModule() {\n    clearOverrides();\n    this._aotSummaries = [];\n    this._templateOverrides = [];\n    this._compiler = null !;\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n\n    this._isRoot = true;\n    this._rootProviderOverrides = [];\n\n    this._moduleRef = null !;\n    this._moduleFactory = null !;\n    this._compilerOptions = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e,\n        });\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}) {\n    this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n    this._compilerOptions.push(config);\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata) {\n    this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n    if (moduleDef.aotSummaries) {\n      this._aotSummaries.push(moduleDef.aotSummaries);\n    }\n  }\n\n  compileComponents(): Promise<any> {\n    if (this._moduleFactory || this._instantiated) {\n      return Promise.resolve(null);\n    }\n\n    const moduleType = this._createCompilerAndModule();\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n        .then((moduleAndComponentFactories) => {\n          this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n  }\n\n  private _initIfNeeded() {\n    if (this._instantiated) {\n      return;\n    }\n    if (!this._moduleFactory) {\n      try {\n        const moduleType = this._createCompilerAndModule();\n        this._moduleFactory =\n            this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n      } catch (e) {\n        const errorCompType = this._compiler.getComponentFromError(e);\n        if (errorCompType) {\n          throw new Error(\n              `This test module uses the component ${stringify(errorCompType)} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n              `Please call \"TestBed.compileComponents\" before your test.`);\n        } else {\n          throw e;\n        }\n      }\n    }\n    for (const {component, templateOf} of this._templateOverrides) {\n      const compFactory = this._compiler.getComponentFactory(templateOf);\n      overrideComponentView(component, compFactory);\n    }\n\n    const ngZone = new NgZone({enableLongStackTrace: true});\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    const ngZoneInjector = Injector.create({\n      providers: providers,\n      parent: this.platform.injector,\n      name: this._moduleFactory.moduleType.name\n    });\n    this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n    // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n    // before accessing it.\n    (this._moduleRef.injector.get(ApplicationInitStatus) as any).runInitializers();\n    this._instantiated = true;\n  }\n\n  private _createCompilerAndModule(): Type<any> {\n    const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const declarations =\n        [...this._declarations, ...this._templateOverrides.map(entry => entry.templateOf)];\n\n    const rootScopeImports = [];\n    const rootProviderOverrides = this._rootProviderOverrides;\n    if (this._isRoot) {\n      @NgModule({\n        providers: [\n          ...rootProviderOverrides,\n        ],\n        jit: true,\n      })\n      class RootScopeModule {\n      }\n      rootScopeImports.push(RootScopeModule);\n    }\n    providers.push({provide: APP_ROOT, useValue: this._isRoot});\n\n    const imports = [rootScopeImports, this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    @NgModule({providers, declarations, imports, schemas, jit: true})\n    class DynamicTestModule {\n    }\n\n    const compilerFactory: TestingCompilerFactory =\n        this.platform.injector.get(TestingCompilerFactory);\n    this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n    for (const summary of [this._testEnvAotSummaries, ...this._aotSummaries]) {\n      this._compiler.loadAotSummaries(summary);\n    }\n    this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n    this._componentOverrides.forEach(\n        (entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n    this._directiveOverrides.forEach(\n        (entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n    this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n    return DynamicTestModule;\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    this._initIfNeeded();\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    const result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.get(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void {\n    this.overrideProviderImpl(token, provider);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(\n      token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}): void {\n    this.overrideProviderImpl(token, provider, /* deprecated */ true);\n  }\n\n  private overrideProviderImpl(\n      token: any, provider: {\n        useFactory?: Function,\n        useValue?: any,\n        deps?: any[],\n      },\n      deprecated = false): void {\n    if (typeof token !== 'string' && token.ngInjectableDef &&\n        token.ngInjectableDef.providedIn === 'root') {\n      if (provider.useFactory) {\n        this._rootProviderOverrides.push(\n            {provide: token, useFactory: provider.useFactory, deps: provider.deps || []});\n      } else {\n        this._rootProviderOverrides.push({provide: token, useValue: provider.useValue});\n      }\n    }\n    let flags: NodeFlags = 0;\n    let value: any;\n    if (provider.useFactory) {\n      flags |= NodeFlags.TypeFactoryProvider;\n      value = provider.useFactory;\n    } else {\n      flags |= NodeFlags.TypeValueProvider;\n      value = provider.useValue;\n    }\n    const deps = (provider.deps || []).map((dep) => {\n      let depFlags: DepFlags = DepFlags.None;\n      let depToken: any;\n      if (Array.isArray(dep)) {\n        dep.forEach((entry: any) => {\n          if (entry instanceof Optional) {\n            depFlags |= DepFlags.Optional;\n          } else if (entry instanceof SkipSelf) {\n            depFlags |= DepFlags.SkipSelf;\n          } else {\n            depToken = entry;\n          }\n        });\n      } else {\n        depToken = dep;\n      }\n      return [depFlags, depToken];\n    });\n    overrideProvider({token, flags, deps, value, deprecatedBehavior: deprecated});\n  }\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string) {\n    this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n\n    @Component({selector: 'empty', template, jit: true})\n    class OverrideComponent {\n    }\n\n    this._templateOverrides.push({component, templateOf: OverrideComponent});\n  }\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    const componentFactory = this._compiler.getComponentFactory(component);\n\n    if (!componentFactory) {\n      throw new Error(\n          `Cannot create the component ${stringify(component)} as it was not imported into the testing module!`);\n    }\n\n    const noNgZone = this.get(ComponentFixtureNoNgZone, false);\n    const autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const ngZone: NgZone = noNgZone ? null : this.get(NgZone, null);\n    const testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n      return new ComponentFixture<T>(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n}\n\nlet _testBed: TestBed = null !;\n\n/**\n * @experimental\n */\nexport function getTestBed() {\n  return _testBed = _testBed || new TestBed();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n *\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  const testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n      // the injected tokens.\n      return testBed.compileComponents().then(() => {\n        const completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n        testBed.execute(tokens, fn, this);\n        return completer.promise;\n      });\n    };\n  } else {\n    // Not using an arrow function to preserve context passed from call site\n    return function() { return testBed.execute(tokens, fn, this); };\n  }\n}\n\n/**\n * @experimental\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => TestModuleMetadata) {}\n\n  private _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\nexport function withModule(moduleDef: TestModuleMetadata, fn?: Function | null): (() => any)|\n    InjectSetupWrapper {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      const testBed = getTestBed();\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}"],"sourceRoot":""}