{"version":3,"sources":["../../../../../../../packages/core/src/di/injectable.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,qBAAR,QAAoC,eAApC;AACA,aAAQ,sBAAR,QAAqC,uCAArC;AAEA,aAAQ,aAAR,QAAgD,oBAAhD;AACA,aAAQ,sBAAR,QAAqC,kBAArC;AAEA,aAAuC,gBAAvC,QAA8D,QAA9D;AACA,aAAQ,MAAR,EAAgB,UAAhB,QAAiC,YAAjC;;AAGA,UAAM,oBAAiB,gBAAG,EAA1B;eAEgC,iB;;AADhC,UAAM,YAAY,uBACd,EAAC,SAAS,MAAV,EAAkB,UAAQ,EAA1B,EADc,EACkC,iBADlC,CAAlB;;;;;;;;;;AA4CA,UAAM,cAAqB,EAA3B;;;;;;AAEA,WAAM,SAAA,kCAAA,CACF,IADE,EACe,QADf,EAC4C;AAChD,YAAI,CAAC,QAAL,EAAe;;AACb,kBAAM,yBAAyB,IAAI,sBAAJ,EAA/B;;AACA,kBAAM,OAAO,uBAAuB,UAAvB,CAAkC,IAAlC,CAAb;;AAEA,mBAAO,MAAM,IAAI,IAAJ,CAAS,GAAG,YAAU,gBAAC,IAAX,CAAZ,CAAb;AACD;AAED,YAAI,aAAa,QAAjB,EAA2B;;AACzB,kBAAM,gBAAgB,gBAAC,QAAvB;AACA,mBAAO,MAAM,cAAc,QAA3B;AACD,SAHD,MAGO,IAAI,CAAA,gBAAC,QAAD,CAAmC,WAAvC,EAAoD;;AACzD,kBAAM,mBAAmB,gBAAC,QAA1B;AACA,mBAAO,MAAM,OAAO,iBAAiB,WAAxB,CAAb;AACD,SAHM,MAGA,IAAI,CAAA,gBAAC,QAAD,CAAkC,UAAtC,EAAkD;;AACvD,kBAAM,kBAAkB,gBAAC,QAAzB;AACA,mBAAO,MAAM,gBAAgB,UAAhB,CAA2B,GAAG,WAAW,gBAAgB,IAAhB,IAAwB,WAAnC,CAA9B,CAAb;AACD,SAHM,MAGA,IAAI,CAAA,gBAAC,QAAD,CAA0D,QAA9D,EAAwE;;AAC7E,kBAAM,gBAAgB,gBAAC,QAAvB;;AACA,gBAAI,OAAO,gBAAC,QAAD,CAAsC,IAAjD;AACA,gBAAI,CAAC,IAAL,EAAW;;AACT,sBAAM,yBAAyB,IAAI,sBAAJ,EAA/B;AACA,uBAAO,uBAAuB,UAAvB,CAAkC,IAAlC,CAAP;AACD;AACD,mBAAO,MAAM,IAAI,cAAc,QAAlB,CAA2B,GAAG,WAAW,IAAX,CAA9B,CAAb;AACD,SARM,MAQA;;AACL,gBAAI,OAAO,gBAAC,QAAD,CAAsC,IAAjD;AACA,gBAAI,CAAC,IAAL,EAAW;;AACT,sBAAM,yBAAyB,IAAI,sBAAJ,EAA/B;AACA,uBAAO,uBAAuB,UAAvB,CAAkC,IAAlC,CAAP;AACD;AACD,mBAAO,MAAM,IAAI,IAAJ,CAAS,GAAG,YAAU,gBAAC,IAAX,CAAZ,CAAb;AACD;AACF;;;;;;;AAKD,aAAA,sBAAA,CACI,cADJ,EAEI,OAFJ,EAEyE;AACvE,YAAI,WAAW,QAAQ,UAAR,KAAuB,SAAlC,IAA+C,eAAe,eAAf,KAAmC,SAAtF,EAAiG;AAC/F,8BAAe,eAAkB,eAAlB,GAAmC,iBAAA;AAChD,4BAAY,QAAQ,UAD4B;AAEhD,yBAAS,mCAAmC,cAAnC,EAAmD,OAAnD;AAFuC,aAAA,CAAnC;AAIhB;AACF;;;;;;AAOD,WAAA,MAAa,aAAkC,cAC3C,YAD2C,EAC7B,SAD6B,EAClB,SADkB,EACP,SADO,EAE3C,CAAC,IAAD,EAAkB,IAAlB,KACI,CAAC,yBAAyB,sBAA1B,EAAkD,IAAlD,EAAwD,IAAxD,CAHuC,CAA/C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {R3_COMPILE_INJECTABLE} from '../ivy_switch';\nimport {ReflectionCapabilities} from '../reflection/reflection_capabilities';\nimport {Type} from '../type';\nimport {makeDecorator, makeParamDecorator} from '../util/decorators';\nimport {getClosureSafeProperty} from '../util/property';\n\nimport {InjectableDef, InjectableType, defineInjectable} from './defs';\nimport {inject, injectArgs} from './injector';\nimport {ClassSansProvider, ConstructorProvider, ConstructorSansProvider, ExistingProvider, ExistingSansProvider, FactoryProvider, FactorySansProvider, StaticClassProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from './provider';\n\nconst GET_PROPERTY_NAME = {} as any;\nconst USE_VALUE = getClosureSafeProperty<ValueProvider>(\n    {provide: String, useValue: GET_PROPERTY_NAME}, GET_PROPERTY_NAME);\n\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @experimental\n */\nexport type InjectableProvider = ValueSansProvider | ExistingSansProvider |\n    StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider;\n\n/**\n * Type of the Injectable decorator / constructor function.\n */\nexport interface InjectableDecorator {\n  /**\n   * A marker metadata that marks a class as available to `Injector` for creation.\n   *\n   * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n   *\n   * `Injector` will throw an error when trying to instantiate a class that\n   * does not have `@Injectable` marker, as shown in the example below.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n   *\n   */\n  (): any;\n  (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): any;\n  new (): Injectable;\n  new (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @experimental\n */\nexport interface Injectable { providedIn?: Type<any>|'root'|null; }\n\nconst EMPTY_ARRAY: any[] = [];\n\nexport function convertInjectableProviderToFactory(\n    type: Type<any>, provider?: InjectableProvider): () => any {\n  if (!provider) {\n    const reflectionCapabilities = new ReflectionCapabilities();\n    const deps = reflectionCapabilities.parameters(type);\n    // TODO - convert to flags.\n    return () => new type(...injectArgs(deps as any[]));\n  }\n\n  if (USE_VALUE in provider) {\n    const valueProvider = (provider as ValueSansProvider);\n    return () => valueProvider.useValue;\n  } else if ((provider as ExistingSansProvider).useExisting) {\n    const existingProvider = (provider as ExistingSansProvider);\n    return () => inject(existingProvider.useExisting);\n  } else if ((provider as FactorySansProvider).useFactory) {\n    const factoryProvider = (provider as FactorySansProvider);\n    return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY));\n  } else if ((provider as StaticClassSansProvider | ClassSansProvider).useClass) {\n    const classProvider = (provider as StaticClassSansProvider | ClassSansProvider);\n    let deps = (provider as StaticClassSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new classProvider.useClass(...injectArgs(deps));\n  } else {\n    let deps = (provider as ConstructorSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new type(...injectArgs(deps !));\n  }\n}\n\n/**\n * Supports @Injectable() in JIT mode for Render2.\n */\nfunction preR3InjectableCompile(\n    injectableType: InjectableType<any>,\n    options: {providedIn?: Type<any>| 'root' | null} & InjectableProvider): void {\n  if (options && options.providedIn !== undefined && injectableType.ngInjectableDef === undefined) {\n    injectableType.ngInjectableDef = defineInjectable({\n      providedIn: options.providedIn,\n      factory: convertInjectableProviderToFactory(injectableType, options),\n    });\n  }\n}\n\n/**\n* Injectable decorator and metadata.\n*\n* @Annotation\n*/\nexport const Injectable: InjectableDecorator = makeDecorator(\n    'Injectable', undefined, undefined, undefined,\n    (type: Type<any>, meta: Injectable) =>\n        (R3_COMPILE_INJECTABLE || preR3InjectableCompile)(type, meta));\n\n/**\n * Type representing injectable service.\n *\n * @experimental\n */\nexport interface InjectableType<T> extends Type<T> { ngInjectableDef: InjectableDef<T>; }\n"],"sourceRoot":""}