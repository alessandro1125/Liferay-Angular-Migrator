{"version":3,"sources":["../../../../../../packages/core/src/application_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Observer, Subscription, merge} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {ErrorHandler} from '../src/error_handler';\nimport {scheduleMicroTask, stringify} from '../src/util';\nimport {isPromise} from '../src/util/lang';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {Console} from './console';\nimport {Injectable, InjectionToken, Injector, StaticProvider} from './di';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {Type} from './type';\nimport {NgZone, NoopNgZone} from './zone/ng_zone';\n\nlet _devMode: boolean = true;\nlet _runModeLocked: boolean = false;\nlet _platform: PlatformRef;\n\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n *\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @experimental\n */\nexport class NgProbeToken {\n  constructor(public name: string, public token: any) {}\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n\n/**\n * Creates a factory for a platform\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null,\n    name: string, providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) =>\n    PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        const injectedProviders: StaticProvider[] =\n            providers.concat(extraProviders).concat({provide: marker, useValue: true});\n        createPlatform(Injector.create({providers: injectedProviders, name: desc}));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n\n/**\n * Destroy the existing platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone|'zone.js'|'noop';\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n */\n@Injectable()\nexport class PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Function[] = [];\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  constructor(private _injector: Injector) {}\n\n  /**\n   * Creates an instance of an `@NgModule` for the given platform\n   * for offline compilation.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   *\n   * @experimental APIs related to application bootstrap are currently under review.\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZoneOption = options ? options.ngZone : undefined;\n    const ngZone = getNgZone(ngZoneOption);\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create(\n          {providers: providers, parent: this.injector, name: moduleFactory.moduleType.name});\n      const moduleRef = <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => remove(this._modules, moduleRef));\n      ngZone !.runOutsideAngular(\n          () => ngZone !.onError.subscribe(\n              {next: (error: any) => { exceptionHandler.handleError(error); }}));\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone !, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule<M>(\n      moduleType: Type<M>, compilerOptions: (CompilerOptions&BootstrapOptions)|\n      Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>> {\n    const compilerFactory: CompilerFactory = this.injector.get(CompilerFactory);\n    const options = optionsReducer({}, compilerOptions);\n    const compiler = compilerFactory.createCompiler([options]);\n\n    return compiler.compileModuleAsync(moduleType)\n        .then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n\n  private _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const appRef = moduleRef.injector.get(ApplicationRef) as ApplicationRef;\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n\n  /**\n   * Register a listener to be called when the platform is disposed.\n   */\n  onDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n\n  /**\n   * Retrieve the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector { return this._injector; }\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n\n  get destroyed() { return this._destroyed; }\n}\n\nfunction getNgZone(ngZoneOption?: NgZone | 'zone.js' | 'noop'): NgZone {\n  let ngZone: NgZone;\n\n  if (ngZoneOption === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n        new NgZone({enableLongStackTrace: isDevMode()});\n  }\n  return ngZone;\n}\n\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\nfunction optionsReducer<T extends Object>(dst: any, objs: T | T[]): T {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {...dst, ...(objs as any)};\n  }\n  return dst;\n}\n\n/**\n * A reference to an Angular application running on a page.\n */\n@Injectable()\nexport class ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\n  private _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\n  private _views: InternalViewRef[] = [];\n  private _runningTick: boolean = false;\n  private _enforceNoNewChanges: boolean = false;\n  private _stable = true;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly isStable !: Observable<boolean>;\n\n  /** @internal */\n  constructor(\n      private _zone: NgZone, private _console: Console, private _injector: Injector,\n      private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => { observer.next(false); });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    (this as{isStable: Observable<boolean>}).isStable =\n        merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the componentType's\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * componentType's selector.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory =\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory) !;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n        null :\n        this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const scope = ApplicationRef._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.checkNoChanges());\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  private _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    remove(this.components, componentRef);\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() { return this._views.length; }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n"],"sourceRoot":""}