{"version":3,"sources":["../../../../../../../packages/core/src/render3/definition.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SimpleChange} from '../change_detection/change_detection_util';\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Provider} from '../core';\nimport {OnChanges, SimpleChanges} from '../metadata/lifecycle_hooks';\nimport {NgModuleDef, NgModuleDefInternal} from '../metadata/ng_module';\nimport {RendererType2} from '../render/api';\nimport {Type} from '../type';\nimport {resolveRendererType2} from '../view/util';\n\nimport {diPublic} from './di';\nimport {ComponentDefFeature, ComponentDefInternal, ComponentQuery, ComponentTemplate, ComponentType, DirectiveDefFeature, DirectiveDefInternal, DirectiveDefListOrFactory, DirectiveType, DirectiveTypesOrFactory, PipeDefInternal, PipeType, PipeTypesOrFactory} from './interfaces/definition';\nimport {CssSelectorList, SelectorFlags} from './interfaces/projection';\n\n\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n */\nexport function defineComponent<T>(componentDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this component. */\n  selectors: CssSelectorList;\n\n  /**\n   * Factory method used to create an instance of directive.\n   */\n  factory: () => T;\n\n  /**\n   * Static attributes to set on host element.\n   *\n   * Even indices: attribute name\n   * Odd indices: attribute value\n   */\n  attributes?: string[];\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['declaredInput2', 'publicInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['declared', 'public']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: {[P in keyof T]?: string | [string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: (directiveIndex: number, elementIndex: number) => void;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: (() => void);\n\n  /** Refreshes content queries associated with directives in a given view */\n  contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void);\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string;\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instruction to be inserted into the template function.\n   *\n   * Query-related instructions need to be pulled out to a specific function as a timing of\n   * execution is different as compared to all other instructions (after change detection hooks but\n   * before view hooks).\n   */\n  viewQuery?: ComponentQuery<T>| null;\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link PublicFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  rendererType?: RendererType2;\n\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Defines the set of injectable objects that are visible to a Directive and its light DOM\n   * children.\n   */\n  providers?: Provider[];\n\n  /**\n   * Defines the set of injectable objects that are visible to its view DOM children.\n   */\n  viewProviders?: Provider[];\n\n  /**\n   * Registry of directives and components that may be found in this component's view.\n   *\n   * The property is either an array of `DirectiveDef`s or a function which returns the array of\n   * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n   */\n  directives?: DirectiveTypesOrFactory | null;\n\n  /**\n   * Registry of pipes that may be found in this component's view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   */\n  pipes?: PipeTypesOrFactory | null;\n}): never {\n  const type = componentDefinition.type;\n  const pipeTypes = componentDefinition.pipes !;\n  const directiveTypes = componentDefinition.directives !;\n  const declaredInputs: {[key: string]: string} = {} as any;\n  const def: ComponentDefInternal<any> = {\n    type: type,\n    diPublic: null,\n    factory: componentDefinition.factory,\n    template: componentDefinition.template || null !,\n    hostBindings: componentDefinition.hostBindings || null,\n    contentQueries: componentDefinition.contentQueries || null,\n    contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n    attributes: componentDefinition.attributes || null,\n    inputs: invertObject(componentDefinition.inputs, declaredInputs),\n    declaredInputs: declaredInputs,\n    outputs: invertObject(componentDefinition.outputs),\n    rendererType: resolveRendererType2(componentDefinition.rendererType) || null,\n    exportAs: componentDefinition.exportAs || null,\n    onInit: type.prototype.ngOnInit || null,\n    doCheck: type.prototype.ngDoCheck || null,\n    afterContentInit: type.prototype.ngAfterContentInit || null,\n    afterContentChecked: type.prototype.ngAfterContentChecked || null,\n    afterViewInit: type.prototype.ngAfterViewInit || null,\n    afterViewChecked: type.prototype.ngAfterViewChecked || null,\n    onDestroy: type.prototype.ngOnDestroy || null,\n    onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n    directiveDefs: directiveTypes ?\n        () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                  .map(extractDirectiveDef) :\n        null,\n    pipeDefs: pipeTypes ?\n        () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n        null,\n    selectors: componentDefinition.selectors,\n    viewQuery: componentDefinition.viewQuery || null,\n    features: componentDefinition.features || null,\n  };\n  const feature = componentDefinition.features;\n  feature && feature.forEach((fn) => fn(def));\n  return def as never;\n}\n\nexport function extractDirectiveDef(type: DirectiveType<any>& ComponentType<any>):\n    DirectiveDefInternal<any>|ComponentDefInternal<any> {\n  const def = type.ngComponentDef || type.ngDirectiveDef;\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n  }\n  return def;\n}\n\nexport function extractPipeDef(type: PipeType<any>): PipeDefInternal<any> {\n  const def = type.ngPipeDef;\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is not a 'PipeType'.`);\n  }\n  return def;\n}\n\nexport function defineNgModule<T>(def: {type: T} & Partial<NgModuleDef<T, any, any, any>>): never {\n  const res: NgModuleDefInternal<T> = {\n    type: def.type,\n    bootstrap: def.bootstrap || [],\n    declarations: def.declarations || [],\n    imports: def.imports || [],\n    exports: def.exports || [],\n    transitiveCompileScopes: null,\n  };\n  return res as never;\n}\n\nconst EMPTY = {};\n\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName')\n *   propName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   a0: 'propName1',\n *   b1: ['publicName', 'propName2'],\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'publicName': 'b1'\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in:\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'propName2': 'b1'\n * }\n * ```\n *\n\n */\nfunction invertObject(obj: any, secondary?: any): any {\n  if (obj == null) return EMPTY;\n  const newLookup: any = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName = obj[minifiedKey];\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        (secondary[declaredName] = minifiedKey);\n      }\n    }\n  }\n  return newLookup;\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport const defineDirective = defineComponent as any as<T>(directiveDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this directive. */\n  selectors: CssSelectorList;\n\n  /**\n   * Factory method used to create an instance of directive.\n   */\n  factory: () => T | ({0: T} & any[]); /* trying to say T | [T, ...any] */\n\n  /**\n   * Static attributes to set on host element.\n   *\n   * Even indices: attribute name\n   * Odd indices: attribute value\n   */\n  attributes?: string[];\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['declaredInput2', 'publicInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['declared', 'public']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: {[P in keyof T]?: string | [string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link PublicFeature}, {@link InheritDefinitionFeature}\n   */\n  features?: DirectiveDefFeature[];\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: (directiveIndex: number, elementIndex: number) => void;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: (() => void);\n\n  /** Refreshes content queries associated with directives in a given view */\n  contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void);\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string;\n}) => never;\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n */\nexport function definePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string,\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>,\n\n  /** A factory for creating a pipe instance. */\n  factory: () => T,\n\n  /** Whether the pipe is pure. */\n  pure?: boolean\n}): never {\n  return (<PipeDefInternal<T>>{\n    name: pipeDef.name,\n    factory: pipeDef.factory,\n    pure: pipeDef.pure !== false,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  }) as never;\n}\n"],"sourceRoot":""}