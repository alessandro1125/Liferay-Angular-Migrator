{"version":3,"sources":["../../../../../../../packages/core/src/render3/ng_module_ref.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAUA,aAAQ,cAAR,QAA6B,mBAA7B;AACA,aAAQ,4BAA4B,mCAApC,QAA8E,sCAA9E;AACA,aAA6B,mBAAmB,0BAAhD,EAA4E,eAAe,sBAA3F,QAAwH,6BAAxH;AAGA,aAAQ,SAAR,QAAwB,SAAxB;AACA,aAAQ,aAAR,QAA4B,UAA5B;AACA,aAAQ,wBAAR,QAAuC,iBAAvC;;;;;;;;AAIA,WAAA,MAAa,6BAA6C;AACxD,iBAAS,mCAD+C;AAExD,oBAAY,MAAM,IAAI,wBAAJ,EAFsC;AAGxD,cAAM;AAHkD,KAA1D;;;;AAMA,WAAM,MAAA,WAAA,SAA8B,sBAA9B,CAAuD;;;;;AAQ3D,oBAAY,YAAZ,EAAmC,cAAnC,EAAgE;AAC9D;;wCAPkC,E;8BAIF,E;;AAIhC,kBAAM,cAAc,gBAAC,YAAD,CAAsC,WAA1D;AACA,yBAAa,cACI,WADJ,EAEI,aAAa,UAAU,YAAV,CAAuB,uCAFxC,CAAb;AAIA,iBAAK,oBAAL,GAA4B,YAAY,SAAxC;;AACA,kBAAM,sBAAwC,CAC5C,0BAD4C,EAChB;AAC1B,yBAAS,sBADiB;AAE1B,0BAAU;AAFgB,aADgB,CAA9C;AAMA,iBAAK,QAAL,GAAgB,eAAe,YAAf,EAA6B,cAA7B,EAA6C,mBAA7C,CAAhB;AACA,iBAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,GAAd,CAAkB,YAAlB,CAAhB;AACA,iBAAK,wBAAL,GAAgC,IAAI,wBAAJ,EAAhC;AACD;;;;AAED,kBAAO;AACL,yBAAa,cAAc,KAAK,UAAnB,EAA+B,4BAA/B,CAAb,CADK,CACqE;AAC1E,iBAAK,U,CAAa,O,CAAQ,MAAM,I;AAChC,iBAAK,UAAL,GAAkB,IAAlB;AACD;;;;;AACD,kBAAU,QAAV,EAA8B;AAC5B,yBAAa,cAAc,KAAK,UAAnB,EAA+B,4BAA/B,CAAb,CAD4B,CAC8C;AAC1E,iBAAK,U,CAAa,I,CAAK,Q;AACxB;AAnC0D;;;;;;;;;;;;;;;;AAsC7D,WAAM,MAAA,eAAA,SAAkC,0BAAlC,CAA+D;;;;AACnE,oBAAmB,UAAnB,EAAsC;AAAI;AAAvB,iBAAA,UAAA,GAAA,UAAA;AAAiC;;;;;AAEpD,eAAO,cAAP,EAAoC;AAClC,mBAAO,IAAI,WAAJ,CAAgB,KAAK,UAArB,EAAiC,cAAjC,CAAP;AACD;AALkE","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {StaticProvider} from '../di/provider';\nimport {createInjector} from '../di/r3_injector';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {NgModuleDefInternal} from '../metadata/ng_module';\nimport {Type} from '../type';\nimport {stringify} from '../util';\nimport {assertDefined} from './assert';\nimport {ComponentFactoryResolver} from './component_ref';\n\nexport interface NgModuleType { ngModuleDef: NgModuleDefInternal<any>; }\n\nexport const COMPONENT_FACTORY_RESOLVER: StaticProvider = {\n  provide: viewEngine_ComponentFactoryResolver,\n  useFactory: () => new ComponentFactoryResolver(),\n  deps: [],\n};\n\nexport class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents: Type<any>[] = [];\n  injector: Injector;\n  componentFactoryResolver: viewEngine_ComponentFactoryResolver;\n  instance: T;\n  destroyCbs: (() => void)[]|null = [];\n\n  constructor(ngModuleType: Type<T>, parentInjector: Injector|null) {\n    super();\n    const ngModuleDef = (ngModuleType as any as NgModuleType).ngModuleDef;\n    ngDevMode && assertDefined(\n                     ngModuleDef,\n                     `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n\n    this._bootstrapComponents = ngModuleDef.bootstrap;\n    const additionalProviders: StaticProvider[] = [\n      COMPONENT_FACTORY_RESOLVER, {\n        provide: viewEngine_NgModuleRef,\n        useValue: this,\n      }\n    ];\n    this.injector = createInjector(ngModuleType, parentInjector, additionalProviders);\n    this.instance = this.injector.get(ngModuleType);\n    this.componentFactoryResolver = new ComponentFactoryResolver();\n  }\n\n  destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.push(callback);\n  }\n}\n\nexport class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n  constructor(public moduleType: Type<T>) { super(); }\n\n  create(parentInjector: Injector|null): viewEngine_NgModuleRef<T> {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n}\n"],"sourceRoot":""}