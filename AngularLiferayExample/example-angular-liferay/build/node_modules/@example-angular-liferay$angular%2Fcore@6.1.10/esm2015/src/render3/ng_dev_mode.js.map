{"version":3,"sources":["../../../../../../../packages/core/src/render3/ng_dev_mode.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAoCA,WAAM,SAAA,0BAAA,GAAA;;AACJ,cAAM,cAAqC;AACzC,+BAAmB,CADsB;AAEzC,mBAAO,CAFkC;AAGzC,mBAAO,CAHkC;AAIzC,oCAAwB,CAJiB;AAKzC,6BAAiB,CALwB;AAMzC,mCAAuB,CANkB;AAOzC,sCAA0B,CAPe;AAQzC,kCAAsB,CARmB;AASzC,qCAAyB,CATgB;AAUzC,iCAAqB,CAVoB;AAWzC,kCAAsB,CAXmB;AAYzC,8BAAkB,CAZuB;AAazC,iCAAqB,CAboB;AAczC,8BAAkB,CAduB;AAezC,iCAAqB,CAfoB;AAgBzC,6BAAiB,CAhBwB;AAiBzC,iCAAqB,CAjBoB;AAkBzC,8BAAkB,CAlBuB;AAmBzC,gCAAoB;AAnBqB,SAA3C;;;AAuBA,YAAI,OAAO,MAAP,IAAiB,WAArB,EAAkC;;AAEhC,4BAAC,MAAD,CAAgB,WAAhB,IAA+B,WAA/B;AACD;AACD,YAAI,OAAO,MAAP,IAAiB,WAArB,EAAkC;;AAEhC,4BAAC,MAAD,CAAgB,WAAhB,IAA+B,WAA/B;AACD;AACD,YAAI,OAAO,IAAP,IAAe,WAAnB,EAAgC;;AAE9B,4BAAC,IAAD,CAAc,WAAd,IAA6B,WAA7B;AACD;AACD,eAAO,WAAP;AACD;;;;;;;;;AAUD,QAAI,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAxC,EAAmD;AACjD;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\ndeclare global {\n  const ngDevMode: null|NgDevModePerfCounters;\n  interface NgDevModePerfCounters {\n    firstTemplatePass: number;\n    tNode: number;\n    tView: number;\n    rendererCreateTextNode: number;\n    rendererSetText: number;\n    rendererCreateElement: number;\n    rendererAddEventListener: number;\n    rendererSetAttribute: number;\n    rendererRemoveAttribute: number;\n    rendererSetProperty: number;\n    rendererSetClassName: number;\n    rendererAddClass: number;\n    rendererRemoveClass: number;\n    rendererSetStyle: number;\n    rendererRemoveStyle: number;\n    rendererDestroy: number;\n    rendererDestroyNode: number;\n    rendererMoveNode: number;\n    rendererRemoveNode: number;\n  }\n}\n\ndeclare let global: any;\n\nexport function ngDevModeResetPerfCounters(): NgDevModePerfCounters {\n  const newCounters: NgDevModePerfCounters = {\n    firstTemplatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n  };\n  // NOTE: Under Ivy we may have both window & global defined in the Node\n  //    environment since ensureDocument() in render3.ts sets global.window.\n  if (typeof window != 'undefined') {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    (window as any)['ngDevMode'] = newCounters;\n  }\n  if (typeof global != 'undefined') {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    (global as any)['ngDevMode'] = newCounters;\n  }\n  if (typeof self != 'undefined') {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    (self as any)['ngDevMode'] = newCounters;\n  }\n  return newCounters;\n}\n\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n  ngDevModeResetPerfCounters();\n}\n"],"sourceRoot":""}