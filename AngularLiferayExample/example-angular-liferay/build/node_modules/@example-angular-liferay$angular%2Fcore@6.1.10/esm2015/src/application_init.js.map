{"version":3,"sources":["../../../../../../packages/core/src/application_init.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,SAAR,QAAwB,kBAAxB;AAEA,aAAQ,MAAR,EAAgB,UAAhB,EAA4B,cAA5B,EAA4C,QAA5C,QAA2D,MAA3D;;;;AAMA,WAAA,MAAa,kBAAkB,IAAI,cAAJ,CAAsC,yBAAtC,CAA/B;;;;AAMA,WAAM,MAAA,qBAAA,CAAA;;;;AASJ,oBAAyD,QAAzD,EAAgF;AAAvB,iBAAA,QAAA,GAAA,QAAA;+BAJnC,K;wBAEC,K;AAGrB,iBAAK,WAAL,GAAmB,IAAI,OAAJ,CAAY,CAAC,GAAD,EAAM,GAAN,KAAa;AAC1C,qBAAK,OAAL,GAAe,GAAf;AACA,qBAAK,MAAL,GAAc,GAAd;AACD,aAHkB,CAAnB;AAID;;;;;AAGD,0BAAe;AACb,gBAAI,KAAK,WAAT,EAAsB;AACpB;AACD;;AAED,kBAAM,oBAAoC,EAA1C;;AAEA,kBAAM,WAAW,MAAK;AACpB,gCAAC,IAAD,CAAyB,IAAzB,GAAgC,IAAhC;AACA,qBAAK,OAAL;AACD,aAHD;AAKA,gBAAI,KAAK,QAAT,EAAmB;AACjB,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAL,CAAc,MAAlC,EAA0C,GAA1C,EAA+C;;AAC7C,0BAAM,aAAa,KAAK,QAAL,CAAc,CAAd,GAAnB;AACA,wBAAI,UAAU,UAAV,CAAJ,EAA2B;AACzB,0CAAkB,IAAlB,CAAuB,UAAvB;AACD;AACF;AACF;AAED,oBAAQ,GAAR,CAAY,iBAAZ,EAA+B,IAA/B,CAAoC,MAAK;AAAG;AAAa,aAAzD,EAA2D,KAA3D,CAAiE,KAAI;AAAG,qBAAK,MAAL,CAAY,CAAZ;AAAiB,aAAzF;AAEA,gBAAI,kBAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAClC;AACD;AACD,iBAAK,WAAL,GAAmB,IAAnB;AACD;AA5CG;gDADL,U;;sFAUc,M,EAAM,MAAA,CAAC,eAAD,C,IAAgB,EAAA,MAAG,QAAH,E","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPromise} from '../src/util/lang';\n\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\n\n\n/**\n * A function that will be executed when an application is initialized.\n */\nexport const APP_INITIALIZER = new InjectionToken<Array<() => void>>('Application Initializer');\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n */\n@Injectable()\nexport class ApplicationInitStatus {\n  // TODO(issue/24571): remove '!'.\n  private resolve !: Function;\n  // TODO(issue/24571): remove '!'.\n  private reject !: Function;\n  private initialized = false;\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  constructor(@Inject(APP_INITIALIZER) @Optional() private appInits: (() => any)[]) {\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises: Promise<any>[] = [];\n\n    const complete = () => {\n      (this as{done: boolean}).done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n"],"sourceRoot":""}