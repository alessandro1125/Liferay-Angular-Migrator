{"version":3,"sources":["../../../../../../../packages/core/src/sanitization/html_sanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '../application_ref';\nimport {InertBodyHelper} from './inert_body';\nimport {_sanitizeUrl, sanitizeSrcset} from './url_sanitizer';\n\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\n\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nconst VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nconst SRCSET_ATTRS = tagSet('srcset');\n\nconst HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nconst VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  public sanitizedSomething = false;\n  private buf: string[] = [];\n\n  sanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current: Node = el.firstChild !;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        this.startElement(current as Element);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue !);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (current.firstChild) {\n        current = current.firstChild !;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current as Element);\n        }\n\n        let next = this.checkClobberedElement(current, current.nextSibling !);\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = this.checkClobberedElement(current, current.parentNode !);\n      }\n    }\n    return this.buf.join('');\n  }\n\n  private startElement(element: Element) {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return;\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr !.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr !.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n  }\n\n  private endElement(current: Element) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n\n  private chars(chars: string) { this.buf.push(encodeEntities(chars)); }\n\n  checkClobberedElement(node: Node, nextNode: Node): Node {\n    if (nextNode &&\n        (node.compareDocumentPosition(nextNode) &\n         Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(\n          `Failed to sanitize html because the element is clobbered: ${(node as Element).outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const hi = match.charCodeAt(0);\n            const low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) { return '&#' + match.charCodeAt(0) + ';'; })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n\nlet inertBodyHelper: InertBodyHelper;\n\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string {\n  let inertBodyElement: HTMLElement|null = null;\n  try {\n    inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement !.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(\n        getTemplateContent(inertBodyElement !) as Element || inertBodyElement);\n    if (isDevMode() && sanitizer.sanitizedSomething) {\n      console.warn(\n          'WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n    }\n\n    return safeHtml;\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\n\nfunction getTemplateContent(el: Node): Node|null {\n  return 'content' in (el as any /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n      el.content :\n      null;\n}\nfunction isTemplateElement(el: Node): el is HTMLTemplateElement {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n"],"sourceRoot":""}