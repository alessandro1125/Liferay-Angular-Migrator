{"version":3,"sources":["../../../../../../../packages/core/src/sanitization/sanitization.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,mBAAR,QAAkC,yBAAlC;AACA,aAAQ,SAAR,QAAwB,iBAAxB;AAEA,aAAoB,uBAApB,QAAkD,UAAlD;AACA,aAAQ,aAAR,QAA6C,kBAA7C;AACA,aAAQ,eAAR,QAA8B,YAA9B;AACA,aAAyB,cAAzB,QAAgE,mBAAhE;AACA,aAAQ,YAAR,QAA2C,iBAA3C;;;;;;;;;;;;;;AAiBA,WAAM,SAAA,YAAA,CAAuB,UAAvB,EAAsC;;AAC1C,cAAM,IAAI,qBAAV;AACA,YAAI,CAAJ,EAAO;AACL,mBAAO,EAAE,QAAF,CAAW,gBAAgB,IAA3B,EAAiC,UAAjC,KAAgD,EAAvD;AACD;AACD,YAAI,wBAAwB,UAAxB,EAAkC,MAAlC,CAAkC,UAAlC,CAAJ,EAA0D;AACxD,mBAAO,WAAW,QAAX,EAAP;AACD;AACD,eAAO,cAAc,QAAd,EAAwB,UAAU,UAAV,CAAxB,CAAP;AACD;;;;;;;;;;;;;;AAeD,WAAM,SAAA,aAAA,CAAwB,WAAxB,EAAwC;;AAC5C,cAAM,IAAI,qBAAV;AACA,YAAI,CAAJ,EAAO;AACL,mBAAO,EAAE,QAAF,CAAW,gBAAgB,KAA3B,EAAkC,WAAlC,KAAkD,EAAzD;AACD;AACD,YAAI,wBAAwB,WAAxB,EAAmC,OAAnC,CAAmC,WAAnC,CAAJ,EAA4D;AAC1D,mBAAO,YAAY,QAAZ,EAAP;AACD;AACD,eAAO,eAAe,UAAU,WAAV,CAAf,CAAP;AACD;;;;;;;;;;;;;;;AAgBD,WAAM,SAAA,WAAA,CAAsB,SAAtB,EAAoC;;AACxC,cAAM,IAAI,qBAAV;AACA,YAAI,CAAJ,EAAO;AACL,mBAAO,EAAE,QAAF,CAAW,gBAAgB,GAA3B,EAAgC,SAAhC,KAA8C,EAArD;AACD;AACD,YAAI,wBAAwB,SAAxB,EAAiC,KAAjC,CAAiC,SAAjC,CAAJ,EAAwD;AACtD,mBAAO,UAAU,QAAV,EAAP;AACD;AACD,eAAO,aAAa,UAAU,SAAV,CAAb,CAAP;AACD;;;;;;;;;;AAWD,WAAM,SAAA,mBAAA,CAA8B,iBAA9B,EAAoD;;AACxD,cAAM,IAAI,qBAAV;AACA,YAAI,CAAJ,EAAO;AACL,mBAAO,EAAE,QAAF,CAAW,gBAAgB,YAA3B,EAAyC,iBAAzC,KAA+D,EAAtE;AACD;AACD,YAAI,wBAAwB,iBAAxB,EAAyC,aAAzC,CAAyC,iBAAzC,CAAJ,EAAwE;AACtE,mBAAO,kBAAkB,QAAlB,EAAP;AACD;AACD,cAAM,IAAI,KAAJ,CAAU,+EAAV,CAAN;AACD;;;;;;;;;;AAWD,WAAM,SAAA,cAAA,CAAyB,YAAzB,EAA0C;;AAC9C,cAAM,IAAI,qBAAV;AACA,YAAI,CAAJ,EAAO;AACL,mBAAO,EAAE,QAAF,CAAW,gBAAgB,MAA3B,EAAmC,YAAnC,KAAoD,EAA3D;AACD;AACD,YAAI,wBAAwB,YAAxB,EAAoC,QAApC,CAAoC,YAApC,CAAJ,EAA8D;AAC5D,mBAAO,aAAa,QAAb,EAAP;AACD;AACD,cAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;;;;AAMD,WAAA,MAAa,wBAAwB,gBAAC,UAAS,IAAT,EAAuB,KAAvB,EAAqC;AACzE,YAAI,UAAU,SAAd,EAAyB;AACvB,mBAAO,SAAS,kBAAT,IAA+B,SAAS,YAAxC,IAAwD,SAAS,cAAjE,IACH,SAAS,QADN,IACkB,SAAS,QAD3B,IACuC,SAAS,YADhD,IAEH,SAAS,kBAFb;AAGD;AAED,eAAO,cAAc,KAAd,CAAP;AACkB,KARpB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCurrentSanitizer} from '../render3/instructions';\nimport {stringify} from '../render3/util';\n\nimport {BypassType, allowSanitizationBypass} from './bypass';\nimport {_sanitizeHtml as _sanitizeHtml} from './html_sanitizer';\nimport {SecurityContext} from './security';\nimport {StyleSanitizeFn, _sanitizeStyle as _sanitizeStyle} from './style_sanitizer';\nimport {_sanitizeUrl as _sanitizeUrl} from './url_sanitizer';\n\n\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml: any): string {\n  const s = getCurrentSanitizer();\n  if (s) {\n    return s.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n  }\n  if (allowSanitizationBypass(unsafeHtml, BypassType.Html)) {\n    return unsafeHtml.toString();\n  }\n  return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle: any): string {\n  const s = getCurrentSanitizer();\n  if (s) {\n    return s.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypass(unsafeStyle, BypassType.Style)) {\n    return unsafeStyle.toString();\n  }\n  return _sanitizeStyle(stringify(unsafeStyle));\n}\n\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl: any): string {\n  const s = getCurrentSanitizer();\n  if (s) {\n    return s.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypass(unsafeUrl, BypassType.Url)) {\n    return unsafeUrl.toString();\n  }\n  return _sanitizeUrl(stringify(unsafeUrl));\n}\n\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl: any): string {\n  const s = getCurrentSanitizer();\n  if (s) {\n    return s.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n  }\n  if (allowSanitizationBypass(unsafeResourceUrl, BypassType.ResourceUrl)) {\n    return unsafeResourceUrl.toString();\n  }\n  throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript: any): string {\n  const s = getCurrentSanitizer();\n  if (s) {\n    return s.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n  }\n  if (allowSanitizationBypass(unsafeScript, BypassType.Script)) {\n    return unsafeScript.toString();\n  }\n  throw new Error('unsafe value used in a script context');\n}\n\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n */\nexport const defaultStyleSanitizer = (function(prop: string, value?: string): string | boolean {\n  if (value === undefined) {\n    return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n        prop === 'filter' || prop === 'filter' || prop === 'list-style' ||\n        prop === 'list-style-image';\n  }\n\n  return sanitizeStyle(value);\n} as StyleSanitizeFn);\n"],"sourceRoot":""}