{"version":3,"sources":["../../../../../../../packages/core/src/linker/system_js_ng_module_factory_loader.ts"],"names":[],"mappings":";;;;;;;;;;;;;AASA,aAAQ,UAAR,EAAoB,QAApB,QAAmC,OAAnC;AAEA,aAAQ,QAAR,QAAuB,YAAvB;;AAIA,UAAM,aAAa,GAAnB;;AAEA,UAAM,uBAAuB,WAA7B;;;;;;;;AASA,WAAM,MAAA,4BAAA,CAAA;;;;;;;;;;;;;;AAcN,UAAM,iBAA+C;AACnD,2BAAmB,EADgC;AAEnD,2BAAmB;AAFgC,KAArD;;;;;AAUA,WAAM,MAAA,sBAAA,CAAA;;;;;AAGJ,oBAAoB,SAApB,EAAqD,MAArD,EAA0F;AAAtE,iBAAA,SAAA,GAAA,SAAA;AAClB,iBAAK,OAAL,GAAe,UAAU,cAAzB;AACD;;;;;AAED,aAAK,IAAL,EAAiB;;AACf,kBAAM,cAAc,KAAK,SAAL,YAA0B,QAA9C;AACA,mBAAO,cAAc,KAAK,WAAL,CAAiB,IAAjB,CAAd,GAAuC,KAAK,cAAL,CAAoB,IAApB,CAA9C;AACD;;;;;AAEO,uBAAe,IAAf,EAA2B;AACjC,gBAAI,CAAC,MAAD,EAAS,UAAT,IAAuB,KAAK,KAAL,CAAW,UAAX,CAA3B;AACA,gBAAI,eAAe,SAAnB,EAA8B;AAC5B,6BAAa,SAAb;AACD;AAED,mBAAO,OAAO,MAAP,CAAc,MAAd,EACF,IADE,CACI,MAAD,IAAiB,OAAO,UAAP,CADpB,EAEF,IAFE,CAEI,IAAD,IAAe,cAAc,IAAd,EAAoB,MAApB,EAA4B,UAA5B,CAFlB,EAGF,IAHE,CAGI,IAAD,IAAe,KAAK,SAAL,CAAe,kBAAf,CAAkC,IAAlC,CAHlB,CAAP;;;;;;AAMM,oBAAY,IAAZ,EAAwB;AAC9B,gBAAI,CAAC,MAAD,EAAS,UAAT,IAAuB,KAAK,KAAL,CAAW,UAAX,CAA3B;;AACA,gBAAI,qBAAqB,oBAAzB;AACA,gBAAI,eAAe,SAAnB,EAA8B;AAC5B,6BAAa,SAAb;AACA,qCAAqB,EAArB;AACD;AAED,mBAAO,OAAO,MAAP,CAAc,KAAK,OAAL,CAAa,iBAAb,GAAiC,MAAjC,GAA0C,KAAK,OAAL,CAAa,iBAArE,EACF,IADE,CACI,MAAD,IAAiB,OAAO,aAAa,kBAApB,CADpB,EAEF,IAFE,CAEI,OAAD,IAAkB,cAAc,OAAd,EAAuB,MAAvB,EAA+B,UAA/B,CAFrB,CAAP;;AAhCE;iDADL,U;;2DAtCO,Q,YA0CwD,4B,EAA4B,YAAA,CAAA,EAAA,MAAhD,QAAgD,EAAA,C;;;;;;;;;;;;;AAmC5F,aAAA,aAAA,CAAuB,KAAvB,EAAmC,UAAnC,EAAuD,UAAvD,EAAyE;AACvE,YAAI,CAAC,KAAL,EAAY;AACV,kBAAM,IAAI,KAAJ,CAAU,gBAAgB,UAAU,SAAS,UAAU,GAAvD,CAAN;AACD;AACD,eAAO,KAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional} from '../di';\n\nimport {Compiler} from './compiler';\nimport {NgModuleFactory} from './ng_module_factory';\nimport {NgModuleFactoryLoader} from './ng_module_factory_loader';\n\nconst _SEPARATOR = '#';\n\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\ndeclare var System: any;\n\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * @experimental\n */\nexport abstract class SystemJsNgModuleLoaderConfig {\n  /**\n   * Prefix to add when computing the name of the factory module for a given module name.\n   */\n  // TODO(issue/24571): remove '!'.\n  factoryPathPrefix !: string;\n\n  /**\n   * Suffix to add when computing the name of the factory module for a given module name.\n   */\n  // TODO(issue/24571): remove '!'.\n  factoryPathSuffix !: string;\n}\n\nconst DEFAULT_CONFIG: SystemJsNgModuleLoaderConfig = {\n  factoryPathPrefix: '',\n  factoryPathSuffix: '.ngfactory',\n};\n\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * @experimental\n */\n@Injectable()\nexport class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n  private _config: SystemJsNgModuleLoaderConfig;\n\n  constructor(private _compiler: Compiler, @Optional() config?: SystemJsNgModuleLoaderConfig) {\n    this._config = config || DEFAULT_CONFIG;\n  }\n\n  load(path: string): Promise<NgModuleFactory<any>> {\n    const offlineMode = this._compiler instanceof Compiler;\n    return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n  }\n\n  private loadAndCompile(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) {\n      exportName = 'default';\n    }\n\n    return System.import(module)\n        .then((module: any) => module[exportName])\n        .then((type: any) => checkNotEmpty(type, module, exportName))\n        .then((type: any) => this._compiler.compileModuleAsync(type));\n  }\n\n  private loadFactory(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n    if (exportName === undefined) {\n      exportName = 'default';\n      factoryClassSuffix = '';\n    }\n\n    return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n        .then((module: any) => module[exportName + factoryClassSuffix])\n        .then((factory: any) => checkNotEmpty(factory, module, exportName));\n  }\n}\n\nfunction checkNotEmpty(value: any, modulePath: string, exportName: string): any {\n  if (!value) {\n    throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n  }\n  return value;\n}\n"],"sourceRoot":""}