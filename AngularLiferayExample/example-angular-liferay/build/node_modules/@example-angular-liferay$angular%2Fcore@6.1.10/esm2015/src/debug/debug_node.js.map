{"version":3,"sources":["../../../../../../../packages/core/src/debug/debug_node.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di';\nimport {DebugContext} from '../view/index';\n\nexport class EventListener {\n  constructor(public name: string, public callback: Function) {}\n}\n\n/**\n * @experimental All debugging apis are currently experimental.\n */\nexport class DebugNode {\n  nativeNode: any;\n  listeners: EventListener[];\n  // TODO(issue/24571): remove '!'.\n  parent !: DebugElement | null;\n\n  constructor(nativeNode: any, parent: DebugNode|null, private _debugContext: DebugContext) {\n    this.nativeNode = nativeNode;\n    if (parent && parent instanceof DebugElement) {\n      parent.addChild(this);\n    } else {\n      this.parent = null;\n    }\n    this.listeners = [];\n  }\n\n  get injector(): Injector { return this._debugContext.injector; }\n\n  get componentInstance(): any { return this._debugContext.component; }\n\n  get context(): any { return this._debugContext.context; }\n\n  get references(): {[key: string]: any} { return this._debugContext.references; }\n\n  get providerTokens(): any[] { return this._debugContext.providerTokens; }\n}\n\n/**\n * @experimental All debugging apis are currently experimental.\n */\nexport class DebugElement extends DebugNode {\n  // TODO(issue/24571): remove '!'.\n  name !: string;\n  properties: {[key: string]: any};\n  attributes: {[key: string]: string | null};\n  classes: {[key: string]: boolean};\n  styles: {[key: string]: string | null};\n  childNodes: DebugNode[];\n  nativeElement: any;\n\n  constructor(nativeNode: any, parent: any, _debugContext: DebugContext) {\n    super(nativeNode, parent, _debugContext);\n    this.properties = {};\n    this.attributes = {};\n    this.classes = {};\n    this.styles = {};\n    this.childNodes = [];\n    this.nativeElement = nativeNode;\n  }\n\n  addChild(child: DebugNode) {\n    if (child) {\n      this.childNodes.push(child);\n      child.parent = this;\n    }\n  }\n\n  removeChild(child: DebugNode) {\n    const childIndex = this.childNodes.indexOf(child);\n    if (childIndex !== -1) {\n      child.parent = null;\n      this.childNodes.splice(childIndex, 1);\n    }\n  }\n\n  insertChildrenAfter(child: DebugNode, newChildren: DebugNode[]) {\n    const siblingIndex = this.childNodes.indexOf(child);\n    if (siblingIndex !== -1) {\n      this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n      newChildren.forEach(c => {\n        if (c.parent) {\n          c.parent.removeChild(c);\n        }\n        c.parent = this;\n      });\n    }\n  }\n\n  insertBefore(refChild: DebugNode, newChild: DebugNode): void {\n    const refIndex = this.childNodes.indexOf(refChild);\n    if (refIndex === -1) {\n      this.addChild(newChild);\n    } else {\n      if (newChild.parent) {\n        newChild.parent.removeChild(newChild);\n      }\n      newChild.parent = this;\n      this.childNodes.splice(refIndex, 0, newChild);\n    }\n  }\n\n  query(predicate: Predicate<DebugElement>): DebugElement {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const matches: DebugElement[] = [];\n    _queryElementChildren(this, predicate, matches);\n    return matches;\n  }\n\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const matches: DebugNode[] = [];\n    _queryNodeChildren(this, predicate, matches);\n    return matches;\n  }\n\n  get children(): DebugElement[] {\n    return this.childNodes.filter((node) => node instanceof DebugElement) as DebugElement[];\n  }\n\n  triggerEventHandler(eventName: string, eventObj: any) {\n    this.listeners.forEach((listener) => {\n      if (listener.name == eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n\n/**\n * @experimental\n */\nexport function asNativeElements(debugEls: DebugElement[]): any {\n  return debugEls.map((el) => el.nativeElement);\n}\n\nfunction _queryElementChildren(\n    element: DebugElement, predicate: Predicate<DebugElement>, matches: DebugElement[]) {\n  element.childNodes.forEach(node => {\n    if (node instanceof DebugElement) {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      _queryElementChildren(node, predicate, matches);\n    }\n  });\n}\n\nfunction _queryNodeChildren(\n    parentNode: DebugNode, predicate: Predicate<DebugNode>, matches: DebugNode[]) {\n  if (parentNode instanceof DebugElement) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement) {\n        _queryNodeChildren(node, predicate, matches);\n      }\n    });\n  }\n}\n\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst _nativeNodeToDebugNode = new Map<any, DebugNode>();\n\n/**\n * @experimental\n */\nexport function getDebugNode(nativeNode: any): DebugNode|null {\n  return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n\nexport function getAllDebugNodes(): DebugNode[] {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\n\nexport function indexDebugNode(node: DebugNode) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n\nexport function removeDebugNodeFromIndex(node: DebugNode) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport interface Predicate<T> { (value: T): boolean; }\n"],"sourceRoot":""}