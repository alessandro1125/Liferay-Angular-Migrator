Liferay.Loader.define('example-angular-liferay$rxjs@6.4.0/_esm5/internal/observable/timer', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
    import { Observable } from '../Observable';
    import { async } from '../scheduler/async';
    import { isNumeric } from '../util/isNumeric';
    import { isScheduler } from '../util/isScheduler';
    export function timer(dueTime, periodOrScheduler, scheduler) {
        if (dueTime === void 0) {
            dueTime = 0;
        }
        var period = -1;
        if (isNumeric(periodOrScheduler)) {
            period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
        } else if (isScheduler(periodOrScheduler)) {
            scheduler = periodOrScheduler;
        }
        if (!isScheduler(scheduler)) {
            scheduler = async;
        }
        return new Observable(function (subscriber) {
            var due = isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();
            return scheduler.schedule(dispatch, due, {
                index: 0, period: period, subscriber: subscriber
            });
        });
    }
    function dispatch(state) {
        var index = state.index,
            period = state.period,
            subscriber = state.subscriber;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        } else if (period === -1) {
            return subscriber.complete();
        }
        state.index = index + 1;
        this.schedule(state, period);
    }
    //# sourceMappingURL=timer.js.map
});
//# sourceMappingURL=timer.js.map