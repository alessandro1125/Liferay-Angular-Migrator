{"version":3,"sources":["zone_externs.js"],"names":["Zone","prototype","parent","name","assertZonePatched","current","currentTask","root","get","key","getZoneWith","fork","zoneSpec","wrap","callback","source","run","applyThis","applyArgs","runGuarded","runTask","task","scheduleMicroTask","data","customSchedule","scheduleMacroTask","customCancel","scheduleEventTask","scheduleTask","cancelTask","ZoneSpec","properties","onFork","onIntercept","onInvoke","onHandleError","onScheduleTask","onInvokeTask","onCancelTask","onHasTask","ZoneDelegate","zone","targetZone","intercept","invoke","handleError","error","invokeTask","hasTask","hasTaskState","HasTaskState","microTask","macroTask","eventTask","change","TaskType","TaskState","TaskData","isPeriodic","delay","handleId","Task","type","state","scheduleFn","cancelFn","runCount","cancelSchduleRequest","MicroTask","MacroTask","EventTask","Error","zoneAwareStack","originalStack"],"mappings":"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","file":"zone_externs.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n\n/**\n * @fileoverview Externs for zone.js\n * @see https://github.com/angular/zone.js\n * @externs\n */\n\n/**\n * @interface\n */\nvar Zone = function(){};\n/**\n * @type {!Zone} The parent Zone.\n */\nZone.prototype.parent;\n/**\n * @type {!string} The Zone name (useful for debugging)\n */\nZone.prototype.name;\n\nZone.assertZonePatched = function(){};\n\n/**\n * @type {!Zone} Returns the current [Zone]. Returns the current zone. The only way to change\n * the current zone is by invoking a run() method, which will update the current zone for the\n * duration of the run method callback.\n */\nZone.current;\n\n/**\n * @type {Task} The task associated with the current execution.\n */\nZone.currentTask;\n\n/**\n *  @type {!Zone} Return the root zone.\n */\nZone.root;\n\n/**\n * Returns a value associated with the `key`.\n *\n * If the current zone does not have a key, the request is delegated to the parent zone. Use\n * [ZoneSpec.properties] to configure the set of properties associated with the current zone.\n *\n * @param {!string} key The key to retrieve.\n * @returns {?} The value for the key, or `undefined` if not found.\n */\nZone.prototype.get = function(key){};\n\n/**\n * Returns a Zone which defines a `key`.\n *\n * Recursively search the parent Zone until a Zone which has a property `key` is found.\n *\n * @param {!string} key The key to use for identification of the returned zone.\n * @returns {?Zone} The Zone which defines the `key`, `null` if not found.\n */\nZone.prototype.getZoneWith = function(key){};\n\n/**\n * Used to create a child zone.\n *\n * @param {!ZoneSpec} zoneSpec A set of rules which the child zone should follow.\n * @returns {!Zone} A new child zone.\n */\nZone.prototype.fork = function(zoneSpec){};\n\n/**\n * Wraps a callback function in a new function which will properly restore the current zone upon\n * invocation.\n *\n * The wrapped function will properly forward `this` as well as `arguments` to the `callback`.\n *\n * Before the function is wrapped the zone can intercept the `callback` by declaring\n * [ZoneSpec.onIntercept].\n *\n * @param {!Function} callback the function which will be wrapped in the zone.\n * @param {!string=} source A unique debug location of the API being wrapped.\n * @returns {!Function} A function which will invoke the `callback` through [Zone.runGuarded].\n */\nZone.prototype.wrap = function(callback, source) {};\n\n/**\n * Invokes a function in a given zone.\n *\n * The invocation of `callback` can be intercepted be declaring [ZoneSpec.onInvoke].\n *\n * @param {!Function} callback The function to invoke.\n * @param {?Object=} applyThis\n * @param {?Array=} applyArgs\n * @param {?string=} source A unique debug location of the API being invoked.\n * @returns {*} Value from the `callback` function.\n */\nZone.prototype.run = function(callback, applyThis, applyArgs, source) {};\n\n/**\n * Invokes a function in a given zone and catches any exceptions.\n *\n * Any exceptions thrown will be forwarded to [Zone.HandleError].\n *\n * The invocation of `callback` can be intercepted be declaring [ZoneSpec.onInvoke]. The\n * handling of exceptions can intercepted by declaring [ZoneSpec.handleError].\n *\n * @param {!Function} callback The function to invoke.\n * @param {?Object=} applyThis\n * @param {?Array=} applyArgs\n * @param {?string=} source A unique debug location of the API being invoked.\n * @returns {*} Value from the `callback` function.\n */\nZone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {};\n\n/**\n * Execute the Task by restoring the [Zone.currentTask] in the Task's zone.\n *\n * @param {!Task} task\n * @param {?Object=} applyThis\n * @param {?Array=} applyArgs\n * @returns {*}\n */\nZone.prototype.runTask = function(task, applyThis, applyArgs) {};\n\n/**\n * @param {string} source\n * @param {!Function} callback\n * @param {?TaskData=} data\n * @param {?function(!Task)=} customSchedule\n * @return {!MicroTask} microTask\n */\nZone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {};\n\n/**\n * @param {string} source\n * @param {!Function} callback\n * @param {?TaskData=} data\n * @param {?function(!Task)=} customSchedule\n * @param {?function(!Task)=} customCancel\n * @return {!MacroTask} macroTask\n */\nZone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {};\n\n/**\n * @param {string} source\n * @param {!Function} callback\n * @param {?TaskData=} data\n * @param {?function(!Task)=} customSchedule\n * @param {?function(!Task)=} customCancel\n * @return {!EventTask} eventTask\n */\nZone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {};\n\n/**\n * @param {!Task} task\n * @return {!Task} task\n */\nZone.prototype.scheduleTask = function(task){};\n\n/**\n * @param {!Task} task\n * @return {!Task} task\n */\nZone.prototype.cancelTask = function(task){};\n\n/**\n * @record\n */\nvar ZoneSpec = function() {};\n/**\n * @type {!string} The name of the zone. Usefull when debugging Zones.\n */\nZoneSpec.prototype.name;\n\n/**\n * @type {Object<string, Object>|undefined} A set of properties to be associated with Zone. Use [Zone.get] to retrieve them.\n */\nZoneSpec.prototype.properties;\n\n/**\n * Allows the interception of zone forking.\n *\n * When the zone is being forked, the request is forwarded to this method for interception.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, ZoneSpec): Zone\n * }\n */\nZoneSpec.prototype.onFork;\n\n/**\n * Allows the interception of the wrapping of the callback.\n *\n * When the zone is being forked, the request is forwarded to this method for interception.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, Function, string): Function\n * }\n */\nZoneSpec.prototype.onIntercept;\n\n/**\n * Allows interception of the callback invocation.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, Function, Object, Array, string): *\n * }\n */\nZoneSpec.prototype.onInvoke;\n\n/**\n * Allows interception of the error handling.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, Object): boolean\n * }\n */\nZoneSpec.prototype.onHandleError;\n\n/**\n * Allows interception of task scheduling.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, Task): Task\n * }\n */\nZoneSpec.prototype.onScheduleTask;\n\n/**\n * Allows interception of task invoke.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, Task, Object, Array): *\n * }\n */\nZoneSpec.prototype.onInvokeTask;\n\n/**\n * Allows interception of task cancelation.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, Task): *\n * }\n */\nZoneSpec.prototype.onCancelTask;\n/**\n * Notifies of changes to the task queue empty status.\n *\n * @type {\n *   undefined|?function(ZoneDelegate, Zone, Zone, HasTaskState)\n * }\n */\nZoneSpec.prototype.onHasTask;\n\n/**\n * @interface\n */\nvar ZoneDelegate = function() {};\n/**\n * @type {!Zone} zone\n */\nZoneDelegate.prototype.zone;\n/**\n * @param {!Zone} targetZone the [Zone] which originally received the request.\n * @param {!ZoneSpec} zoneSpec the argument passed into the `fork` method.\n * @returns {!Zone} the new forked zone\n */\nZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {};\n/**\n * @param {!Zone} targetZone the [Zone] which originally received the request.\n * @param {!Function} callback the callback function passed into `wrap` function\n * @param {string=} source the argument passed into the `wrap` method.\n * @returns {!Function}\n */\nZoneDelegate.prototype.intercept = function(targetZone, callback, source) {};\n\n/**\n * @param {Zone} targetZone the [Zone] which originally received the request.\n * @param {!Function} callback the callback which will be invoked.\n * @param {?Object=} applyThis the argument passed into the `run` method.\n * @param {?Array=} applyArgs the argument passed into the `run` method.\n * @param {?string=} source the argument passed into the `run` method.\n * @returns {*}\n */\nZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {};\n/**\n * @param {!Zone} targetZone the [Zone] which originally received the request.\n * @param {!Object} error the argument passed into the `handleError` method.\n * @returns {boolean}\n */\nZoneDelegate.prototype.handleError = function(targetZone, error) {};\n/**\n * @param {!Zone} targetZone the [Zone] which originally received the request.\n * @param {!Task} task the argument passed into the `scheduleTask` method.\n * @returns {!Task} task\n */\nZoneDelegate.prototype.scheduleTask = function(targetZone, task) {};\n/**\n * @param {!Zone} targetZone The [Zone] which originally received the request.\n * @param {!Task} task The argument passed into the `scheduleTask` method.\n * @param {?Object=} applyThis The argument passed into the `run` method.\n * @param {?Array=} applyArgs The argument passed into the `run` method.\n * @returns {*}\n */\nZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {};\n/**\n * @param {!Zone} targetZone The [Zone] which originally received the request.\n * @param {!Task} task The argument passed into the `cancelTask` method.\n * @returns {*}\n */\nZoneDelegate.prototype.cancelTask = function(targetZone, task) {};\n/**\n * @param {!Zone} targetZone The [Zone] which originally received the request.\n * @param {!HasTaskState} hasTaskState\n */\nZoneDelegate.prototype.hasTask = function(targetZone, hasTaskState) {};\n\n/**\n * @interface\n */\nvar HasTaskState = function(){};\n\n/**\n * @type {boolean}\n */\nHasTaskState.prototype.microTask;\n/**\n * @type {boolean}\n */\nHasTaskState.prototype.macroTask;\n/**\n * @type {boolean}\n */\nHasTaskState.prototype.eventTask;\n/**\n * @type {TaskType}\n */\nHasTaskState.prototype.change;\n\n/**\n * @interface\n */\nvar TaskType = function(){};\n\n/**\n * @interface\n */\nvar TaskState = function(){};\n\n/**\n * @interface\n */\nvar TaskData = function(){};\n/**\n * @type {boolean|undefined}\n */\nTaskData.prototype.isPeriodic;\n/**\n * @type {number|undefined}\n */\nTaskData.prototype.delay;\n/**\n * @type {number|undefined}\n */\nTaskData.prototype.handleId;\n\n/**\n * @interface\n */\nvar Task = function() {};\n/**\n * @type {TaskType}\n */\nTask.prototype.type;\n/**\n * @type {TaskState}\n */\nTask.prototype.state;\n/**\n * @type {string}\n */\nTask.prototype.source;\n/**\n * @type {Function}\n */\nTask.prototype.invoke;\n/**\n * @type {Function}\n */\nTask.prototype.callback;\n/**\n * @type {TaskData}\n */\nTask.prototype.data;\n/**\n * @param {!Task} task\n */\nTask.prototype.scheduleFn = function(task) {};\n/**\n * @param {!Task} task\n */\nTask.prototype.cancelFn = function(task) {};\n/**\n * @type {Zone}\n */\nTask.prototype.zone;\n/**\n * @type {number}\n */\nTask.prototype.runCount;\nTask.prototype.cancelSchduleRequest = function() {};\n\n/**\n * @interface\n * @extends {Task}\n */\nvar MicroTask = function() {};\n/**\n * @interface\n * @extends {Task}\n */\nvar MacroTask = function() {};\n/**\n * @interface\n * @extends {Task}\n */\nvar EventTask = function() {};\n\n/**\n * @type {?string}\n */\nError.prototype.zoneAwareStack;\n\n/**\n * @type {?string}\n */\nError.prototype.originalStack;\n"]}