{"version":3,"sources":["task-tracking.js"],"names":["global","factory","exports","module","define","amd","TaskTrackingZoneSpec","name","microTasks","macroTasks","eventTasks","properties","get","Zone","current","prototype","getTasksFor","type","Error","onScheduleTask","parentZoneDelegate","currentZone","targetZone","task","source","tasks","push","scheduleTask","onCancelTask","i","length","splice","cancelTask","onInvokeTask","applyThis","applyArgs","invokeTask","clearEvents"],"mappings":"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","file":"task-tracking.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `TaskTrackingZoneSpec` allows one to track all outstanding Tasks.\n *\n * This is useful in tests. For example to see which tasks are preventing a test from completing\n * or an automated way of releasing all of the event listeners at the end of the test.\n */\nvar TaskTrackingZoneSpec = /** @class */ (function () {\n    function TaskTrackingZoneSpec() {\n        this.name = 'TaskTrackingZone';\n        this.microTasks = [];\n        this.macroTasks = [];\n        this.eventTasks = [];\n        this.properties = { 'TaskTrackingZone': this };\n    }\n    TaskTrackingZoneSpec.get = function () {\n        return Zone.current.get('TaskTrackingZone');\n    };\n    TaskTrackingZoneSpec.prototype.getTasksFor = function (type) {\n        switch (type) {\n            case 'microTask':\n                return this.microTasks;\n            case 'macroTask':\n                return this.macroTasks;\n            case 'eventTask':\n                return this.eventTasks;\n        }\n        throw new Error('Unknown task format: ' + type);\n    };\n    TaskTrackingZoneSpec.prototype.onScheduleTask = function (parentZoneDelegate, currentZone, targetZone, task) {\n        task['creationLocation'] = new Error(\"Task '\" + task.type + \"' from '\" + task.source + \"'.\");\n        var tasks = this.getTasksFor(task.type);\n        tasks.push(task);\n        return parentZoneDelegate.scheduleTask(targetZone, task);\n    };\n    TaskTrackingZoneSpec.prototype.onCancelTask = function (parentZoneDelegate, currentZone, targetZone, task) {\n        var tasks = this.getTasksFor(task.type);\n        for (var i = 0; i < tasks.length; i++) {\n            if (tasks[i] == task) {\n                tasks.splice(i, 1);\n                break;\n            }\n        }\n        return parentZoneDelegate.cancelTask(targetZone, task);\n    };\n    TaskTrackingZoneSpec.prototype.onInvokeTask = function (parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {\n        if (task.type === 'eventTask')\n            return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);\n        var tasks = this.getTasksFor(task.type);\n        for (var i = 0; i < tasks.length; i++) {\n            if (tasks[i] == task) {\n                tasks.splice(i, 1);\n                break;\n            }\n        }\n        return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    };\n    TaskTrackingZoneSpec.prototype.clearEvents = function () {\n        while (this.eventTasks.length) {\n            Zone.current.cancelTask(this.eventTasks[0]);\n        }\n    };\n    return TaskTrackingZoneSpec;\n}());\n// Export the class so that new instances can be created with proper\n// constructor params.\nZone['TaskTrackingZoneSpec'] = TaskTrackingZoneSpec;\n\n})));\n"]}