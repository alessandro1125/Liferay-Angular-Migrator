{"version":3,"sources":["jasmine-patch.js"],"names":["global","factory","exports","module","define","amd","__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","_global","window","self","Zone","Error","jasmine","SyncTestZoneSpec","ProxyZoneSpec","ambientZone","current","syncZone","fork","symbol","__symbol__","enableClockPatch","jasmineEnv","getEnv","forEach","methodName","originalJasmineFn","description","specDefinitions","call","wrapDescribeInZone","timeout","arguments","wrapTestInZone","apply","originalClockFn","clock","originalTick_1","tick","fakeAsyncZoneSpec","get","originalMockDate_1","mockDate","dateTime","length","Date","setCurrentRealTime","getTime","FakeAsyncTestZoneSpec","describeBody","run","runInTestZone","testBody","applyThis","queueRunner","done","isClockInstalled","testProxyZoneSpec","testProxyZone","fakeAsyncModule","fakeAsync","QueueRunner","_super","ZoneQueueRunner","attrs","_this","onComplete","fn","scheduleMicroTask","nativeSetTimeout","nativeClearTimeout","setTimeout","clearTimeout","UserContext","userContext","onException","error","message","proxyZoneSpec","pendingTasksInfo","getAndClearPendingTasksInfo","execute","zone","isChildOfAmbientZone","parent","name","currentTask"],"mappings":"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","file":"jasmine-patch.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function () {\n    var __extends = function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var _global = typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global;\n    // Patch jasmine's describe/it/beforeEach/afterEach functions so test code always runs\n    // in a testZone (ProxyZone). (See: angular/zone.js#91 & angular/angular#10503)\n    if (!Zone)\n        throw new Error('Missing: zone.js');\n    if (typeof jasmine == 'undefined')\n        throw new Error('Missing: jasmine.js');\n    if (jasmine['__zone_patch__'])\n        throw new Error(\"'jasmine' has already been patched with 'Zone'.\");\n    jasmine['__zone_patch__'] = true;\n    var SyncTestZoneSpec = Zone['SyncTestZoneSpec'];\n    var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    if (!SyncTestZoneSpec)\n        throw new Error('Missing: SyncTestZoneSpec');\n    if (!ProxyZoneSpec)\n        throw new Error('Missing: ProxyZoneSpec');\n    var ambientZone = Zone.current;\n    // Create a synchronous-only zone in which to run `describe` blocks in order to raise an\n    // error if any asynchronous operations are attempted inside of a `describe` but outside of\n    // a `beforeEach` or `it`.\n    var syncZone = ambientZone.fork(new SyncTestZoneSpec('jasmine.describe'));\n    var symbol = Zone.__symbol__;\n    // whether patch jasmine clock when in fakeAsync\n    var enableClockPatch = _global[symbol('fakeAsyncPatchLock')] === true;\n    // Monkey patch all of the jasmine DSL so that each function runs in appropriate zone.\n    var jasmineEnv = jasmine.getEnv();\n    ['describe', 'xdescribe', 'fdescribe'].forEach(function (methodName) {\n        var originalJasmineFn = jasmineEnv[methodName];\n        jasmineEnv[methodName] = function (description, specDefinitions) {\n            return originalJasmineFn.call(this, description, wrapDescribeInZone(specDefinitions));\n        };\n    });\n    ['it', 'xit', 'fit'].forEach(function (methodName) {\n        var originalJasmineFn = jasmineEnv[methodName];\n        jasmineEnv[symbol(methodName)] = originalJasmineFn;\n        jasmineEnv[methodName] = function (description, specDefinitions, timeout) {\n            arguments[1] = wrapTestInZone(specDefinitions);\n            return originalJasmineFn.apply(this, arguments);\n        };\n    });\n    ['beforeEach', 'afterEach', 'beforeAll', 'afterAll'].forEach(function (methodName) {\n        var originalJasmineFn = jasmineEnv[methodName];\n        jasmineEnv[symbol(methodName)] = originalJasmineFn;\n        jasmineEnv[methodName] = function (specDefinitions, timeout) {\n            arguments[0] = wrapTestInZone(specDefinitions);\n            return originalJasmineFn.apply(this, arguments);\n        };\n    });\n    // need to patch jasmine.clock().mockDate and jasmine.clock().tick() so\n    // they can work properly in FakeAsyncTest\n    var originalClockFn = (jasmine[symbol('clock')] = jasmine['clock']);\n    jasmine['clock'] = function () {\n        var clock = originalClockFn.apply(this, arguments);\n        if (!clock[symbol('patched')]) {\n            clock[symbol('patched')] = symbol('patched');\n            var originalTick_1 = (clock[symbol('tick')] = clock.tick);\n            clock.tick = function () {\n                var fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    return fakeAsyncZoneSpec.tick.apply(fakeAsyncZoneSpec, arguments);\n                }\n                return originalTick_1.apply(this, arguments);\n            };\n            var originalMockDate_1 = (clock[symbol('mockDate')] = clock.mockDate);\n            clock.mockDate = function () {\n                var fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    var dateTime = arguments.length > 0 ? arguments[0] : new Date();\n                    return fakeAsyncZoneSpec.setCurrentRealTime.apply(fakeAsyncZoneSpec, dateTime && typeof dateTime.getTime === 'function' ? [dateTime.getTime()] :\n                        arguments);\n                }\n                return originalMockDate_1.apply(this, arguments);\n            };\n            // for auto go into fakeAsync feature, we need the flag to enable it\n            if (enableClockPatch) {\n                ['install', 'uninstall'].forEach(function (methodName) {\n                    var originalClockFn = (clock[symbol(methodName)] = clock[methodName]);\n                    clock[methodName] = function () {\n                        var FakeAsyncTestZoneSpec = Zone['FakeAsyncTestZoneSpec'];\n                        if (FakeAsyncTestZoneSpec) {\n                            jasmine[symbol('clockInstalled')] = 'install' === methodName;\n                            return;\n                        }\n                        return originalClockFn.apply(this, arguments);\n                    };\n                });\n            }\n        }\n        return clock;\n    };\n    /**\n     * Gets a function wrapping the body of a Jasmine `describe` block to execute in a\n     * synchronous-only zone.\n     */\n    function wrapDescribeInZone(describeBody) {\n        return function () {\n            return syncZone.run(describeBody, this, arguments);\n        };\n    }\n    function runInTestZone(testBody, applyThis, queueRunner, done) {\n        var isClockInstalled = !!jasmine[symbol('clockInstalled')];\n        var testProxyZoneSpec = queueRunner.testProxyZoneSpec;\n        var testProxyZone = queueRunner.testProxyZone;\n        if (isClockInstalled && enableClockPatch) {\n            // auto run a fakeAsync\n            var fakeAsyncModule = Zone[Zone.__symbol__('fakeAsyncTest')];\n            if (fakeAsyncModule && typeof fakeAsyncModule.fakeAsync === 'function') {\n                testBody = fakeAsyncModule.fakeAsync(testBody);\n            }\n        }\n        if (done) {\n            return testProxyZone.run(testBody, applyThis, [done]);\n        }\n        else {\n            return testProxyZone.run(testBody, applyThis);\n        }\n    }\n    /**\n     * Gets a function wrapping the body of a Jasmine `it/beforeEach/afterEach` block to\n     * execute in a ProxyZone zone.\n     * This will run in `testProxyZone`. The `testProxyZone` will be reset by the `ZoneQueueRunner`\n     */\n    function wrapTestInZone(testBody) {\n        // The `done` callback is only passed through if the function expects at least one argument.\n        // Note we have to make a function with correct number of arguments, otherwise jasmine will\n        // think that all functions are sync or async.\n        return (testBody && (testBody.length ? function (done) {\n            return runInTestZone(testBody, this, this.queueRunner, done);\n        } : function () {\n            return runInTestZone(testBody, this, this.queueRunner);\n        }));\n    }\n    var QueueRunner = jasmine.QueueRunner;\n    jasmine.QueueRunner = (function (_super) {\n        __extends(ZoneQueueRunner, _super);\n        function ZoneQueueRunner(attrs) {\n            var _this = this;\n            attrs.onComplete = (function (fn) { return function () {\n                // All functions are done, clear the test zone.\n                _this.testProxyZone = null;\n                _this.testProxyZoneSpec = null;\n                ambientZone.scheduleMicroTask('jasmine.onComplete', fn);\n            }; })(attrs.onComplete);\n            var nativeSetTimeout = _global['__zone_symbol__setTimeout'];\n            var nativeClearTimeout = _global['__zone_symbol__clearTimeout'];\n            if (nativeSetTimeout) {\n                // should run setTimeout inside jasmine outside of zone\n                attrs.timeout = {\n                    setTimeout: nativeSetTimeout ? nativeSetTimeout : _global.setTimeout,\n                    clearTimeout: nativeClearTimeout ? nativeClearTimeout : _global.clearTimeout\n                };\n            }\n            // create a userContext to hold the queueRunner itself\n            // so we can access the testProxy in it/xit/beforeEach ...\n            if (jasmine.UserContext) {\n                if (!attrs.userContext) {\n                    attrs.userContext = new jasmine.UserContext();\n                }\n                attrs.userContext.queueRunner = this;\n            }\n            else {\n                if (!attrs.userContext) {\n                    attrs.userContext = {};\n                }\n                attrs.userContext.queueRunner = this;\n            }\n            // patch attrs.onException\n            var onException = attrs.onException;\n            attrs.onException = function (error) {\n                if (error &&\n                    error.message ===\n                        'Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.') {\n                    // jasmine timeout, we can make the error message more\n                    // reasonable to tell what tasks are pending\n                    var proxyZoneSpec = this && this.testProxyZoneSpec;\n                    if (proxyZoneSpec) {\n                        var pendingTasksInfo = proxyZoneSpec.getAndClearPendingTasksInfo();\n                        error.message += pendingTasksInfo;\n                    }\n                }\n                if (onException) {\n                    onException.call(this, error);\n                }\n            };\n            _super.call(this, attrs);\n        }\n        ZoneQueueRunner.prototype.execute = function () {\n            var _this = this;\n            var zone = Zone.current;\n            var isChildOfAmbientZone = false;\n            while (zone) {\n                if (zone === ambientZone) {\n                    isChildOfAmbientZone = true;\n                    break;\n                }\n                zone = zone.parent;\n            }\n            if (!isChildOfAmbientZone)\n                throw new Error('Unexpected Zone: ' + Zone.current.name);\n            // This is the zone which will be used for running individual tests.\n            // It will be a proxy zone, so that the tests function can retroactively install\n            // different zones.\n            // Example:\n            //   - In beforeEach() do childZone = Zone.current.fork(...);\n            //   - In it() try to do fakeAsync(). The issue is that because the beforeEach forked the\n            //     zone outside of fakeAsync it will be able to escape the fakeAsync rules.\n            //   - Because ProxyZone is parent fo `childZone` fakeAsync can retroactively add\n            //     fakeAsync behavior to the childZone.\n            this.testProxyZoneSpec = new ProxyZoneSpec();\n            this.testProxyZone = ambientZone.fork(this.testProxyZoneSpec);\n            if (!Zone.currentTask) {\n                // if we are not running in a task then if someone would register a\n                // element.addEventListener and then calling element.click() the\n                // addEventListener callback would think that it is the top most task and would\n                // drain the microtask queue on element.click() which would be incorrect.\n                // For this reason we always force a task when running jasmine tests.\n                Zone.current.scheduleMicroTask('jasmine.execute().forceTask', function () { return QueueRunner.prototype.execute.call(_this); });\n            }\n            else {\n                _super.prototype.execute.call(this);\n            }\n        };\n        return ZoneQueueRunner;\n    })(QueueRunner);\n})();\n\n})));\n"]}