{"version":3,"sources":["webapis-rtc-peer-connection.js"],"names":["global","factory","exports","module","define","amd","Zone","__load_patch","api","RTCPeerConnection","addSymbol","symbol","removeSymbol","prototype","addEventListener","removeEventListener","patchEventTarget","useG"],"mappings":";;AAAA;;;;;;;AAOC,aAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC3B,WAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DF,SAA/D,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAAvC,GAA6CD,OAAOH,OAAP,CAA7C,GACCA,SAFD;AAGA,GAJA,EAIC,IAJD,EAIQ,YAAY;AAAE;;AAEvB;;;;;;;;AAOAK,SAAKC,YAAL,CAAkB,mBAAlB,EAAuC,UAAUP,MAAV,EAAkBM,IAAlB,EAAwBE,GAAxB,EAA6B;AAChE,UAAIC,oBAAoBT,OAAO,mBAAP,CAAxB;AACA,UAAI,CAACS,iBAAL,EAAwB;AACpB;AACH;AACD,UAAIC,YAAYF,IAAIG,MAAJ,CAAW,kBAAX,CAAhB;AACA,UAAIC,eAAeJ,IAAIG,MAAJ,CAAW,qBAAX,CAAnB;AACAF,wBAAkBI,SAAlB,CAA4BC,gBAA5B,GAA+CL,kBAAkBI,SAAlB,CAA4BH,SAA5B,CAA/C;AACAD,wBAAkBI,SAAlB,CAA4BE,mBAA5B,GAAkDN,kBAAkBI,SAAlB,CAA4BD,YAA5B,CAAlD;AACA;AACA;AACAH,wBAAkBI,SAAlB,CAA4BH,SAA5B,IAAyC,IAAzC;AACAD,wBAAkBI,SAAlB,CAA4BD,YAA5B,IAA4C,IAA5C;AACAJ,UAAIQ,gBAAJ,CAAqBhB,MAArB,EAA6B,CAACS,kBAAkBI,SAAnB,CAA7B,EAA4D,EAAEI,MAAM,KAAR,EAA5D;AACH,KAdD;AAgBC,GA7BA,CAAD","file":"webapis-rtc-peer-connection.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('RTCPeerConnection', function (global, Zone, api) {\n    var RTCPeerConnection = global['RTCPeerConnection'];\n    if (!RTCPeerConnection) {\n        return;\n    }\n    var addSymbol = api.symbol('addEventListener');\n    var removeSymbol = api.symbol('removeEventListener');\n    RTCPeerConnection.prototype.addEventListener = RTCPeerConnection.prototype[addSymbol];\n    RTCPeerConnection.prototype.removeEventListener = RTCPeerConnection.prototype[removeSymbol];\n    // RTCPeerConnection extends EventTarget, so we must clear the symbol\n    // to allow patch RTCPeerConnection.prototype.addEventListener again\n    RTCPeerConnection.prototype[addSymbol] = null;\n    RTCPeerConnection.prototype[removeSymbol] = null;\n    api.patchEventTarget(global, [RTCPeerConnection.prototype], { useG: false });\n});\n\n})));\n"]}