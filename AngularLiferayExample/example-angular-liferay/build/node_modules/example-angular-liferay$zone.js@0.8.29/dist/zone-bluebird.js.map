{"version":3,"sources":["zone-bluebird.js"],"names":["global","factory","exports","module","define","amd","Zone","__load_patch","api","BLUEBIRD","__symbol__","patchBluebird","Bluebird","bluebirdApis","forEach","bapi","patchMethod","prototype","delegate","self","args","zone","current","_loop_1","i","func","argSelf","argArgs","arguments","res","rej","scheduleMicroTask","apply","error","length","onPossiblyUnhandledRejection","e","promise","runGuarded","err","onUnhandledError","symbol"],"mappings":";;AAAA;;;;;;;AAOC,eAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC3B,eAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DF,SAA/D,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAAvC,GAA6CD,OAAOH,OAAP,CAA7C,GACCA,SAFD;AAGA,KAJA,EAIC,IAJD,EAIQ,YAAY;AAAE;;AAEvB;;;;;;;;AAOAK,aAAKC,YAAL,CAAkB,UAAlB,EAA8B,UAAUP,MAAV,EAAkBM,IAAlB,EAAwBE,GAAxB,EAA6B;AACvD;AACA;AACA;AACA;AACA;AACA,gBAAIC,WAAW,UAAf;AACAH,iBAAKA,KAAKI,UAAL,CAAgBD,QAAhB,CAAL,IAAkC,SAASE,aAAT,CAAuBC,QAAvB,EAAiC;AAC/D;AACA,oBAAIC,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAAnB;AACAA,6BAAaC,OAAb,CAAqB,UAAUC,IAAV,EAAgB;AACjCP,wBAAIQ,WAAJ,CAAgBJ,SAASK,SAAzB,EAAoCF,IAApC,EAA0C,UAAUG,QAAV,EAAoB;AAAE,+BAAO,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACzF,gCAAIC,OAAOf,KAAKgB,OAAhB;AACA,gCAAIC,UAAU,UAAUC,CAAV,EAAa;AACvB,oCAAIC,OAAOL,KAAKI,CAAL,CAAX;AACA,oCAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;AAC5BL,yCAAKI,CAAL,IAAU,YAAY;AAClB,4CAAIE,UAAU,IAAd;AACA,4CAAIC,UAAUC,SAAd;AACA,+CAAO,IAAIhB,QAAJ,CAAa,UAAUiB,GAAV,EAAeC,GAAf,EAAoB;AACpCT,iDAAKU,iBAAL,CAAuB,cAAvB,EAAuC,YAAY;AAC/C,oDAAI;AACAF,wDAAIJ,KAAKO,KAAL,CAAWN,OAAX,EAAoBC,OAApB,CAAJ;AACH,iDAFD,CAGA,OAAOM,KAAP,EAAc;AACVH,wDAAIG,KAAJ;AACH;AACJ,6CAPD;AAQH,yCATM,CAAP;AAUH,qCAbD;AAcH;AACJ,6BAlBD;AAmBA,iCAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAIJ,KAAKc,MAAzB,EAAiCV,GAAjC,EAAsC;AAClCD,wCAAQC,CAAR;AACH;AACD,mCAAON,SAASc,KAAT,CAAeb,IAAf,EAAqBC,IAArB,CAAP;AACH,yBAzB+D;AAyB5D,qBAzBJ;AA0BH,iBA3BD;AA4BAR,yBAASuB,4BAAT,CAAsC,UAAUC,CAAV,EAAaC,OAAb,EAAsB;AACxD,wBAAI;AACA/B,6BAAKgB,OAAL,CAAagB,UAAb,CAAwB,YAAY;AAChC,kCAAMF,CAAN;AACH,yBAFD;AAGH,qBAJD,CAKA,OAAOG,GAAP,EAAY;AACR/B,4BAAIgC,gBAAJ,CAAqBD,GAArB;AACH;AACJ,iBATD;AAUA;AACAvC,uBAAOQ,IAAIiC,MAAJ,CAAW,kBAAX,CAAP,IAAyC7B,QAAzC;AACH,aA3CD;AA4CH,SAnDD;AAqDC,KAlEA,CAAD","file":"zone-bluebird.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('bluebird', function (global, Zone, api) {\n    // TODO: @JiaLiPassion, we can automatically patch bluebird\n    // if global.Promise = Bluebird, but sometimes in nodejs,\n    // global.Promise is not Bluebird, and Bluebird is just be\n    // used by other libraries such as sequelize, so I think it is\n    // safe to just expose a method to patch Bluebird explicitly\n    var BLUEBIRD = 'bluebird';\n    Zone[Zone.__symbol__(BLUEBIRD)] = function patchBluebird(Bluebird) {\n        // patch method of Bluebird.prototype which not using `then` internally\n        var bluebirdApis = ['then', 'spread', 'finally'];\n        bluebirdApis.forEach(function (bapi) {\n            api.patchMethod(Bluebird.prototype, bapi, function (delegate) { return function (self, args) {\n                var zone = Zone.current;\n                var _loop_1 = function (i) {\n                    var func = args[i];\n                    if (typeof func === 'function') {\n                        args[i] = function () {\n                            var argSelf = this;\n                            var argArgs = arguments;\n                            return new Bluebird(function (res, rej) {\n                                zone.scheduleMicroTask('Promise.then', function () {\n                                    try {\n                                        res(func.apply(argSelf, argArgs));\n                                    }\n                                    catch (error) {\n                                        rej(error);\n                                    }\n                                });\n                            });\n                        };\n                    }\n                };\n                for (var i = 0; i < args.length; i++) {\n                    _loop_1(i);\n                }\n                return delegate.apply(self, args);\n            }; });\n        });\n        Bluebird.onPossiblyUnhandledRejection(function (e, promise) {\n            try {\n                Zone.current.runGuarded(function () {\n                    throw e;\n                });\n            }\n            catch (err) {\n                api.onUnhandledError(err);\n            }\n        });\n        // override global promise\n        global[api.symbol('ZoneAwarePromise')] = Bluebird;\n    };\n});\n\n})));\n"]}