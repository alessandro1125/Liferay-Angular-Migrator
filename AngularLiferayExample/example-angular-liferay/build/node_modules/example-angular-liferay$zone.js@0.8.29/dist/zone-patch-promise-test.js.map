{"version":3,"sources":["zone-patch-promise-test.js"],"names":["global","factory","exports","module","define","amd","Zone","__load_patch","api","symbolState","symbol","UNRESOLVED","symbolParentUnresolved","Promise","patchPromiseForTest","oriThen","__symbol__","prototype","then","chained","apply","arguments","asyncTestZoneSpec","current","get","unresolvedChainedPromiseCount","unpatchPromiseForTest","undefined"],"mappings":";;AAAA;;;;;;;AAOC,eAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC3B,eAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DF,SAA/D,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAAvC,GAA6CD,OAAOH,OAAP,CAA7C,GACCA,SAFD;AAGA,KAJA,EAIC,IAJD,EAIQ,YAAY;AAAE;;AAEvB;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;AAmBAK,aAAKC,YAAL,CAAkB,gBAAlB,EAAoC,UAAUP,MAAV,EAAkBM,IAAlB,EAAwBE,GAAxB,EAA6B;AAC7D,gBAAIC,cAAcD,IAAIE,MAAJ,CAAW,OAAX,CAAlB;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,yBAAyBJ,IAAIE,MAAJ,CAAW,kBAAX,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,oBAAQL,IAAIE,MAAJ,CAAW,qBAAX,CAAR,IAA6C,SAASI,mBAAT,GAA+B;AACxE,oBAAIC,UAAUF,QAAQP,KAAKU,UAAL,CAAgB,iBAAhB,CAAR,CAAd;AACA,oBAAID,OAAJ,EAAa;AACT;AACH;AACDA,0BAAUF,QAAQP,KAAKU,UAAL,CAAgB,iBAAhB,CAAR,IAA8CH,QAAQI,SAAR,CAAkBC,IAA1E;AACAL,wBAAQI,SAAR,CAAkBC,IAAlB,GAAyB,YAAY;AACjC,wBAAIC,UAAUJ,QAAQK,KAAR,CAAc,IAAd,EAAoBC,SAApB,CAAd;AACA,wBAAI,KAAKZ,WAAL,MAAsBE,UAA1B,EAAsC;AAClC;AACA,4BAAIW,oBAAoBhB,KAAKiB,OAAL,CAAaC,GAAb,CAAiB,mBAAjB,CAAxB;AACA,4BAAIF,iBAAJ,EAAuB;AACnBA,8CAAkBG,6BAAlB;AACAN,oCAAQP,sBAAR,IAAkC,IAAlC;AACH;AACJ;AACD,2BAAOO,OAAP;AACH,iBAXD;AAYH,aAlBD;AAmBAN,oBAAQL,IAAIE,MAAJ,CAAW,uBAAX,CAAR,IAA+C,SAASgB,qBAAT,GAAiC;AAC5E;AACA,oBAAIX,UAAUF,QAAQP,KAAKU,UAAL,CAAgB,iBAAhB,CAAR,CAAd;AACA,oBAAID,OAAJ,EAAa;AACTF,4BAAQI,SAAR,CAAkBC,IAAlB,GAAyBH,OAAzB;AACAF,4BAAQP,KAAKU,UAAL,CAAgB,iBAAhB,CAAR,IAA8CW,SAA9C;AACH;AACJ,aAPD;AAQH,SAtCD;AAwCC,KAxEA,CAAD","file":"zone-patch-promise-test.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Promise for async/fakeAsync zoneSpec test\n * can support async operation which not supported by zone.js\n * such as\n * it ('test jsonp in AsyncZone', async() => {\n *   new Promise(res => {\n *     jsonp(url, (data) => {\n *       // success callback\n *       res(data);\n *     });\n *   }).then((jsonpResult) => {\n *     // get jsonp result.\n *\n *     // user will expect AsyncZoneSpec wait for\n *     // then, but because jsonp is not zone aware\n *     // AsyncZone will finish before then is called.\n *   });\n * });\n */\nZone.__load_patch('promisefortest', function (global, Zone, api) {\n    var symbolState = api.symbol('state');\n    var UNRESOLVED = null;\n    var symbolParentUnresolved = api.symbol('parentUnresolved');\n    // patch Promise.prototype.then to keep an internal\n    // number for tracking unresolved chained promise\n    // we will decrease this number when the parent promise\n    // being resolved/rejected and chained promise was\n    // scheduled as a microTask.\n    // so we can know such kind of chained promise still\n    // not resolved in AsyncTestZone\n    Promise[api.symbol('patchPromiseForTest')] = function patchPromiseForTest() {\n        var oriThen = Promise[Zone.__symbol__('ZonePromiseThen')];\n        if (oriThen) {\n            return;\n        }\n        oriThen = Promise[Zone.__symbol__('ZonePromiseThen')] = Promise.prototype.then;\n        Promise.prototype.then = function () {\n            var chained = oriThen.apply(this, arguments);\n            if (this[symbolState] === UNRESOLVED) {\n                // parent promise is unresolved.\n                var asyncTestZoneSpec = Zone.current.get('AsyncTestZoneSpec');\n                if (asyncTestZoneSpec) {\n                    asyncTestZoneSpec.unresolvedChainedPromiseCount++;\n                    chained[symbolParentUnresolved] = true;\n                }\n            }\n            return chained;\n        };\n    };\n    Promise[api.symbol('unPatchPromiseForTest')] = function unpatchPromiseForTest() {\n        // restore origin then\n        var oriThen = Promise[Zone.__symbol__('ZonePromiseThen')];\n        if (oriThen) {\n            Promise.prototype.then = oriThen;\n            Promise[Zone.__symbol__('ZonePromiseThen')] = undefined;\n        }\n    };\n});\n\n})));\n"]}