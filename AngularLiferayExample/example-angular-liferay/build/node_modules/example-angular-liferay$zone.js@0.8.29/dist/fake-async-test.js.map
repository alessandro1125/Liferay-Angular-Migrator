{"version":3,"sources":["fake-async-test.js"],"names":["global","factory","exports","module","define","amd","__read","undefined","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spread","arguments","length","concat","OriginalDate","Date","FakeDate","d","setTime","now","args","Array","prototype","slice","bind","apply","fakeAsyncTestZoneSpec","Zone","current","get","getCurrentRealTime","getCurrentTime","UTC","parse","timers","setTimeout","setInterval","clearTimeout","clearInterval","Scheduler","nextId","_schedulerQueue","_currentTime","_currentRealTime","setCurrentRealTime","realTime","scheduleFunction","cb","delay","isPeriodic","isRequestAnimationFrame","id","currentId","endTime","newEntry","func","currentEntry","splice","removeScheduledFunctionWithId","tick","millis","doTick","finalTime","lastCurrentTime","current_1","shift","retval","flush","limit","flushPeriodic","flushNonPeriodic","startTime","lastTask","count","Error","filter","task","FakeAsyncTestZoneSpec","namePrefix","trackPendingRequestAnimationFrame","macroTaskOptions","_scheduler","_microtasks","_lastError","_uncaughtPromiseErrors","Promise","__symbol__","pendingPeriodicTimers","pendingTimers","patchDateLocked","properties","name","assertInZone","_fnAndFlush","fn","completers","_this","_i","onSuccess","flushMicrotasks","onError","_removeTimer","index","indexOf","_dequeueTimer","_requeuePeriodicTimer","interval","_dequeuePeriodicTimer","_setTimeout","isTimer","removeTimerFn","_clearTimeout","_setInterval","_clearInterval","_resetLastErrorAndThrow","patchDate","checkTimerPatch","resetDate","lockDatePatch","unlockDatePatch","flushErrors","microtask","target","elapsed","onScheduleTask","delegate","type","data","additionalArgs","callbackIndex","cbIdx","invoke","source","macroTaskOption","findMacroTaskOption","args_1","callbackArgs","scheduleTask","onCancelTask","handleId","cancelTask","onInvoke","callback","applyThis","applyArgs","onHandleError","parentZoneDelegate","currentZone","targetZone","window","self","__load_patch","api","ProxyZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZone","assertPresent","resetDelegate","fakeAsync","proxyZoneSpec","getDelegate","res","lastProxyZoneSpec","setDelegate","_getFakeAsyncZoneSpec","maxTurns","discardPeriodicTasks","zoneSpec","symbol"],"mappings":"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","file":"fake-async-test.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (undefined && undefined.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\n(function (global) {\n    var OriginalDate = global.Date;\n    var FakeDate = /** @class */ (function () {\n        function FakeDate() {\n            if (arguments.length === 0) {\n                var d = new OriginalDate();\n                d.setTime(FakeDate.now());\n                return d;\n            }\n            else {\n                var args = Array.prototype.slice.call(arguments);\n                return new (OriginalDate.bind.apply(OriginalDate, __spread([void 0], args)))();\n            }\n        }\n        FakeDate.now = function () {\n            var fakeAsyncTestZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n            if (fakeAsyncTestZoneSpec) {\n                return fakeAsyncTestZoneSpec.getCurrentRealTime() + fakeAsyncTestZoneSpec.getCurrentTime();\n            }\n            return OriginalDate.now.apply(this, arguments);\n        };\n        return FakeDate;\n    }());\n    FakeDate.UTC = OriginalDate.UTC;\n    FakeDate.parse = OriginalDate.parse;\n    // keep a reference for zone patched timer function\n    var timers = {\n        setTimeout: global.setTimeout,\n        setInterval: global.setInterval,\n        clearTimeout: global.clearTimeout,\n        clearInterval: global.clearInterval\n    };\n    var Scheduler = /** @class */ (function () {\n        function Scheduler() {\n            // Next scheduler id.\n            this.nextId = 1;\n            // Scheduler queue with the tuple of end time and callback function - sorted by end time.\n            this._schedulerQueue = [];\n            // Current simulated time in millis.\n            this._currentTime = 0;\n            // Current real time in millis.\n            this._currentRealTime = OriginalDate.now();\n        }\n        Scheduler.prototype.getCurrentTime = function () {\n            return this._currentTime;\n        };\n        Scheduler.prototype.getCurrentRealTime = function () {\n            return this._currentRealTime;\n        };\n        Scheduler.prototype.setCurrentRealTime = function (realTime) {\n            this._currentRealTime = realTime;\n        };\n        Scheduler.prototype.scheduleFunction = function (cb, delay, args, isPeriodic, isRequestAnimationFrame, id) {\n            if (args === void 0) { args = []; }\n            if (isPeriodic === void 0) { isPeriodic = false; }\n            if (isRequestAnimationFrame === void 0) { isRequestAnimationFrame = false; }\n            if (id === void 0) { id = -1; }\n            var currentId = id < 0 ? this.nextId++ : id;\n            var endTime = this._currentTime + delay;\n            // Insert so that scheduler queue remains sorted by end time.\n            var newEntry = {\n                endTime: endTime,\n                id: currentId,\n                func: cb,\n                args: args,\n                delay: delay,\n                isPeriodic: isPeriodic,\n                isRequestAnimationFrame: isRequestAnimationFrame\n            };\n            var i = 0;\n            for (; i < this._schedulerQueue.length; i++) {\n                var currentEntry = this._schedulerQueue[i];\n                if (newEntry.endTime < currentEntry.endTime) {\n                    break;\n                }\n            }\n            this._schedulerQueue.splice(i, 0, newEntry);\n            return currentId;\n        };\n        Scheduler.prototype.removeScheduledFunctionWithId = function (id) {\n            for (var i = 0; i < this._schedulerQueue.length; i++) {\n                if (this._schedulerQueue[i].id == id) {\n                    this._schedulerQueue.splice(i, 1);\n                    break;\n                }\n            }\n        };\n        Scheduler.prototype.tick = function (millis, doTick) {\n            if (millis === void 0) { millis = 0; }\n            var finalTime = this._currentTime + millis;\n            var lastCurrentTime = 0;\n            if (this._schedulerQueue.length === 0 && doTick) {\n                doTick(millis);\n                return;\n            }\n            while (this._schedulerQueue.length > 0) {\n                var current = this._schedulerQueue[0];\n                if (finalTime < current.endTime) {\n                    // Done processing the queue since it's sorted by endTime.\n                    break;\n                }\n                else {\n                    // Time to run scheduled function. Remove it from the head of queue.\n                    var current_1 = this._schedulerQueue.shift();\n                    lastCurrentTime = this._currentTime;\n                    this._currentTime = current_1.endTime;\n                    if (doTick) {\n                        doTick(this._currentTime - lastCurrentTime);\n                    }\n                    var retval = current_1.func.apply(global, current_1.args);\n                    if (!retval) {\n                        // Uncaught exception in the current scheduled function. Stop processing the queue.\n                        break;\n                    }\n                }\n            }\n            lastCurrentTime = this._currentTime;\n            this._currentTime = finalTime;\n            if (doTick) {\n                doTick(this._currentTime - lastCurrentTime);\n            }\n        };\n        Scheduler.prototype.flush = function (limit, flushPeriodic, doTick) {\n            if (limit === void 0) { limit = 20; }\n            if (flushPeriodic === void 0) { flushPeriodic = false; }\n            if (flushPeriodic) {\n                return this.flushPeriodic(doTick);\n            }\n            else {\n                return this.flushNonPeriodic(limit, doTick);\n            }\n        };\n        Scheduler.prototype.flushPeriodic = function (doTick) {\n            if (this._schedulerQueue.length === 0) {\n                return 0;\n            }\n            // Find the last task currently queued in the scheduler queue and tick\n            // till that time.\n            var startTime = this._currentTime;\n            var lastTask = this._schedulerQueue[this._schedulerQueue.length - 1];\n            this.tick(lastTask.endTime - startTime, doTick);\n            return this._currentTime - startTime;\n        };\n        Scheduler.prototype.flushNonPeriodic = function (limit, doTick) {\n            var startTime = this._currentTime;\n            var lastCurrentTime = 0;\n            var count = 0;\n            while (this._schedulerQueue.length > 0) {\n                count++;\n                if (count > limit) {\n                    throw new Error('flush failed after reaching the limit of ' + limit +\n                        ' tasks. Does your code use a polling timeout?');\n                }\n                // flush only non-periodic timers.\n                // If the only remaining tasks are periodic(or requestAnimationFrame), finish flushing.\n                if (this._schedulerQueue.filter(function (task) { return !task.isPeriodic && !task.isRequestAnimationFrame; })\n                    .length === 0) {\n                    break;\n                }\n                var current = this._schedulerQueue.shift();\n                lastCurrentTime = this._currentTime;\n                this._currentTime = current.endTime;\n                if (doTick) {\n                    // Update any secondary schedulers like Jasmine mock Date.\n                    doTick(this._currentTime - lastCurrentTime);\n                }\n                var retval = current.func.apply(global, current.args);\n                if (!retval) {\n                    // Uncaught exception in the current scheduled function. Stop processing the queue.\n                    break;\n                }\n            }\n            return this._currentTime - startTime;\n        };\n        return Scheduler;\n    }());\n    var FakeAsyncTestZoneSpec = /** @class */ (function () {\n        function FakeAsyncTestZoneSpec(namePrefix, trackPendingRequestAnimationFrame, macroTaskOptions) {\n            if (trackPendingRequestAnimationFrame === void 0) { trackPendingRequestAnimationFrame = false; }\n            this.trackPendingRequestAnimationFrame = trackPendingRequestAnimationFrame;\n            this.macroTaskOptions = macroTaskOptions;\n            this._scheduler = new Scheduler();\n            this._microtasks = [];\n            this._lastError = null;\n            this._uncaughtPromiseErrors = Promise[Zone.__symbol__('uncaughtPromiseErrors')];\n            this.pendingPeriodicTimers = [];\n            this.pendingTimers = [];\n            this.patchDateLocked = false;\n            this.properties = { 'FakeAsyncTestZoneSpec': this };\n            this.name = 'fakeAsyncTestZone for ' + namePrefix;\n            // in case user can't access the construction of FakeAsyncTestSpec\n            // user can also define macroTaskOptions by define a global variable.\n            if (!this.macroTaskOptions) {\n                this.macroTaskOptions = global[Zone.__symbol__('FakeAsyncTestMacroTask')];\n            }\n        }\n        FakeAsyncTestZoneSpec.assertInZone = function () {\n            if (Zone.current.get('FakeAsyncTestZoneSpec') == null) {\n                throw new Error('The code should be running in the fakeAsync zone to call this function');\n            }\n        };\n        FakeAsyncTestZoneSpec.prototype._fnAndFlush = function (fn, completers) {\n            var _this = this;\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                fn.apply(global, args);\n                if (_this._lastError === null) { // Success\n                    if (completers.onSuccess != null) {\n                        completers.onSuccess.apply(global);\n                    }\n                    // Flush microtasks only on success.\n                    _this.flushMicrotasks();\n                }\n                else { // Failure\n                    if (completers.onError != null) {\n                        completers.onError.apply(global);\n                    }\n                }\n                // Return true if there were no errors, false otherwise.\n                return _this._lastError === null;\n            };\n        };\n        FakeAsyncTestZoneSpec._removeTimer = function (timers, id) {\n            var index = timers.indexOf(id);\n            if (index > -1) {\n                timers.splice(index, 1);\n            }\n        };\n        FakeAsyncTestZoneSpec.prototype._dequeueTimer = function (id) {\n            var _this = this;\n            return function () {\n                FakeAsyncTestZoneSpec._removeTimer(_this.pendingTimers, id);\n            };\n        };\n        FakeAsyncTestZoneSpec.prototype._requeuePeriodicTimer = function (fn, interval, args, id) {\n            var _this = this;\n            return function () {\n                // Requeue the timer callback if it's not been canceled.\n                if (_this.pendingPeriodicTimers.indexOf(id) !== -1) {\n                    _this._scheduler.scheduleFunction(fn, interval, args, true, false, id);\n                }\n            };\n        };\n        FakeAsyncTestZoneSpec.prototype._dequeuePeriodicTimer = function (id) {\n            var _this = this;\n            return function () {\n                FakeAsyncTestZoneSpec._removeTimer(_this.pendingPeriodicTimers, id);\n            };\n        };\n        FakeAsyncTestZoneSpec.prototype._setTimeout = function (fn, delay, args, isTimer) {\n            if (isTimer === void 0) { isTimer = true; }\n            var removeTimerFn = this._dequeueTimer(this._scheduler.nextId);\n            // Queue the callback and dequeue the timer on success and error.\n            var cb = this._fnAndFlush(fn, { onSuccess: removeTimerFn, onError: removeTimerFn });\n            var id = this._scheduler.scheduleFunction(cb, delay, args, false, !isTimer);\n            if (isTimer) {\n                this.pendingTimers.push(id);\n            }\n            return id;\n        };\n        FakeAsyncTestZoneSpec.prototype._clearTimeout = function (id) {\n            FakeAsyncTestZoneSpec._removeTimer(this.pendingTimers, id);\n            this._scheduler.removeScheduledFunctionWithId(id);\n        };\n        FakeAsyncTestZoneSpec.prototype._setInterval = function (fn, interval, args) {\n            var id = this._scheduler.nextId;\n            var completers = { onSuccess: null, onError: this._dequeuePeriodicTimer(id) };\n            var cb = this._fnAndFlush(fn, completers);\n            // Use the callback created above to requeue on success.\n            completers.onSuccess = this._requeuePeriodicTimer(cb, interval, args, id);\n            // Queue the callback and dequeue the periodic timer only on error.\n            this._scheduler.scheduleFunction(cb, interval, args, true);\n            this.pendingPeriodicTimers.push(id);\n            return id;\n        };\n        FakeAsyncTestZoneSpec.prototype._clearInterval = function (id) {\n            FakeAsyncTestZoneSpec._removeTimer(this.pendingPeriodicTimers, id);\n            this._scheduler.removeScheduledFunctionWithId(id);\n        };\n        FakeAsyncTestZoneSpec.prototype._resetLastErrorAndThrow = function () {\n            var error = this._lastError || this._uncaughtPromiseErrors[0];\n            this._uncaughtPromiseErrors.length = 0;\n            this._lastError = null;\n            throw error;\n        };\n        FakeAsyncTestZoneSpec.prototype.getCurrentTime = function () {\n            return this._scheduler.getCurrentTime();\n        };\n        FakeAsyncTestZoneSpec.prototype.getCurrentRealTime = function () {\n            return this._scheduler.getCurrentRealTime();\n        };\n        FakeAsyncTestZoneSpec.prototype.setCurrentRealTime = function (realTime) {\n            this._scheduler.setCurrentRealTime(realTime);\n        };\n        FakeAsyncTestZoneSpec.patchDate = function () {\n            if (global['Date'] === FakeDate) {\n                // already patched\n                return;\n            }\n            global['Date'] = FakeDate;\n            FakeDate.prototype = OriginalDate.prototype;\n            // try check and reset timers\n            // because jasmine.clock().install() may\n            // have replaced the global timer\n            FakeAsyncTestZoneSpec.checkTimerPatch();\n        };\n        FakeAsyncTestZoneSpec.resetDate = function () {\n            if (global['Date'] === FakeDate) {\n                global['Date'] = OriginalDate;\n            }\n        };\n        FakeAsyncTestZoneSpec.checkTimerPatch = function () {\n            if (global.setTimeout !== timers.setTimeout) {\n                global.setTimeout = timers.setTimeout;\n                global.clearTimeout = timers.clearTimeout;\n            }\n            if (global.setInterval !== timers.setInterval) {\n                global.setInterval = timers.setInterval;\n                global.clearInterval = timers.clearInterval;\n            }\n        };\n        FakeAsyncTestZoneSpec.prototype.lockDatePatch = function () {\n            this.patchDateLocked = true;\n            FakeAsyncTestZoneSpec.patchDate();\n        };\n        FakeAsyncTestZoneSpec.prototype.unlockDatePatch = function () {\n            this.patchDateLocked = false;\n            FakeAsyncTestZoneSpec.resetDate();\n        };\n        FakeAsyncTestZoneSpec.prototype.tick = function (millis, doTick) {\n            if (millis === void 0) { millis = 0; }\n            FakeAsyncTestZoneSpec.assertInZone();\n            this.flushMicrotasks();\n            this._scheduler.tick(millis, doTick);\n            if (this._lastError !== null) {\n                this._resetLastErrorAndThrow();\n            }\n        };\n        FakeAsyncTestZoneSpec.prototype.flushMicrotasks = function () {\n            var _this = this;\n            FakeAsyncTestZoneSpec.assertInZone();\n            var flushErrors = function () {\n                if (_this._lastError !== null || _this._uncaughtPromiseErrors.length) {\n                    // If there is an error stop processing the microtask queue and rethrow the error.\n                    _this._resetLastErrorAndThrow();\n                }\n            };\n            while (this._microtasks.length > 0) {\n                var microtask = this._microtasks.shift();\n                microtask.func.apply(microtask.target, microtask.args);\n            }\n            flushErrors();\n        };\n        FakeAsyncTestZoneSpec.prototype.flush = function (limit, flushPeriodic, doTick) {\n            FakeAsyncTestZoneSpec.assertInZone();\n            this.flushMicrotasks();\n            var elapsed = this._scheduler.flush(limit, flushPeriodic, doTick);\n            if (this._lastError !== null) {\n                this._resetLastErrorAndThrow();\n            }\n            return elapsed;\n        };\n        FakeAsyncTestZoneSpec.prototype.onScheduleTask = function (delegate, current, target, task) {\n            switch (task.type) {\n                case 'microTask':\n                    var args = task.data && task.data.args;\n                    // should pass additional arguments to callback if have any\n                    // currently we know process.nextTick will have such additional\n                    // arguments\n                    var additionalArgs = void 0;\n                    if (args) {\n                        var callbackIndex = task.data.cbIdx;\n                        if (typeof args.length === 'number' && args.length > callbackIndex + 1) {\n                            additionalArgs = Array.prototype.slice.call(args, callbackIndex + 1);\n                        }\n                    }\n                    this._microtasks.push({\n                        func: task.invoke,\n                        args: additionalArgs,\n                        target: task.data && task.data.target\n                    });\n                    break;\n                case 'macroTask':\n                    switch (task.source) {\n                        case 'setTimeout':\n                            task.data['handleId'] = this._setTimeout(task.invoke, task.data['delay'], Array.prototype.slice.call(task.data['args'], 2));\n                            break;\n                        case 'setImmediate':\n                            task.data['handleId'] = this._setTimeout(task.invoke, 0, Array.prototype.slice.call(task.data['args'], 1));\n                            break;\n                        case 'setInterval':\n                            task.data['handleId'] = this._setInterval(task.invoke, task.data['delay'], Array.prototype.slice.call(task.data['args'], 2));\n                            break;\n                        case 'XMLHttpRequest.send':\n                            throw new Error('Cannot make XHRs from within a fake async test. Request URL: ' +\n                                task.data['url']);\n                        case 'requestAnimationFrame':\n                        case 'webkitRequestAnimationFrame':\n                        case 'mozRequestAnimationFrame':\n                            // Simulate a requestAnimationFrame by using a setTimeout with 16 ms.\n                            // (60 frames per second)\n                            task.data['handleId'] = this._setTimeout(task.invoke, 16, task.data['args'], this.trackPendingRequestAnimationFrame);\n                            break;\n                        default:\n                            // user can define which macroTask they want to support by passing\n                            // macroTaskOptions\n                            var macroTaskOption = this.findMacroTaskOption(task);\n                            if (macroTaskOption) {\n                                var args_1 = task.data && task.data['args'];\n                                var delay = args_1 && args_1.length > 1 ? args_1[1] : 0;\n                                var callbackArgs = macroTaskOption.callbackArgs ? macroTaskOption.callbackArgs : args_1;\n                                if (!!macroTaskOption.isPeriodic) {\n                                    // periodic macroTask, use setInterval to simulate\n                                    task.data['handleId'] = this._setInterval(task.invoke, delay, callbackArgs);\n                                    task.data.isPeriodic = true;\n                                }\n                                else {\n                                    // not periodic, use setTimeout to simulate\n                                    task.data['handleId'] = this._setTimeout(task.invoke, delay, callbackArgs);\n                                }\n                                break;\n                            }\n                            throw new Error('Unknown macroTask scheduled in fake async test: ' + task.source);\n                    }\n                    break;\n                case 'eventTask':\n                    task = delegate.scheduleTask(target, task);\n                    break;\n            }\n            return task;\n        };\n        FakeAsyncTestZoneSpec.prototype.onCancelTask = function (delegate, current, target, task) {\n            switch (task.source) {\n                case 'setTimeout':\n                case 'requestAnimationFrame':\n                case 'webkitRequestAnimationFrame':\n                case 'mozRequestAnimationFrame':\n                    return this._clearTimeout(task.data['handleId']);\n                case 'setInterval':\n                    return this._clearInterval(task.data['handleId']);\n                default:\n                    // user can define which macroTask they want to support by passing\n                    // macroTaskOptions\n                    var macroTaskOption = this.findMacroTaskOption(task);\n                    if (macroTaskOption) {\n                        var handleId = task.data['handleId'];\n                        return macroTaskOption.isPeriodic ? this._clearInterval(handleId) :\n                            this._clearTimeout(handleId);\n                    }\n                    return delegate.cancelTask(target, task);\n            }\n        };\n        FakeAsyncTestZoneSpec.prototype.onInvoke = function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                FakeAsyncTestZoneSpec.patchDate();\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                if (!this.patchDateLocked) {\n                    FakeAsyncTestZoneSpec.resetDate();\n                }\n            }\n        };\n        FakeAsyncTestZoneSpec.prototype.findMacroTaskOption = function (task) {\n            if (!this.macroTaskOptions) {\n                return null;\n            }\n            for (var i = 0; i < this.macroTaskOptions.length; i++) {\n                var macroTaskOption = this.macroTaskOptions[i];\n                if (macroTaskOption.source === task.source) {\n                    return macroTaskOption;\n                }\n            }\n            return null;\n        };\n        FakeAsyncTestZoneSpec.prototype.onHandleError = function (parentZoneDelegate, currentZone, targetZone, error) {\n            this._lastError = error;\n            return false; // Don't propagate error to parent zone.\n        };\n        return FakeAsyncTestZoneSpec;\n    }());\n    // Export the class so that new instances can be created with proper\n    // constructor params.\n    Zone['FakeAsyncTestZoneSpec'] = FakeAsyncTestZoneSpec;\n})(typeof window === 'object' && window || typeof self === 'object' && self || global);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('fakeasync', function (global, Zone, api) {\n    var FakeAsyncTestZoneSpec = Zone && Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = Zone && Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @experimental\n     */\n    function resetFakeAsyncZone() {\n        if (_fakeAsyncTestZoneSpec) {\n            _fakeAsyncTestZoneSpec.unlockDatePatch();\n        }\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * ## Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @experimental\n     */\n    function fakeAsync(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (Zone.current.get('FakeAsyncTestZoneSpec')) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            try {\n                // in case jasmine.clock init a fakeAsyncTestZoneSpec\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                _fakeAsyncTestZoneSpec.lockDatePatch();\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasks();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                resetFakeAsyncZone();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            _fakeAsyncTestZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n            if (_fakeAsyncTestZoneSpec == null) {\n                throw new Error('The code should be running in the fakeAsync zone to call this function');\n            }\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * ## Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @experimental\n     */\n    function tick(millis) {\n        if (millis === void 0) { millis = 0; }\n        _getFakeAsyncZoneSpec().tick(millis);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @experimental\n     */\n    function flush(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @experimental\n     */\n    function discardPeriodicTasks() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        var pendingTimers = zoneSpec.pendingPeriodicTimers;\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @experimental\n     */\n    function flushMicrotasks() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n    Zone[api.symbol('fakeAsyncTest')] =\n        { resetFakeAsyncZone: resetFakeAsyncZone, flushMicrotasks: flushMicrotasks, discardPeriodicTasks: discardPeriodicTasks, tick: tick, flush: flush, fakeAsync: fakeAsync };\n});\n\n})));\n"]}