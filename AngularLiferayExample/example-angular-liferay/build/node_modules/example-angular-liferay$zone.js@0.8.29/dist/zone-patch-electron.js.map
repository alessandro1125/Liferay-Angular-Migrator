{"version":3,"sources":["zone-patch-electron.js"],"names":["global","factory","exports","module","define","amd","Zone","__load_patch","api","patchArguments","target","name","source","patchMethod","delegate","self","args","apply","bindArguments","_a","require","desktopCapturer","shell","CallbacksRegistry","prototype"],"mappings":";;AAAA;;;;;;;AAOC,eAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC3B,eAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DF,SAA/D,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAAvC,GAA6CD,OAAOH,OAAP,CAA7C,GACCA,SAFD;AAGA,KAJA,EAIC,IAJD,EAIQ,YAAY;AAAE;;AAEvB;;;;;;;;AAOAK,aAAKC,YAAL,CAAkB,UAAlB,EAA8B,UAAUP,MAAV,EAAkBM,IAAlB,EAAwBE,GAAxB,EAA6B;AACvD,qBAASC,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8C;AAC1C,uBAAOJ,IAAIK,WAAJ,CAAgBH,MAAhB,EAAwBC,IAAxB,EAA8B,UAAUG,QAAV,EAAoB;AAAE,2BAAO,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACpF,+BAAOF,YAAYA,SAASG,KAAT,CAAeF,IAAf,EAAqBP,IAAIU,aAAJ,CAAkBF,IAAlB,EAAwBJ,MAAxB,CAArB,CAAnB;AACH,qBAF0D;AAEvD,iBAFG,CAAP;AAGH;AACD,gBAAIO,KAAKC,QAAQ,kCAAR,CAAT;AAAA,gBAA8BC,kBAAkBF,GAAGE,eAAnD;AAAA,gBAAoEC,QAAQH,GAAGG,KAA/E;AAAA,gBAAsFC,oBAAoBJ,GAAGI,iBAA7G;AACA;AACA;AACA,gBAAIF,eAAJ,EAAqB;AACjBZ,+BAAeY,eAAf,EAAgC,YAAhC,EAA8C,qCAA9C;AACH;AACD;AACA,gBAAIC,KAAJ,EAAW;AACPb,+BAAea,KAAf,EAAsB,cAAtB,EAAsC,6BAAtC;AACH;AACD;AACA,gBAAI,CAACC,iBAAL,EAAwB;AACpB;AACH;AACDd,2BAAec,kBAAkBC,SAAjC,EAA4C,KAA5C,EAAmD,sBAAnD;AACH,SArBD;AAuBC,KApCA,CAAD","file":"zone-patch-electron.js","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('electron', function (global, Zone, api) {\n    function patchArguments(target, name, source) {\n        return api.patchMethod(target, name, function (delegate) { return function (self, args) {\n            return delegate && delegate.apply(self, api.bindArguments(args, source));\n        }; });\n    }\n    var _a = require('electron'), desktopCapturer = _a.desktopCapturer, shell = _a.shell, CallbacksRegistry = _a.CallbacksRegistry;\n    // patch api in renderer process directly\n    // desktopCapturer\n    if (desktopCapturer) {\n        patchArguments(desktopCapturer, 'getSources', 'electron.desktopCapturer.getSources');\n    }\n    // shell\n    if (shell) {\n        patchArguments(shell, 'openExternal', 'electron.shell.openExternal');\n    }\n    // patch api in main process through CallbackRegistry\n    if (!CallbacksRegistry) {\n        return;\n    }\n    patchArguments(CallbacksRegistry.prototype, 'add', 'CallbackRegistry.add');\n});\n\n})));\n"]}