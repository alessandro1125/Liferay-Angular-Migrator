{"version":3,"sources":["http.js"],"names":["__decorate","__param","__metadata","__extends","__spread","__read","Injectable","InjectionToken","Inject","PLATFORM_ID","Injector","NgModule","of","Observable","concatMap","filter","map","DOCUMENT","ɵparseCookieValue","HttpHandler","HttpBackend","HttpHeaders","headers","_this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name_1","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","name","values","length","prototype","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","apply","toDelete_1","existing","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","map$$1","params","param","eqIdx","_a","val","list","v","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","toString","eKey","join","base_1","idx","splice","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","_super","call","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpInterceptor","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","jsonpCallbackContext","window","HttpClientXsrfModule","HttpClientXsrfModule_1","disable","ngModule","providers","provide","useClass","withOptions","useValue","useExisting","multi","HttpClientModule","imports","HttpClientJsonpModule","useFactory","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_g","ɵangular_packages_common_http_http_h","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵHttpInterceptingHandler"],"mappings":"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","file":"http.js","sourcesContent":["/**\n * @license Angular v6.1.10\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\nimport { __decorate, __param, __metadata, __extends, __spread, __read } from 'tslib';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n *\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n *\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n *\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var index = line.indexOf(':');\n                    if (index > 0) {\n                        var name_1 = line.slice(0, index);\n                        var key = name_1.toLowerCase();\n                        var value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            _this.headers.get(key).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var values = headers[name];\n                    var key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    HttpHeaders.prototype.has = function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    HttpHeaders.prototype.get = function (name) {\n        this.init();\n        var values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    HttpHeaders.prototype.keys = function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    HttpHeaders.prototype.getAll = function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    HttpHeaders.prototype.append = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    HttpHeaders.prototype.set = function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    HttpHeaders.prototype.delete = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    HttpHeaders.prototype.init = function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    HttpHeaders.prototype.copyFrom = function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, other.headers.get(key));\n            _this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    };\n    HttpHeaders.prototype.clone = function (update) {\n        var clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    HttpHeaders.prototype.applyUpdate = function (update) {\n        var key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, __spread(value));\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var toDelete_1 = update.value;\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    HttpHeaders.prototype.forEach = function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n *\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    HttpUrlEncodingCodec.prototype.encodeKey = function (key) { return standardEncoding(key); };\n    HttpUrlEncodingCodec.prototype.encodeValue = function (value) { return standardEncoding(value); };\n    HttpUrlEncodingCodec.prototype.decodeKey = function (key) { return decodeURIComponent(key); };\n    HttpUrlEncodingCodec.prototype.decodeValue = function (value) { return decodeURIComponent(value); };\n    return HttpUrlEncodingCodec;\n}());\nfunction paramParser(rawParams, codec) {\n    var map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = __read(eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];\n            var list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n *\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var value = options.fromObject[key];\n                _this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    HttpParams.prototype.has = function (param) {\n        this.init();\n        return this.map.has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.get = function (param) {\n        this.init();\n        var res = this.map.get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.getAll = function (param) {\n        this.init();\n        return this.map.get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    HttpParams.prototype.keys = function () {\n        this.init();\n        return Array.from(this.map.keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    HttpParams.prototype.toString = function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var eKey = _this.encoder.encodeKey(key);\n            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })\n                .join('&');\n        })\n            .join('&');\n    };\n    HttpParams.prototype.clone = function (update) {\n        var clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    HttpParams.prototype.init = function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });\n            this.updates.forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        _this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var base_1 = _this.map.get(update.param) || [];\n                            var idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                _this.map.set(update.param, base_1);\n                            }\n                            else {\n                                _this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            _this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n *\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    HttpRequest.prototype.serializeBody = function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    HttpRequest.prototype.detectContentTypeHeader = function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    HttpRequest.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var method = update.method || this.method;\n        var url = update.url || this.url;\n        var responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var headers = update.headers || this.headers;\n        var params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n *\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n *\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n *\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    __extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    HttpHeaderResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n *\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    __extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    HttpResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n *\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    __extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n *\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    HttpClient.prototype.request = function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var events$ = of(req).pipe(concatMap(function (req) { return _this.handler.handle(req); }));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var res$ = events$.pipe(filter(function (event) { return event instanceof HttpResponse; }));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map(function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map(function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map(function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map(function (res) { return res.body; }));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.delete = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.get = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.head = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    HttpClient.prototype.jsonp = function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.options = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.patch = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.post = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PUT request to be executed on the server. See the individual overloads for\n     * details of `put()`'s return type based on the provided options.\n     */\n    HttpClient.prototype.put = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [HttpHandler])\n    ], HttpClient);\n    return HttpClient;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    HttpInterceptorHandler.prototype.handle = function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n *\n */\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    NoopInterceptor.prototype.intercept = function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor = __decorate([\n        Injectable()\n    ], NoopInterceptor);\n    return NoopInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n *\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    JsonpClientBackend.prototype.nextCallback = function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    JsonpClientBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var callback = _this.nextCallback();\n            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var body = null;\n            // Whether the response callback has been called.\n            var finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend = __decorate([\n        Injectable(),\n        __param(1, Inject(DOCUMENT)),\n        __metadata(\"design:paramtypes\", [JsonpCallbackContext, Object])\n    ], JsonpClientBackend);\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n *\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    JsonpInterceptor.prototype.intercept = function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [JsonpClientBackend])\n    ], JsonpInterceptor);\n    return JsonpInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n *\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n *\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [])\n    ], BrowserXhr);\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n *\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    HttpXhrBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var status = xhr.status === 1223 ? 204 : xhr.status;\n                var statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error: error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var onError = function (error) {\n                var res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [XhrFactory])\n    ], HttpXhrBackend);\n    return HttpXhrBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n *\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    HttpXsrfCookieExtractor.prototype.getToken = function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)), __param(1, Inject(PLATFORM_ID)),\n        __param(2, Inject(XSRF_COOKIE_NAME)),\n        __metadata(\"design:paramtypes\", [Object, String, String])\n    ], HttpXsrfCookieExtractor);\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    HttpXsrfInterceptor.prototype.intercept = function (req, next) {\n        var lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor = __decorate([\n        Injectable(),\n        __param(1, Inject(XSRF_HEADER_NAME)),\n        __metadata(\"design:paramtypes\", [HttpXsrfTokenExtractor, String])\n    ], HttpXsrfInterceptor);\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nvar HttpInterceptingHandler = /** @class */ (function () {\n    function HttpInterceptingHandler(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    HttpInterceptingHandler.prototype.handle = function (req) {\n        if (this.chain === null) {\n            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n        }\n        return this.chain.handle(req);\n    };\n    HttpInterceptingHandler = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [HttpBackend, Injector])\n    ], HttpInterceptingHandler);\n    return HttpInterceptingHandler;\n}());\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n *\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    HttpClientXsrfModule_1 = HttpClientXsrfModule;\n    /**\n     * Disable the default XSRF protection.\n     */\n    HttpClientXsrfModule.disable = function () {\n        return {\n            ngModule: HttpClientXsrfModule_1,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    HttpClientXsrfModule.withOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule_1,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    var HttpClientXsrfModule_1;\n    HttpClientXsrfModule = HttpClientXsrfModule_1 = __decorate([\n        NgModule({\n            providers: [\n                HttpXsrfInterceptor,\n                { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n            ],\n        })\n    ], HttpClientXsrfModule);\n    return HttpClientXsrfModule;\n}());\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule = __decorate([\n        NgModule({\n            /**\n             * Optional configuration for XSRF protection.\n             */\n            imports: [\n                HttpClientXsrfModule.withOptions({\n                    cookieName: 'XSRF-TOKEN',\n                    headerName: 'X-XSRF-TOKEN',\n                }),\n            ],\n            /**\n             * Configures the [dependency injector](guide/glossary#injector) where it is imported\n             * with supporting services for HTTP communications.\n             */\n            providers: [\n                HttpClient,\n                { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                HttpXhrBackend,\n                { provide: HttpBackend, useExisting: HttpXhrBackend },\n                BrowserXhr,\n                { provide: XhrFactory, useExisting: BrowserXhr },\n            ],\n        })\n    ], HttpClientModule);\n    return HttpClientModule;\n}());\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule = __decorate([\n        NgModule({\n            providers: [\n                JsonpClientBackend,\n                { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n            ],\n        })\n    ], HttpClientJsonpModule);\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n//# sourceMappingURL=http.js.map\n"]}