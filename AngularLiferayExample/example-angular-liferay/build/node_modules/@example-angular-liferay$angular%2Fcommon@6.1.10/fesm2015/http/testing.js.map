{"version":3,"sources":["testing.js"],"names":["HttpErrorResponse","HttpHeaders","HttpResponse","HttpEventType","HttpBackend","HttpClientModule","Injectable","NgModule","Observable","HttpTestingController","TestRequest","constructor","request","observer","_cancelled","cancelled","flush","body","opts","Error","url","urlWithParams","headers","_maybeConvertBody","responseType","statusText","status","undefined","next","complete","error","event","_toArrayBufferBody","ArrayBuffer","_toBlob","Blob","_toJsonBody","format","Array","isArray","_toTextBody","JSON","stringify","HttpClientTestingBackend","open","handle","req","testReq","push","type","Sent","_match","match","filter","method","toUpperCase","results","forEach","result","index","indexOf","splice","expectOne","description","descriptionFromMatcher","matches","length","expectNone","verify","ignoreCancelled","requests","map","split","join","matcher","name","decorators","HttpClientTestingModule","args","imports","providers","provide","useExisting","Éµangular_packages_common_http_testing_testing_a"],"mappings":"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","file":"testing.js","sourcesContent":["/**\n * @license Angular v6.1.10\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\nimport { HttpErrorResponse, HttpHeaders, HttpResponse, HttpEventType, HttpBackend, HttpClientModule } from '@angular/common/http';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n *\n * @abstract\n */\nclass HttpTestingController {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n *\n */\nclass TestRequest {\n    /**\n     * @param {?} request\n     * @param {?} observer\n     */\n    constructor(request, observer) {\n        this.request = request;\n        this.observer = observer;\n        /**\n         * \\@internal set by `HttpClientTestingBackend`\n         */\n        this._cancelled = false;\n    }\n    /**\n     * Whether the request was cancelled after it was sent.\n     * @return {?}\n     */\n    get cancelled() { return this._cancelled; }\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     * @param {?} body\n     * @param {?=} opts\n     * @return {?}\n     */\n    flush(body, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot flush a cancelled request.`);\n        }\n        /** @type {?} */\n        const url = this.request.urlWithParams;\n        /** @type {?} */\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        body = _maybeConvertBody(this.request.responseType, body);\n        /** @type {?} */\n        let statusText = opts.statusText;\n        /** @type {?} */\n        let status = opts.status !== undefined ? opts.status : 200;\n        if (opts.status === undefined) {\n            if (body === null) {\n                status = 204;\n                statusText = statusText || 'No Content';\n            }\n            else {\n                statusText = statusText || 'OK';\n            }\n        }\n        if (statusText === undefined) {\n            throw new Error('statusText is required when setting a custom status.');\n        }\n        if (status >= 200 && status < 300) {\n            this.observer.next(new HttpResponse({ body, headers, status, statusText, url }));\n            this.observer.complete();\n        }\n        else {\n            this.observer.error(new HttpErrorResponse({ error: body, headers, status, statusText, url }));\n        }\n    }\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     * @param {?} error\n     * @param {?=} opts\n     * @return {?}\n     */\n    error(error, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot return an error for a cancelled request.`);\n        }\n        if (opts.status && opts.status >= 200 && opts.status < 300) {\n            throw new Error(`error() called with a successful status.`);\n        }\n        /** @type {?} */\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        this.observer.error(new HttpErrorResponse({\n            error,\n            headers,\n            status: opts.status || 0,\n            statusText: opts.statusText || '',\n            url: this.request.urlWithParams,\n        }));\n    }\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     * @param {?} event\n     * @return {?}\n     */\n    event(event) {\n        if (this.cancelled) {\n            throw new Error(`Cannot send events to a cancelled request.`);\n        }\n        this.observer.next(event);\n    }\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(body) {\n    if (typeof ArrayBuffer === 'undefined') {\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\n    }\n    if (body instanceof ArrayBuffer) {\n        return body;\n    }\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(body) {\n    if (typeof Blob === 'undefined') {\n        throw new Error('Blob responses are not supported on this platform.');\n    }\n    if (body instanceof Blob) {\n        return body;\n    }\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\n        return new Blob([body]);\n    }\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(body, format = 'JSON') {\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n    }\n    if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n        Array.isArray(body)) {\n        return body;\n    }\n    throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(body) {\n    if (typeof body === 'string') {\n        return body;\n    }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\n    }\n    return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(responseType, body) {\n    if (body === null) {\n        return null;\n    }\n    switch (responseType) {\n        case 'arraybuffer':\n            return _toArrayBufferBody(body);\n        case 'blob':\n            return _toBlob(body);\n        case 'json':\n            return _toJsonBody(body);\n        case 'text':\n            return _toTextBody(body);\n        default:\n            throw new Error(`Unsupported responseType: ${responseType}`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nclass HttpClientTestingBackend {\n    constructor() {\n        /**\n         * List of pending requests which have not yet been expected.\n         */\n        this.open = [];\n    }\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return new Observable((observer) => {\n            /** @type {?} */\n            const testReq = new TestRequest(req, observer);\n            this.open.push(testReq);\n            observer.next(/** @type {?} */ ({ type: HttpEventType.Sent }));\n            return () => { testReq._cancelled = true; };\n        });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     * @param {?} match\n     * @return {?}\n     */\n    _match(match) {\n        if (typeof match === 'string') {\n            return this.open.filter(testReq => testReq.request.urlWithParams === match);\n        }\n        else if (typeof match === 'function') {\n            return this.open.filter(testReq => match(testReq.request));\n        }\n        else {\n            return this.open.filter(testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n                (!match.url || testReq.request.urlWithParams === match.url));\n        }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     * @param {?} match\n     * @return {?}\n     */\n    match(match) {\n        /** @type {?} */\n        const results = this._match(match);\n        results.forEach(result => {\n            /** @type {?} */\n            const index = this.open.indexOf(result);\n            if (index !== -1) {\n                this.open.splice(index, 1);\n            }\n        });\n        return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    expectOne(match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        /** @type {?} */\n        const matches = this.match(match);\n        if (matches.length > 1) {\n            throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n        }\n        if (matches.length === 0) {\n            throw new Error(`Expected one matching request for criteria \"${description}\", found none.`);\n        }\n        return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    expectNone(match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        /** @type {?} */\n        const matches = this.match(match);\n        if (matches.length > 0) {\n            throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n        }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     * @param {?=} opts\n     * @return {?}\n     */\n    verify(opts = {}) {\n        /** @type {?} */\n        let open = this.open;\n        // It's possible that some requests may be cancelled, and this is expected.\n        // The user can ask to ignore open requests which have been cancelled.\n        if (opts.ignoreCancelled) {\n            open = open.filter(testReq => !testReq.cancelled);\n        }\n        if (open.length > 0) {\n            /** @type {?} */\n            const requests = open.map(testReq => {\n                /** @type {?} */\n                const url = testReq.request.urlWithParams.split('?')[0];\n                /** @type {?} */\n                const method = testReq.request.method;\n                return `${method} ${url}`;\n            })\n                .join(', ');\n            throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n        }\n    }\n    /**\n     * @param {?} matcher\n     * @return {?}\n     */\n    descriptionFromMatcher(matcher) {\n        if (typeof matcher === 'string') {\n            return `Match URL: ${matcher}`;\n        }\n        else if (typeof matcher === 'object') {\n            /** @type {?} */\n            const method = matcher.method || '(any)';\n            /** @type {?} */\n            const url = matcher.url || '(any)';\n            return `Match method: ${method}, URL: ${url}`;\n        }\n        else {\n            return `Match by function: ${matcher.name}`;\n        }\n    }\n}\nHttpClientTestingBackend.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n *\n */\nclass HttpClientTestingModule {\n}\nHttpClientTestingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    HttpClientModule,\n                ],\n                providers: [\n                    HttpClientTestingBackend,\n                    { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n                    { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpClientTestingBackend as Éµangular_packages_common_http_testing_testing_a, HttpTestingController, HttpClientTestingModule, TestRequest };\n//# sourceMappingURL=http__testing.js.map\n"]}