{"version":3,"sources":["common-http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","common","http","core","rxjs","operators","HttpHandler","HttpBackend","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","call","ar","e","next","done","push","value","error","__spread","concat","HttpHeaders","headers","_this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name_1","slice","toLowerCase","trim","maybeSetNormalizedName","has","get","set","keys","name","values","init","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","base","undefined","apply","toDelete_1","existing","filter","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","map","params","param","eqIdx","_a","val","list","v","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","toString","eKey","join","base_1","idx","splice","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","_super","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","Injectable","HttpInterceptorHandler","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","Sent","removeEventListener","Inject","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","Injector","jsonpCallbackContext","window","HttpClientXsrfModule","HttpClientXsrfModule_1","disable","ngModule","providers","provide","useClass","withOptions","useValue","NgModule","useExisting","multi","HttpClientModule","imports","HttpClientJsonpModule","useFactory","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_g","ɵangular_packages_common_http_http_h","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵHttpInterceptingHandler"],"mappings":"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","file":"common-http.umd.js","sourcesContent":["/**\n * @license Angular v6.1.10\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/common/http', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.http = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));\n}(this, (function (exports,core,rxjs,operators,common) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n     * `HttpResponse`.\n     *\n     * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n     * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n     * `HttpBackend`.\n     *\n     * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n     *\n     *\n     */\n    var HttpHandler = /** @class */ (function () {\n        function HttpHandler() {\n        }\n        return HttpHandler;\n    }());\n    /**\n     * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n     *\n     * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n     *\n     * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n     * through the interceptor chain.\n     *\n     *\n     */\n    var HttpBackend = /** @class */ (function () {\n        function HttpBackend() {\n        }\n        return HttpBackend;\n    }());\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Immutable set of Http headers, with lazy parsing.\n     *\n     */\n    var HttpHeaders = /** @class */ (function () {\n        function HttpHeaders(headers) {\n            var _this = this;\n            /**\n             * Internal map of lowercased header names to the normalized\n             * form of the name (the form seen first).\n             */\n            this.normalizedNames = new Map();\n            /**\n             * Queued updates to be materialized the next initialization.\n             */\n            this.lazyUpdate = null;\n            if (!headers) {\n                this.headers = new Map();\n            }\n            else if (typeof headers === 'string') {\n                this.lazyInit = function () {\n                    _this.headers = new Map();\n                    headers.split('\\n').forEach(function (line) {\n                        var index = line.indexOf(':');\n                        if (index > 0) {\n                            var name_1 = line.slice(0, index);\n                            var key = name_1.toLowerCase();\n                            var value = line.slice(index + 1).trim();\n                            _this.maybeSetNormalizedName(name_1, key);\n                            if (_this.headers.has(key)) {\n                                _this.headers.get(key).push(value);\n                            }\n                            else {\n                                _this.headers.set(key, [value]);\n                            }\n                        }\n                    });\n                };\n            }\n            else {\n                this.lazyInit = function () {\n                    _this.headers = new Map();\n                    Object.keys(headers).forEach(function (name) {\n                        var values = headers[name];\n                        var key = name.toLowerCase();\n                        if (typeof values === 'string') {\n                            values = [values];\n                        }\n                        if (values.length > 0) {\n                            _this.headers.set(key, values);\n                            _this.maybeSetNormalizedName(name, key);\n                        }\n                    });\n                };\n            }\n        }\n        /**\n         * Checks for existence of header by given name.\n         */\n        HttpHeaders.prototype.has = function (name) {\n            this.init();\n            return this.headers.has(name.toLowerCase());\n        };\n        /**\n         * Returns first header that matches given name.\n         */\n        HttpHeaders.prototype.get = function (name) {\n            this.init();\n            var values = this.headers.get(name.toLowerCase());\n            return values && values.length > 0 ? values[0] : null;\n        };\n        /**\n         * Returns the names of the headers\n         */\n        HttpHeaders.prototype.keys = function () {\n            this.init();\n            return Array.from(this.normalizedNames.values());\n        };\n        /**\n         * Returns list of header values for a given name.\n         */\n        HttpHeaders.prototype.getAll = function (name) {\n            this.init();\n            return this.headers.get(name.toLowerCase()) || null;\n        };\n        HttpHeaders.prototype.append = function (name, value) {\n            return this.clone({ name: name, value: value, op: 'a' });\n        };\n        HttpHeaders.prototype.set = function (name, value) {\n            return this.clone({ name: name, value: value, op: 's' });\n        };\n        HttpHeaders.prototype.delete = function (name, value) {\n            return this.clone({ name: name, value: value, op: 'd' });\n        };\n        HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {\n            if (!this.normalizedNames.has(lcName)) {\n                this.normalizedNames.set(lcName, name);\n            }\n        };\n        HttpHeaders.prototype.init = function () {\n            var _this = this;\n            if (!!this.lazyInit) {\n                if (this.lazyInit instanceof HttpHeaders) {\n                    this.copyFrom(this.lazyInit);\n                }\n                else {\n                    this.lazyInit();\n                }\n                this.lazyInit = null;\n                if (!!this.lazyUpdate) {\n                    this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                    this.lazyUpdate = null;\n                }\n            }\n        };\n        HttpHeaders.prototype.copyFrom = function (other) {\n            var _this = this;\n            other.init();\n            Array.from(other.headers.keys()).forEach(function (key) {\n                _this.headers.set(key, other.headers.get(key));\n                _this.normalizedNames.set(key, other.normalizedNames.get(key));\n            });\n        };\n        HttpHeaders.prototype.clone = function (update) {\n            var clone = new HttpHeaders();\n            clone.lazyInit =\n                (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n            clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n            return clone;\n        };\n        HttpHeaders.prototype.applyUpdate = function (update) {\n            var key = update.name.toLowerCase();\n            switch (update.op) {\n                case 'a':\n                case 's':\n                    var value = update.value;\n                    if (typeof value === 'string') {\n                        value = [value];\n                    }\n                    if (value.length === 0) {\n                        return;\n                    }\n                    this.maybeSetNormalizedName(update.name, key);\n                    var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                    base.push.apply(base, __spread(value));\n                    this.headers.set(key, base);\n                    break;\n                case 'd':\n                    var toDelete_1 = update.value;\n                    if (!toDelete_1) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        var existing = this.headers.get(key);\n                        if (!existing) {\n                            return;\n                        }\n                        existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                        if (existing.length === 0) {\n                            this.headers.delete(key);\n                            this.normalizedNames.delete(key);\n                        }\n                        else {\n                            this.headers.set(key, existing);\n                        }\n                    }\n                    break;\n            }\n        };\n        /**\n         * @internal\n         */\n        HttpHeaders.prototype.forEach = function (fn) {\n            var _this = this;\n            this.init();\n            Array.from(this.normalizedNames.keys())\n                .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });\n        };\n        return HttpHeaders;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n     * serialize and parse URL parameter keys and values.\n     *\n     *\n     */\n    var HttpUrlEncodingCodec = /** @class */ (function () {\n        function HttpUrlEncodingCodec() {\n        }\n        HttpUrlEncodingCodec.prototype.encodeKey = function (key) { return standardEncoding(key); };\n        HttpUrlEncodingCodec.prototype.encodeValue = function (value) { return standardEncoding(value); };\n        HttpUrlEncodingCodec.prototype.decodeKey = function (key) { return decodeURIComponent(key); };\n        HttpUrlEncodingCodec.prototype.decodeValue = function (value) { return decodeURIComponent(value); };\n        return HttpUrlEncodingCodec;\n    }());\n    function paramParser(rawParams, codec) {\n        var map = new Map();\n        if (rawParams.length > 0) {\n            var params = rawParams.split('&');\n            params.forEach(function (param) {\n                var eqIdx = param.indexOf('=');\n                var _a = __read(eqIdx == -1 ?\n                    [codec.decodeKey(param), ''] :\n                    [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];\n                var list = map.get(key) || [];\n                list.push(val);\n                map.set(key, list);\n            });\n        }\n        return map;\n    }\n    function standardEncoding(v) {\n        return encodeURIComponent(v)\n            .replace(/%40/gi, '@')\n            .replace(/%3A/gi, ':')\n            .replace(/%24/gi, '$')\n            .replace(/%2C/gi, ',')\n            .replace(/%3B/gi, ';')\n            .replace(/%2B/gi, '+')\n            .replace(/%3D/gi, '=')\n            .replace(/%3F/gi, '?')\n            .replace(/%2F/gi, '/');\n    }\n    /**\n     * An HTTP request/response body that represents serialized parameters,\n     * per the MIME type `application/x-www-form-urlencoded`.\n     *\n     * This class is immutable - all mutation operations return a new instance.\n     *\n     *\n     */\n    var HttpParams = /** @class */ (function () {\n        function HttpParams(options) {\n            if (options === void 0) { options = {}; }\n            var _this = this;\n            this.updates = null;\n            this.cloneFrom = null;\n            this.encoder = options.encoder || new HttpUrlEncodingCodec();\n            if (!!options.fromString) {\n                if (!!options.fromObject) {\n                    throw new Error(\"Cannot specify both fromString and fromObject.\");\n                }\n                this.map = paramParser(options.fromString, this.encoder);\n            }\n            else if (!!options.fromObject) {\n                this.map = new Map();\n                Object.keys(options.fromObject).forEach(function (key) {\n                    var value = options.fromObject[key];\n                    _this.map.set(key, Array.isArray(value) ? value : [value]);\n                });\n            }\n            else {\n                this.map = null;\n            }\n        }\n        /**\n         * Check whether the body has one or more values for the given parameter name.\n         */\n        HttpParams.prototype.has = function (param) {\n            this.init();\n            return this.map.has(param);\n        };\n        /**\n         * Get the first value for the given parameter name, or `null` if it's not present.\n         */\n        HttpParams.prototype.get = function (param) {\n            this.init();\n            var res = this.map.get(param);\n            return !!res ? res[0] : null;\n        };\n        /**\n         * Get all values for the given parameter name, or `null` if it's not present.\n         */\n        HttpParams.prototype.getAll = function (param) {\n            this.init();\n            return this.map.get(param) || null;\n        };\n        /**\n         * Get all the parameter names for this body.\n         */\n        HttpParams.prototype.keys = function () {\n            this.init();\n            return Array.from(this.map.keys());\n        };\n        /**\n         * Construct a new body with an appended value for the given parameter name.\n         */\n        HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n        /**\n         * Construct a new body with a new value for the given parameter name.\n         */\n        HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n        /**\n         * Construct a new body with either the given value for the given parameter\n         * removed, if a value is given, or all values for the given parameter removed\n         * if not.\n         */\n        HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n        /**\n         * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n         * separated by `&`s.\n         */\n        HttpParams.prototype.toString = function () {\n            var _this = this;\n            this.init();\n            return this.keys()\n                .map(function (key) {\n                var eKey = _this.encoder.encodeKey(key);\n                return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })\n                    .join('&');\n            })\n                .join('&');\n        };\n        HttpParams.prototype.clone = function (update) {\n            var clone = new HttpParams({ encoder: this.encoder });\n            clone.cloneFrom = this.cloneFrom || this;\n            clone.updates = (this.updates || []).concat([update]);\n            return clone;\n        };\n        HttpParams.prototype.init = function () {\n            var _this = this;\n            if (this.map === null) {\n                this.map = new Map();\n            }\n            if (this.cloneFrom !== null) {\n                this.cloneFrom.init();\n                this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });\n                this.updates.forEach(function (update) {\n                    switch (update.op) {\n                        case 'a':\n                        case 's':\n                            var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];\n                            base.push(update.value);\n                            _this.map.set(update.param, base);\n                            break;\n                        case 'd':\n                            if (update.value !== undefined) {\n                                var base_1 = _this.map.get(update.param) || [];\n                                var idx = base_1.indexOf(update.value);\n                                if (idx !== -1) {\n                                    base_1.splice(idx, 1);\n                                }\n                                if (base_1.length > 0) {\n                                    _this.map.set(update.param, base_1);\n                                }\n                                else {\n                                    _this.map.delete(update.param);\n                                }\n                            }\n                            else {\n                                _this.map.delete(update.param);\n                                break;\n                            }\n                    }\n                });\n                this.cloneFrom = null;\n            }\n        };\n        return HttpParams;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Determine whether the given HTTP method may include a body.\n     */\n    function mightHaveBody(method) {\n        switch (method) {\n            case 'DELETE':\n            case 'GET':\n            case 'HEAD':\n            case 'OPTIONS':\n            case 'JSONP':\n                return false;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Safely assert whether the given value is an ArrayBuffer.\n     *\n     * In some execution environments ArrayBuffer is not defined.\n     */\n    function isArrayBuffer(value) {\n        return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n    }\n    /**\n     * Safely assert whether the given value is a Blob.\n     *\n     * In some execution environments Blob is not defined.\n     */\n    function isBlob(value) {\n        return typeof Blob !== 'undefined' && value instanceof Blob;\n    }\n    /**\n     * Safely assert whether the given value is a FormData instance.\n     *\n     * In some execution environments FormData is not defined.\n     */\n    function isFormData(value) {\n        return typeof FormData !== 'undefined' && value instanceof FormData;\n    }\n    /**\n     * An outgoing HTTP request with an optional typed body.\n     *\n     * `HttpRequest` represents an outgoing request, including URL, method,\n     * headers, body, and other request configuration options. Instances should be\n     * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n     * method should be used.\n     *\n     *\n     */\n    var HttpRequest = /** @class */ (function () {\n        function HttpRequest(method, url, third, fourth) {\n            this.url = url;\n            /**\n             * The request body, or `null` if one isn't set.\n             *\n             * Bodies are not enforced to be immutable, as they can include a reference to any\n             * user-defined data type. However, interceptors should take care to preserve\n             * idempotence by treating them as such.\n             */\n            this.body = null;\n            /**\n             * Whether this request should be made in a way that exposes progress events.\n             *\n             * Progress events are expensive (change detection runs on each event) and so\n             * they should only be requested if the consumer intends to monitor them.\n             */\n            this.reportProgress = false;\n            /**\n             * Whether this request should be sent with outgoing credentials (cookies).\n             */\n            this.withCredentials = false;\n            /**\n             * The expected response type of the server.\n             *\n             * This is used to parse the response appropriately before returning it to\n             * the requestee.\n             */\n            this.responseType = 'json';\n            this.method = method.toUpperCase();\n            // Next, need to figure out which argument holds the HttpRequestInit\n            // options, if any.\n            var options;\n            // Check whether a body argument is expected. The only valid way to omit\n            // the body argument is to use a known no-body method like GET.\n            if (mightHaveBody(this.method) || !!fourth) {\n                // Body is the third argument, options are the fourth.\n                this.body = (third !== undefined) ? third : null;\n                options = fourth;\n            }\n            else {\n                // No body required, options are the third argument. The body stays null.\n                options = third;\n            }\n            // If options have been passed, interpret them.\n            if (options) {\n                // Normalize reportProgress and withCredentials.\n                this.reportProgress = !!options.reportProgress;\n                this.withCredentials = !!options.withCredentials;\n                // Override default response type of 'json' if one is provided.\n                if (!!options.responseType) {\n                    this.responseType = options.responseType;\n                }\n                // Override headers if they're provided.\n                if (!!options.headers) {\n                    this.headers = options.headers;\n                }\n                if (!!options.params) {\n                    this.params = options.params;\n                }\n            }\n            // If no headers have been passed in, construct a new HttpHeaders instance.\n            if (!this.headers) {\n                this.headers = new HttpHeaders();\n            }\n            // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n            if (!this.params) {\n                this.params = new HttpParams();\n                this.urlWithParams = url;\n            }\n            else {\n                // Encode the parameters to a string in preparation for inclusion in the URL.\n                var params = this.params.toString();\n                if (params.length === 0) {\n                    // No parameters, the visible URL is just the URL given at creation time.\n                    this.urlWithParams = url;\n                }\n                else {\n                    // Does the URL already have query parameters? Look for '?'.\n                    var qIdx = url.indexOf('?');\n                    // There are 3 cases to handle:\n                    // 1) No existing parameters -> append '?' followed by params.\n                    // 2) '?' exists and is followed by existing query string ->\n                    //    append '&' followed by params.\n                    // 3) '?' exists at the end of the url -> append params directly.\n                    // This basically amounts to determining the character, if any, with\n                    // which to join the URL and parameters.\n                    var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                    this.urlWithParams = url + sep + params;\n                }\n            }\n        }\n        /**\n         * Transform the free-form body into a serialized format suitable for\n         * transmission to the server.\n         */\n        HttpRequest.prototype.serializeBody = function () {\n            // If no body is present, no need to serialize it.\n            if (this.body === null) {\n                return null;\n            }\n            // Check whether the body is already in a serialized form. If so,\n            // it can just be returned directly.\n            if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n                typeof this.body === 'string') {\n                return this.body;\n            }\n            // Check whether the body is an instance of HttpUrlEncodedParams.\n            if (this.body instanceof HttpParams) {\n                return this.body.toString();\n            }\n            // Check whether the body is an object or array, and serialize with JSON if so.\n            if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n                Array.isArray(this.body)) {\n                return JSON.stringify(this.body);\n            }\n            // Fall back on toString() for everything else.\n            return this.body.toString();\n        };\n        /**\n         * Examine the body and attempt to infer an appropriate MIME type\n         * for it.\n         *\n         * If no such type can be inferred, this method will return `null`.\n         */\n        HttpRequest.prototype.detectContentTypeHeader = function () {\n            // An empty body has no content type.\n            if (this.body === null) {\n                return null;\n            }\n            // FormData bodies rely on the browser's content type assignment.\n            if (isFormData(this.body)) {\n                return null;\n            }\n            // Blobs usually have their own content type. If it doesn't, then\n            // no type can be inferred.\n            if (isBlob(this.body)) {\n                return this.body.type || null;\n            }\n            // Array buffers have unknown contents and thus no type can be inferred.\n            if (isArrayBuffer(this.body)) {\n                return null;\n            }\n            // Technically, strings could be a form of JSON data, but it's safe enough\n            // to assume they're plain strings.\n            if (typeof this.body === 'string') {\n                return 'text/plain';\n            }\n            // `HttpUrlEncodedParams` has its own content-type.\n            if (this.body instanceof HttpParams) {\n                return 'application/x-www-form-urlencoded;charset=UTF-8';\n            }\n            // Arrays, objects, and numbers will be encoded as JSON.\n            if (typeof this.body === 'object' || typeof this.body === 'number' ||\n                Array.isArray(this.body)) {\n                return 'application/json';\n            }\n            // No type could be inferred.\n            return null;\n        };\n        HttpRequest.prototype.clone = function (update) {\n            if (update === void 0) { update = {}; }\n            // For method, url, and responseType, take the current value unless\n            // it is overridden in the update hash.\n            var method = update.method || this.method;\n            var url = update.url || this.url;\n            var responseType = update.responseType || this.responseType;\n            // The body is somewhat special - a `null` value in update.body means\n            // whatever current body is present is being overridden with an empty\n            // body, whereas an `undefined` value in update.body implies no\n            // override.\n            var body = (update.body !== undefined) ? update.body : this.body;\n            // Carefully handle the boolean options to differentiate between\n            // `false` and `undefined` in the update args.\n            var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n            var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n            // Headers and params may be appended to if `setHeaders` or\n            // `setParams` are used.\n            var headers = update.headers || this.headers;\n            var params = update.params || this.params;\n            // Check whether the caller has asked to add headers.\n            if (update.setHeaders !== undefined) {\n                // Set every requested header.\n                headers =\n                    Object.keys(update.setHeaders)\n                        .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);\n            }\n            // Check whether the caller has asked to set params.\n            if (update.setParams) {\n                // Set every requested param.\n                params = Object.keys(update.setParams)\n                    .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);\n            }\n            // Finally, construct the new HttpRequest using the pieces from above.\n            return new HttpRequest(method, url, body, {\n                params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n            });\n        };\n        return HttpRequest;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (HttpEventType) {\n        /**\n         * The request was sent out over the wire.\n         */\n        HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n        /**\n         * An upload progress event was received.\n         */\n        HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n        /**\n         * The response status code and headers were received.\n         */\n        HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n        /**\n         * A download progress event was received.\n         */\n        HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n        /**\n         * The full response including the body was received.\n         */\n        HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n        /**\n         * A custom event from an interceptor or a backend.\n         */\n        HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n    })(exports.HttpEventType || (exports.HttpEventType = {}));\n    /**\n     * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n     *\n     *\n     */\n    var HttpResponseBase = /** @class */ (function () {\n        /**\n         * Super-constructor for all responses.\n         *\n         * The single parameter accepted is an initialization hash. Any properties\n         * of the response passed there will override the default values.\n         */\n        function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n            if (defaultStatus === void 0) { defaultStatus = 200; }\n            if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n            // If the hash has values passed, use them to initialize the response.\n            // Otherwise use the default values.\n            this.headers = init.headers || new HttpHeaders();\n            this.status = init.status !== undefined ? init.status : defaultStatus;\n            this.statusText = init.statusText || defaultStatusText;\n            this.url = init.url || null;\n            // Cache the ok value to avoid defining a getter.\n            this.ok = this.status >= 200 && this.status < 300;\n        }\n        return HttpResponseBase;\n    }());\n    /**\n     * A partial HTTP response which only includes the status and header data,\n     * but no response body.\n     *\n     * `HttpHeaderResponse` is a `HttpEvent` available on the response\n     * event stream, only when progress events are requested.\n     *\n     *\n     */\n    var HttpHeaderResponse = /** @class */ (function (_super) {\n        __extends(HttpHeaderResponse, _super);\n        /**\n         * Create a new `HttpHeaderResponse` with the given parameters.\n         */\n        function HttpHeaderResponse(init) {\n            if (init === void 0) { init = {}; }\n            var _this = _super.call(this, init) || this;\n            _this.type = exports.HttpEventType.ResponseHeader;\n            return _this;\n        }\n        /**\n         * Copy this `HttpHeaderResponse`, overriding its contents with the\n         * given parameter hash.\n         */\n        HttpHeaderResponse.prototype.clone = function (update) {\n            if (update === void 0) { update = {}; }\n            // Perform a straightforward initialization of the new HttpHeaderResponse,\n            // overriding the current parameters with new ones if given.\n            return new HttpHeaderResponse({\n                headers: update.headers || this.headers,\n                status: update.status !== undefined ? update.status : this.status,\n                statusText: update.statusText || this.statusText,\n                url: update.url || this.url || undefined,\n            });\n        };\n        return HttpHeaderResponse;\n    }(HttpResponseBase));\n    /**\n     * A full HTTP response, including a typed response body (which may be `null`\n     * if one was not returned).\n     *\n     * `HttpResponse` is a `HttpEvent` available on the response event\n     * stream.\n     *\n     *\n     */\n    var HttpResponse = /** @class */ (function (_super) {\n        __extends(HttpResponse, _super);\n        /**\n         * Construct a new `HttpResponse`.\n         */\n        function HttpResponse(init) {\n            if (init === void 0) { init = {}; }\n            var _this = _super.call(this, init) || this;\n            _this.type = exports.HttpEventType.Response;\n            _this.body = init.body !== undefined ? init.body : null;\n            return _this;\n        }\n        HttpResponse.prototype.clone = function (update) {\n            if (update === void 0) { update = {}; }\n            return new HttpResponse({\n                body: (update.body !== undefined) ? update.body : this.body,\n                headers: update.headers || this.headers,\n                status: (update.status !== undefined) ? update.status : this.status,\n                statusText: update.statusText || this.statusText,\n                url: update.url || this.url || undefined,\n            });\n        };\n        return HttpResponse;\n    }(HttpResponseBase));\n    /**\n     * A response that represents an error or failure, either from a\n     * non-successful HTTP status, an error while executing the request,\n     * or some other failure which occurred during the parsing of the response.\n     *\n     * Any error returned on the `Observable` response stream will be\n     * wrapped in an `HttpErrorResponse` to provide additional context about\n     * the state of the HTTP layer when the error occurred. The error property\n     * will contain either a wrapped Error object or the error response returned\n     * from the server.\n     *\n     *\n     */\n    var HttpErrorResponse = /** @class */ (function (_super) {\n        __extends(HttpErrorResponse, _super);\n        function HttpErrorResponse(init) {\n            var _this = \n            // Initialize with a default status of 0 / Unknown Error.\n            _super.call(this, init, 0, 'Unknown Error') || this;\n            _this.name = 'HttpErrorResponse';\n            /**\n             * Errors are never okay, even when the status code is in the 2xx success range.\n             */\n            _this.ok = false;\n            // If the response was successful, then this was a parse error. Otherwise, it was\n            // a protocol-level failure of some sort. Either the request failed in transit\n            // or the server returned an unsuccessful status code.\n            if (_this.status >= 200 && _this.status < 300) {\n                _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n            }\n            else {\n                _this.message =\n                    \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n            }\n            _this.error = init.error || null;\n            return _this;\n        }\n        return HttpErrorResponse;\n    }(HttpResponseBase));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n     * the given `body`. Basically, this clones the object and adds the body.\n     */\n    function addBody(options, body) {\n        return {\n            body: body,\n            headers: options.headers,\n            observe: options.observe,\n            params: options.params,\n            reportProgress: options.reportProgress,\n            responseType: options.responseType,\n            withCredentials: options.withCredentials,\n        };\n    }\n    /**\n     * Perform HTTP requests.\n     *\n     * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n     * Each request method has multiple signatures, and the return type varies according to which\n     * signature is called (mainly the values of `observe` and `responseType`).\n     *\n     *\n     */\n    var HttpClient = /** @class */ (function () {\n        function HttpClient(handler) {\n            this.handler = handler;\n        }\n        /**\n         * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n         * fires the request through the chain of registered interceptors and on to the\n         * server.\n         *\n         * This method can be called in one of two ways. Either an `HttpRequest`\n         * instance can be passed directly as the only parameter, or a method can be\n         * passed as the first parameter, a string URL as the second, and an\n         * options hash as the third.\n         *\n         * If a `HttpRequest` object is passed directly, an `Observable` of the\n         * raw `HttpEvent` stream will be returned.\n         *\n         * If a request is instead built by providing a URL, the options object\n         * determines the return type of `request()`. In addition to configuring\n         * request parameters such as the outgoing headers and/or the body, the options\n         * hash specifies two key pieces of information about the request: the\n         * `responseType` and what to `observe`.\n         *\n         * The `responseType` value determines how a successful response body will be\n         * parsed. If `responseType` is the default `json`, a type interface for the\n         * resulting object may be passed as a type parameter to `request()`.\n         *\n         * The `observe` value determines the return type of `request()`, based on what\n         * the consumer is interested in observing. A value of `events` will return an\n         * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n         * including progress events by default. A value of `response` will return an\n         * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n         * depends on the `responseType` and any optionally provided type parameter.\n         * A value of `body` will return an `Observable<T>` with the same `T` body type.\n         */\n        HttpClient.prototype.request = function (first, url, options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            var req;\n            // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n            if (first instanceof HttpRequest) {\n                // It is. The other arguments must be undefined (per the signatures) and can be\n                // ignored.\n                req = first;\n            }\n            else {\n                // It's a string, so it represents a URL. Construct a request based on it,\n                // and incorporate the remaining arguments (assuming GET unless a method is\n                // provided.\n                // Figure out the headers.\n                var headers = undefined;\n                if (options.headers instanceof HttpHeaders) {\n                    headers = options.headers;\n                }\n                else {\n                    headers = new HttpHeaders(options.headers);\n                }\n                // Sort out parameters.\n                var params = undefined;\n                if (!!options.params) {\n                    if (options.params instanceof HttpParams) {\n                        params = options.params;\n                    }\n                    else {\n                        params = new HttpParams({ fromObject: options.params });\n                    }\n                }\n                // Construct the request.\n                req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                    headers: headers,\n                    params: params,\n                    reportProgress: options.reportProgress,\n                    // By default, JSON is assumed to be returned for all calls.\n                    responseType: options.responseType || 'json',\n                    withCredentials: options.withCredentials,\n                });\n            }\n            // Start with an Observable.of() the initial request, and run the handler (which\n            // includes all interceptors) inside a concatMap(). This way, the handler runs\n            // inside an Observable chain, which causes interceptors to be re-run on every\n            // subscription (this also makes retries re-run the handler, including interceptors).\n            var events$ = rxjs.of(req).pipe(operators.concatMap(function (req) { return _this.handler.handle(req); }));\n            // If coming via the API signature which accepts a previously constructed HttpRequest,\n            // the only option is to get the event stream. Otherwise, return the event stream if\n            // that is what was requested.\n            if (first instanceof HttpRequest || options.observe === 'events') {\n                return events$;\n            }\n            // The requested stream contains either the full response or the body. In either\n            // case, the first step is to filter the event stream to extract a stream of\n            // responses(s).\n            var res$ = events$.pipe(operators.filter(function (event) { return event instanceof HttpResponse; }));\n            // Decide which stream to return.\n            switch (options.observe || 'body') {\n                case 'body':\n                    // The requested stream is the body. Map the response stream to the response\n                    // body. This could be done more simply, but a misbehaving interceptor might\n                    // transform the response body into a different format and ignore the requested\n                    // responseType. Guard against this by validating that the response is of the\n                    // requested type.\n                    switch (req.responseType) {\n                        case 'arraybuffer':\n                            return res$.pipe(operators.map(function (res) {\n                                // Validate that the body is an ArrayBuffer.\n                                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                    throw new Error('Response is not an ArrayBuffer.');\n                                }\n                                return res.body;\n                            }));\n                        case 'blob':\n                            return res$.pipe(operators.map(function (res) {\n                                // Validate that the body is a Blob.\n                                if (res.body !== null && !(res.body instanceof Blob)) {\n                                    throw new Error('Response is not a Blob.');\n                                }\n                                return res.body;\n                            }));\n                        case 'text':\n                            return res$.pipe(operators.map(function (res) {\n                                // Validate that the body is a string.\n                                if (res.body !== null && typeof res.body !== 'string') {\n                                    throw new Error('Response is not a string.');\n                                }\n                                return res.body;\n                            }));\n                        case 'json':\n                        default:\n                            // No validation needed for JSON responses, as they can be of any type.\n                            return res$.pipe(operators.map(function (res) { return res.body; }));\n                    }\n                case 'response':\n                    // The response stream was requested directly, so return it.\n                    return res$;\n                default:\n                    // Guard against new future observe types being added.\n                    throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n            }\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause the configured\n         * DELETE request to be executed on the server. See the individual overloads for\n         * details of `delete()`'s return type based on the provided options.\n         */\n        HttpClient.prototype.delete = function (url, options) {\n            if (options === void 0) { options = {}; }\n            return this.request('DELETE', url, options);\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause the configured\n         * GET request to be executed on the server. See the individual overloads for\n         * details of `get()`'s return type based on the provided options.\n         */\n        HttpClient.prototype.get = function (url, options) {\n            if (options === void 0) { options = {}; }\n            return this.request('GET', url, options);\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause the configured\n         * HEAD request to be executed on the server. See the individual overloads for\n         * details of `head()`'s return type based on the provided options.\n         */\n        HttpClient.prototype.head = function (url, options) {\n            if (options === void 0) { options = {}; }\n            return this.request('HEAD', url, options);\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause a request\n         * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n         *\n         * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n         * If no such interceptor is reached, then the `JSONP` request will likely be\n         * rejected by the configured backend.\n         */\n        HttpClient.prototype.jsonp = function (url, callbackParam) {\n            return this.request('JSONP', url, {\n                params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n                observe: 'body',\n                responseType: 'json',\n            });\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause the configured\n         * OPTIONS request to be executed on the server. See the individual overloads for\n         * details of `options()`'s return type based on the provided options.\n         */\n        HttpClient.prototype.options = function (url, options) {\n            if (options === void 0) { options = {}; }\n            return this.request('OPTIONS', url, options);\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause the configured\n         * PATCH request to be executed on the server. See the individual overloads for\n         * details of `patch()`'s return type based on the provided options.\n         */\n        HttpClient.prototype.patch = function (url, body, options) {\n            if (options === void 0) { options = {}; }\n            return this.request('PATCH', url, addBody(options, body));\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause the configured\n         * POST request to be executed on the server. See the individual overloads for\n         * details of `post()`'s return type based on the provided options.\n         */\n        HttpClient.prototype.post = function (url, body, options) {\n            if (options === void 0) { options = {}; }\n            return this.request('POST', url, addBody(options, body));\n        };\n        /**\n         * Constructs an `Observable` which, when subscribed, will cause the configured\n         * PUT request to be executed on the server. See the individual overloads for\n         * details of `put()`'s return type based on the provided options.\n         */\n        HttpClient.prototype.put = function (url, body, options) {\n            if (options === void 0) { options = {}; }\n            return this.request('PUT', url, addBody(options, body));\n        };\n        HttpClient = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [HttpHandler])\n        ], HttpClient);\n        return HttpClient;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n     *\n     *\n     */\n    var HttpInterceptorHandler = /** @class */ (function () {\n        function HttpInterceptorHandler(next, interceptor) {\n            this.next = next;\n            this.interceptor = interceptor;\n        }\n        HttpInterceptorHandler.prototype.handle = function (req) {\n            return this.interceptor.intercept(req, this.next);\n        };\n        return HttpInterceptorHandler;\n    }());\n    /**\n     * A multi-provider token which represents the array of `HttpInterceptor`s that\n     * are registered.\n     *\n     *\n     */\n    var HTTP_INTERCEPTORS = new core.InjectionToken('HTTP_INTERCEPTORS');\n    var NoopInterceptor = /** @class */ (function () {\n        function NoopInterceptor() {\n        }\n        NoopInterceptor.prototype.intercept = function (req, next) {\n            return next.handle(req);\n        };\n        NoopInterceptor = __decorate([\n            core.Injectable()\n        ], NoopInterceptor);\n        return NoopInterceptor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Every request made through JSONP needs a callback name that's unique across the\n    // whole page. Each request is assigned an id and the callback name is constructed\n    // from that. The next id to be assigned is tracked in a global variable here that\n    // is shared among all applications on the page.\n    var nextRequestId = 0;\n    // Error text given when a JSONP script is injected, but doesn't invoke the callback\n    // passed in its URL.\n    var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n    // Error text given when a request is passed to the JsonpClientBackend that doesn't\n    // have a request method JSONP.\n    var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n    var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n    /**\n     * DI token/abstract type representing a map of JSONP callbacks.\n     *\n     * In the browser, this should always be the `window` object.\n     *\n     *\n     */\n    var JsonpCallbackContext = /** @class */ (function () {\n        function JsonpCallbackContext() {\n        }\n        return JsonpCallbackContext;\n    }());\n    /**\n     * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n     * by performing JSONP style requests.\n     *\n     *\n     */\n    var JsonpClientBackend = /** @class */ (function () {\n        function JsonpClientBackend(callbackMap, document) {\n            this.callbackMap = callbackMap;\n            this.document = document;\n        }\n        /**\n         * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n         */\n        JsonpClientBackend.prototype.nextCallback = function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n        /**\n         * Process a JSONP request and return an event stream of the results.\n         */\n        JsonpClientBackend.prototype.handle = function (req) {\n            var _this = this;\n            // Firstly, check both the method and response type. If either doesn't match\n            // then the request was improperly routed here and cannot be handled.\n            if (req.method !== 'JSONP') {\n                throw new Error(JSONP_ERR_WRONG_METHOD);\n            }\n            else if (req.responseType !== 'json') {\n                throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n            }\n            // Everything else happens inside the Observable boundary.\n            return new rxjs.Observable(function (observer) {\n                // The first step to make a request is to generate the callback name, and replace the\n                // callback placeholder in the URL with the name. Care has to be taken here to ensure\n                // a trailing &, if matched, gets inserted back into the URL in the correct place.\n                var callback = _this.nextCallback();\n                var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n                // Construct the <script> tag and point it at the URL.\n                var node = _this.document.createElement('script');\n                node.src = url;\n                // A JSONP request requires waiting for multiple callbacks. These variables\n                // are closed over and track state across those callbacks.\n                // The response object, if one has been received, or null otherwise.\n                var body = null;\n                // Whether the response callback has been called.\n                var finished = false;\n                // Whether the request has been cancelled (and thus any other callbacks)\n                // should be ignored.\n                var cancelled = false;\n                // Set the response callback in this.callbackMap (which will be the window\n                // object in the browser. The script being loaded via the <script> tag will\n                // eventually call this callback.\n                _this.callbackMap[callback] = function (data) {\n                    // Data has been received from the JSONP script. Firstly, delete this callback.\n                    delete _this.callbackMap[callback];\n                    // Next, make sure the request wasn't cancelled in the meantime.\n                    if (cancelled) {\n                        return;\n                    }\n                    // Set state to indicate data was received.\n                    body = data;\n                    finished = true;\n                };\n                // cleanup() is a utility closure that removes the <script> from the page and\n                // the response callback from the window. This logic is used in both the\n                // success, error, and cancellation paths, so it's extracted out for convenience.\n                var cleanup = function () {\n                    // Remove the <script> tag if it's still on the page.\n                    if (node.parentNode) {\n                        node.parentNode.removeChild(node);\n                    }\n                    // Remove the response callback from the callbackMap (window object in the\n                    // browser).\n                    delete _this.callbackMap[callback];\n                };\n                // onLoad() is the success callback which runs after the response callback\n                // if the JSONP script loads successfully. The event itself is unimportant.\n                // If something went wrong, onLoad() may run without the response callback\n                // having been invoked.\n                var onLoad = function (event) {\n                    // Do nothing if the request has been cancelled.\n                    if (cancelled) {\n                        return;\n                    }\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url: url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        status: 200,\n                        statusText: 'OK', url: url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                };\n                // onError() is the error callback, which runs if the script returned generates\n                // a Javascript error. It emits the error via the Observable error channel as\n                // a HttpErrorResponse.\n                var onError = function (error) {\n                    // If the request was already cancelled, no need to emit anything.\n                    if (cancelled) {\n                        return;\n                    }\n                    cleanup();\n                    // Wrap the error in a HttpErrorResponse.\n                    observer.error(new HttpErrorResponse({\n                        error: error,\n                        status: 0,\n                        statusText: 'JSONP Error', url: url,\n                    }));\n                };\n                // Subscribe to both the success (load) and error events on the <script> tag,\n                // and add it to the page.\n                node.addEventListener('load', onLoad);\n                node.addEventListener('error', onError);\n                _this.document.body.appendChild(node);\n                // The request has now been successfully sent.\n                observer.next({ type: exports.HttpEventType.Sent });\n                // Cancellation handler.\n                return function () {\n                    // Track the cancellation so event listeners won't do anything even if already scheduled.\n                    cancelled = true;\n                    // Remove the event listeners so they won't run if the events later fire.\n                    node.removeEventListener('load', onLoad);\n                    node.removeEventListener('error', onError);\n                    // And finally, clean up the page.\n                    cleanup();\n                };\n            });\n        };\n        JsonpClientBackend = __decorate([\n            core.Injectable(),\n            __param(1, core.Inject(common.DOCUMENT)),\n            __metadata(\"design:paramtypes\", [JsonpCallbackContext, Object])\n        ], JsonpClientBackend);\n        return JsonpClientBackend;\n    }());\n    /**\n     * An `HttpInterceptor` which identifies requests with the method JSONP and\n     * shifts them to the `JsonpClientBackend`.\n     *\n     *\n     */\n    var JsonpInterceptor = /** @class */ (function () {\n        function JsonpInterceptor(jsonp) {\n            this.jsonp = jsonp;\n        }\n        JsonpInterceptor.prototype.intercept = function (req, next) {\n            if (req.method === 'JSONP') {\n                return this.jsonp.handle(req);\n            }\n            // Fall through for normal HTTP requests.\n            return next.handle(req);\n        };\n        JsonpInterceptor = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [JsonpClientBackend])\n        ], JsonpInterceptor);\n        return JsonpInterceptor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n    /**\n     * Determine an appropriate URL for the response, by checking either\n     * XMLHttpRequest.responseURL or the X-Request-URL header.\n     */\n    function getResponseUrl(xhr) {\n        if ('responseURL' in xhr && xhr.responseURL) {\n            return xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n            return xhr.getResponseHeader('X-Request-URL');\n        }\n        return null;\n    }\n    /**\n     * A wrapper around the `XMLHttpRequest` constructor.\n     *\n     *\n     */\n    var XhrFactory = /** @class */ (function () {\n        function XhrFactory() {\n        }\n        return XhrFactory;\n    }());\n    /**\n     * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n     *\n     *\n     */\n    var BrowserXhr = /** @class */ (function () {\n        function BrowserXhr() {\n        }\n        BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n        BrowserXhr = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [])\n        ], BrowserXhr);\n        return BrowserXhr;\n    }());\n    /**\n     * An `HttpBackend` which uses the XMLHttpRequest API to send\n     * requests to a backend server.\n     *\n     *\n     */\n    var HttpXhrBackend = /** @class */ (function () {\n        function HttpXhrBackend(xhrFactory) {\n            this.xhrFactory = xhrFactory;\n        }\n        /**\n         * Process a request and return a stream of response events.\n         */\n        HttpXhrBackend.prototype.handle = function (req) {\n            var _this = this;\n            // Quick check to give a better error message when a user attempts to use\n            // HttpClient.jsonp() without installing the JsonpClientModule\n            if (req.method === 'JSONP') {\n                throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n            }\n            // Everything happens on Observable subscription.\n            return new rxjs.Observable(function (observer) {\n                // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n                var xhr = _this.xhrFactory.build();\n                xhr.open(req.method, req.urlWithParams);\n                if (!!req.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                // Add all the requested headers.\n                req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n                // Add an Accept header if one isn't present already.\n                if (!req.headers.has('Accept')) {\n                    xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n                }\n                // Auto-detect the Content-Type header if one isn't present already.\n                if (!req.headers.has('Content-Type')) {\n                    var detectedType = req.detectContentTypeHeader();\n                    // Sometimes Content-Type detection fails.\n                    if (detectedType !== null) {\n                        xhr.setRequestHeader('Content-Type', detectedType);\n                    }\n                }\n                // Set the responseType if one was requested.\n                if (req.responseType) {\n                    var responseType = req.responseType.toLowerCase();\n                    // JSON responses need to be processed as text. This is because if the server\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                    // is parsed by first requesting text and then applying JSON.parse.\n                    xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n                }\n                // Serialize the request body if one is present. If not, this will be set to null.\n                var reqBody = req.serializeBody();\n                // If progress events are enabled, response headers will be delivered\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\n                // event. However, since response headers don't change in between these\n                // two events, it doesn't make sense to parse them twice. So headerResponse\n                // caches the data extracted from the response whenever it's first parsed,\n                // to ensure parsing isn't duplicated.\n                var headerResponse = null;\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n                // state, and memoizes it into headerResponse.\n                var partialFromXhr = function () {\n                    if (headerResponse !== null) {\n                        return headerResponse;\n                    }\n                    // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                    var status = xhr.status === 1223 ? 204 : xhr.status;\n                    var statusText = xhr.statusText || 'OK';\n                    // Parse headers from XMLHttpRequest - this step is lazy.\n                    var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\n                    // request URL.\n                    var url = getResponseUrl(xhr) || req.url;\n                    // Construct the HttpHeaderResponse and memoize it.\n                    headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                    return headerResponse;\n                };\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\n                // emit. This allows them to be unregistered as event listeners later.\n                // First up is the load event, which represents a response being fully available.\n                var onLoad = function () {\n                    // Read response state from the memoized partial data.\n                    var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                    // The body will be read out if present.\n                    var body = null;\n                    if (status !== 204) {\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\n                        body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                    }\n                    // Normalize another potential bug (this one comes from CORS).\n                    if (status === 0) {\n                        status = !!body ? 200 : 0;\n                    }\n                    // ok determines whether the response will be transmitted on the event or\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                    // but a successful status code can still result in an error if the user\n                    // asked for JSON data and the body cannot be parsed as such.\n                    var ok = status >= 200 && status < 300;\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\n                    // will have done that already).\n                    if (req.responseType === 'json' && typeof body === 'string') {\n                        // Save the original body, before attempting XSSI prefix stripping.\n                        var originalBody = body;\n                        body = body.replace(XSSI_PREFIX, '');\n                        try {\n                            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                            body = body !== '' ? JSON.parse(body) : null;\n                        }\n                        catch (error) {\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                            // a better error response.\n                            body = originalBody;\n                            // If this was an error request to begin with, leave it as a string, it probably\n                            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                            if (ok) {\n                                // Even though the response status was 2xx, this is still an error.\n                                ok = false;\n                                // The parse error contains the text of the body that failed to parse.\n                                body = { error: error, text: body };\n                            }\n                        }\n                    }\n                    if (ok) {\n                        // A successful response is delivered on the event stream.\n                        observer.next(new HttpResponse({\n                            body: body,\n                            headers: headers,\n                            status: status,\n                            statusText: statusText,\n                            url: url || undefined,\n                        }));\n                        // The full body has been received and delivered, no further events\n                        // are possible. This request is complete.\n                        observer.complete();\n                    }\n                    else {\n                        // An unsuccessful request is delivered on the error channel.\n                        observer.error(new HttpErrorResponse({\n                            // The error in this case is the response body (error from the server).\n                            error: body,\n                            headers: headers,\n                            status: status,\n                            statusText: statusText,\n                            url: url || undefined,\n                        }));\n                    }\n                };\n                // The onError callback is called when something goes wrong at the network level.\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n                // transmitted on the error channel.\n                var onError = function (error) {\n                    var res = new HttpErrorResponse({\n                        error: error,\n                        status: xhr.status || 0,\n                        statusText: xhr.statusText || 'Unknown Error',\n                    });\n                    observer.error(res);\n                };\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\n                // has been sent on the stream. This is necessary to track if progress\n                // is enabled since the event will be sent on only the first download\n                // progerss event.\n                var sentHeaders = false;\n                // The download progress event handler, which is only registered if\n                // progress events are enabled.\n                var onDownProgress = function (event) {\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\n                    if (!sentHeaders) {\n                        observer.next(partialFromXhr());\n                        sentHeaders = true;\n                    }\n                    // Start building the download progress event to deliver on the response\n                    // event stream.\n                    var progressEvent = {\n                        type: exports.HttpEventType.DownloadProgress,\n                        loaded: event.loaded,\n                    };\n                    // Set the total number of bytes in the event if it's available.\n                    if (event.lengthComputable) {\n                        progressEvent.total = event.total;\n                    }\n                    // If the request was for text content and a partial response is\n                    // available on XMLHttpRequest, include it in the progress event\n                    // to allow for streaming reads.\n                    if (req.responseType === 'text' && !!xhr.responseText) {\n                        progressEvent.partialText = xhr.responseText;\n                    }\n                    // Finally, fire the event.\n                    observer.next(progressEvent);\n                };\n                // The upload progress event handler, which is only registered if\n                // progress events are enabled.\n                var onUpProgress = function (event) {\n                    // Upload progress events are simpler. Begin building the progress\n                    // event.\n                    var progress = {\n                        type: exports.HttpEventType.UploadProgress,\n                        loaded: event.loaded,\n                    };\n                    // If the total number of bytes being uploaded is available, include\n                    // it.\n                    if (event.lengthComputable) {\n                        progress.total = event.total;\n                    }\n                    // Send the event.\n                    observer.next(progress);\n                };\n                // By default, register for load and error events.\n                xhr.addEventListener('load', onLoad);\n                xhr.addEventListener('error', onError);\n                // Progress events are only enabled if requested.\n                if (req.reportProgress) {\n                    // Download progress is always enabled if requested.\n                    xhr.addEventListener('progress', onDownProgress);\n                    // Upload progress depends on whether there is a body to upload.\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.addEventListener('progress', onUpProgress);\n                    }\n                }\n                // Fire the request, and notify the event stream that it was fired.\n                xhr.send(reqBody);\n                observer.next({ type: exports.HttpEventType.Sent });\n                // This is the return from the Observable function, which is the\n                // request cancellation handler.\n                return function () {\n                    // On a cancellation, remove all registered event listeners.\n                    xhr.removeEventListener('error', onError);\n                    xhr.removeEventListener('load', onLoad);\n                    if (req.reportProgress) {\n                        xhr.removeEventListener('progress', onDownProgress);\n                        if (reqBody !== null && xhr.upload) {\n                            xhr.upload.removeEventListener('progress', onUpProgress);\n                        }\n                    }\n                    // Finally, abort the in-flight request.\n                    xhr.abort();\n                };\n            });\n        };\n        HttpXhrBackend = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [XhrFactory])\n        ], HttpXhrBackend);\n        return HttpXhrBackend;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var XSRF_COOKIE_NAME = new core.InjectionToken('XSRF_COOKIE_NAME');\n    var XSRF_HEADER_NAME = new core.InjectionToken('XSRF_HEADER_NAME');\n    /**\n     * Retrieves the current XSRF token to use with the next outgoing request.\n     *\n     *\n     */\n    var HttpXsrfTokenExtractor = /** @class */ (function () {\n        function HttpXsrfTokenExtractor() {\n        }\n        return HttpXsrfTokenExtractor;\n    }());\n    /**\n     * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n     */\n    var HttpXsrfCookieExtractor = /** @class */ (function () {\n        function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n            this.doc = doc;\n            this.platform = platform;\n            this.cookieName = cookieName;\n            this.lastCookieString = '';\n            this.lastToken = null;\n            /**\n             * @internal for testing\n             */\n            this.parseCount = 0;\n        }\n        HttpXsrfCookieExtractor.prototype.getToken = function () {\n            if (this.platform === 'server') {\n                return null;\n            }\n            var cookieString = this.doc.cookie || '';\n            if (cookieString !== this.lastCookieString) {\n                this.parseCount++;\n                this.lastToken = common.ɵparseCookieValue(cookieString, this.cookieName);\n                this.lastCookieString = cookieString;\n            }\n            return this.lastToken;\n        };\n        HttpXsrfCookieExtractor = __decorate([\n            core.Injectable(),\n            __param(0, core.Inject(common.DOCUMENT)), __param(1, core.Inject(core.PLATFORM_ID)),\n            __param(2, core.Inject(XSRF_COOKIE_NAME)),\n            __metadata(\"design:paramtypes\", [Object, String, String])\n        ], HttpXsrfCookieExtractor);\n        return HttpXsrfCookieExtractor;\n    }());\n    /**\n     * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n     */\n    var HttpXsrfInterceptor = /** @class */ (function () {\n        function HttpXsrfInterceptor(tokenService, headerName) {\n            this.tokenService = tokenService;\n            this.headerName = headerName;\n        }\n        HttpXsrfInterceptor.prototype.intercept = function (req, next) {\n            var lcUrl = req.url.toLowerCase();\n            // Skip both non-mutating requests and absolute URLs.\n            // Non-mutating requests don't require a token, and absolute URLs require special handling\n            // anyway as the cookie set\n            // on our origin is not the same as the token expected by another origin.\n            if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n                lcUrl.startsWith('https://')) {\n                return next.handle(req);\n            }\n            var token = this.tokenService.getToken();\n            // Be careful not to overwrite an existing header of the same name.\n            if (token !== null && !req.headers.has(this.headerName)) {\n                req = req.clone({ headers: req.headers.set(this.headerName, token) });\n            }\n            return next.handle(req);\n        };\n        HttpXsrfInterceptor = __decorate([\n            core.Injectable(),\n            __param(1, core.Inject(XSRF_HEADER_NAME)),\n            __metadata(\"design:paramtypes\", [HttpXsrfTokenExtractor, String])\n        ], HttpXsrfInterceptor);\n        return HttpXsrfInterceptor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An injectable `HttpHandler` that applies multiple interceptors\n     * to a request before passing it to the given `HttpBackend`.\n     *\n     * The interceptors are loaded lazily from the injector, to allow\n     * interceptors to themselves inject classes depending indirectly\n     * on `HttpInterceptingHandler` itself.\n     * @see `HttpInterceptor`\n     */\n    var HttpInterceptingHandler = /** @class */ (function () {\n        function HttpInterceptingHandler(backend, injector) {\n            this.backend = backend;\n            this.injector = injector;\n            this.chain = null;\n        }\n        HttpInterceptingHandler.prototype.handle = function (req) {\n            if (this.chain === null) {\n                var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n                this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n            }\n            return this.chain.handle(req);\n        };\n        HttpInterceptingHandler = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [HttpBackend, core.Injector])\n        ], HttpInterceptingHandler);\n        return HttpInterceptingHandler;\n    }());\n    /**\n     * Factory function that determines where to store JSONP callbacks.\n     *\n     * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n     * in test environments. In that case, callbacks are stored on an anonymous object instead.\n     *\n     *\n     */\n    function jsonpCallbackContext() {\n        if (typeof window === 'object') {\n            return window;\n        }\n        return {};\n    }\n    /**\n     * Configures XSRF protection support for outgoing requests.\n     *\n     * For a server that supports a cookie-based XSRF protection system,\n     * use directly to configure XSRF protection with the correct\n     * cookie and header names.\n     *\n     * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n     * and the default header name is `X-XSRF-TOKEN`.\n     *\n     *\n     */\n    var HttpClientXsrfModule = /** @class */ (function () {\n        function HttpClientXsrfModule() {\n        }\n        HttpClientXsrfModule_1 = HttpClientXsrfModule;\n        /**\n         * Disable the default XSRF protection.\n         */\n        HttpClientXsrfModule.disable = function () {\n            return {\n                ngModule: HttpClientXsrfModule_1,\n                providers: [\n                    { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n                ],\n            };\n        };\n        /**\n         * Configure XSRF protection.\n         * @param options An object that can specify either or both\n         * cookie name or header name.\n         * - Cookie name default is `XSRF-TOKEN`.\n         * - Header name default is `X-XSRF-TOKEN`.\n         *\n         */\n        HttpClientXsrfModule.withOptions = function (options) {\n            if (options === void 0) { options = {}; }\n            return {\n                ngModule: HttpClientXsrfModule_1,\n                providers: [\n                    options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                    options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n                ],\n            };\n        };\n        var HttpClientXsrfModule_1;\n        HttpClientXsrfModule = HttpClientXsrfModule_1 = __decorate([\n            core.NgModule({\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            })\n        ], HttpClientXsrfModule);\n        return HttpClientXsrfModule;\n    }());\n    /**\n     * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n     * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n     *\n     * You can add interceptors to the chain behind `HttpClient` by binding them to the\n     * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n     *\n     *\n     */\n    var HttpClientModule = /** @class */ (function () {\n        function HttpClientModule() {\n        }\n        HttpClientModule = __decorate([\n            core.NgModule({\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            })\n        ], HttpClientModule);\n        return HttpClientModule;\n    }());\n    /**\n     * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n     * with supporting services for JSONP.\n     * Without this module, Jsonp requests reach the backend\n     * with method JSONP, where they are rejected.\n     *\n     * You can add interceptors to the chain behind `HttpClient` by binding them to the\n     * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n     *\n     *\n     */\n    var HttpClientJsonpModule = /** @class */ (function () {\n        function HttpClientJsonpModule() {\n        }\n        HttpClientJsonpModule = __decorate([\n            core.NgModule({\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            })\n        ], HttpClientJsonpModule);\n        return HttpClientJsonpModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_common_http_http_a = NoopInterceptor;\n    exports.ɵangular_packages_common_http_http_b = JsonpCallbackContext;\n    exports.ɵangular_packages_common_http_http_c = jsonpCallbackContext;\n    exports.ɵangular_packages_common_http_http_d = BrowserXhr;\n    exports.ɵangular_packages_common_http_http_g = HttpXsrfCookieExtractor;\n    exports.ɵangular_packages_common_http_http_h = HttpXsrfInterceptor;\n    exports.ɵangular_packages_common_http_http_e = XSRF_COOKIE_NAME;\n    exports.ɵangular_packages_common_http_http_f = XSRF_HEADER_NAME;\n    exports.HttpBackend = HttpBackend;\n    exports.HttpHandler = HttpHandler;\n    exports.HttpClient = HttpClient;\n    exports.HttpHeaders = HttpHeaders;\n    exports.HTTP_INTERCEPTORS = HTTP_INTERCEPTORS;\n    exports.JsonpClientBackend = JsonpClientBackend;\n    exports.JsonpInterceptor = JsonpInterceptor;\n    exports.HttpClientJsonpModule = HttpClientJsonpModule;\n    exports.HttpClientModule = HttpClientModule;\n    exports.HttpClientXsrfModule = HttpClientXsrfModule;\n    exports.ɵHttpInterceptingHandler = HttpInterceptingHandler;\n    exports.HttpParams = HttpParams;\n    exports.HttpUrlEncodingCodec = HttpUrlEncodingCodec;\n    exports.HttpRequest = HttpRequest;\n    exports.HttpErrorResponse = HttpErrorResponse;\n    exports.HttpHeaderResponse = HttpHeaderResponse;\n    exports.HttpResponse = HttpResponse;\n    exports.HttpResponseBase = HttpResponseBase;\n    exports.HttpXhrBackend = HttpXhrBackend;\n    exports.XhrFactory = XhrFactory;\n    exports.HttpXsrfTokenExtractor = HttpXsrfTokenExtractor;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=common-http.umd.js.map\n"]}