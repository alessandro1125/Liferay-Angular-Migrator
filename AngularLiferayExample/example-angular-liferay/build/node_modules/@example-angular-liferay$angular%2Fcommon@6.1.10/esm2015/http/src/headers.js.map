{"version":3,"sources":["../../../../../../../packages/common/http/src/headers.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Immutable set of Http headers, with lazy parsing.\n *\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers !: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  // TODO(issue/24571): remove '!'.\n  private lazyInit !: HttpHeaders | Function | null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key) !.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n\n  delete (name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key) !);\n      this.normalizedNames.set(key, other.normalizedNames.get(key) !);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value !;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key) !, this.headers.get(key) !));\n  }\n}\n"],"sourceRoot":""}