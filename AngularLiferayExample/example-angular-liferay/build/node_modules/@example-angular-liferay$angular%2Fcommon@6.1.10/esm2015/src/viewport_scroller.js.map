{"version":3,"sources":["../../../../../../packages/common/src/viewport_scroller.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {defineInjectable, inject} from '@angular/core';\n\nimport {DOCUMENT} from './dom_tokens';\n\n/**\n * Manages the scroll position.\n */\nexport abstract class ViewportScroller {\n  // De-sugared tree-shakable injection\n  // See #23917\n  /** @nocollapse */\n  static ngInjectableDef = defineInjectable(\n      {providedIn: 'root', factory: () => new BrowserViewportScroller(inject(DOCUMENT), window)});\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   *\n   * When given a tuple with two number, the service will always use the numbers.\n   * When given a function, the service will invoke the function every time it restores scroll\n   * position.\n   */\n  abstract setOffset(offset: [number, number]|(() => [number, number])): void;\n\n  /**\n   * Returns the current scroll position.\n   */\n  abstract getScrollPosition(): [number, number];\n\n  /**\n   * Sets the scroll position.\n   */\n  abstract scrollToPosition(position: [number, number]): void;\n\n  /**\n   * Scrolls to the provided anchor.\n   */\n  abstract scrollToAnchor(anchor: string): void;\n\n  /**\n   *\n   * Disables automatic scroll restoration provided by the browser.\n   *\n   * See also [window.history.scrollRestoration\n   * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration)\n   */\n  abstract setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void;\n}\n\n/**\n * Manages the scroll position.\n */\nexport class BrowserViewportScroller implements ViewportScroller {\n  private offset: () => [number, number] = () => [0, 0];\n\n  constructor(private document: any, private window: any) {}\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   *\n   * * When given a number, the service will always use the number.\n   * * When given a function, the service will invoke the function every time it restores scroll\n   * position.\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {\n    if (Array.isArray(offset)) {\n      this.offset = () => offset;\n    } else {\n      this.offset = offset;\n    }\n  }\n\n  /**\n   * Returns the current scroll position.\n   */\n  getScrollPosition(): [number, number] {\n    if (this.supportScrollRestoration()) {\n      return [this.window.scrollX, this.window.scrollY];\n    } else {\n      return [0, 0];\n    }\n  }\n\n  /**\n   * Sets the scroll position.\n   */\n  scrollToPosition(position: [number, number]): void {\n    if (this.supportScrollRestoration()) {\n      this.window.scrollTo(position[0], position[1]);\n    }\n  }\n\n  /**\n   * Scrolls to the provided anchor.\n   */\n  scrollToAnchor(anchor: string): void {\n    if (this.supportScrollRestoration()) {\n      const elSelectedById = this.document.querySelector(`#${anchor}`);\n      if (elSelectedById) {\n        this.scrollToElement(elSelectedById);\n        return;\n      }\n      const elSelectedByName = this.document.querySelector(`[name='${anchor}']`);\n      if (elSelectedByName) {\n        this.scrollToElement(elSelectedByName);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {\n    if (this.supportScrollRestoration()) {\n      const history = this.window.history;\n      if (history && history.scrollRestoration) {\n        history.scrollRestoration = scrollRestoration;\n      }\n    }\n  }\n\n  private scrollToElement(el: any): void {\n    const rect = el.getBoundingClientRect();\n    const left = rect.left + this.window.pageXOffset;\n    const top = rect.top + this.window.pageYOffset;\n    const offset = this.offset();\n    this.window.scrollTo(left - offset[0], top - offset[1]);\n  }\n\n  /**\n   * We only support scroll restoration when we can get a hold of window.\n   * This means that we do not support this behavior when running in a web worker.\n   *\n   * Lifting this restriction right now would require more changes in the dom adapter.\n   * Since webworkers aren't widely used, we will lift it once RouterScroller is\n   * battle-tested.\n   */\n  private supportScrollRestoration(): boolean {\n    try {\n      return !!this.window && !!this.window.scrollTo;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n\n/**\n * Provides an empty implementation of the viewport scroller. This will\n * live in @angular/common as it will be used by both platform-server and platform-webworker.\n */\nexport class NullViewportScroller implements ViewportScroller {\n  /**\n   * Empty implementation\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {}\n\n  /**\n   * Empty implementation\n   */\n  getScrollPosition(): [number, number] { return [0, 0]; }\n\n  /**\n   * Empty implementation\n   */\n  scrollToPosition(position: [number, number]): void {}\n\n  /**\n   * Empty implementation\n   */\n  scrollToAnchor(anchor: string): void {}\n\n  /**\n   * Empty implementation\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {}\n}"],"sourceRoot":""}