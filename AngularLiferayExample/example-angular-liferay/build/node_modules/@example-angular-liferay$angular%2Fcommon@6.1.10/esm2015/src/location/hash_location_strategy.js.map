{"version":3,"sources":["../../../../../../../packages/common/src/location/hash_location_strategy.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,MAAR,EAAgB,UAAhB,EAA4B,QAA5B,QAA2C,eAA3C;AAGA,aAAQ,QAAR,QAAuB,YAAvB;AACA,aAAQ,aAAR,EAAuB,gBAAvB,QAA8C,qBAA9C;AACA,aAAgC,gBAAhC,QAAuD,qBAAvD;;;;;;;;;;;;;;;;;;;AAuBA,WAAM,MAAA,oBAAA,SAAoC,gBAApC,CAAoD;;;;;AAExD,oBACY,iBADZ,EAEuC,SAFvC,EAEyD;AACvD;AAFU,iBAAA,iBAAA,GAAA,iBAAA;6BAFgB,E;AAK1B,gBAAI,aAAa,IAAjB,EAAuB;AACrB,qBAAK,SAAL,GAAiB,SAAjB;AACD;AACF;;;;;AAED,mBAAW,EAAX,EAAqC;AACnC,iBAAK,iBAAL,CAAuB,UAAvB,CAAkC,EAAlC;AACA,iBAAK,iBAAL,CAAuB,YAAvB,CAAoC,EAApC;AACD;;;;AAED,sBAAW;AAAa,mBAAO,KAAK,SAAZ;AAAwB;;;;;AAEhD,aAAK,cAAuB,KAA5B,EAAiC;;AAG/B,gBAAI,OAAO,KAAK,iBAAL,CAAuB,IAAlC;AACA,gBAAI,QAAQ,IAAZ,EAAkB,OAAO,GAAP;AAElB,mBAAO,KAAK,MAAL,GAAc,CAAd,GAAkB,KAAK,SAAL,CAAe,CAAf,CAAlB,GAAsC,IAA7C;AACD;;;;;AAED,2BAAmB,QAAnB,EAAmC;;AACjC,kBAAM,MAAM,SAAS,aAAT,CAAuB,KAAK,SAA5B,EAAuC,QAAvC,CAAZ;AACA,mBAAO,IAAI,MAAJ,GAAa,CAAb,GAAkB,MAAM,GAAxB,GAA+B,GAAtC;AACD;;;;;;;;AAED,kBAAU,KAAV,EAAsB,KAAtB,EAAqC,IAArC,EAAmD,WAAnD,EAAsE;;AACpE,gBAAI,MACA,KAAK,kBAAL,CAAwB,OAAO,SAAS,oBAAT,CAA8B,WAA9B,CAA/B,CADJ;AAEA,gBAAI,IAAI,MAAJ,IAAc,CAAlB,EAAqB;AACnB,sBAAM,KAAK,iBAAL,CAAuB,QAA7B;AACD;AACD,iBAAK,iBAAL,CAAuB,SAAvB,CAAiC,KAAjC,EAAwC,KAAxC,EAA+C,GAA/C;AACD;;;;;;;;AAED,qBAAa,KAAb,EAAyB,KAAzB,EAAwC,IAAxC,EAAsD,WAAtD,EAAyE;;AACvE,gBAAI,MAAM,KAAK,kBAAL,CAAwB,OAAO,SAAS,oBAAT,CAA8B,WAA9B,CAA/B,CAAV;AACA,gBAAI,IAAI,MAAJ,IAAc,CAAlB,EAAqB;AACnB,sBAAM,KAAK,iBAAL,CAAuB,QAA7B;AACD;AACD,iBAAK,iBAAL,CAAuB,YAAvB,CAAoC,KAApC,EAA2C,KAA3C,EAAkD,GAAlD;AACD;;;;AAED,kBAAO;AAAW,iBAAK,iBAAL,CAAuB,OAAvB;AAAmC;;;;AAErD,eAAI;AAAW,iBAAK,iBAAL,CAAuB,IAAvB;AAAgC;AAnDS;+CADzD,U;;yDAtB+B,gB,yCA2BzB,Q,IAAQ,EAAA,MAAI,MAAJ,EAAU,MAAA,CAAC,aAAD,CAAV,E","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n\n\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n *\n */\n@Injectable()\nexport class HashLocationStrategy extends LocationStrategy {\n  private _baseHref: string = '';\n  constructor(\n      private _platformLocation: PlatformLocation,\n      @Optional() @Inject(APP_BASE_HREF) _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n\n  onPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n\n  getBaseHref(): string { return this._baseHref; }\n\n  path(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n\n  prepareExternalUrl(internal: string): string {\n    const url = Location.joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n\n  pushState(state: any, title: string, path: string, queryParams: string) {\n    let url: string|null =\n        this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n\n  replaceState(state: any, title: string, path: string, queryParams: string) {\n    let url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n\n  forward(): void { this._platformLocation.forward(); }\n\n  back(): void { this._platformLocation.back(); }\n}\n"],"sourceRoot":""}