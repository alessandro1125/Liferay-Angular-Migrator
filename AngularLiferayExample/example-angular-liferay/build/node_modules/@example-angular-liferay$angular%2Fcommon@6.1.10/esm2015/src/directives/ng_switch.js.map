{"version":3,"sources":["../../../../../../../packages/common/src/directives/ng_switch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nexport class SwitchView {\n  private _created = false;\n\n  constructor(\n      private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<Object>) {}\n\n  create(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n\n  destroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n\n  enforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * @description\n *\n * Adds / removes DOM sub-trees when the nest match expressions matches the switch expression.\n *\n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n *\n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n *\n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n *\n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n *\n *\n */\n@Directive({selector: '[ngSwitch]'})\nexport class NgSwitch {\n  // TODO(issue/24571): remove '!'.\n  private _defaultViews !: SwitchView[];\n  private _defaultUsed = false;\n  private _caseCount = 0;\n  private _lastCaseCheckIndex = 0;\n  private _lastCasesMatched = false;\n  private _ngSwitch: any;\n\n  @Input()\n  set ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n\n  /** @internal */\n  _addCase(): number { return this._caseCount++; }\n\n  /** @internal */\n  _addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n\n  /** @internal */\n  _matchCase(value: any): boolean {\n    const matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n\n  private _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let i = 0; i < this._defaultViews.length; i++) {\n        const defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n *```\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgSwitch} when the\n * given expression evaluate to respectively the same/different value as the switch\n * expression.\n *\n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n *\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * See {@link NgSwitch} for more details and example.\n *\n *\n */\n@Directive({selector: '[ngSwitchCase]'})\nexport class NgSwitchCase implements DoCheck {\n  private _view: SwitchView;\n\n  @Input()\n  ngSwitchCase: any;\n\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Host() private ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  ngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\n}\n\n/**\n * @ngModule CommonModule\n * @usageNotes\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n *\n * @description\n *\n * Creates a view that is added to the parent {@link NgSwitch} when no case expressions\n * match the switch expression.\n *\n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n *\n * See {@link NgSwitch} for more details and example.\n *\n *\n */\n@Directive({selector: '[ngSwitchDefault]'})\nexport class NgSwitchDefault {\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Host() ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\n}\n"],"sourceRoot":""}