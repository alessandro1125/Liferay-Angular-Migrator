{"version":3,"sources":["../../../../../../../packages/common/src/directives/ng_plural.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,SAAR,EAAmB,SAAnB,EAA8B,IAA9B,EAAoC,KAApC,EAA2C,WAA3C,EAAwD,gBAAxD,QAA+E,eAA/E;AAEA,aAAQ,cAAR,EAAwB,iBAAxB,QAAgD,sBAAhD;AAEA,aAAQ,UAAR,QAAyB,aAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,WAAM,MAAA,QAAA,CAAA;;;;AAOJ,oBAAoB,aAApB,EAAiD;AAA7B,iBAAA,aAAA,GAAA,aAAA;8BAF4B,E;AAEK;;;;;AAErD,YACI,QADJ,CACa,KADb,EAC0B;AACxB,iBAAK,YAAL,GAAoB,KAApB;AACA,iBAAK,WAAL;AACD;;;;;;AAED,gBAAQ,KAAR,EAAuB,UAAvB,EAA6C;AAAU,iBAAK,UAAL,CAAgB,KAAhB,IAAyB,UAAzB;AAAsC;;;;AAErF,sBAAW;AACjB,iBAAK,WAAL;;AAEA,kBAAM,QAAQ,OAAO,IAAP,CAAY,KAAK,UAAjB,CAAd;;AACA,kBAAM,MAAM,kBAAkB,KAAK,YAAvB,EAAqC,KAArC,EAA4C,KAAK,aAAjD,CAAZ;AACA,iBAAK,aAAL,CAAmB,KAAK,UAAL,CAAgB,GAAhB,CAAnB;;;;;AAGM,sBAAW;AACjB,gBAAI,KAAK,WAAT,EAAsB,KAAK,WAAL,CAAiB,OAAjB;;;;;;AAGhB,sBAAc,IAAd,EAA8B;AACpC,gBAAI,IAAJ,EAAU;AACR,qBAAK,WAAL,GAAmB,IAAnB;AACA,qBAAK,WAAL,CAAiB,MAAjB;AACD;;AAjCC;mCADL,S,EAAS,MAAA,CAAC,EAAC,UAAU,YAAX,EAAD,C;;6CApCF,c;;2BA8CL,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDH,WAAM,MAAA,YAAA,CAAA;;;;;;;AACJ,oBACsC,KADtC,EACqD,QADrD,EAEI,aAFJ,EAE6C,QAF7C,EAE+D;AADzB,iBAAA,KAAA,GAAA,KAAA;;AAEpC,kBAAM,YAAqB,CAAC,MAAM,OAAO,KAAP,CAAN,CAA5B;AACA,qBAAS,OAAT,CAAiB,YAAY,IAAI,KAAK,EAArB,GAA0B,KAA3C,EAAkD,IAAI,UAAJ,CAAe,aAAf,EAA8B,QAA9B,CAAlD;AACD;AANG;uCADL,S,EAAS,MAAA,CAAC,EAAC,UAAU,gBAAX,EAAD,C;;8EAGH,S,EAAS,MAAA,CAAC,cAAD,C,eAnG2B,W,YAAa,gB,YAoGC,Q,EAAQ,YAAA,CAAA,EAAA,MAAzB,IAAyB,EAAA,C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\n\nimport {SwitchView} from './ng_switch';\n\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * @description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * @experimental\n */\n@Directive({selector: '[ngPlural]'})\nexport class NgPlural {\n  // TODO(issue/24571): remove '!'.\n  private _switchValue !: number;\n  // TODO(issue/24571): remove '!'.\n  private _activeView !: SwitchView;\n  private _caseViews: {[k: string]: SwitchView} = {};\n\n  constructor(private _localization: NgLocalization) {}\n\n  @Input()\n  set ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n\n  addCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n\n  private _updateView(): void {\n    this._clearViews();\n\n    const cases = Object.keys(this._caseViews);\n    const key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n\n  private _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n\n  private _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n *```\n *\n * See {@link NgPlural} for more details and example.\n *\n * @experimental\n */\n@Directive({selector: '[ngPluralCase]'})\nexport class NgPluralCase {\n  constructor(\n      @Attribute('ngPluralCase') public value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef, @Host() ngPlural: NgPlural) {\n    const isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\n}\n"],"sourceRoot":""}