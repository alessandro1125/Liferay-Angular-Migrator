{"version":3,"sources":["../../../../../../../../packages/common/src/pipes/deprecated/date_pipe.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,MAAR,EAAgB,SAAhB,EAA2B,IAA3B,QAAqD,eAArD;AACA,aAAQ,kBAAR,EAA4B,eAA5B,QAAkD,wBAAlD;AACA,aAAQ,wBAAR,QAAuC,gCAAvC;AACA,aAAQ,aAAR,QAA4B,QAA5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,WAAM,MAAA,kBAAA,CAAA;;;;AAaJ,oBAAuC,OAAvC,EAAsD;AAAf,iBAAA,OAAA,GAAA,OAAA;AAAmB;;;;;;AAE1D,kBAAU,KAAV,EAAsB,UAAkB,YAAxC,EAAoD;AAClD,gBAAI,SAAS,IAAT,IAAiB,UAAU,EAA3B,IAAiC,UAAU,KAA/C,EAAsD,OAAO,IAAP;;AAEtD,gBAAI,IAAJ;AAEA,gBAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,wBAAQ,MAAM,IAAN,EAAR;AACD;AAED,gBAAI,OAAO,KAAP,CAAJ,EAAmB;AACjB,uBAAO,KAAP;AACD,aAFD,MAEO,IAAI,CAAC,MAAM,QAAQ,WAAW,KAAX,CAAd,CAAL,EAAuC;AAC5C,uBAAO,IAAI,IAAJ,CAAS,WAAW,KAAX,CAAT,CAAP;AACD,aAFM,MAEA,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,4BAA4B,IAA5B,CAAiC,KAAjC,CAAjC,EAA0E;AAW/E,sBAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,IAAY,MAAM,KAAN,CAAY,GAAZ,EAAiB,GAAjB,CAAsB,GAAD,IAAiB,SAAS,GAAT,EAAc,EAAd,CAAtC,CAAlB;AACA,uBAAO,IAAI,IAAJ,CAAS,CAAT,EAAY,IAAI,CAAhB,EAAmB,CAAnB,CAAP;AACD,aAbM,MAaA;AACL,uBAAO,IAAI,IAAJ,CAAS,KAAT,CAAP;AACD;AAED,gBAAI,CAAC,OAAO,IAAP,CAAL,EAAmB;;AACjB,oBAAI,KAAJ;AACA,oBAAK,OAAO,KAAP,KAAiB,QAAlB,KAAgC,QAAQ,MAAM,KAAN,CAAY,kBAAZ,CAAxC,CAAJ,EAA8E;AAC5E,2BAAO,gBAAgB,KAAhB,CAAP;AACD,iBAFD,MAEO;AACL,0BAAM,yBAAyB,kBAAzB,EAA6C,KAA7C,CAAN;AACD;AACF;AAED,mBAAO,cAAc,MAAd,CACH,IADG,EACG,KAAK,OADR,EACiB,mBAAmB,QAAnB,CAA4B,OAA5B,KAAwC,OADzD,CAAP;AAED;AAxDG;;;;kCAEuC;AACzC,kBAAU,UAD+B;AAEzC,iBAAS,OAFgC;AAGzC,oBAAY,YAH6B;AAIzC,oBAAY,QAJ6B;AAKzC,sBAAc,OAL2B;AAMzC,qBAAa,KAN4B;AAOzC,sBAAc,KAP2B;AAQzC,qBAAa;AAR4B,K;6CAH5C,I,EAAI,MAAA,CAAC,EAAC,MAAM,MAAP,EAAe,MAAM,IAArB,EAAD,C;;oFAcU,M,EAAM,MAAA,CAAC,SAAD,C;;;;;;;;;;;;;;AA8CrB,aAAA,MAAA,CAAgB,KAAhB,EAA0B;AACxB,eAAO,iBAAiB,IAAjB,IAAyB,CAAC,MAAM,MAAM,OAAN,EAAN,CAAjC;AACD","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n  */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {ISO8601_DATE_REGEX, isoStringToDate} from '../../i18n/format_date';\nimport {invalidPipeArgumentError} from '../invalid_pipe_argument_error';\nimport {DateFormatter} from './intl';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n *\n *\n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n *\n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n *\n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n *\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n *\n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\n * in the _local_ time and locale is 'en-US':\n *\n * {@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\n *\n *\n */\n@Pipe({name: 'date', pure: true})\nexport class DeprecatedDatePipe implements PipeTransform {\n  /** @internal */\n  static _ALIASES: {[key: string]: string} = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n  };\n\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: any, pattern: string = 'mediumDate'): string|null {\n    if (value == null || value === '' || value !== value) return null;\n\n    let date: Date;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    if (isDate(value)) {\n      date = value;\n    } else if (!isNaN(value - parseFloat(value))) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n      /**\n       * For ISO Strings without time the day, month and year must be extracted from the ISO String\n       * before Date creation to avoid time offset and errors in the new Date.\n       * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n       * date, some browsers (e.g. IE 9) will throw an invalid Date error\n       * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\n       * timeoffset\n       * is applied\n       * Note: ISO months are 0 for January, 1 for February, ...\n       */\n      const [y, m, d] = value.split('-').map((val: string) => parseInt(val, 10));\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DeprecatedDatePipe, value);\n      }\n    }\n\n    return DateFormatter.format(\n        date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);\n  }\n}\n\nfunction isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n"],"sourceRoot":""}