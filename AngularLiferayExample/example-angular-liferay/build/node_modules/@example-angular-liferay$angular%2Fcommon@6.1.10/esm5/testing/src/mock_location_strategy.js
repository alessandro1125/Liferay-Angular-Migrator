Liferay.Loader.define('@example-angular-liferay$angular/common@6.1.10/esm5/testing/src/mock_location_strategy', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { LocationStrategy } from '@angular/common';
    import { EventEmitter, Injectable } from '@angular/core';
    /**
     * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated
     * location events.
     *
     *
     */
    var MockLocationStrategy = /** @class */function (_super) {
        tslib_1.__extends(MockLocationStrategy, _super);
        function MockLocationStrategy() {
            var _this = _super.call(this) || this;
            _this.internalBaseHref = '/';
            _this.internalPath = '/';
            _this.internalTitle = '';
            _this.urlChanges = [];
            /** @internal */
            _this._subject = new EventEmitter();
            return _this;
        }
        MockLocationStrategy.prototype.simulatePopState = function (url) {
            this.internalPath = url;
            this._subject.emit(new _MockPopStateEvent(this.path()));
        };
        MockLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            return this.internalPath;
        };
        MockLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {
                return this.internalBaseHref + internal.substring(1);
            }
            return this.internalBaseHref + internal;
        };
        MockLocationStrategy.prototype.pushState = function (ctx, title, path, query) {
            this.internalTitle = title;
            var url = path + (query.length > 0 ? '?' + query : '');
            this.internalPath = url;
            var externalUrl = this.prepareExternalUrl(url);
            this.urlChanges.push(externalUrl);
        };
        MockLocationStrategy.prototype.replaceState = function (ctx, title, path, query) {
            this.internalTitle = title;
            var url = path + (query.length > 0 ? '?' + query : '');
            this.internalPath = url;
            var externalUrl = this.prepareExternalUrl(url);
            this.urlChanges.push('replace: ' + externalUrl);
        };
        MockLocationStrategy.prototype.onPopState = function (fn) {
            this._subject.subscribe({ next: fn });
        };
        MockLocationStrategy.prototype.getBaseHref = function () {
            return this.internalBaseHref;
        };
        MockLocationStrategy.prototype.back = function () {
            if (this.urlChanges.length > 0) {
                this.urlChanges.pop();
                var nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';
                this.simulatePopState(nextUrl);
            }
        };
        MockLocationStrategy.prototype.forward = function () {
            throw 'not implemented';
        };
        MockLocationStrategy = tslib_1.__decorate([Injectable(), tslib_1.__metadata("design:paramtypes", [])], MockLocationStrategy);
        return MockLocationStrategy;
    }(LocationStrategy);
    export { MockLocationStrategy };
    var _MockPopStateEvent = /** @class */function () {
        function _MockPopStateEvent(newUrl) {
            this.newUrl = newUrl;
            this.pop = true;
            this.type = 'popstate';
        }
        return _MockPopStateEvent;
    }();
});
//# sourceMappingURL=mock_location_strategy.js.map