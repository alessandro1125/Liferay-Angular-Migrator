Liferay.Loader.define('@example-angular-liferay$angular/common@6.1.10/esm5/testing/src/location_mock', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { EventEmitter, Injectable } from '@angular/core';
    /**
     * A spy for {@link Location} that allows tests to fire simulated location events.
     *
     * @experimental
     */
    var SpyLocation = /** @class */function () {
        function SpyLocation() {
            this.urlChanges = [];
            this._history = [new LocationState('', '', null)];
            this._historyIndex = 0;
            /** @internal */
            this._subject = new EventEmitter();
            /** @internal */
            this._baseHref = '';
            /** @internal */
            this._platformStrategy = null;
        }
        SpyLocation.prototype.setInitialPath = function (url) {
            this._history[this._historyIndex].path = url;
        };
        SpyLocation.prototype.setBaseHref = function (url) {
            this._baseHref = url;
        };
        SpyLocation.prototype.path = function () {
            return this._history[this._historyIndex].path;
        };
        SpyLocation.prototype.state = function () {
            return this._history[this._historyIndex].state;
        };
        SpyLocation.prototype.isCurrentPathEqualTo = function (path, query) {
            if (query === void 0) {
                query = '';
            }
            var givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;
            var currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();
            return currPath == givenPath + (query.length > 0 ? '?' + query : '');
        };
        SpyLocation.prototype.simulateUrlPop = function (pathname) {
            this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });
        };
        SpyLocation.prototype.simulateHashChange = function (pathname) {
            // Because we don't prevent the native event, the browser will independently update the path
            this.setInitialPath(pathname);
            this.urlChanges.push('hash: ' + pathname);
            this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });
        };
        SpyLocation.prototype.prepareExternalUrl = function (url) {
            if (url.length > 0 && !url.startsWith('/')) {
                url = '/' + url;
            }
            return this._baseHref + url;
        };
        SpyLocation.prototype.go = function (path, query, state) {
            if (query === void 0) {
                query = '';
            }
            if (state === void 0) {
                state = null;
            }
            path = this.prepareExternalUrl(path);
            if (this._historyIndex > 0) {
                this._history.splice(this._historyIndex + 1);
            }
            this._history.push(new LocationState(path, query, state));
            this._historyIndex = this._history.length - 1;
            var locationState = this._history[this._historyIndex - 1];
            if (locationState.path == path && locationState.query == query) {
                return;
            }
            var url = path + (query.length > 0 ? '?' + query : '');
            this.urlChanges.push(url);
            this._subject.emit({ 'url': url, 'pop': false });
        };
        SpyLocation.prototype.replaceState = function (path, query, state) {
            if (query === void 0) {
                query = '';
            }
            if (state === void 0) {
                state = null;
            }
            path = this.prepareExternalUrl(path);
            var history = this._history[this._historyIndex];
            if (history.path == path && history.query == query) {
                return;
            }
            history.path = path;
            history.query = query;
            history.state = state;
            var url = path + (query.length > 0 ? '?' + query : '');
            this.urlChanges.push('replace: ' + url);
        };
        SpyLocation.prototype.forward = function () {
            if (this._historyIndex < this._history.length - 1) {
                this._historyIndex++;
                this._subject.emit({ 'url': this.path(), 'state': this.state(), 'pop': true });
            }
        };
        SpyLocation.prototype.back = function () {
            if (this._historyIndex > 0) {
                this._historyIndex--;
                this._subject.emit({ 'url': this.path(), 'state': this.state(), 'pop': true });
            }
        };
        SpyLocation.prototype.subscribe = function (onNext, onThrow, onReturn) {
            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
        };
        SpyLocation.prototype.normalize = function (url) {
            return null;
        };
        SpyLocation = tslib_1.__decorate([Injectable()], SpyLocation);
        return SpyLocation;
    }();
    export { SpyLocation };
    var LocationState = /** @class */function () {
        function LocationState(path, query, state) {
            this.path = path;
            this.query = query;
            this.state = state;
        }
        return LocationState;
    }();
});
//# sourceMappingURL=location_mock.js.map