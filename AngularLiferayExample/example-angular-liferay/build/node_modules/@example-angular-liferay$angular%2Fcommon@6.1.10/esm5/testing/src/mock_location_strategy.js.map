{"version":3,"sources":["../../../../../../../../../../../packages/common/testing/src/mock_location_strategy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\n\n\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n *\n */\n@Injectable()\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  constructor() { super(); }\n\n  simulatePopState(url: string): void {\n    this.internalPath = url;\n    this._subject.emit(new _MockPopStateEvent(this.path()));\n  }\n\n  path(includeHash: boolean = false): string { return this.internalPath; }\n\n  prepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n\n  pushState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  replaceState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  onPopState(fn: (value: any) => void): void { this._subject.subscribe({next: fn}); }\n\n  getBaseHref(): string { return this.internalBaseHref; }\n\n  back(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  forward(): void { throw 'not implemented'; }\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n  constructor(public newUrl: string) {}\n}\n"],"sourceRoot":""}