{"version":3,"sources":["../../../../../../../../../../packages/common/src/directives/ng_component_outlet.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,wBAAR,EAAgD,SAAhD,EAA2D,QAA3D,EAAqE,KAArE,EAA4E,eAA5E,EAA6F,WAA7F,EAA+J,IAA/J,EAAqK,gBAArK,QAA4L,eAA5L;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,QAAA,oBAAA,aAAA,YAAA;AAaE,iBAAA,iBAAA,CAAoB,iBAApB,EAAuD;AAAnC,iBAAA,iBAAA,GAAA,iBAAA;AAHZ,iBAAA,aAAA,GAAwC,IAAxC;AACA,iBAAA,UAAA,GAAoC,IAApC;AAEmD;AAE3D,0BAAA,SAAA,CAAA,WAAA,GAAA,UAAY,OAAZ,EAAkC;AAChC,iBAAK,iBAAL,CAAuB,KAAvB;AACA,iBAAK,aAAL,GAAqB,IAArB;AAEA,gBAAI,KAAK,iBAAT,EAA4B;AAC1B,oBAAM,aAAa,KAAK,yBAAL,IAAkC,KAAK,iBAAL,CAAuB,cAA5E;AAEA,oBAAI,QAAQ,kCAAR,CAAJ,EAAiD;AAC/C,wBAAI,KAAK,UAAT,EAAqB,KAAK,UAAL,CAAgB,OAAhB;AAErB,wBAAI,KAAK,gCAAT,EAA2C;AACzC,4BAAM,eAAe,WAAW,GAAX,CAAe,WAAf,CAArB;AACA,6BAAK,UAAL,GAAkB,KAAK,gCAAL,CAAsC,MAAtC,CAA6C,aAAa,QAA1D,CAAlB;AACD,qBAHD,MAGO;AACL,6BAAK,UAAL,GAAkB,IAAlB;AACD;AACF;AAED,oBAAM,2BAA2B,KAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,wBAAlC,GACkB,WAAW,GAAX,CAAe,wBAAf,CADnD;AAGA,oBAAM,mBACF,yBAAyB,uBAAzB,CAAiD,KAAK,iBAAtD,CADJ;AAGA,qBAAK,aAAL,GAAqB,KAAK,iBAAL,CAAuB,eAAvB,CACjB,gBADiB,EACC,KAAK,iBAAL,CAAuB,MADxB,EACgC,UADhC,EAEjB,KAAK,wBAFY,CAArB;AAGD;AACF,SA5BD;AA8BA,0BAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,gBAAI,KAAK,UAAT,EAAqB,KAAK,UAAL,CAAgB,OAAhB;AACtB,SAFD;AA3CS,gBAAA,UAAA,CAAA,CAAR,OAAQ,E,kCAAqB,I,CAArB,CAAA,E,2BAAA,E,mBAAA,E,KAA+B,CAA/B;AAEA,gBAAA,UAAA,CAAA,CAAR,OAAQ,E,kCAA6B,Q,CAA7B,CAAA,E,2BAAA,E,2BAAA,E,KAAsC,CAAtC;AAEA,gBAAA,UAAA,CAAA,CAAR,OAAQ,E,wCAAA,CAAA,E,2BAAA,E,0BAAA,E,KAAoC,CAApC;AAEA,gBAAA,UAAA,CAAA,CAAR,OAAQ,E,kCAAoC,e,CAApC,CAAA,E,2BAAA,E,kCAAA,E,KAAyD,CAAzD;AARE,4BAAiB,QAAA,UAAA,CAAA,CAD7B,UAAU,EAAC,UAAU,qBAAX,EAAV,CAC6B,E,yCAaW,gB,EAbX,CAAA,EAAjB,iBAAiB,CAAjB;AAgDb,eAAA,iBAAA;AAAC,KAhDD,EAAA;aAAa,iB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, SimpleChanges, StaticProvider, Type, ViewContainerRef} from '@angular/core';\n\n\n/**\n * Instantiates a single {@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n *\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n\n * A more complete example with ngModuleFactory:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n *\n * @experimental\n * @ngModule CommonModule\n */\n@Directive({selector: '[ngComponentOutlet]'})\nexport class NgComponentOutlet implements OnChanges, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutlet !: Type<any>;\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutletInjector !: Injector;\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutletContent !: any[][];\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutletNgModuleFactory !: NgModuleFactory<any>;\n\n  private _componentRef: ComponentRef<any>|null = null;\n  private _moduleRef: NgModuleRef<any>|null = null;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._viewContainerRef.clear();\n    this._componentRef = null;\n\n    if (this.ngComponentOutlet) {\n      const elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n      if (changes['ngComponentOutletNgModuleFactory']) {\n        if (this._moduleRef) this._moduleRef.destroy();\n\n        if (this.ngComponentOutletNgModuleFactory) {\n          const parentModule = elInjector.get(NgModuleRef);\n          this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n        } else {\n          this._moduleRef = null;\n        }\n      }\n\n      const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                                                         elInjector.get(ComponentFactoryResolver);\n\n      const componentFactory =\n          componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n\n      this._componentRef = this._viewContainerRef.createComponent(\n          componentFactory, this._viewContainerRef.length, elInjector,\n          this.ngComponentOutletContent);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._moduleRef) this._moduleRef.destroy();\n  }\n}\n"],"sourceRoot":""}