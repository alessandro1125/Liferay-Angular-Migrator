{"version":3,"sources":["../../../../../../../../../../packages/common/src/directives/ng_style.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,SAAR,EAA4B,UAA5B,EAAwC,KAAxC,EAAgF,eAAhF,EAAiG,SAAjG,QAAiH,eAAjH;AAEA;;;;;;;;;;;;;;;;;;;;;;AAuBA,QAAA,UAAA,aAAA,YAAA;AAME,iBAAA,OAAA,CACY,QADZ,EAC+C,KAD/C,EAC0E,SAD1E,EAC8F;AAAlF,iBAAA,QAAA,GAAA,QAAA;AAAmC,iBAAA,KAAA,GAAA,KAAA;AAA2B,iBAAA,SAAA,GAAA,SAAA;AAAwB;AAGlG,eAAA,cAAA,CAAI,QAAA,SAAJ,EAAI,SAAJ,EAAW;iBAAX,UAAY,MAAZ,EAA2C;AACzC,qBAAK,QAAL,GAAgB,MAAhB;AACA,oBAAI,CAAC,KAAK,OAAN,IAAiB,MAArB,EAA6B;AAC3B,yBAAK,OAAL,GAAe,KAAK,QAAL,CAAc,IAAd,CAAmB,MAAnB,EAA2B,MAA3B,EAAf;AACD;AACF,aALU;4BAAA;;AAAA,SAAX;AAOA,gBAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,gBAAI,KAAK,OAAT,EAAkB;AAChB,oBAAM,UAAU,KAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,QAAvB,CAAhB;AACA,oBAAI,OAAJ,EAAa;AACX,yBAAK,aAAL,CAAmB,OAAnB;AACD;AACF;AACF,SAPD;AASQ,gBAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,OAAtB,EAAqE;AAArE,gBAAA,QAAA,IAAA;AACE,oBAAQ,kBAAR,CAA2B,UAAC,MAAD,EAAO;AAAK,uBAAA,MAAK,SAAL,CAAe,OAAO,GAAtB,EAAA,IAAA,CAAA;AAAgC,aAAvE;AACA,oBAAQ,gBAAR,CAAyB,UAAC,MAAD,EAAO;AAAK,uBAAA,MAAK,SAAL,CAAe,OAAO,GAAtB,EAA2B,OAA3B,YAAA,CAAA;AAA+C,aAApF;AACA,oBAAQ,kBAAR,CAA2B,UAAC,MAAD,EAAO;AAAK,uBAAA,MAAK,SAAL,CAAe,OAAO,GAAtB,EAA2B,OAA3B,YAAA,CAAA;AAA+C,aAAtF;AACD,SAJO;AAMA,gBAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,WAAlB,EAAuC,KAAvC,EAA0E;AAClE,gBAAA,KAAA,QAAA,MAAA,CAAA,YAAA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AAAA,gBAAC,OAAA,GAAA,CAAA,CAAD;AAAA,gBAAO,OAAA,GAAA,CAAA,CAAP;AACN,oBAAQ,SAAS,IAAT,IAAiB,IAAjB,GAAwB,KAAG,KAAH,GAAW,IAAnC,GAA4C,KAApD;AAEA,gBAAI,SAAS,IAAb,EAAmB;AACjB,qBAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,KAAL,CAAW,aAAnC,EAAkD,IAAlD,EAAwD,KAAxD;AACD,aAFD,MAEO;AACL,qBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,KAAL,CAAW,aAAtC,EAAqD,IAArD;AACD;AACF,SATO;AAtBR,gBAAA,UAAA,CAAA,CADC,OACD,E,yCAAA,E,iDAAA,CAAA,E,iBAAA,E,SAAA,EAKC,IALD;AAVW,kBAAO,QAAA,UAAA,CAAA,CADnB,UAAU,EAAC,UAAU,WAAX,EAAV,CACmB,E,yCAOI,e,EAAgC,U,EAA+B,S,EAPnE,CAAA,EAAP,OAAO,CAAP;AA0Cb,eAAA,OAAA;AAAC,KA1CD,EAAA;aAAa,O","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * @description\n *\n * Update an HTML element styles.\n *\n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n *\n *\n */\n@Directive({selector: '[ngStyle]'})\nexport class NgStyle implements DoCheck {\n  // TODO(issue/24571): remove '!'.\n  private _ngStyle !: {[key: string]: string};\n  // TODO(issue/24571): remove '!'.\n  private _differ !: KeyValueDiffer<string, string|number>;\n\n  constructor(\n      private _differs: KeyValueDiffers, private _ngEl: ElementRef, private _renderer: Renderer2) {}\n\n  @Input()\n  set ngStyle(values: {[key: string]: string}) {\n    this._ngStyle = values;\n    if (!this._differ && values) {\n      this._differ = this._differs.find(values).create();\n    }\n  }\n\n  ngDoCheck() {\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n\n  private _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    if (value != null) {\n      this._renderer.setStyle(this._ngEl.nativeElement, name, value as string);\n    } else {\n      this._renderer.removeStyle(this._ngEl.nativeElement, name);\n    }\n  }\n}\n"],"sourceRoot":""}