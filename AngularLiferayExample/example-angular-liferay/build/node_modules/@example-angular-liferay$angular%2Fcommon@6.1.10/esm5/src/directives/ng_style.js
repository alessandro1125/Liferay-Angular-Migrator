Liferay.Loader.define("@example-angular-liferay$angular/common@6.1.10/esm5/src/directives/ng_style", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, ElementRef, Input, KeyValueDiffers, Renderer2 } from '@angular/core';
    /**
     * @ngModule CommonModule
     *
     * @usageNotes
     * ```
     * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
     *
     * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
     *
     * <some-element [ngStyle]="objExp">...</some-element>
     * ```
     *
     * @description
     *
     * Update an HTML element styles.
     *
     * The styles are updated according to the value of the expression evaluation:
     * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
     * - values are the values assigned to those properties (expressed in the given unit).
     *
     *
     */
    var NgStyle = /** @class */function () {
        function NgStyle(_differs, _ngEl, _renderer) {
            this._differs = _differs;
            this._ngEl = _ngEl;
            this._renderer = _renderer;
        }
        Object.defineProperty(NgStyle.prototype, "ngStyle", {
            set: function (values) {
                this._ngStyle = values;
                if (!this._differ && values) {
                    this._differ = this._differs.find(values).create();
                }
            },
            enumerable: true,
            configurable: true
        });
        NgStyle.prototype.ngDoCheck = function () {
            if (this._differ) {
                var changes = this._differ.diff(this._ngStyle);
                if (changes) {
                    this._applyChanges(changes);
                }
            }
        };
        NgStyle.prototype._applyChanges = function (changes) {
            var _this = this;
            changes.forEachRemovedItem(function (record) {
                return _this._setStyle(record.key, null);
            });
            changes.forEachAddedItem(function (record) {
                return _this._setStyle(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
                return _this._setStyle(record.key, record.currentValue);
            });
        };
        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
            var _a = tslib_1.__read(nameAndUnit.split('.'), 2),
                name = _a[0],
                unit = _a[1];
            value = value != null && unit ? "" + value + unit : value;
            if (value != null) {
                this._renderer.setStyle(this._ngEl.nativeElement, name, value);
            } else {
                this._renderer.removeStyle(this._ngEl.nativeElement, name);
            }
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], NgStyle.prototype, "ngStyle", null);
        NgStyle = tslib_1.__decorate([Directive({ selector: '[ngStyle]' }), tslib_1.__metadata("design:paramtypes", [KeyValueDiffers, ElementRef, Renderer2])], NgStyle);
        return NgStyle;
    }();
    export { NgStyle };
});
//# sourceMappingURL=ng_style.js.map