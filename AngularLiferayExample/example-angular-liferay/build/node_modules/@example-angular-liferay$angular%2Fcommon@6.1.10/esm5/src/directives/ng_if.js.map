{"version":3,"sources":["../../../../../../../../../../packages/common/src/directives/ng_if.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef, Éµstringify as stringify} from '@angular/core';\n\n\n/**\n * Conditionally includes a template based on the value of an `expression`.\n *\n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n *\n *\n * @usageNotes\n *\n * ### Most common usage\n *\n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using non-inlined `then` template\n *\n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing conditional result in a variable\n *\n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in following example:\n *\n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n *\n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n *\n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n *\n * ### Syntax\n *\n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n *\n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * @ngModule CommonModule\n */\n@Directive({selector: '[ngIf]'})\nexport class NgIf {\n  private _context: NgIfContext = new NgIfContext();\n  private _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\n  private _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\n  private _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n  private _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n\n  constructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  @Input()\n  set ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n\n  @Input()\n  set ngIfThen(templateRef: TemplateRef<NgIfContext>|null) {\n    assertTemplate('ngIfThen', templateRef);\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  @Input()\n  set ngIfElse(templateRef: TemplateRef<NgIfContext>|null) {\n    assertTemplate('ngIfElse', templateRef);\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\n\n  /** @internal */\n  public static ngIfUseIfTypeGuard: void;\n}\n\nexport class NgIfContext {\n  public $implicit: any = null;\n  public ngIf: any = null;\n}\n\nfunction assertTemplate(property: string, templateRef: TemplateRef<any>| null): void {\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n  if (!isTemplateRefOrNull) {\n    throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\n  }\n}\n"],"sourceRoot":""}