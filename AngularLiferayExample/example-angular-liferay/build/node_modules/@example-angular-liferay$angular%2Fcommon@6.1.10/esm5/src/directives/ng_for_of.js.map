{"version":3,"sources":["../../../../../../../../../../packages/common/src/directives/ng_for_of.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n\nexport class NgForOfContext<T> {\n  constructor(\n      public $implicit: T, public ngForOf: NgIterable<T>, public index: number,\n      public count: number) {}\n\n  get first(): boolean { return this.index === 0; }\n\n  get last(): boolean { return this.index === this.count - 1; }\n\n  get even(): boolean { return this.index % 2 === 0; }\n\n  get odd(): boolean { return !this.even; }\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n *\n * @usageNotes\n *\n * ### Local Variables\n *\n * `NgForOf` provides several exported values that can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * ### Change Propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n *\n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n *\n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * ### Syntax\n *\n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n *\n * With `<ng-template>` element:\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * ### Example\n *\n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n *\n * @ngModule CommonModule\n */\n@Directive({selector: '[ngFor][ngForOf]'})\nexport class NgForOf<T> implements DoCheck {\n  @Input()\n  set ngForOf(ngForOf: NgIterable<T>) {\n    this._ngForOf = ngForOf;\n    this._ngForOfDirty = true;\n  }\n  @Input()\n  set ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if (<any>console && <any>console.warn) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n\n  get ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n  // TODO(issue/24571): remove '!'.\n  private _ngForOf !: NgIterable<T>;\n  private _ngForOfDirty: boolean = true;\n  private _differ: IterableDiffer<T>|null = null;\n  // TODO(issue/24571): remove '!'.\n  private _trackByFn !: TrackByFunction<T>;\n\n  constructor(\n      private _viewContainer: ViewContainerRef, private _template: TemplateRef<NgForOfContext<T>>,\n      private _differs: IterableDiffers) {}\n\n  @Input()\n  set ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n\n  ngDoCheck(): void {\n    if (this._ngForOfDirty) {\n      this._ngForOfDirty = false;\n      // React on ngForOf changes only once all inputs have been initialized\n      const value = this._ngForOf;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch (e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n\n  private _applyChanges(changes: IterableChanges<T>) {\n    const insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>(null !, this._ngForOf, -1, -1), currentIndex);\n            const tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const view = this._viewContainer.get(adjustedPreviousIndex) !;\n            this._viewContainer.move(view, currentIndex);\n            const tuple = new RecordViewTuple(item, <EmbeddedViewRef<NgForOfContext<T>>>view);\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i);\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n      viewRef.context.ngForOf = this._ngForOf;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const viewRef =\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex);\n      viewRef.context.$implicit = record.item;\n    });\n  }\n\n  private _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\n}\n\nclass RecordViewTuple<T> {\n  constructor(public record: any, public view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n"],"sourceRoot":""}