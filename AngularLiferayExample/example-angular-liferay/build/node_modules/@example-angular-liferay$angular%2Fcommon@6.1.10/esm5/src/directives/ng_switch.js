Liferay.Loader.define("@example-angular-liferay$angular/common@6.1.10/esm5/src/directives/ng_switch", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, Host, Input, TemplateRef, ViewContainerRef } from '@angular/core';
    var SwitchView = /** @class */function () {
        function SwitchView(_viewContainerRef, _templateRef) {
            this._viewContainerRef = _viewContainerRef;
            this._templateRef = _templateRef;
            this._created = false;
        }
        SwitchView.prototype.create = function () {
            this._created = true;
            this._viewContainerRef.createEmbeddedView(this._templateRef);
        };
        SwitchView.prototype.destroy = function () {
            this._created = false;
            this._viewContainerRef.clear();
        };
        SwitchView.prototype.enforceState = function (created) {
            if (created && !this._created) {
                this.create();
            } else if (!created && this._created) {
                this.destroy();
            }
        };
        return SwitchView;
    }();
    export { SwitchView };
    /**
     * @ngModule CommonModule
     *
     * @usageNotes
     * ```
     *     <container-element [ngSwitch]="switch_expression">
     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
     *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
     *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
     *       <ng-container *ngSwitchCase="match_expression_3">
     *         <!-- use a ng-container to group multiple root nodes -->
     *         <inner-element></inner-element>
     *         <inner-other-element></inner-other-element>
     *       </ng-container>
     *       <some-element *ngSwitchDefault>...</some-element>
     *     </container-element>
     * ```
     * @description
     *
     * Adds / removes DOM sub-trees when the nest match expressions matches the switch expression.
     *
     * `NgSwitch` stamps out nested views when their match expression value matches the value of the
     * switch expression.
     *
     * In other words:
     * - you define a container element (where you place the directive with a switch expression on the
     * `[ngSwitch]="..."` attribute)
     * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
     * root elements.
     *
     * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
     * be preserved at the location.
     *
     * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
     * expression is evaluated.
     * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
     * stamped out.
     *
     *
     */
    var NgSwitch = /** @class */function () {
        function NgSwitch() {
            this._defaultUsed = false;
            this._caseCount = 0;
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
            set: function (newValue) {
                this._ngSwitch = newValue;
                if (this._caseCount === 0) {
                    this._updateDefaultCases(true);
                }
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        NgSwitch.prototype._addCase = function () {
            return this._caseCount++;
        };
        /** @internal */
        NgSwitch.prototype._addDefault = function (view) {
            if (!this._defaultViews) {
                this._defaultViews = [];
            }
            this._defaultViews.push(view);
        };
        /** @internal */
        NgSwitch.prototype._matchCase = function (value) {
            var matched = value == this._ngSwitch;
            this._lastCasesMatched = this._lastCasesMatched || matched;
            this._lastCaseCheckIndex++;
            if (this._lastCaseCheckIndex === this._caseCount) {
                this._updateDefaultCases(!this._lastCasesMatched);
                this._lastCaseCheckIndex = 0;
                this._lastCasesMatched = false;
            }
            return matched;
        };
        NgSwitch.prototype._updateDefaultCases = function (useDefault) {
            if (this._defaultViews && useDefault !== this._defaultUsed) {
                this._defaultUsed = useDefault;
                for (var i = 0; i < this._defaultViews.length; i++) {
                    var defaultView = this._defaultViews[i];
                    defaultView.enforceState(useDefault);
                }
            }
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], NgSwitch.prototype, "ngSwitch", null);
        NgSwitch = tslib_1.__decorate([Directive({ selector: '[ngSwitch]' })], NgSwitch);
        return NgSwitch;
    }();
    export { NgSwitch };
    /**
     * @ngModule CommonModule
     *
     * @usageNotes
     * ```
     * <container-element [ngSwitch]="switch_expression">
     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
     * </container-element>
     *```
     * @description
     *
     * Creates a view that will be added/removed from the parent {@link NgSwitch} when the
     * given expression evaluate to respectively the same/different value as the switch
     * expression.
     *
     * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
     * expression.
     *
     * If multiple match expressions match the switch expression value, all of them are displayed.
     *
     * See {@link NgSwitch} for more details and example.
     *
     *
     */
    var NgSwitchCase = /** @class */function () {
        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
            this.ngSwitch = ngSwitch;
            ngSwitch._addCase();
            this._view = new SwitchView(viewContainer, templateRef);
        }
        NgSwitchCase.prototype.ngDoCheck = function () {
            this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object)], NgSwitchCase.prototype, "ngSwitchCase", void 0);
        NgSwitchCase = tslib_1.__decorate([Directive({ selector: '[ngSwitchCase]' }), tslib_1.__param(2, Host()), tslib_1.__metadata("design:paramtypes", [ViewContainerRef, TemplateRef, NgSwitch])], NgSwitchCase);
        return NgSwitchCase;
    }();
    export { NgSwitchCase };
    /**
     * @ngModule CommonModule
     * @usageNotes
     * ```
     * <container-element [ngSwitch]="switch_expression">
     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
     *   <some-other-element *ngSwitchDefault>...</some-other-element>
     * </container-element>
     * ```
     *
     * @description
     *
     * Creates a view that is added to the parent {@link NgSwitch} when no case expressions
     * match the switch expression.
     *
     * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
     * expression.
     *
     * See {@link NgSwitch} for more details and example.
     *
     *
     */
    var NgSwitchDefault = /** @class */function () {
        function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
            ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
        }
        NgSwitchDefault = tslib_1.__decorate([Directive({ selector: '[ngSwitchDefault]' }), tslib_1.__param(2, Host()), tslib_1.__metadata("design:paramtypes", [ViewContainerRef, TemplateRef, NgSwitch])], NgSwitchDefault);
        return NgSwitchDefault;
    }();
    export { NgSwitchDefault };
});
//# sourceMappingURL=ng_switch.js.map