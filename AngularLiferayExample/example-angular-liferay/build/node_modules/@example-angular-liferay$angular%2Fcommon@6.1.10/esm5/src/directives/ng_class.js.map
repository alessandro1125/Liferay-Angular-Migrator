{"version":3,"sources":["../../../../../../../../../../packages/common/src/directives/ng_class.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2, ɵisListLikeIterable as isListLikeIterable, ɵstringify as stringify} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n *\n */\n@Directive({selector: '[ngClass]'})\nexport class NgClass implements DoCheck {\n  // TODO(issue/24571): remove '!'.\n  private _iterableDiffer !: IterableDiffer<string>| null;\n  // TODO(issue/24571): remove '!'.\n  private _keyValueDiffer !: KeyValueDiffer<string, any>| null;\n  private _initialClasses: string[] = [];\n  // TODO(issue/24571): remove '!'.\n  private _rawClass !: string[] | Set<string>| {[klass: string]: any};\n\n  constructor(\n      private _iterableDiffers: IterableDiffers, private _keyValueDiffers: KeyValueDiffers,\n      private _ngEl: ElementRef, private _renderer: Renderer2) {}\n\n  @Input('class')\n  set klass(value: string) {\n    this._removeClasses(this._initialClasses);\n    this._initialClasses = typeof value === 'string' ? value.split(/\\s+/) : [];\n    this._applyClasses(this._initialClasses);\n    this._applyClasses(this._rawClass);\n  }\n\n  @Input()\n  set ngClass(value: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._removeClasses(this._rawClass);\n    this._applyClasses(this._initialClasses);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof value === 'string' ? value.split(/\\s+/) : value;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n\n  ngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const iterableChanges = this._iterableDiffer.diff(this._rawClass as string[]);\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const keyValueChanges = this._keyValueDiffer.diff(this._rawClass as{[k: string]: any});\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n\n  private _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n\n  private _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n\n  /**\n   * Applies a collection of CSS classes to the DOM element.\n   *\n   * For argument of type Set and Array CSS class names contained in those collections are always\n   * added.\n   * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n   * for truthy and removed for falsy).\n   */\n  private _applyClasses(rawClassVal: string[]|Set<string>|{[klass: string]: any}) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        (<any>rawClassVal).forEach((klass: string) => this._toggleClass(klass, true));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, !!rawClassVal[klass]));\n      }\n    }\n  }\n\n  /**\n   * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n   * purposes.\n   */\n  private _removeClasses(rawClassVal: string[]|Set<string>|{[klass: string]: any}) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        (<any>rawClassVal).forEach((klass: string) => this._toggleClass(klass, false));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, false));\n      }\n    }\n  }\n\n  private _toggleClass(klass: string, enabled: boolean): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(klass => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\n}\n"],"sourceRoot":""}