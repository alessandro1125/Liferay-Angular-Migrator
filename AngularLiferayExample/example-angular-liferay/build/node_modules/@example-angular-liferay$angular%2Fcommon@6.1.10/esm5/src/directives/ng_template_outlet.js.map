{"version":3,"sources":["../../../../../../../../../../packages/common/src/directives/ng_template_outlet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n */\n@Directive({selector: '[ngTemplateOutlet]'})\nexport class NgTemplateOutlet implements OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _viewRef !: EmbeddedViewRef<any>;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() public ngTemplateOutletContext !: Object;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() public ngTemplateOutlet !: TemplateRef<any>;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const recreateView = this._shouldRecreateView(changes);\n\n    if (recreateView) {\n      if (this._viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n\n      if (this.ngTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n            this.ngTemplateOutlet, this.ngTemplateOutletContext);\n      }\n    } else {\n      if (this._viewRef && this.ngTemplateOutletContext) {\n        this._updateExistingContext(this.ngTemplateOutletContext);\n      }\n    }\n  }\n\n  /**\n   * We need to re-create existing embedded view if:\n   * - templateRef has changed\n   * - context has changes\n   *\n   * We mark context object as changed when the corresponding object\n   * shape changes (new properties are added or existing properties are removed).\n   * In other words we consider context with the same properties as \"the same\" even\n   * if object reference changes (see https://github.com/angular/angular/issues/13407).\n   */\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    const ctxChange = changes['ngTemplateOutletContext'];\n    return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n\n  private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (let propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  private _updateExistingContext(ctx: Object): void {\n    for (let propName of Object.keys(ctx)) {\n      (<any>this._viewRef.context)[propName] = (<any>this.ngTemplateOutletContext)[propName];\n    }\n  }\n}\n"],"sourceRoot":""}