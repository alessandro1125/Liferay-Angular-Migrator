{"version":3,"sources":["../../../../../../../../../../packages/common/src/location/location.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,YAAR,EAAsB,UAAtB,QAAuC,eAAvC;AAGA,aAAQ,gBAAR,QAA+B,qBAA/B;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,QAAA,WAAA,aAAA,YAAA;AAQE,iBAAA,QAAA,CAAY,gBAAZ,EAA8C;AAA9C,gBAAA,QAAA,IAAA;AAPA;AACA,iBAAA,QAAA,GAA8B,IAAI,YAAJ,EAA9B;AAOE,iBAAK,iBAAL,GAAyB,gBAAzB;AACA,gBAAM,kBAAkB,KAAK,iBAAL,CAAuB,WAAvB,EAAxB;AACA,iBAAK,SAAL,GAAiB,WAAS,kBAAT,CAA4B,gBAAgB,eAAhB,CAA5B,CAAjB;AACA,iBAAK,iBAAL,CAAuB,UAAvB,CAAkC,UAAC,EAAD,EAAG;AACnC,sBAAK,QAAL,CAAc,IAAd,CAAmB;AACjB,2BAAO,MAAK,IAAL,CAAU,IAAV,CADU;AAEjB,2BAAO,IAFU;AAGjB,6BAAS,GAAG,KAHK;AAIjB,4BAAQ,GAAG;AAJM,iBAAnB;AAMD,aAPD;AAQD;qBApBU,Q;AAsBX;;;AAGA;AACA;AACA,iBAAA,SAAA,CAAA,IAAA,GAAA,UAAK,WAAL,EAAiC;AAA5B,gBAAA,gBAAA,KAAA,CAAA,EAAA;AAAA,8BAAA,KAAA;AAA4B;AAC/B,mBAAO,KAAK,SAAL,CAAe,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,WAA5B,CAAf,CAAP;AACD,SAFD;AAIA;;;AAGA,iBAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,IAArB,EAAmC,KAAnC,EAAqD;AAAlB,gBAAA,UAAA,KAAA,CAAA,EAAA;AAAA,wBAAA,EAAA;AAAkB;AACnD,mBAAO,KAAK,IAAL,MAAe,KAAK,SAAL,CAAe,OAAO,WAAS,oBAAT,CAA8B,KAA9B,CAAtB,CAAtB;AACD,SAFD;AAIA;;;;AAIA,iBAAA,SAAA,CAAA,SAAA,GAAA,UAAU,GAAV,EAAqB;AACnB,mBAAO,WAAS,kBAAT,CAA4B,eAAe,KAAK,SAApB,EAA+B,gBAAgB,GAAhB,CAA/B,CAA5B,CAAP;AACD,SAFD;AAIA;;;;;;AAMA,iBAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,GAAnB,EAA8B;AAC5B,gBAAI,OAAO,IAAI,CAAJ,MAAW,GAAtB,EAA2B;AACzB,sBAAM,MAAM,GAAZ;AACD;AACD,mBAAO,KAAK,iBAAL,CAAuB,kBAAvB,CAA0C,GAA1C,CAAP;AACD,SALD;AAOA;AACA;;;;AAIA,iBAAA,SAAA,CAAA,EAAA,GAAA,UAAG,IAAH,EAAiB,KAAjB,EAAqC,KAArC,EAAsD;AAArC,gBAAA,UAAA,KAAA,CAAA,EAAA;AAAA,wBAAA,EAAA;AAAkB;AAAE,gBAAA,UAAA,KAAA,CAAA,EAAA;AAAA,wBAAA,IAAA;AAAiB;AACpD,iBAAK,iBAAL,CAAuB,SAAvB,CAAiC,KAAjC,EAAwC,EAAxC,EAA4C,IAA5C,EAAkD,KAAlD;AACD,SAFD;AAIA;;;;AAIA,iBAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAA2B,KAA3B,EAA+C,KAA/C,EAAgE;AAArC,gBAAA,UAAA,KAAA,CAAA,EAAA;AAAA,wBAAA,EAAA;AAAkB;AAAE,gBAAA,UAAA,KAAA,CAAA,EAAA;AAAA,wBAAA,IAAA;AAAiB;AAC9D,iBAAK,iBAAL,CAAuB,YAAvB,CAAoC,KAApC,EAA2C,EAA3C,EAA+C,IAA/C,EAAqD,KAArD;AACD,SAFD;AAIA;;;AAGA,iBAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAkB,iBAAK,iBAAL,CAAuB,OAAvB;AAAmC,SAArD;AAEA;;;AAGA,iBAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAe,iBAAK,iBAAL,CAAuB,IAAvB;AAAgC,SAA/C;AAEA;;;AAGA,iBAAA,SAAA,CAAA,SAAA,GAAA,UACI,MADJ,EAC4C,OAD5C,EAEI,QAFJ,EAEgC;AAC9B,mBAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,EAAC,MAAM,MAAP,EAAe,OAAO,OAAtB,EAA+B,UAAU,QAAzC,EAAxB,CAAP;AACD,SAJD;AAMA;;;;AAIc,iBAAA,oBAAA,GAAd,UAAmC,MAAnC,EAAiD;AAC/C,mBAAO,UAAU,OAAO,CAAP,MAAc,GAAxB,GAA8B,MAAM,MAApC,GAA6C,MAApD;AACD,SAFa;AAId;;;AAGc,iBAAA,aAAA,GAAd,UAA4B,KAA5B,EAA2C,GAA3C,EAAsD;AACpD,gBAAI,MAAM,MAAN,IAAgB,CAApB,EAAuB;AACrB,uBAAO,GAAP;AACD;AACD,gBAAI,IAAI,MAAJ,IAAc,CAAlB,EAAqB;AACnB,uBAAO,KAAP;AACD;AACD,gBAAI,UAAU,CAAd;AACA,gBAAI,MAAM,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACvB;AACD;AACD,gBAAI,IAAI,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACvB;AACD;AACD,gBAAI,WAAW,CAAf,EAAkB;AAChB,uBAAO,QAAQ,IAAI,SAAJ,CAAc,CAAd,CAAf;AACD;AACD,gBAAI,WAAW,CAAf,EAAkB;AAChB,uBAAO,QAAQ,GAAf;AACD;AACD,mBAAO,QAAQ,GAAR,GAAc,GAArB;AACD,SArBa;AAuBd;;;;;AAKc,iBAAA,kBAAA,GAAd,UAAiC,GAAjC,EAA4C;AAC1C,gBAAM,QAAQ,IAAI,KAAJ,CAAU,QAAV,CAAd;AACA,gBAAM,aAAa,SAAS,MAAM,KAAf,IAAwB,IAAI,MAA/C;AACA,gBAAM,kBAAkB,cAAc,IAAI,aAAa,CAAjB,MAAwB,GAAxB,GAA8B,CAA9B,GAAkC,CAAhD,CAAxB;AACA,mBAAO,IAAI,KAAJ,CAAU,CAAV,EAAa,eAAb,IAAgC,IAAI,KAAJ,CAAU,UAAV,CAAvC;AACD,SALa;;AAtIH,mBAAQ,aAAA,QAAA,UAAA,CAAA,CADpB,YACoB,E,yCAQW,gB,EARX,CAAA,EAAR,QAAQ,CAAR;AA4Ib,eAAA,QAAA;AAAC,KA5ID,EAAA;aAAa,Q;AA8Ib,aAAA,cAAA,CAAwB,QAAxB,EAA0C,GAA1C,EAAqD;AACnD,eAAO,YAAY,IAAI,UAAJ,CAAe,QAAf,CAAZ,GAAuC,IAAI,SAAJ,CAAc,SAAS,MAAvB,CAAvC,GAAwE,GAA/E;AACD;AAED,aAAA,eAAA,CAAyB,GAAzB,EAAoC;AAClC,eAAO,IAAI,OAAJ,CAAY,eAAZ,EAA6B,EAA7B,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {SubscriptionLike} from 'rxjs';\n\nimport {LocationStrategy} from './location_strategy';\n\n/** @experimental */\nexport interface PopStateEvent {\n  pop?: boolean;\n  state?: any;\n  type?: string;\n  url?: string;\n}\n\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on which {@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use {@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n */\n@Injectable()\nexport class Location {\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  /** @internal */\n  _baseHref: string;\n  /** @internal */\n  _platformStrategy: LocationStrategy;\n\n  constructor(platformStrategy: LocationStrategy) {\n    this._platformStrategy = platformStrategy;\n    const browserBaseHref = this._platformStrategy.getBaseHref();\n    this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'state': ev.state,\n        'type': ev.type,\n      });\n    });\n  }\n\n  /**\n   * Returns the normalized URL path.\n   */\n  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n  // removed.\n  path(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n\n  /**\n   * Normalizes the given path and compares to the current normalized path.\n   */\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n  }\n\n  /**\n   * Given a string representing a URL, returns the normalized URL path without leading or\n   * trailing slashes.\n   */\n  normalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n\n  /**\n   * Given a string representing a URL, returns the platform-specific external URL path.\n   * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n   * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n   * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n   */\n  prepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n\n  // TODO: rename this method to pushState\n  /**\n   * Changes the browsers URL to the normalized version of the given URL, and pushes a\n   * new item onto the platform's history.\n   */\n  go(path: string, query: string = '', state: any = null): void {\n    this._platformStrategy.pushState(state, '', path, query);\n  }\n\n  /**\n   * Changes the browsers URL to the normalized version of the given URL, and replaces\n   * the top item on the platform's history stack.\n   */\n  replaceState(path: string, query: string = '', state: any = null): void {\n    this._platformStrategy.replaceState(state, '', path, query);\n  }\n\n  /**\n   * Navigates forward in the platform's history.\n   */\n  forward(): void { this._platformStrategy.forward(); }\n\n  /**\n   * Navigates back in the platform's history.\n   */\n  back(): void { this._platformStrategy.back(); }\n\n  /**\n   * Subscribe to the platform's `popState` events.\n   */\n  subscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): SubscriptionLike {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n\n  /**\n   * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n   * is.\n   */\n  public static normalizeQueryParams(params: string): string {\n    return params && params[0] !== '?' ? '?' + params : params;\n  }\n\n  /**\n   * Given 2 parts of a url, join them with a slash if needed.\n   */\n  public static joinWithSlash(start: string, end: string): string {\n    if (start.length == 0) {\n      return end;\n    }\n    if (end.length == 0) {\n      return start;\n    }\n    let slashes = 0;\n    if (start.endsWith('/')) {\n      slashes++;\n    }\n    if (end.startsWith('/')) {\n      slashes++;\n    }\n    if (slashes == 2) {\n      return start + end.substring(1);\n    }\n    if (slashes == 1) {\n      return start + end;\n    }\n    return start + '/' + end;\n  }\n\n  /**\n   * If url has a trailing slash, remove it, otherwise return url as is. This\n   * method looks for the first occurrence of either #, ?, or the end of the\n   * line as `/` characters after any of these should not be replaced.\n   */\n  public static stripTrailingSlash(url: string): string {\n    const match = url.match(/#|\\?|$/);\n    const pathEndIdx = match && match.index || url.length;\n    const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n  }\n}\n\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n"],"sourceRoot":""}