Liferay.Loader.define('@example-angular-liferay$angular/common@6.1.10/esm5/src/location/hash_location_strategy', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Inject, Injectable, Optional } from '@angular/core';
    import { Location } from './location';
    import { APP_BASE_HREF, LocationStrategy } from './location_strategy';
    import { PlatformLocation } from './platform_location';
    /**
     * @description
     * A {@link LocationStrategy} used to configure the {@link Location} service to
     * represent its state in the
     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
     * of the browser's URL.
     *
     * For instance, if you call `location.go('/foo')`, the browser's URL will become
     * `example.com#/foo`.
     *
     * @usageNotes
     *
     * ### Example
     *
     * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
     *
     *
     */
    var HashLocationStrategy = /** @class */function (_super) {
        tslib_1.__extends(HashLocationStrategy, _super);
        function HashLocationStrategy(_platformLocation, _baseHref) {
            var _this = _super.call(this) || this;
            _this._platformLocation = _platformLocation;
            _this._baseHref = '';
            if (_baseHref != null) {
                _this._baseHref = _baseHref;
            }
            return _this;
        }
        HashLocationStrategy.prototype.onPopState = function (fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        };
        HashLocationStrategy.prototype.getBaseHref = function () {
            return this._baseHref;
        };
        HashLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            // the hash value is always prefixed with a `#`
            // and if it is empty then it will stay empty
            var path = this._platformLocation.hash;
            if (path == null) path = '#';
            return path.length > 0 ? path.substring(1) : path;
        };
        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            var url = Location.joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? '#' + url : url;
        };
        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.pushState(state, title, url);
        };
        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.replaceState(state, title, url);
        };
        HashLocationStrategy.prototype.forward = function () {
            this._platformLocation.forward();
        };
        HashLocationStrategy.prototype.back = function () {
            this._platformLocation.back();
        };
        HashLocationStrategy = tslib_1.__decorate([Injectable(), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(APP_BASE_HREF)), tslib_1.__metadata("design:paramtypes", [PlatformLocation, String])], HashLocationStrategy);
        return HashLocationStrategy;
    }(LocationStrategy);
    export { HashLocationStrategy };
});
//# sourceMappingURL=hash_location_strategy.js.map