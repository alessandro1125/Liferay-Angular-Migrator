{"version":3,"sources":["../../../../../../../../../../../packages/common/src/pipes/deprecated/number_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NUMBER_FORMAT_REGEXP, parseIntAutoRadix} from '../../i18n/format_number';\nimport {NumberFormatStyle} from '../../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from '../invalid_pipe_argument_error';\nimport {NumberFormatter} from './intl';\n\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let minInt: number|undefined;\n  let minFraction: number|undefined;\n  let maxFraction: number|undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const parts = digits.match(NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format(value as number, locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n\n/**\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n *\n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *\n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n *\n * @ngModule CommonModule\n */\n@Pipe({name: 'number'})\nexport class DeprecatedDecimalPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Formats a number as percentage according to locale rules.\n *\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n *\n *\n */\n@Pipe({name: 'percent'})\nexport class DeprecatedPercentPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n *\n *\n */\n@Pipe({name: 'currency'})\nexport class DeprecatedCurrencyPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits,\n        currencyCode, symbolDisplay);\n  }\n}\n"],"sourceRoot":""}