Liferay.Loader.define('@example-angular-liferay$angular/common@6.1.10/esm5/src/pipes/number_pipe', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Inject, LOCALE_ID, Pipe } from '@angular/core';
    import { formatCurrency, formatNumber, formatPercent } from '../i18n/format_number';
    import { getCurrencySymbol } from '../i18n/locale_data_api';
    import { invalidPipeArgumentError } from './invalid_pipe_argument_error';
    /**
     * @ngModule CommonModule
     * @description
     *
     * Transforms a number into a string,
     * formatted according to locale rules that determine group sizing and
     * separator, decimal-point character, and other locale-specific
     * configurations.
     *
     * If no parameters are specified, the function rounds off to the nearest value using this
     * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).
     * The behavior differs from that of the JavaScript ```Math.round()``` function.
     * In the following case for example, the pipe rounds down where
     * ```Math.round()``` rounds up:
     *
     * ```html
     * -2.5 | number:'1.0-0'
     * > -3
     * Math.round(-2.5)
     * > -2
     * ```
     *
     * @see `formatNumber()`
     *
     * @usageNotes
     * The following code shows how the pipe transforms numbers
     * into text strings, according to various format specifications,
     * where the caller's default locale is `en-US`.
     *
     * ### Example
     *
     * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
     *
     */
    var DecimalPipe = /** @class */function () {
        function DecimalPipe(_locale) {
            this._locale = _locale;
        }
        DecimalPipe_1 = DecimalPipe;
        /**
         * @param value The number to be formatted.
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `0`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `3`.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
         */
        DecimalPipe.prototype.transform = function (value, digitsInfo, locale) {
            if (isEmpty(value)) return null;
            locale = locale || this._locale;
            try {
                var num = strToNumber(value);
                return formatNumber(num, locale, digitsInfo);
            } catch (error) {
                throw invalidPipeArgumentError(DecimalPipe_1, error.message);
            }
        };
        var DecimalPipe_1;
        DecimalPipe = DecimalPipe_1 = tslib_1.__decorate([Pipe({ name: 'number' }), tslib_1.__param(0, Inject(LOCALE_ID)), tslib_1.__metadata("design:paramtypes", [String])], DecimalPipe);
        return DecimalPipe;
    }();
    export { DecimalPipe };
    /**
     * @ngModule CommonModule
     * @description
     *
     * Transforms a number to a percentage
     * string, formatted according to locale rules that determine group sizing and
     * separator, decimal-point character, and other locale-specific
     * configurations.
     *
     * @see `formatPercent()`
     *
     * @usageNotes
     * The following code shows how the pipe transforms numbers
     * into text strings, according to various format specifications,
     * where the caller's default locale is `en-US`.
     *
     * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
     *
     *
     */
    var PercentPipe = /** @class */function () {
        function PercentPipe(_locale) {
            this._locale = _locale;
        }
        PercentPipe_1 = PercentPipe;
        /**
         *
         * @param value The number to be formatted as a percentage.
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `0`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `3`.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
         */
        PercentPipe.prototype.transform = function (value, digitsInfo, locale) {
            if (isEmpty(value)) return null;
            locale = locale || this._locale;
            try {
                var num = strToNumber(value);
                return formatPercent(num, locale, digitsInfo);
            } catch (error) {
                throw invalidPipeArgumentError(PercentPipe_1, error.message);
            }
        };
        var PercentPipe_1;
        PercentPipe = PercentPipe_1 = tslib_1.__decorate([Pipe({ name: 'percent' }), tslib_1.__param(0, Inject(LOCALE_ID)), tslib_1.__metadata("design:paramtypes", [String])], PercentPipe);
        return PercentPipe;
    }();
    export { PercentPipe };
    /**
     * @ngModule CommonModule
     * @description
     *
     * Transforms a number to a currency string, formatted according to locale rules
     * that determine group sizing and separator, decimal-point character,
     * and other locale-specific configurations.
     *
     * @see `getCurrencySymbol()`
     * @see `formatCurrency()`
     *
     * @usageNotes
     * The following code shows how the pipe transforms numbers
     * into text strings, according to various format specifications,
     * where the caller's default locale is `en-US`.
     *
     * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
     *
     *
     */
    var CurrencyPipe = /** @class */function () {
        function CurrencyPipe(_locale) {
            this._locale = _locale;
        }
        CurrencyPipe_1 = CurrencyPipe;
        /**
         *
         * @param value The number to be formatted as currency.
         * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
         * such as `USD` for the US dollar and `EUR` for the euro.
         * @param display The format for the currency indicator. One of the following:
         *   - `code`: Show the code (such as `USD`).
         *   - `symbol`(default): Show the symbol (such as `$`).
         *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
         * currency.
         * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
         * locale has no narrow symbol, uses the standard symbol for the locale.
         *   - String: Use the given string value instead of a code or a symbol.
         * For example, an empty string will suppress the currency & symbol.
         *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
         *
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `0`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `3`.
         * If not provided, the number will be formatted with the proper amount of digits,
         * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
         * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
         */
        CurrencyPipe.prototype.transform = function (value, currencyCode, display, digitsInfo, locale) {
            if (display === void 0) {
                display = 'symbol';
            }
            if (isEmpty(value)) return null;
            locale = locale || this._locale;
            if (typeof display === 'boolean') {
                if (console && console.warn) {
                    console.warn("Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".");
                }
                display = display ? 'symbol' : 'code';
            }
            var currency = currencyCode || 'USD';
            if (display !== 'code') {
                if (display === 'symbol' || display === 'symbol-narrow') {
                    currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
                } else {
                    currency = display;
                }
            }
            try {
                var num = strToNumber(value);
                return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
            } catch (error) {
                throw invalidPipeArgumentError(CurrencyPipe_1, error.message);
            }
        };
        var CurrencyPipe_1;
        CurrencyPipe = CurrencyPipe_1 = tslib_1.__decorate([Pipe({ name: 'currency' }), tslib_1.__param(0, Inject(LOCALE_ID)), tslib_1.__metadata("design:paramtypes", [String])], CurrencyPipe);
        return CurrencyPipe;
    }();
    export { CurrencyPipe };
    function isEmpty(value) {
        return value == null || value === '' || value !== value;
    }
    /**
     * Transforms a string into a number (if needed).
     */
    function strToNumber(value) {
        // Convert strings to numbers
        if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
            return Number(value);
        }
        if (typeof value !== 'number') {
            throw new Error(value + " is not a number");
        }
        return value;
    }
});
//# sourceMappingURL=number_pipe.js.map