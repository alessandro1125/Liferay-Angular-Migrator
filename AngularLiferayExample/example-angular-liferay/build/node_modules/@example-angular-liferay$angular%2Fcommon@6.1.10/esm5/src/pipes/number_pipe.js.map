{"version":3,"sources":["../../../../../../../../../../packages/common/src/pipes/number_pipe.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,MAAR,EAAgB,SAAhB,EAA2B,IAA3B,QAAqD,eAArD;AACA,aAAQ,cAAR,EAAwB,YAAxB,EAAsC,aAAtC,QAA0D,uBAA1D;AACA,aAAQ,iBAAR,QAAgC,yBAAhC;AACA,aAAQ,wBAAR,QAAuC,+BAAvC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,QAAA,cAAA,aAAA,YAAA;AACE,iBAAA,WAAA,CAAuC,OAAvC,EAAsD;AAAf,iBAAA,OAAA,GAAA,OAAA;AAAmB;wBAD/C,W;AAGX;;;;;;;;;;;;;;;AAeA,oBAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAsB,UAAtB,EAA2C,MAA3C,EAA0D;AACxD,gBAAI,QAAQ,KAAR,CAAJ,EAAoB,OAAO,IAAP;AAEpB,qBAAS,UAAU,KAAK,OAAxB;AAEA,gBAAI;AACF,oBAAM,MAAM,YAAY,KAAZ,CAAZ;AACA,uBAAO,aAAa,GAAb,EAAkB,MAAlB,EAA0B,UAA1B,CAAP;AACD,aAHD,CAGE,OAAO,KAAP,EAAc;AACd,sBAAM,yBAAyB,aAAzB,EAAsC,MAAM,OAA5C,CAAN;AACD;AACF,SAXD;;AAlBW,sBAAW,gBAAA,QAAA,UAAA,CAAA,CADvB,KAAK,EAAC,MAAM,QAAP,EAAL,CACuB,EACT,QAAA,OAAA,CAAA,CAAA,EAAA,OAAO,SAAP,CAAA,CADS,E,iDAAA,CAAA,EAAX,WAAW,CAAX;AA8Bb,eAAA,WAAA;AAAC,KA9BD,EAAA;aAAa,W;AAgCb;;;;;;;;;;;;;;;;;;;;AAqBA,QAAA,cAAA,aAAA,YAAA;AACE,iBAAA,WAAA,CAAuC,OAAvC,EAAsD;AAAf,iBAAA,OAAA,GAAA,OAAA;AAAmB;wBAD/C,W;AAGX;;;;;;;;;;;;;;;;AAgBA,oBAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAsB,UAAtB,EAA2C,MAA3C,EAA0D;AACxD,gBAAI,QAAQ,KAAR,CAAJ,EAAoB,OAAO,IAAP;AAEpB,qBAAS,UAAU,KAAK,OAAxB;AAEA,gBAAI;AACF,oBAAM,MAAM,YAAY,KAAZ,CAAZ;AACA,uBAAO,cAAc,GAAd,EAAmB,MAAnB,EAA2B,UAA3B,CAAP;AACD,aAHD,CAGE,OAAO,KAAP,EAAc;AACd,sBAAM,yBAAyB,aAAzB,EAAsC,MAAM,OAA5C,CAAN;AACD;AACF,SAXD;;AAnBW,sBAAW,gBAAA,QAAA,UAAA,CAAA,CADvB,KAAK,EAAC,MAAM,SAAP,EAAL,CACuB,EACT,QAAA,OAAA,CAAA,CAAA,EAAA,OAAO,SAAP,CAAA,CADS,E,iDAAA,CAAA,EAAX,WAAW,CAAX;AA+Bb,eAAA,WAAA;AAAC,KA/BD,EAAA;aAAa,W;AAiCb;;;;;;;;;;;;;;;;;;;;AAqBA,QAAA,eAAA,aAAA,YAAA;AACE,iBAAA,YAAA,CAAuC,OAAvC,EAAsD;AAAf,iBAAA,OAAA,GAAA,OAAA;AAAmB;yBAD/C,Y;AAGX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,qBAAA,SAAA,CAAA,SAAA,GAAA,UACI,KADJ,EACgB,YADhB,EAEI,OAFJ,EAEwE,UAFxE,EAGI,MAHJ,EAGmB;AADf,gBAAA,YAAA,KAAA,CAAA,EAAA;AAAA,0BAAA,QAAA;AAAkE;AAEpE,gBAAI,QAAQ,KAAR,CAAJ,EAAoB,OAAO,IAAP;AAEpB,qBAAS,UAAU,KAAK,OAAxB;AAEA,gBAAI,OAAO,OAAP,KAAmB,SAAvB,EAAkC;AAChC,oBAAS,WAAgB,QAAQ,IAAjC,EAAuC;AACrC,4BAAQ,IAAR,CACI,gNADJ;AAED;AACD,0BAAU,UAAU,QAAV,GAAqB,MAA/B;AACD;AAED,gBAAI,WAAmB,gBAAgB,KAAvC;AACA,gBAAI,YAAY,MAAhB,EAAwB;AACtB,oBAAI,YAAY,QAAZ,IAAwB,YAAY,eAAxC,EAAyD;AACvD,+BAAW,kBAAkB,QAAlB,EAA4B,YAAY,QAAZ,GAAuB,MAAvB,GAAgC,QAA5D,EAAsE,MAAtE,CAAX;AACD,iBAFD,MAEO;AACL,+BAAW,OAAX;AACD;AACF;AAED,gBAAI;AACF,oBAAM,MAAM,YAAY,KAAZ,CAAZ;AACA,uBAAO,eAAe,GAAf,EAAoB,MAApB,EAA4B,QAA5B,EAAsC,YAAtC,EAAoD,UAApD,CAAP;AACD,aAHD,CAGE,OAAO,KAAP,EAAc;AACd,sBAAM,yBAAyB,cAAzB,EAAuC,MAAM,OAA7C,CAAN;AACD;AACF,SA/BD;;AAnCW,uBAAY,iBAAA,QAAA,UAAA,CAAA,CADxB,KAAK,EAAC,MAAM,UAAP,EAAL,CACwB,EACV,QAAA,OAAA,CAAA,CAAA,EAAA,OAAO,SAAP,CAAA,CADU,E,iDAAA,CAAA,EAAZ,YAAY,CAAZ;AAmEb,eAAA,YAAA;AAAC,KAnED,EAAA;aAAa,Y;AAqEb,aAAA,OAAA,CAAiB,KAAjB,EAA2B;AACzB,eAAO,SAAS,IAAT,IAAiB,UAAU,EAA3B,IAAiC,UAAU,KAAlD;AACD;AAED;;;AAGA,aAAA,WAAA,CAAqB,KAArB,EAA2C;AACzC;AACA,YAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,CAAC,MAAM,OAAO,KAAP,IAAgB,WAAW,KAAX,CAAtB,CAAlC,EAA4E;AAC1E,mBAAO,OAAO,KAAP,CAAP;AACD;AACD,YAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,kBAAM,IAAI,KAAJ,CAAa,QAAK,kBAAlB,CAAN;AACD;AACD,eAAO,KAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatCurrency, formatNumber, formatPercent} from '../i18n/format_number';\nimport {getCurrencySymbol} from '../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number into a string,\n * formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * If no parameters are specified, the function rounds off to the nearest value using this\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\n * In the following case for example, the pipe rounds down where\n * ```Math.round()``` rounds up:\n *\n * ```html\n * -2.5 | number:'1.0-0'\n * > -3\n * Math.round(-2.5)\n * > -2\n * ```\n *\n * @see `formatNumber()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * ### Example\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n */\n@Pipe({name: 'number'})\nexport class DecimalPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   * @param value The number to be formatted.\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `0`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `3`.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n   */\n  transform(value: any, digitsInfo?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatNumber(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(DecimalPipe, error.message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see `formatPercent()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n *\n */\n@Pipe({name: 'percent'})\nexport class PercentPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   *\n   * @param value The number to be formatted as a percentage.\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `0`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `3`.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n   */\n  transform(value: any, digitsInfo?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatPercent(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(PercentPipe, error.message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n * @see `getCurrencySymbol()`\n * @see `formatCurrency()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n *\n */\n@Pipe({name: 'currency'})\nexport class CurrencyPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   *\n   * @param value The number to be formatted as currency.\n   * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n   * such as `USD` for the US dollar and `EUR` for the euro.\n   * @param display The format for the currency indicator. One of the following:\n   *   - `code`: Show the code (such as `USD`).\n   *   - `symbol`(default): Show the symbol (such as `$`).\n   *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n   * currency.\n   * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n   * locale has no narrow symbol, uses the standard symbol for the locale.\n   *   - String: Use the given string value instead of a code or a symbol.\n   * For example, an empty string will suppress the currency & symbol.\n   *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n   *\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `0`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `3`.\n   * If not provided, the number will be formatted with the proper amount of digits,\n   * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n   * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n   */\n  transform(\n      value: any, currencyCode?: string,\n      display: 'code'|'symbol'|'symbol-narrow'|string|boolean = 'symbol', digitsInfo?: string,\n      locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    if (typeof display === 'boolean') {\n      if (<any>console && <any>console.warn) {\n        console.warn(\n            `Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n      }\n      display = display ? 'symbol' : 'code';\n    }\n\n    let currency: string = currencyCode || 'USD';\n    if (display !== 'code') {\n      if (display === 'symbol' || display === 'symbol-narrow') {\n        currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n      } else {\n        currency = display;\n      }\n    }\n\n    try {\n      const num = strToNumber(value);\n      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error.message);\n    }\n  }\n}\n\nfunction isEmpty(value: any): boolean {\n  return value == null || value === '' || value !== value;\n}\n\n/**\n * Transforms a string into a number (if needed).\n */\nfunction strToNumber(value: number | string): number {\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n  if (typeof value !== 'number') {\n    throw new Error(`${value} is not a number`);\n  }\n  return value;\n}\n"],"sourceRoot":""}