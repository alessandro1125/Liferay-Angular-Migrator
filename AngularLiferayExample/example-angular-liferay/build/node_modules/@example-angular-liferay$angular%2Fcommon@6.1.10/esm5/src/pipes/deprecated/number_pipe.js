Liferay.Loader.define('@example-angular-liferay$angular/common@6.1.10/esm5/src/pipes/deprecated/number_pipe', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Inject, LOCALE_ID, Pipe } from '@angular/core';
    import { NUMBER_FORMAT_REGEXP, parseIntAutoRadix } from '../../i18n/format_number';
    import { NumberFormatStyle } from '../../i18n/locale_data_api';
    import { invalidPipeArgumentError } from '../invalid_pipe_argument_error';
    import { NumberFormatter } from './intl';
    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
        if (currency === void 0) {
            currency = null;
        }
        if (currencyAsSymbol === void 0) {
            currencyAsSymbol = false;
        }
        if (value == null) return null;
        // Convert strings to numbers
        value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;
        if (typeof value !== 'number') {
            throw invalidPipeArgumentError(pipe, value);
        }
        var minInt;
        var minFraction;
        var maxFraction;
        if (style !== NumberFormatStyle.Currency) {
            // rely on Intl default for currency
            minInt = 1;
            minFraction = 0;
            maxFraction = 3;
        }
        if (digits) {
            var parts = digits.match(NUMBER_FORMAT_REGEXP);
            if (parts === null) {
                throw new Error(digits + " is not a valid digit info for number pipes");
            }
            if (parts[1] != null) {
                // min integer digits
                minInt = parseIntAutoRadix(parts[1]);
            }
            if (parts[3] != null) {
                // min fraction digits
                minFraction = parseIntAutoRadix(parts[3]);
            }
            if (parts[5] != null) {
                // max fraction digits
                maxFraction = parseIntAutoRadix(parts[5]);
            }
        }
        return NumberFormatter.format(value, locale, style, {
            minimumIntegerDigits: minInt,
            minimumFractionDigits: minFraction,
            maximumFractionDigits: maxFraction,
            currency: currency,
            currencyAsSymbol: currencyAsSymbol
        });
    }
    /**
     * Formats a number as text. Group sizing and separator and other locale-specific
     * configurations are based on the active locale.
     *
     * where `expression` is a number:
     *  - `digitInfo` is a `string` which has a following format: <br>
     *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
     *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
     *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
     *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
     *
     * For more information on the acceptable range for each of these numbers and other
     * details see your native internationalization library.
     *
     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
     * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
     *
     * @usageNotes
     *
     * ### Example
     *
     * {@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}
     *
     * @ngModule CommonModule
     */
    var DeprecatedDecimalPipe = /** @class */function () {
        function DeprecatedDecimalPipe(_locale) {
            this._locale = _locale;
        }
        DeprecatedDecimalPipe_1 = DeprecatedDecimalPipe;
        DeprecatedDecimalPipe.prototype.transform = function (value, digits) {
            return formatNumber(DeprecatedDecimalPipe_1, this._locale, value, NumberFormatStyle.Decimal, digits);
        };
        var DeprecatedDecimalPipe_1;
        DeprecatedDecimalPipe = DeprecatedDecimalPipe_1 = tslib_1.__decorate([Pipe({ name: 'number' }), tslib_1.__param(0, Inject(LOCALE_ID)), tslib_1.__metadata("design:paramtypes", [String])], DeprecatedDecimalPipe);
        return DeprecatedDecimalPipe;
    }();
    export { DeprecatedDecimalPipe };
    /**
     * @ngModule CommonModule
     *
     * @description
     *
     * Formats a number as percentage according to locale rules.
     *
     * - `digitInfo` See {@link DecimalPipe} for detailed description.
     *
     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
     * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
     *
     * @usageNotes
     *
     * ### Example
     *
     * {@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}
     *
     *
     */
    var DeprecatedPercentPipe = /** @class */function () {
        function DeprecatedPercentPipe(_locale) {
            this._locale = _locale;
        }
        DeprecatedPercentPipe_1 = DeprecatedPercentPipe;
        DeprecatedPercentPipe.prototype.transform = function (value, digits) {
            return formatNumber(DeprecatedPercentPipe_1, this._locale, value, NumberFormatStyle.Percent, digits);
        };
        var DeprecatedPercentPipe_1;
        DeprecatedPercentPipe = DeprecatedPercentPipe_1 = tslib_1.__decorate([Pipe({ name: 'percent' }), tslib_1.__param(0, Inject(LOCALE_ID)), tslib_1.__metadata("design:paramtypes", [String])], DeprecatedPercentPipe);
        return DeprecatedPercentPipe;
    }();
    export { DeprecatedPercentPipe };
    /**
     * @ngModule CommonModule
     * @description
     *
     * Formats a number as currency using locale rules.
     *
     * Use `currency` to format a number as currency.
     *
     * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
     *    as `USD` for the US dollar and `EUR` for the euro.
     * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
     *   - `true`: use symbol (e.g. `$`).
     *   - `false`(default): use code (e.g. `USD`).
     * - `digitInfo` See {@link DecimalPipe} for detailed description.
     *
     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
     * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
     *
     * @usageNotes
     *
     * ### Example
     *
     * {@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}
     *
     *
     */
    var DeprecatedCurrencyPipe = /** @class */function () {
        function DeprecatedCurrencyPipe(_locale) {
            this._locale = _locale;
        }
        DeprecatedCurrencyPipe_1 = DeprecatedCurrencyPipe;
        DeprecatedCurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
            if (currencyCode === void 0) {
                currencyCode = 'USD';
            }
            if (symbolDisplay === void 0) {
                symbolDisplay = false;
            }
            return formatNumber(DeprecatedCurrencyPipe_1, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
        };
        var DeprecatedCurrencyPipe_1;
        DeprecatedCurrencyPipe = DeprecatedCurrencyPipe_1 = tslib_1.__decorate([Pipe({ name: 'currency' }), tslib_1.__param(0, Inject(LOCALE_ID)), tslib_1.__metadata("design:paramtypes", [String])], DeprecatedCurrencyPipe);
        return DeprecatedCurrencyPipe;
    }();
    export { DeprecatedCurrencyPipe };
});
//# sourceMappingURL=number_pipe.js.map