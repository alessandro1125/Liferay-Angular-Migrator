{"version":3,"sources":["../../../../../../../../../../packages/common/src/pipes/i18n_plural_pipe.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAmB,IAAnB,QAA6C,eAA7C;AACA,aAAQ,cAAR,EAAwB,iBAAxB,QAAgD,sBAAhD;AACA,aAAQ,wBAAR,QAAuC,+BAAvC;AAEA,QAAM,wBAAgC,IAAtC;AAEA;;;;;;;;;;;;;;AAeA,QAAA,iBAAA,aAAA,YAAA;AACE,iBAAA,cAAA,CAAoB,aAApB,EAAiD;AAA7B,iBAAA,aAAA,GAAA,aAAA;AAAiC;2BAD1C,c;AAGX;;;;;;;AAOA,uBAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAyB,SAAzB,EAA+D,MAA/D,EAA8E;AAC5E,gBAAI,SAAS,IAAb,EAAmB,OAAO,EAAP;AAEnB,gBAAI,OAAO,SAAP,KAAqB,QAArB,IAAiC,cAAc,IAAnD,EAAyD;AACvD,sBAAM,yBAAyB,gBAAzB,EAAyC,SAAzC,CAAN;AACD;AAED,gBAAM,MAAM,kBAAkB,KAAlB,EAAyB,OAAO,IAAP,CAAY,SAAZ,CAAzB,EAAiD,KAAK,aAAtD,EAAqE,MAArE,CAAZ;AAEA,mBAAO,UAAU,GAAV,EAAe,OAAf,CAAuB,qBAAvB,EAA8C,MAAM,QAAN,EAA9C,CAAP;AACD,SAVD;;AAVW,yBAAc,mBAAA,QAAA,UAAA,CAAA,CAD1B,KAAK,EAAC,MAAM,YAAP,EAAqB,MAAM,IAA3B,EAAL,CAC0B,E,yCACU,c,EADV,CAAA,EAAd,cAAc,CAAd;AAqBb,eAAA,cAAA;AAAC,KArBD,EAAA;aAAa,c","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst _INTERPOLATION_REGEXP: RegExp = /#/g;\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @experimental\n */\n@Pipe({name: 'i18nPlural', pure: true})\nexport class I18nPluralPipe implements PipeTransform {\n  constructor(private _localization: NgLocalization) {}\n\n  /**\n   * @param value the number to be formatted\n   * @param pluralMap an object that mimics the ICU format, see\n   * http://userguide.icu-project.org/formatparse/messages.\n   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n   * default).\n   */\n  transform(value: number, pluralMap: {[count: string]: string}, locale?: string): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\n}\n"],"sourceRoot":""}