Liferay.Loader.define('@example-angular-liferay$angular/common@6.1.10/esm5/src/pipes/i18n_plural_pipe', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Pipe } from '@angular/core';
    import { NgLocalization, getPluralCategory } from '../i18n/localization';
    import { invalidPipeArgumentError } from './invalid_pipe_argument_error';
    var _INTERPOLATION_REGEXP = /#/g;
    /**
     * @ngModule CommonModule
     * @description
     *
     * Maps a value to a string that pluralizes the value according to locale rules.
     *
     * @usageNotes
     *
     * ### Example
     *
     * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
     *
     * @experimental
     */
    var I18nPluralPipe = /** @class */function () {
        function I18nPluralPipe(_localization) {
            this._localization = _localization;
        }
        I18nPluralPipe_1 = I18nPluralPipe;
        /**
         * @param value the number to be formatted
         * @param pluralMap an object that mimics the ICU format, see
         * http://userguide.icu-project.org/formatparse/messages.
         * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
         * default).
         */
        I18nPluralPipe.prototype.transform = function (value, pluralMap, locale) {
            if (value == null) return '';
            if (typeof pluralMap !== 'object' || pluralMap === null) {
                throw invalidPipeArgumentError(I18nPluralPipe_1, pluralMap);
            }
            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
        };
        var I18nPluralPipe_1;
        I18nPluralPipe = I18nPluralPipe_1 = tslib_1.__decorate([Pipe({ name: 'i18nPlural', pure: true }), tslib_1.__metadata("design:paramtypes", [NgLocalization])], I18nPluralPipe);
        return I18nPluralPipe;
    }();
    export { I18nPluralPipe };
});
//# sourceMappingURL=i18n_plural_pipe.js.map