{"version":3,"sources":["../../../../../../../../../../packages/common/src/pipes/keyvalue_pipe.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAA+D,eAA/D,EAAgF,IAAhF,QAA0G,eAA1G;AAEA,aAAA,gBAAA,CAAgC,GAAhC,EAAwC,KAAxC,EAAgD;AAC9C,eAAO,EAAC,KAAK,GAAN,EAAW,OAAO,KAAlB,EAAP;AACD;AAWD;;;;;;;;;;;;;;;;;;AAmBA,QAAA,eAAA,aAAA,YAAA;AACE,iBAAA,YAAA,CAA6B,OAA7B,EAAqD;AAAxB,iBAAA,OAAA,GAAA,OAAA;AAA4B;AAkBzD,qBAAA,SAAA,CAAA,SAAA,GAAA,UACI,KADJ,EAEI,SAFJ,EAEmF;AAFnF,gBAAA,QAAA,IAAA;AAEI,gBAAA,cAAA,KAAA,CAAA,EAAA;AAAA,4BAAA,iBAAA;AAA+E;AAEjF,gBAAI,CAAC,KAAD,IAAW,EAAE,iBAAiB,GAAnB,KAA2B,OAAO,KAAP,KAAiB,QAA3D,EAAsE;AACpE,uBAAO,IAAP;AACD;AAED,gBAAI,CAAC,KAAK,MAAV,EAAkB;AAChB;AACA,qBAAK,MAAL,GAAc,KAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,EAAyB,MAAzB,EAAd;AACD;AAED,gBAAM,gBAA4C,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,CAAlD;AAEA,gBAAI,aAAJ,EAAmB;AACjB,qBAAK,SAAL,GAAiB,EAAjB;AACA,8BAAc,WAAd,CAA0B,UAAC,CAAD,EAA8B;AACtD,0BAAK,SAAL,CAAe,IAAf,CAAoB,iBAAiB,EAAE,GAAnB,EAAwB,EAAE,YAA1B,CAApB;AACD,iBAFD;AAGA,qBAAK,SAAL,CAAe,IAAf,CAAoB,SAApB;AACD;AACD,mBAAO,KAAK,SAAZ;AACD,SAvBD;AAnBW,uBAAY,QAAA,UAAA,CAAA,CADxB,KAAK,EAAC,MAAM,UAAP,EAAmB,MAAM,KAAzB,EAAL,CACwB,E,yCACe,e,EADf,CAAA,EAAZ,YAAY,CAAZ;AA2Cb,eAAA,YAAA;AAAC,KA3CD,EAAA;aAAa,Y;AA6Cb,WAAM,SAAA,iBAAA,CACF,SADE,EACyB,SADzB,EACkD;AACtD,YAAM,IAAI,UAAU,GAApB;AACA,YAAM,IAAI,UAAU,GAApB;AACA;AACA,YAAI,MAAM,CAAV,EAAa,OAAO,CAAP;AACb;AACA,YAAI,MAAM,SAAV,EAAqB,OAAO,CAAP;AACrB,YAAI,MAAM,SAAV,EAAqB,OAAO,CAAC,CAAR;AACrB;AACA,YAAI,MAAM,IAAV,EAAgB,OAAO,CAAP;AAChB,YAAI,MAAM,IAAV,EAAgB,OAAO,CAAC,CAAR;AAChB,YAAI,OAAO,CAAP,IAAY,QAAZ,IAAwB,OAAO,CAAP,IAAY,QAAxC,EAAkD;AAChD,mBAAO,IAAI,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;AACD;AACD,YAAI,OAAO,CAAP,IAAY,QAAZ,IAAwB,OAAO,CAAP,IAAY,QAAxC,EAAkD;AAChD,mBAAO,IAAI,CAAX;AACD;AACD,YAAI,OAAO,CAAP,IAAY,SAAZ,IAAyB,OAAO,CAAP,IAAY,SAAzC,EAAoD;AAClD,mBAAO,IAAI,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;AACD;AACD;AACA,YAAM,UAAU,OAAO,CAAP,CAAhB;AACA,YAAM,UAAU,OAAO,CAAP,CAAhB;AACA,eAAO,WAAW,OAAX,GAAqB,CAArB,GAAyB,UAAU,OAAV,GAAoB,CAAC,CAArB,GAAyB,CAAzD;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map and be iterated by ngFor with the use of this keyvalue\n * pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n */\n@Pipe({name: 'keyvalue', pure: false})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  // TODO(issue/24571): remove '!'.\n  private differ !: KeyValueDiffer<any, any>;\n  // TODO(issue/24571): remove '!'.\n  private keyValues !: Array<KeyValue<any, any>>;\n\n  transform<K, V>(input: null, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): null;\n  transform<V>(\n      input: {[key: string]: V}|Map<string, V>,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<V>(\n      input: {[key: number]: V}|Map<number, V>,\n      compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number):\n      Array<KeyValue<number, V>>;\n  transform<K, V>(input: Map<K, V>, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number):\n      Array<KeyValue<K, V>>;\n  transform<K, V>(\n      input: null|{[key: string]: V, [key: number]: V}|Map<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue !));\n      });\n      this.keyValues.sort(compareFn);\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n"],"sourceRoot":""}