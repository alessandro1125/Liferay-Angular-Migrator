{"version":3,"sources":["../../../../../../../../../../packages/common/src/i18n/format_date.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormStyle, FormatWidth, NumberSymbol, Time, TranslationWidth, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleId, getLocaleMonthNames, getLocaleNumberSymbol, getLocaleTimeFormat} from './locale_data_api';\n\nexport const ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\nconst NAMED_FORMATS: {[localeId: string]: {[format: string]: string}} = {};\nconst DATE_FORMATS_SPLIT =\n    /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n\nenum ZoneWidth {\n  Short,\n  ShortGMT,\n  Long,\n  Extended\n}\n\nenum DateType {\n  FullYear,\n  Month,\n  Date,\n  Hours,\n  Minutes,\n  Seconds,\n  FractionalSeconds,\n  Day\n}\n\nenum TranslationType {\n  DayPeriods,\n  Days,\n  Months,\n  Eras\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `value` is a Date, a number (milliseconds since UTC epoch) or an ISO string\n *   (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. See {@link DatePipe} for more\n *   details.\n * - `locale` is a `string` defining the locale to use.\n * - `timezone` to be used for formatting. It understands UTC/GMT and the continental US time zone\n *   abbreviations, but for general use, use a time zone offset (e.g. `'+0430'`).\n *   If not specified, host system settings are used.\n *\n * See {@link DatePipe} for more details.\n */\nexport function formatDate(\n    value: string | number | Date, format: string, locale: string, timezone?: string): string {\n  let date = toDate(value);\n  const namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n\n  let parts: string[] = [];\n  let match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n\n  let dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  let text = '';\n  parts.forEach(value => {\n    const dateFormatter = getDateFormatter(value);\n    text += dateFormatter ?\n        dateFormatter(date, locale, dateTimezoneOffset) :\n        value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n  });\n\n  return text;\n}\n\nfunction getNamedFormat(locale: string, format: string): string {\n  const localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n\n  let formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const shortTime = getNamedFormat(locale, 'shortTime');\n      const shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n      break;\n    case 'medium':\n      const mediumTime = getNamedFormat(locale, 'mediumTime');\n      const mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n      break;\n    case 'long':\n      const longTime = getNamedFormat(locale, 'longTime');\n      const longDate = getNamedFormat(locale, 'longDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n      break;\n    case 'full':\n      const fullTime = getNamedFormat(locale, 'fullTime');\n      const fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\n\nfunction formatDateTime(str: string, opt_values: string[]) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\n\nfunction padNumber(\n    num: number, digits: number, minusSign = '-', trim?: boolean, negWrap?: boolean): string {\n  let neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let strNum = String(num);\n  while (strNum.length < digits) {\n    strNum = '0' + strNum;\n  }\n  if (trim) {\n    strNum = strNum.substr(strNum.length - digits);\n  }\n  return neg + strNum;\n}\n\nfunction formatFractionalSeconds(milliseconds: number, digits: number): string {\n  const strMs = padNumber(milliseconds, 3);\n  return strMs.substr(0, digits);\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n */\nfunction dateGetter(\n    name: DateType, size: number, offset: number = 0, trim = false,\n    negWrap = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    let part = getDatePart(name, date);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n\n    if (name === DateType.Hours) {\n      if (part === 0 && offset === -12) {\n        part = 12;\n      }\n    } else if (name === DateType.FractionalSeconds) {\n      return formatFractionalSeconds(part, size);\n    }\n\n    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    return padNumber(part, size, localeMinus, trim, negWrap);\n  };\n}\n\nfunction getDatePart(part: DateType, date: Date): number {\n  switch (part) {\n    case DateType.FullYear:\n      return date.getFullYear();\n    case DateType.Month:\n      return date.getMonth();\n    case DateType.Date:\n      return date.getDate();\n    case DateType.Hours:\n      return date.getHours();\n    case DateType.Minutes:\n      return date.getMinutes();\n    case DateType.Seconds:\n      return date.getSeconds();\n    case DateType.FractionalSeconds:\n      return date.getMilliseconds();\n    case DateType.Day:\n      return date.getDay();\n    default:\n      throw new Error(`Unknown DateType value \"${part}\".`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n */\nfunction dateStrGetter(\n    name: TranslationType, width: TranslationWidth, form: FormStyle = FormStyle.Format,\n    extended = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n\n/**\n * Returns the locale translation of a date for a given form, type and width\n */\nfunction getDateTranslation(\n    date: Date, locale: string, name: TranslationType, width: TranslationWidth, form: FormStyle,\n    extended: boolean) {\n  switch (name) {\n    case TranslationType.Months:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case TranslationType.Days:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case TranslationType.DayPeriods:\n      const currentHours = date.getHours();\n      const currentMinutes = date.getMinutes();\n      if (extended) {\n        const rules = getLocaleExtraDayPeriodRules(locale);\n        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        let result;\n        rules.forEach((rule: Time | [Time, Time], index: number) => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const {hours: hoursFrom, minutes: minutesFrom} = rule[0];\n            const {hours: hoursTo, minutes: minutesTo} = rule[1];\n            if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\n                (currentHours < hoursTo ||\n                 (currentHours === hoursTo && currentMinutes < minutesTo))) {\n              result = dayPeriods[index];\n            }\n          } else {  // noon or midnight\n            const {hours, minutes} = rule;\n            if (hours === currentHours && minutes === currentMinutes) {\n              result = dayPeriods[index];\n            }\n          }\n        });\n        if (result) {\n          return result;\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, <TranslationWidth>width)[currentHours < 12 ? 0 : 1];\n    case TranslationType.Eras:\n      return getLocaleEraNames(locale, <TranslationWidth>width)[date.getFullYear() <= 0 ? 0 : 1];\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected: never = name;\n      throw new Error(`unexpected translation type ${unexpected}`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n */\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\n  return function(date: Date, locale: string, offset: number) {\n    const zone = -1 * offset;\n    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case ZoneWidth.Short:\n        return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.ShortGMT:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n      case ZoneWidth.Long:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.Extended:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n              padNumber(Math.abs(zone % 60), 2, minusSign);\n        }\n      default:\n        throw new Error(`Unknown zone width \"${width}\"`);\n    }\n  };\n}\n\nconst JANUARY = 0;\nconst THURSDAY = 4;\nfunction getFirstThursdayOfYear(year: number) {\n  const firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n  return new Date(\n      year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n\nfunction getThursdayThisWeek(datetime: Date) {\n  return new Date(\n      datetime.getFullYear(), datetime.getMonth(),\n      datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\n  return function(date: Date, locale: string) {\n    let result;\n    if (monthBased) {\n      const nbDaysBefore1stDayOfMonth =\n          new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const firstThurs = getFirstThursdayOfYear(date.getFullYear());\n      const thisThurs = getThursdayThisWeek(date);\n      const diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8);  // 6.048e8 ms per week\n    }\n\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n\ntype DateFormatter = (date: Date, locale: string, offset?: number) => string;\n\nconst DATE_FORMATS: {[format: string]: DateFormatter} = {};\n\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x\nfunction getDateFormatter(format: string): DateFormatter|null {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n      break;\n\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n      break;\n\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(DateType.Month, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(DateType.Month, 2, 1);\n      break;\n\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n      break;\n\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'LLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'LLLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(DateType.Date, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(DateType.Date, 2);\n      break;\n\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n      break;\n\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n      break;\n\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n      break;\n\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n      break;\n    case 'BBBB':\n      formatter =\n          dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n      break;\n\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(DateType.Hours, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(DateType.Hours, 2, -12);\n      break;\n\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(DateType.Hours, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(DateType.Hours, 2);\n      break;\n\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(DateType.Minutes, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(DateType.Minutes, 2);\n      break;\n\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(DateType.Seconds, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(DateType.Seconds, 2);\n      break;\n\n    // Fractional second\n    case 'S':\n      formatter = dateGetter(DateType.FractionalSeconds, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(DateType.FractionalSeconds, 2);\n      break;\n    case 'SSS':\n      formatter = dateGetter(DateType.FractionalSeconds, 3);\n      break;\n\n\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Short);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Extended);\n      break;\n\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(ZoneWidth.Long);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\n\nfunction timezoneToOffset(timezone: string, fallback: number): number {\n  // Support: IE 9-11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n\nfunction addDateMinutes(date: Date, minutes: number) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\n  const reverseValue = reverse ? -1 : 1;\n  const dateTimezoneOffset = date.getTimezoneOffset();\n  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nexport function toDate(value: string | number | Date): Date {\n  if (isDate(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number' && !isNaN(value)) {\n    return new Date(value);\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n\n    const parsedNb = parseFloat(value);\n\n    // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n    if (!isNaN(value as any - parsedNb)) {\n      return new Date(parsedNb);\n    }\n\n    if (/^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n      /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n      before Date creation to avoid time offset and errors in the new Date.\n      If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      date, some browsers (e.g. IE 9) will throw an invalid Date error.\n      If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      is applied.\n      Note: ISO months are 0 for January, 1 for February, ... */\n      const [y, m, d] = value.split('-').map((val: string) => +val);\n      return new Date(y, m - 1, d);\n    }\n\n    let match: RegExpMatchArray|null;\n    if (match = value.match(ISO8601_DATE_REGEX)) {\n      return isoStringToDate(match);\n    }\n  }\n\n  const date = new Date(value as any);\n  if (!isDate(date)) {\n    throw new Error(`Unable to convert \"${value}\" into a date`);\n  }\n  return date;\n}\n\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nexport function isoStringToDate(match: RegExpMatchArray): Date {\n  const date = new Date(0);\n  let tzHour = 0;\n  let tzMin = 0;\n\n  // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  // if there is a timezone defined like \"+01:00\" or \"+0100\"\n  if (match[9]) {\n    tzHour = Number(match[9] + match[10]);\n    tzMin = Number(match[9] + match[11]);\n  }\n  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n  const h = Number(match[4] || 0) - tzHour;\n  const m = Number(match[5] || 0) - tzMin;\n  const s = Number(match[6] || 0);\n  const ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n\nexport function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n"],"sourceRoot":""}