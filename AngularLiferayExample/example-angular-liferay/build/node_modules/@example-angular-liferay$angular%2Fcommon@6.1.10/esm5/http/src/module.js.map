{"version":3,"sources":["../../../../../../../../../../../packages/common/http/src/module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Injector, ModuleWithProviders, NgModule} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler, NoopInterceptor} from './interceptor';\nimport {JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {BrowserXhr, HttpXhrBackend, XhrFactory} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME} from './xsrf';\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[] | null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n *\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    {provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN'},\n    {provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN'},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        {provide: HttpXsrfInterceptor, useClass: NoopInterceptor},\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        options.cookieName ? {provide: XSRF_COOKIE_NAME, useValue: options.cookieName} : [],\n        options.headerName ? {provide: XSRF_HEADER_NAME, useValue: options.headerName} : [],\n      ],\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\n@NgModule({\n  /**\n   * Optional configuration for XSRF protection.\n   */\n  imports: [\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN',\n    }),\n  ],\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    BrowserXhr,\n    {provide: XhrFactory, useExisting: BrowserXhr},\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n *\n */\n@NgModule({\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true},\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n"],"sourceRoot":""}