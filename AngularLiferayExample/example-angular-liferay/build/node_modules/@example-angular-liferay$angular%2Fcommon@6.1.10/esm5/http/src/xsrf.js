Liferay.Loader.define('@example-angular-liferay$angular/common@6.1.10/esm5/http/src/xsrf', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { DOCUMENT, ÉµparseCookieValue as parseCookieValue } from '@angular/common';
    import { Inject, Injectable, InjectionToken, PLATFORM_ID } from '@angular/core';
    export var XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');
    export var XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');
    /**
     * Retrieves the current XSRF token to use with the next outgoing request.
     *
     *
     */
    var HttpXsrfTokenExtractor = /** @class */function () {
        function HttpXsrfTokenExtractor() {}
        return HttpXsrfTokenExtractor;
    }();
    export { HttpXsrfTokenExtractor };
    /**
     * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
     */
    var HttpXsrfCookieExtractor = /** @class */function () {
        function HttpXsrfCookieExtractor(doc, platform, cookieName) {
            this.doc = doc;
            this.platform = platform;
            this.cookieName = cookieName;
            this.lastCookieString = '';
            this.lastToken = null;
            /**
             * @internal for testing
             */
            this.parseCount = 0;
        }
        HttpXsrfCookieExtractor.prototype.getToken = function () {
            if (this.platform === 'server') {
                return null;
            }
            var cookieString = this.doc.cookie || '';
            if (cookieString !== this.lastCookieString) {
                this.parseCount++;
                this.lastToken = parseCookieValue(cookieString, this.cookieName);
                this.lastCookieString = cookieString;
            }
            return this.lastToken;
        };
        HttpXsrfCookieExtractor = tslib_1.__decorate([Injectable(), tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__param(1, Inject(PLATFORM_ID)), tslib_1.__param(2, Inject(XSRF_COOKIE_NAME)), tslib_1.__metadata("design:paramtypes", [Object, String, String])], HttpXsrfCookieExtractor);
        return HttpXsrfCookieExtractor;
    }();
    export { HttpXsrfCookieExtractor };
    /**
     * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
     */
    var HttpXsrfInterceptor = /** @class */function () {
        function HttpXsrfInterceptor(tokenService, headerName) {
            this.tokenService = tokenService;
            this.headerName = headerName;
        }
        HttpXsrfInterceptor.prototype.intercept = function (req, next) {
            var lcUrl = req.url.toLowerCase();
            // Skip both non-mutating requests and absolute URLs.
            // Non-mutating requests don't require a token, and absolute URLs require special handling
            // anyway as the cookie set
            // on our origin is not the same as the token expected by another origin.
            if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {
                return next.handle(req);
            }
            var token = this.tokenService.getToken();
            // Be careful not to overwrite an existing header of the same name.
            if (token !== null && !req.headers.has(this.headerName)) {
                req = req.clone({ headers: req.headers.set(this.headerName, token) });
            }
            return next.handle(req);
        };
        HttpXsrfInterceptor = tslib_1.__decorate([Injectable(), tslib_1.__param(1, Inject(XSRF_HEADER_NAME)), tslib_1.__metadata("design:paramtypes", [HttpXsrfTokenExtractor, String])], HttpXsrfInterceptor);
        return HttpXsrfInterceptor;
    }();
    export { HttpXsrfInterceptor };
});
//# sourceMappingURL=xsrf.js.map