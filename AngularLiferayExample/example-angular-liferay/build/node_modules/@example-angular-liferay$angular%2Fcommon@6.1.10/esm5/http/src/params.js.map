{"version":3,"sources":["../../../../../../../../../../../packages/common/http/src/params.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n *\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n *\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  encodeValue(value: string): string { return standardEncoding(value); }\n\n  decodeKey(key: string): string { return decodeURIComponent(key); }\n\n  decodeValue(value: string) { return decodeURIComponent(value); }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\ninterface Update {\n  param: string;\n  value?: string;\n  op: 'a'|'d'|'s';\n}\n\n/** Options used to construct an `HttpParams` instance. */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP params in URL-query-string format. Mutually exclusive with\n   * `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP params. Mutally exclusive with `fromString`. */\n  fromObject?: {[param: string]: string | string[]};\n\n  /** Encoding codec used to parse and serialize the params. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n *\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        this.map !.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Check whether the body has one or more values for the given parameter name.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map !.has(param);\n  }\n\n  /**\n   * Get the first value for the given parameter name, or `null` if it's not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map !.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Get all values for the given parameter name, or `null` if it's not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map !.get(param) || null;\n  }\n\n  /**\n   * Get all the parameter names for this body.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map !.keys());\n  }\n\n  /**\n   * Construct a new body with an appended value for the given parameter name.\n   */\n  append(param: string, value: string): HttpParams { return this.clone({param, value, op: 'a'}); }\n\n  /**\n   * Construct a new body with a new value for the given parameter name.\n   */\n  set(param: string, value: string): HttpParams { return this.clone({param, value, op: 's'}); }\n\n  /**\n   * Construct a new body with either the given value for the given parameter\n   * removed, if a value is given, or all values for the given parameter removed\n   * if not.\n   */\n  delete (param: string, value?: string): HttpParams { return this.clone({param, value, op: 'd'}); }\n\n  /**\n   * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          return this.map !.get(key) !.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        .join('&');\n  }\n\n  private clone(update: Update): HttpParams {\n    const clone = new HttpParams({ encoder: this.encoder } as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat([update]);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map !.set(key, this.cloneFrom !.map !.get(key) !));\n      this.updates !.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map !.get(update.param) : undefined) || [];\n            base.push(update.value !);\n            this.map !.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map !.get(update.param) || [];\n              const idx = base.indexOf(update.value);\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map !.set(update.param, base);\n              } else {\n                this.map !.delete(update.param);\n              }\n            } else {\n              this.map !.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = null;\n    }\n  }\n}\n"],"sourceRoot":""}