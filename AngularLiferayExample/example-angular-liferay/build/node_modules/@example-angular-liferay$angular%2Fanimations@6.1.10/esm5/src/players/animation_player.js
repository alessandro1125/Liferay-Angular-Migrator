Liferay.Loader.define('@example-angular-liferay$angular/animations@6.1.10/esm5/src/players/animation_player', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { scheduleMicroTask } from '../util';
    /**
     * An empty programmatic controller for reusable animations.
     * Used internally when animations are disabled, to avoid
     * checking for the null case when an animation player is expected.
     *
     * @see `animate()`
     * @see `AnimationPlayer`
     * @see `GroupPlayer`
     *
     */
    var NoopAnimationPlayer = /** @class */function () {
        function NoopAnimationPlayer(duration, delay) {
            if (duration === void 0) {
                duration = 0;
            }
            if (delay === void 0) {
                delay = 0;
            }
            this._onDoneFns = [];
            this._onStartFns = [];
            this._onDestroyFns = [];
            this._started = false;
            this._destroyed = false;
            this._finished = false;
            this.parentPlayer = null;
            this.totalTime = duration + delay;
        }
        NoopAnimationPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                this._onDoneFns.forEach(function (fn) {
                    return fn();
                });
                this._onDoneFns = [];
            }
        };
        NoopAnimationPlayer.prototype.onStart = function (fn) {
            this._onStartFns.push(fn);
        };
        NoopAnimationPlayer.prototype.onDone = function (fn) {
            this._onDoneFns.push(fn);
        };
        NoopAnimationPlayer.prototype.onDestroy = function (fn) {
            this._onDestroyFns.push(fn);
        };
        NoopAnimationPlayer.prototype.hasStarted = function () {
            return this._started;
        };
        NoopAnimationPlayer.prototype.init = function () {};
        NoopAnimationPlayer.prototype.play = function () {
            if (!this.hasStarted()) {
                this._onStart();
                this.triggerMicrotask();
            }
            this._started = true;
        };
        /** @internal */
        NoopAnimationPlayer.prototype.triggerMicrotask = function () {
            var _this = this;
            scheduleMicroTask(function () {
                return _this._onFinish();
            });
        };
        NoopAnimationPlayer.prototype._onStart = function () {
            this._onStartFns.forEach(function (fn) {
                return fn();
            });
            this._onStartFns = [];
        };
        NoopAnimationPlayer.prototype.pause = function () {};
        NoopAnimationPlayer.prototype.restart = function () {};
        NoopAnimationPlayer.prototype.finish = function () {
            this._onFinish();
        };
        NoopAnimationPlayer.prototype.destroy = function () {
            if (!this._destroyed) {
                this._destroyed = true;
                if (!this.hasStarted()) {
                    this._onStart();
                }
                this.finish();
                this._onDestroyFns.forEach(function (fn) {
                    return fn();
                });
                this._onDestroyFns = [];
            }
        };
        NoopAnimationPlayer.prototype.reset = function () {};
        NoopAnimationPlayer.prototype.setPosition = function (position) {};
        NoopAnimationPlayer.prototype.getPosition = function () {
            return 0;
        };
        /** @internal */
        NoopAnimationPlayer.prototype.triggerCallback = function (phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
                return fn();
            });
            methods.length = 0;
        };
        return NoopAnimationPlayer;
    }();
    export { NoopAnimationPlayer };
});
//# sourceMappingURL=animation_player.js.map