Liferay.Loader.define('@example-angular-liferay$angular/animations@6.1.10/esm5/src/players/animation_group_player', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { scheduleMicroTask } from '../util';
    /**
     * A programmatic controller for a group of reusable animations.
     * Used internally to control animations.
     *
     * @see `AnimationPlayer`
     * @see `{@link animations/group group()}`
     *
     */
    var AnimationGroupPlayer = /** @class */function () {
        function AnimationGroupPlayer(_players) {
            var _this = this;
            this._onDoneFns = [];
            this._onStartFns = [];
            this._finished = false;
            this._started = false;
            this._destroyed = false;
            this._onDestroyFns = [];
            this.parentPlayer = null;
            this.totalTime = 0;
            this.players = _players;
            var doneCount = 0;
            var destroyCount = 0;
            var startCount = 0;
            var total = this.players.length;
            if (total == 0) {
                scheduleMicroTask(function () {
                    return _this._onFinish();
                });
            } else {
                this.players.forEach(function (player) {
                    player.onDone(function () {
                        if (++doneCount == total) {
                            _this._onFinish();
                        }
                    });
                    player.onDestroy(function () {
                        if (++destroyCount == total) {
                            _this._onDestroy();
                        }
                    });
                    player.onStart(function () {
                        if (++startCount == total) {
                            _this._onStart();
                        }
                    });
                });
            }
            this.totalTime = this.players.reduce(function (time, player) {
                return Math.max(time, player.totalTime);
            }, 0);
        }
        AnimationGroupPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                this._onDoneFns.forEach(function (fn) {
                    return fn();
                });
                this._onDoneFns = [];
            }
        };
        AnimationGroupPlayer.prototype.init = function () {
            this.players.forEach(function (player) {
                return player.init();
            });
        };
        AnimationGroupPlayer.prototype.onStart = function (fn) {
            this._onStartFns.push(fn);
        };
        AnimationGroupPlayer.prototype._onStart = function () {
            if (!this.hasStarted()) {
                this._started = true;
                this._onStartFns.forEach(function (fn) {
                    return fn();
                });
                this._onStartFns = [];
            }
        };
        AnimationGroupPlayer.prototype.onDone = function (fn) {
            this._onDoneFns.push(fn);
        };
        AnimationGroupPlayer.prototype.onDestroy = function (fn) {
            this._onDestroyFns.push(fn);
        };
        AnimationGroupPlayer.prototype.hasStarted = function () {
            return this._started;
        };
        AnimationGroupPlayer.prototype.play = function () {
            if (!this.parentPlayer) {
                this.init();
            }
            this._onStart();
            this.players.forEach(function (player) {
                return player.play();
            });
        };
        AnimationGroupPlayer.prototype.pause = function () {
            this.players.forEach(function (player) {
                return player.pause();
            });
        };
        AnimationGroupPlayer.prototype.restart = function () {
            this.players.forEach(function (player) {
                return player.restart();
            });
        };
        AnimationGroupPlayer.prototype.finish = function () {
            this._onFinish();
            this.players.forEach(function (player) {
                return player.finish();
            });
        };
        AnimationGroupPlayer.prototype.destroy = function () {
            this._onDestroy();
        };
        AnimationGroupPlayer.prototype._onDestroy = function () {
            if (!this._destroyed) {
                this._destroyed = true;
                this._onFinish();
                this.players.forEach(function (player) {
                    return player.destroy();
                });
                this._onDestroyFns.forEach(function (fn) {
                    return fn();
                });
                this._onDestroyFns = [];
            }
        };
        AnimationGroupPlayer.prototype.reset = function () {
            this.players.forEach(function (player) {
                return player.reset();
            });
            this._destroyed = false;
            this._finished = false;
            this._started = false;
        };
        AnimationGroupPlayer.prototype.setPosition = function (p) {
            var timeAtPosition = p * this.totalTime;
            this.players.forEach(function (player) {
                var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
                player.setPosition(position);
            });
        };
        AnimationGroupPlayer.prototype.getPosition = function () {
            var min = 0;
            this.players.forEach(function (player) {
                var p = player.getPosition();
                min = Math.min(p, min);
            });
            return min;
        };
        AnimationGroupPlayer.prototype.beforeDestroy = function () {
            this.players.forEach(function (player) {
                if (player.beforeDestroy) {
                    player.beforeDestroy();
                }
            });
        };
        /** @internal */
        AnimationGroupPlayer.prototype.triggerCallback = function (phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
                return fn();
            });
            methods.length = 0;
        };
        return AnimationGroupPlayer;
    }();
    export { AnimationGroupPlayer };
});
//# sourceMappingURL=animation_group_player.js.map