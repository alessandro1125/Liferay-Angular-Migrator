{"version":3,"sources":["../../../../../../../../../../packages/animations/src/players/animation_group_player.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,iBAAR,QAAgC,SAAhC;AAGA;;;;;;;;AAQA,QAAA,uBAAA,aAAA,YAAA;AAYE,iBAAA,oBAAA,CAAY,QAAZ,EAAuC;AAAvC,gBAAA,QAAA,IAAA;AAXQ,iBAAA,UAAA,GAAyB,EAAzB;AACA,iBAAA,WAAA,GAA0B,EAA1B;AACA,iBAAA,SAAA,GAAY,KAAZ;AACA,iBAAA,QAAA,GAAW,KAAX;AACA,iBAAA,UAAA,GAAa,KAAb;AACA,iBAAA,aAAA,GAA4B,EAA5B;AAED,iBAAA,YAAA,GAAqC,IAArC;AACA,iBAAA,SAAA,GAAoB,CAApB;AAIL,iBAAK,OAAL,GAAe,QAAf;AACA,gBAAI,YAAY,CAAhB;AACA,gBAAI,eAAe,CAAnB;AACA,gBAAI,aAAa,CAAjB;AACA,gBAAM,QAAQ,KAAK,OAAL,CAAa,MAA3B;AAEA,gBAAI,SAAS,CAAb,EAAgB;AACd,kCAAkB,YAAA;AAAM,2BAAA,MAAA,SAAA,EAAA;AAAgB,iBAAxC;AACD,aAFD,MAEO;AACL,qBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AACzB,2BAAO,MAAP,CAAc,YAAA;AACZ,4BAAI,EAAE,SAAF,IAAe,KAAnB,EAA0B;AACxB,kCAAK,SAAL;AACD;AACF,qBAJD;AAKA,2BAAO,SAAP,CAAiB,YAAA;AACf,4BAAI,EAAE,YAAF,IAAkB,KAAtB,EAA6B;AAC3B,kCAAK,UAAL;AACD;AACF,qBAJD;AAKA,2BAAO,OAAP,CAAe,YAAA;AACb,4BAAI,EAAE,UAAF,IAAgB,KAApB,EAA2B;AACzB,kCAAK,QAAL;AACD;AACF,qBAJD;AAKD,iBAhBD;AAiBD;AAED,iBAAK,SAAL,GAAiB,KAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,IAAD,EAAO,MAAP,EAAa;AAAK,uBAAA,KAAK,GAAL,CAAS,IAAT,EAAe,OAAf,SAAA,CAAA;AAAgC,aAAtE,EAAwE,CAAxE,CAAjB;AACD;AAEO,6BAAA,SAAA,CAAA,SAAA,GAAR,YAAA;AACE,gBAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,qBAAK,SAAL,GAAiB,IAAjB;AACA,qBAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAA,EAAA,EAAE;AAAI,2BAAA,IAAA;AAAI,iBAAlC;AACA,qBAAK,UAAL,GAAkB,EAAlB;AACD;AACF,SANO;AAQR,6BAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAe,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AAAI,uBAAA,OAAA,IAAA,EAAA;AAAa,aAA5C;AAAgD,SAA/D;AAEA,6BAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,EAAR,EAAsB;AAAU,iBAAK,WAAL,CAAiB,IAAjB,CAAsB,EAAtB;AAA4B,SAA5D;AAEQ,6BAAA,SAAA,CAAA,QAAA,GAAR,YAAA;AACE,gBAAI,CAAC,KAAK,UAAL,EAAL,EAAwB;AACtB,qBAAK,QAAL,GAAgB,IAAhB;AACA,qBAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAA,EAAA,EAAE;AAAI,2BAAA,IAAA;AAAI,iBAAnC;AACA,qBAAK,WAAL,GAAmB,EAAnB;AACD;AACF,SANO;AAQR,6BAAA,SAAA,CAAA,MAAA,GAAA,UAAO,EAAP,EAAqB;AAAU,iBAAK,UAAL,CAAgB,IAAhB,CAAqB,EAArB;AAA2B,SAA1D;AAEA,6BAAA,SAAA,CAAA,SAAA,GAAA,UAAU,EAAV,EAAwB;AAAU,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,EAAxB;AAA8B,SAAhE;AAEA,6BAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AAAe,mBAAO,KAAK,QAAZ;AAAuB,SAAtC;AAEA,6BAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,gBAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,qBAAK,IAAL;AACD;AACD,iBAAK,QAAL;AACA,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AAAI,uBAAA,OAAA,IAAA,EAAA;AAAa,aAA5C;AACD,SAND;AAQA,6BAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAgB,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AAAI,uBAAA,OAAA,KAAA,EAAA;AAAc,aAA7C;AAAiD,SAAjE;AAEA,6BAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAkB,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AAAI,uBAAA,OAAA,OAAA,EAAA;AAAgB,aAA/C;AAAmD,SAArE;AAEA,6BAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,iBAAK,SAAL;AACA,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AAAI,uBAAA,OAAA,MAAA,EAAA;AAAe,aAA9C;AACD,SAHD;AAKA,6BAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAkB,iBAAK,UAAL;AAAoB,SAAtC;AAEQ,6BAAA,SAAA,CAAA,UAAA,GAAR,YAAA;AACE,gBAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,qBAAK,UAAL,GAAkB,IAAlB;AACA,qBAAK,SAAL;AACA,qBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AAAI,2BAAA,OAAA,OAAA,EAAA;AAAgB,iBAA/C;AACA,qBAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAA,EAAA,EAAE;AAAI,2BAAA,IAAA;AAAI,iBAArC;AACA,qBAAK,aAAL,GAAqB,EAArB;AACD;AACF,SARO;AAUR,6BAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AAAI,uBAAA,OAAA,KAAA,EAAA;AAAc,aAA7C;AACA,iBAAK,UAAL,GAAkB,KAAlB;AACA,iBAAK,SAAL,GAAiB,KAAjB;AACA,iBAAK,QAAL,GAAgB,KAAhB;AACD,SALD;AAOA,6BAAA,SAAA,CAAA,WAAA,GAAA,UAAY,CAAZ,EAAqB;AACnB,gBAAM,iBAAiB,IAAI,KAAK,SAAhC;AACA,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AACzB,oBAAM,WAAW,OAAO,SAAP,GAAmB,KAAK,GAAL,CAAS,CAAT,EAAY,iBAAiB,OAAO,SAApC,CAAnB,GAAoE,CAArF;AACA,uBAAO,WAAP,CAAmB,QAAnB;AACD,aAHD;AAID,SAND;AAQA,6BAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,gBAAI,MAAM,CAAV;AACA,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AACzB,oBAAM,IAAI,OAAO,WAAP,EAAV;AACA,sBAAM,KAAK,GAAL,CAAS,CAAT,EAAY,GAAZ,CAAN;AACD,aAHD;AAIA,mBAAO,GAAP;AACD,SAPD;AASA,6BAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAA,EAAM;AACzB,oBAAI,OAAO,aAAX,EAA0B;AACxB,2BAAO,aAAP;AACD;AACF,aAJD;AAKD,SAND;AAQA;AACA,6BAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,SAAhB,EAAiC;AAC/B,gBAAM,UAAU,aAAa,OAAb,GAAuB,KAAK,WAA5B,GAA0C,KAAK,UAA/D;AACA,oBAAQ,OAAR,CAAgB,UAAA,EAAA,EAAE;AAAI,uBAAA,IAAA;AAAI,aAA1B;AACA,oBAAQ,MAAR,GAAiB,CAAjB;AACD,SAJD;AAKF,eAAA,oBAAA;AAAC,KAzID,EAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {scheduleMicroTask} from '../util';\nimport {AnimationPlayer} from './animation_player';\n\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see `AnimationPlayer`\n * @see `{@link animations/group group()}`\n *\n */\nexport class AnimationGroupPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _finished = false;\n  private _started = false;\n  private _destroyed = false;\n  private _onDestroyFns: Function[] = [];\n\n  public parentPlayer: AnimationPlayer|null = null;\n  public totalTime: number = 0;\n  public readonly players: AnimationPlayer[];\n\n  constructor(_players: AnimationPlayer[]) {\n    this.players = _players;\n    let doneCount = 0;\n    let destroyCount = 0;\n    let startCount = 0;\n    const total = this.players.length;\n\n    if (total == 0) {\n      scheduleMicroTask(() => this._onFinish());\n    } else {\n      this.players.forEach(player => {\n        player.onDone(() => {\n          if (++doneCount == total) {\n            this._onFinish();\n          }\n        });\n        player.onDestroy(() => {\n          if (++destroyCount == total) {\n            this._onDestroy();\n          }\n        });\n        player.onStart(() => {\n          if (++startCount == total) {\n            this._onStart();\n          }\n        });\n      });\n    }\n\n    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n  }\n\n  private _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n\n  init(): void { this.players.forEach(player => player.init()); }\n\n  onStart(fn: () => void): void { this._onStartFns.push(fn); }\n\n  private _onStart() {\n    if (!this.hasStarted()) {\n      this._started = true;\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n    }\n  }\n\n  onDone(fn: () => void): void { this._onDoneFns.push(fn); }\n\n  onDestroy(fn: () => void): void { this._onDestroyFns.push(fn); }\n\n  hasStarted() { return this._started; }\n\n  play() {\n    if (!this.parentPlayer) {\n      this.init();\n    }\n    this._onStart();\n    this.players.forEach(player => player.play());\n  }\n\n  pause(): void { this.players.forEach(player => player.pause()); }\n\n  restart(): void { this.players.forEach(player => player.restart()); }\n\n  finish(): void {\n    this._onFinish();\n    this.players.forEach(player => player.finish());\n  }\n\n  destroy(): void { this._onDestroy(); }\n\n  private _onDestroy() {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      this._onFinish();\n      this.players.forEach(player => player.destroy());\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n\n  reset(): void {\n    this.players.forEach(player => player.reset());\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n\n  setPosition(p: number): void {\n    const timeAtPosition = p * this.totalTime;\n    this.players.forEach(player => {\n      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n      player.setPosition(position);\n    });\n  }\n\n  getPosition(): number {\n    let min = 0;\n    this.players.forEach(player => {\n      const p = player.getPosition();\n      min = Math.min(p, min);\n    });\n    return min;\n  }\n\n  beforeDestroy(): void {\n    this.players.forEach(player => {\n      if (player.beforeDestroy) {\n        player.beforeDestroy();\n      }\n    });\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\n"],"sourceRoot":""}