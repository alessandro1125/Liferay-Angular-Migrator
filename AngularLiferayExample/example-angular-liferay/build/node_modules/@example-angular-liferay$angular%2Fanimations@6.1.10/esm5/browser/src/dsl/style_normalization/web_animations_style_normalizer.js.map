{"version":3,"sources":["../../../../../../../../../../../../../packages/animations/browser/src/dsl/style_normalization/web_animations_style_normalizer.ts"],"names":[],"mappings":";;;AAAA;;;;;;;AAOA,aAAQ,mBAAR,QAAkC,YAAlC;AAEA,aAAQ,wBAAR,QAAuC,8BAAvC;AAEA,QAAA,+BAAA,aAAA,UAAA,MAAA,EAAA;AAAkD,gBAAA,SAAA,CAAA,4BAAA,EAAA,MAAA;AAAlD,iBAAA,4BAAA,GAAA;;AAuBC;AAtBC,qCAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,YAAtB,EAA4C,MAA5C,EAA4D;AAC1D,mBAAO,oBAAoB,YAApB,CAAP;AACD,SAFD;AAIA,qCAAA,SAAA,CAAA,mBAAA,GAAA,UACI,oBADJ,EACkC,kBADlC,EAC8D,KAD9D,EAEI,MAFJ,EAEoB;AAClB,gBAAI,OAAe,EAAnB;AACA,gBAAM,SAAS,MAAM,QAAN,GAAiB,IAAjB,EAAf;AAEA,gBAAI,qBAAqB,kBAArB,KAA4C,UAAU,CAAtD,IAA2D,UAAU,GAAzE,EAA8E;AAC5E,oBAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,2BAAO,IAAP;AACD,iBAFD,MAEO;AACL,wBAAM,oBAAoB,MAAM,KAAN,CAAY,wBAAZ,CAA1B;AACA,wBAAI,qBAAqB,kBAAkB,CAAlB,EAAqB,MAArB,IAA+B,CAAxD,EAA2D;AACzD,+BAAO,IAAP,CAAY,yCAAuC,oBAAvC,GAA2D,GAA3D,GAA+D,KAA3E;AACD;AACF;AACF;AACD,mBAAO,SAAS,IAAhB;AACD,SAjBD;AAkBF,eAAA,4BAAA;AAAC,KAvBD,CAAkD,wBAAlD,CAAA;;AAyBA,QAAM,uBAAuB,eACzB,iUACK,KADL,CACW,GADX,CADyB,CAA7B;AAIA,aAAA,cAAA,CAAwB,IAAxB,EAAsC;AACpC,YAAM,MAAgC,EAAtC;AACA,aAAK,OAAL,CAAa,UAAA,GAAA,EAAG;AAAI,mBAAA,IAAI,GAAJ,IAAA,IAAA;AAAe,SAAnC;AACA,eAAO,GAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {dashCaseToCamelCase} from '../../util';\n\nimport {AnimationStyleNormalizer} from './animation_style_normalizer';\n\nexport class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n  normalizePropertyName(propertyName: string, errors: string[]): string {\n    return dashCaseToCamelCase(propertyName);\n  }\n\n  normalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string {\n    let unit: string = '';\n    const strVal = value.toString().trim();\n\n    if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n      if (typeof value === 'number') {\n        unit = 'px';\n      } else {\n        const valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n        }\n      }\n    }\n    return strVal + unit;\n  }\n}\n\nconst DIMENSIONAL_PROP_MAP = makeBooleanMap(\n    'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'\n        .split(','));\n\nfunction makeBooleanMap(keys: string[]): {[key: string]: boolean} {\n  const map: {[key: string]: boolean} = {};\n  keys.forEach(key => map[key] = true);\n  return map;\n}\n"],"sourceRoot":""}