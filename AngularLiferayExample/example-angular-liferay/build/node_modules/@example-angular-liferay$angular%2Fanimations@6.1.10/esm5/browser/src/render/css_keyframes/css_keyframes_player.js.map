{"version":3,"sources":["../../../../../../../../../../../../../packages/animations/browser/src/render/css_keyframes/css_keyframes_player.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer} from '@angular/animations';\n\nimport {computeStyle} from '../../util';\n\nimport {ElementAnimationStyleHandler} from './element_animation_style_handler';\n\nconst DEFAULT_FILL_MODE = 'forwards';\nconst DEFAULT_EASING = 'linear';\nconst ANIMATION_END_EVENT = 'animationend';\n\nexport const enum AnimatorControlState {INITIALIZED = 1, STARTED = 2, FINISHED = 3, DESTROYED = 4}\n\nexport class CssKeyframesPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _onDestroyFns: Function[] = [];\n\n  private _started = false;\n  // TODO(issue/24571): remove '!'.\n  private _styler !: ElementAnimationStyleHandler;\n\n  // TODO(issue/24571): remove '!'.\n  public parentPlayer !: AnimationPlayer;\n  public readonly totalTime: number;\n  public readonly easing: string;\n  public currentSnapshot: {[key: string]: string} = {};\n\n  private _state: AnimatorControlState = 0;\n\n  constructor(\n      public readonly element: any, public readonly keyframes: {[key: string]: string | number}[],\n      public readonly animationName: string, private readonly _duration: number,\n      private readonly _delay: number, easing: string,\n      private readonly _finalStyles: {[key: string]: any}) {\n    this.easing = easing || DEFAULT_EASING;\n    this.totalTime = _duration + _delay;\n    this._buildStyler();\n  }\n\n  onStart(fn: () => void): void { this._onStartFns.push(fn); }\n\n  onDone(fn: () => void): void { this._onDoneFns.push(fn); }\n\n  onDestroy(fn: () => void): void { this._onDestroyFns.push(fn); }\n\n  destroy() {\n    this.init();\n    if (this._state >= AnimatorControlState.DESTROYED) return;\n    this._state = AnimatorControlState.DESTROYED;\n    this._styler.destroy();\n    this._flushStartFns();\n    this._flushDoneFns();\n    this._onDestroyFns.forEach(fn => fn());\n    this._onDestroyFns = [];\n  }\n\n  private _flushDoneFns() {\n    this._onDoneFns.forEach(fn => fn());\n    this._onDoneFns = [];\n  }\n\n  private _flushStartFns() {\n    this._onStartFns.forEach(fn => fn());\n    this._onStartFns = [];\n  }\n\n  finish() {\n    this.init();\n    if (this._state >= AnimatorControlState.FINISHED) return;\n    this._state = AnimatorControlState.FINISHED;\n    this._styler.finish();\n    this._flushStartFns();\n    this._flushDoneFns();\n  }\n\n  setPosition(value: number) { this._styler.setPosition(value); }\n\n  getPosition(): number { return this._styler.getPosition(); }\n\n  hasStarted(): boolean { return this._state >= AnimatorControlState.STARTED; }\n  init(): void {\n    if (this._state >= AnimatorControlState.INITIALIZED) return;\n    this._state = AnimatorControlState.INITIALIZED;\n    const elm = this.element;\n    this._styler.apply();\n    if (this._delay) {\n      this._styler.pause();\n    }\n  }\n\n  play(): void {\n    this.init();\n    if (!this.hasStarted()) {\n      this._flushStartFns();\n      this._state = AnimatorControlState.STARTED;\n    }\n    this._styler.resume();\n  }\n\n  pause(): void {\n    this.init();\n    this._styler.pause();\n  }\n  restart(): void {\n    this.reset();\n    this.play();\n  }\n  reset(): void {\n    this._styler.destroy();\n    this._buildStyler();\n    this._styler.apply();\n  }\n\n  private _buildStyler() {\n    this._styler = new ElementAnimationStyleHandler(\n        this.element, this.animationName, this._duration, this._delay, this.easing,\n        DEFAULT_FILL_MODE, () => this.finish());\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n\n  beforeDestroy() {\n    this.init();\n    const styles: {[key: string]: string} = {};\n    if (this.hasStarted()) {\n      const finished = this._state >= AnimatorControlState.FINISHED;\n      Object.keys(this._finalStyles).forEach(prop => {\n        if (prop != 'offset') {\n          styles[prop] = finished ? this._finalStyles[prop] : computeStyle(this.element, prop);\n        }\n      });\n    }\n    this.currentSnapshot = styles;\n  }\n}\n"],"sourceRoot":""}