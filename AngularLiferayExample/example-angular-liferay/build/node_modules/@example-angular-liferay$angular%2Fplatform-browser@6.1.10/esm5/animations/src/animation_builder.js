Liferay.Loader.define('@example-angular-liferay$angular/platform-browser@6.1.10/esm5/animations/src/animation_builder', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    import * as tslib_1 from "tslib";
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { AnimationBuilder, AnimationFactory, sequence } from '@angular/animations';
    import { Inject, Injectable, RendererFactory2, ViewEncapsulation } from '@angular/core';
    import { DOCUMENT } from '@angular/platform-browser';
    var BrowserAnimationBuilder = /** @class */function (_super) {
        tslib_1.__extends(BrowserAnimationBuilder, _super);
        function BrowserAnimationBuilder(rootRenderer, doc) {
            var _this = _super.call(this) || this;
            _this._nextAnimationId = 0;
            var typeData = {
                id: '0',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: { animation: [] }
            };
            _this._renderer = rootRenderer.createRenderer(doc.body, typeData);
            return _this;
        }
        BrowserAnimationBuilder.prototype.build = function (animation) {
            var id = this._nextAnimationId.toString();
            this._nextAnimationId++;
            var entry = Array.isArray(animation) ? sequence(animation) : animation;
            issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
            return new BrowserAnimationFactory(id, this._renderer);
        };
        BrowserAnimationBuilder = tslib_1.__decorate([Injectable(), tslib_1.__param(1, Inject(DOCUMENT)), tslib_1.__metadata("design:paramtypes", [RendererFactory2, Object])], BrowserAnimationBuilder);
        return BrowserAnimationBuilder;
    }(AnimationBuilder);
    export { BrowserAnimationBuilder };
    var BrowserAnimationFactory = /** @class */function (_super) {
        tslib_1.__extends(BrowserAnimationFactory, _super);
        function BrowserAnimationFactory(_id, _renderer) {
            var _this = _super.call(this) || this;
            _this._id = _id;
            _this._renderer = _renderer;
            return _this;
        }
        BrowserAnimationFactory.prototype.create = function (element, options) {
            return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
        };
        return BrowserAnimationFactory;
    }(AnimationFactory);
    export { BrowserAnimationFactory };
    var RendererAnimationPlayer = /** @class */function () {
        function RendererAnimationPlayer(id, element, options, _renderer) {
            this.id = id;
            this.element = element;
            this._renderer = _renderer;
            this.parentPlayer = null;
            this._started = false;
            this.totalTime = 0;
            this._command('create', options);
        }
        RendererAnimationPlayer.prototype._listen = function (eventName, callback) {
            return this._renderer.listen(this.element, "@@" + this.id + ":" + eventName, callback);
        };
        RendererAnimationPlayer.prototype._command = function (command) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
        };
        RendererAnimationPlayer.prototype.onDone = function (fn) {
            this._listen('done', fn);
        };
        RendererAnimationPlayer.prototype.onStart = function (fn) {
            this._listen('start', fn);
        };
        RendererAnimationPlayer.prototype.onDestroy = function (fn) {
            this._listen('destroy', fn);
        };
        RendererAnimationPlayer.prototype.init = function () {
            this._command('init');
        };
        RendererAnimationPlayer.prototype.hasStarted = function () {
            return this._started;
        };
        RendererAnimationPlayer.prototype.play = function () {
            this._command('play');
            this._started = true;
        };
        RendererAnimationPlayer.prototype.pause = function () {
            this._command('pause');
        };
        RendererAnimationPlayer.prototype.restart = function () {
            this._command('restart');
        };
        RendererAnimationPlayer.prototype.finish = function () {
            this._command('finish');
        };
        RendererAnimationPlayer.prototype.destroy = function () {
            this._command('destroy');
        };
        RendererAnimationPlayer.prototype.reset = function () {
            this._command('reset');
        };
        RendererAnimationPlayer.prototype.setPosition = function (p) {
            this._command('setPosition', p);
        };
        RendererAnimationPlayer.prototype.getPosition = function () {
            return 0;
        };
        return RendererAnimationPlayer;
    }();
    export { RendererAnimationPlayer };
    function issueAnimationCommand(renderer, element, id, command, args) {
        return renderer.setProperty(element, "@@" + id + ":" + command, args);
    }
});
//# sourceMappingURL=animation_builder.js.map