Liferay.Loader.define('@example-angular-liferay$angular/platform-browser@6.1.10/esm5/animations/src/providers', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { AnimationBuilder } from '@angular/animations';
    import { AnimationDriver, ɵAnimationEngine as AnimationEngine, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵCssKeyframesDriver as CssKeyframesDriver, ɵNoopAnimationDriver as NoopAnimationDriver, ɵWebAnimationsDriver as WebAnimationsDriver, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer, ɵsupportsWebAnimations as supportsWebAnimations } from '@angular/animations/browser';
    import { DOCUMENT } from '@angular/common';
    import { Inject, Injectable, InjectionToken, NgZone, RendererFactory2 } from '@angular/core';
    import { ɵDomRendererFactory2 as DomRendererFactory2 } from '@angular/platform-browser';
    import { BrowserAnimationBuilder } from './animation_builder';
    import { AnimationRendererFactory } from './animation_renderer';
    var InjectableAnimationEngine = /** @class */function (_super) {
        tslib_1.__extends(InjectableAnimationEngine, _super);
        function InjectableAnimationEngine(doc, driver, normalizer) {
            return _super.call(this, doc.body, driver, normalizer) || this;
        }
        InjectableAnimationEngine = tslib_1.__decorate([Injectable(), tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__metadata("design:paramtypes", [Object, AnimationDriver, AnimationStyleNormalizer])], InjectableAnimationEngine);
        return InjectableAnimationEngine;
    }(AnimationEngine);
    export { InjectableAnimationEngine };
    export function instantiateSupportedAnimationDriver() {
        return supportsWebAnimations() ? new WebAnimationsDriver() : new CssKeyframesDriver();
    }
    export function instantiateDefaultStyleNormalizer() {
        return new WebAnimationsStyleNormalizer();
    }
    export function instantiateRendererFactory(renderer, engine, zone) {
        return new AnimationRendererFactory(renderer, engine, zone);
    }
    /**
     * @experimental Animation support is experimental.
     */
    export var ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');
    var SHARED_ANIMATION_PROVIDERS = [{ provide: AnimationBuilder, useClass: BrowserAnimationBuilder }, { provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer }, { provide: AnimationEngine, useClass: InjectableAnimationEngine }, {
        provide: RendererFactory2,
        useFactory: instantiateRendererFactory,
        deps: [DomRendererFactory2, AnimationEngine, NgZone]
    }];
    /**
     * Separate providers from the actual module so that we can do a local modification in Google3 to
     * include them in the BrowserModule.
     */
    export var BROWSER_ANIMATIONS_PROVIDERS = tslib_1.__spread([{ provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver }, { provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations' }], SHARED_ANIMATION_PROVIDERS);
    /**
     * Separate providers from the actual module so that we can do a local modification in Google3 to
     * include them in the BrowserTestingModule.
     */
    export var BROWSER_NOOP_ANIMATIONS_PROVIDERS = tslib_1.__spread([{ provide: AnimationDriver, useClass: NoopAnimationDriver }, { provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations' }], SHARED_ANIMATION_PROVIDERS);
});
//# sourceMappingURL=providers.js.map