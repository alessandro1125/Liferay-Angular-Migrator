{"version":3,"sources":["../../../../../../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeStyle as _sanitizeStyle, ɵ_sanitizeUrl as _sanitizeUrl} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n *\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n *\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n *\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n *\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n *\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n *\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n *\n */\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n\n@Injectable()\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) { super(); }\n\n  sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return _sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return _sanitizeStyle(value as string);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  private checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n  bypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n  bypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n  bypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\n}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  getTypeName() { return 'ResourceURL'; }\n}\n"],"sourceRoot":""}