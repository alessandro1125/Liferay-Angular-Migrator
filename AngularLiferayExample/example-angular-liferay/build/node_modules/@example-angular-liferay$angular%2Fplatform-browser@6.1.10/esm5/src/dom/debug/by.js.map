{"version":3,"sources":["../../../../../../../../../../../packages/platform-browser/src/dom/debug/by.ts"],"names":[],"mappings":";;;;;;;;;AASA,WAAQ,MAAR,QAAqB,uBAArB;AAIA;;;;;AAKA,MAAA,KAAA,aAAA,YAAA;AAAA,aAAA,EAAA,GAAA,CAsCC;AArCC;;;;;;;;AAQO,OAAA,GAAA,GAAP,YAAA;AAAwC,aAAO,UAAC,YAAD,EAAa;AAAK,eAAA,IAAA;AAAI,OAA7B;AAAgC,KAAjE;AAEP;;;;;;;;AAQO,OAAA,GAAA,GAAP,UAAW,QAAX,EAA2B;AACzB,aAAO,UAAC,YAAD,EAAa;AAClB,eAAO,aAAa,aAAb,IAA8B,IAA9B,GACH,SAAS,cAAT,CAAwB,aAAa,aAArC,EAAoD,QAApD,CADG,GAEH,KAFJ;AAGD,OAJD;AAKD,KANM;AAQP;;;;;;;;AAQO,OAAA,SAAA,GAAP,UAAiB,IAAjB,EAAgC;AAC9B,aAAO,UAAC,YAAD,EAAa;AAAK,eAAA,aAAa,cAAb,CAA8B,OAA9B,CAAsC,IAAtC,MAAgD,CAAhD,CAAA;AAAkD,OAA3E;AACD,KAFM;AAGT,WAAA,EAAA;AAAC,GAtCD,EAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DebugElement, Predicate, Type} from '@angular/core';\nimport {getDOM} from '../../dom/dom_adapter';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport class By {\n  /**\n   * Match all elements.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugElement> { return (debugElement) => true; }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          getDOM().elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match elements that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugElement> {\n    return (debugElement) => debugElement.providerTokens !.indexOf(type) !== -1;\n  }\n}\n"],"sourceRoot":""}