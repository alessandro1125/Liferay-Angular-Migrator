{"version":3,"sources":["../../../../../../../../../../../packages/platform-browser/src/dom/events/event_manager.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,MAAR,EAAgB,UAAhB,EAA4B,cAA5B,EAA4C,MAA5C,QAAyD,eAAzD;AAEA,aAAQ,MAAR,QAAqB,gBAArB;AAEA;;;AAGA,WAAO,IAAM,wBACT,IAAI,cAAJ,CAAyC,qBAAzC,CADG;AAGP;;;;AAKA,QAAA,eAAA,aAAA,YAAA;AAIE;;;AAGA,iBAAA,YAAA,CAA2C,OAA3C,EAAkF,KAAlF,EAA+F;AAA/F,gBAAA,QAAA,IAAA;AAAkF,iBAAA,KAAA,GAAA,KAAA;AAL1E,iBAAA,kBAAA,GAAqB,IAAI,GAAJ,EAArB;AAMN,oBAAQ,OAAR,CAAgB,UAAA,CAAA,EAAC;AAAI,uBAAA,EAAE,OAAF,GAAA,KAAA;AAAgB,aAArC;AACA,iBAAK,QAAL,GAAgB,QAAQ,KAAR,GAAgB,OAAhB,EAAhB;AACD;AAED;;;;;;;;;AASA,qBAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,OAAjB,EAAuC,SAAvC,EAA0D,OAA1D,EAA2E;AACzE,gBAAM,SAAS,KAAK,cAAL,CAAoB,SAApB,CAAf;AACA,mBAAO,OAAO,gBAAP,CAAwB,OAAxB,EAAiC,SAAjC,EAA4C,OAA5C,CAAP;AACD,SAHD;AAKA;;;;;;;;;AASA,qBAAA,SAAA,CAAA,sBAAA,GAAA,UAAuB,MAAvB,EAAuC,SAAvC,EAA0D,OAA1D,EAA2E;AACzE,gBAAM,SAAS,KAAK,cAAL,CAAoB,SAApB,CAAf;AACA,mBAAO,OAAO,sBAAP,CAA8B,MAA9B,EAAsC,SAAtC,EAAiD,OAAjD,CAAP;AACD,SAHD;AAKA;;;AAGA,qBAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAoB,mBAAO,KAAK,KAAZ;AAAoB,SAAxC;AAEA;AACA,qBAAA,SAAA,CAAA,cAAA,GAAA,UAAe,SAAf,EAAgC;AAC9B,gBAAM,SAAS,KAAK,kBAAL,CAAwB,GAAxB,CAA4B,SAA5B,CAAf;AACA,gBAAI,MAAJ,EAAY;AACV,uBAAO,MAAP;AACD;AAED,gBAAM,UAAU,KAAK,QAArB;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,oBAAM,WAAS,QAAQ,CAAR,CAAf;AACA,oBAAI,SAAO,QAAP,CAAgB,SAAhB,CAAJ,EAAgC;AAC9B,yBAAK,kBAAL,CAAwB,GAAxB,CAA4B,SAA5B,EAAuC,QAAvC;AACA,2BAAO,QAAP;AACD;AACF;AACD,kBAAM,IAAI,KAAJ,CAAU,6CAA2C,SAArD,CAAN;AACD,SAfD;AA9CW,uBAAY,QAAA,UAAA,CAAA,CADxB,YACwB,EAOV,QAAA,OAAA,CAAA,CAAA,EAAA,OAAO,qBAAP,CAAA,CAPU,E,gDAOkE,M,EAPlE,CAAA,EAAZ,YAAY,CAAZ;AA8Db,eAAA,YAAA;AAAC,KA9DD,EAAA;aAAa,Y;AAgEb,QAAA,qBAAA,aAAA,YAAA;AACE,iBAAA,kBAAA,CAAoB,IAApB,EAA6B;AAAT,iBAAA,IAAA,GAAA,IAAA;AAAa;AASjC,2BAAA,SAAA,CAAA,sBAAA,GAAA,UAAuB,OAAvB,EAAwC,SAAxC,EAA2D,OAA3D,EAA4E;AAC1E,gBAAM,SAAsB,SAAS,oBAAT,CAA8B,KAAK,IAAnC,EAAyC,OAAzC,CAA5B;AACA,gBAAI,CAAC,MAAL,EAAa;AACX,sBAAM,IAAI,KAAJ,CAAU,8BAA4B,MAA5B,GAAkC,aAAlC,GAAgD,SAA1D,CAAN;AACD;AACD,mBAAO,KAAK,gBAAL,CAAsB,MAAtB,EAA8B,SAA9B,EAAyC,OAAzC,CAAP;AACD,SAND;AAOF,eAAA,kBAAA;AAAC,KAjBD,EAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n\n/**\n * The injection token for the event-manager plug-in service.\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone { return this._zone; }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager !: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n"],"sourceRoot":""}