{"version":3,"sources":["../../../../../../../../../../packages/platform-browser/src/browser/meta.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, inject} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create Meta service.\n */\nexport function createMeta() {\n  return new Meta(inject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and add meta tags.\n *\n * @experimental\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) { this._dom = getDOM(); }\n\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\n  }\n\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector) !;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  removeTag(attrSelector: string): void { this.removeTagElement(this.getTag(attrSelector) !); }\n\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      const elem: HTMLMetaElement = this.getTag(selector) !;\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\n}\n"],"sourceRoot":""}