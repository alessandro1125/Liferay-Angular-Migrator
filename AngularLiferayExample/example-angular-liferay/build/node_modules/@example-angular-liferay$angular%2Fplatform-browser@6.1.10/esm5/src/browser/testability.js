Liferay.Loader.define('@example-angular-liferay$angular/platform-browser@6.1.10/esm5/src/browser/testability', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { setTestabilityGetter, Éµglobal as global } from '@angular/core';
    import { getDOM } from '../dom/dom_adapter';
    var BrowserGetTestability = /** @class */function () {
        function BrowserGetTestability() {}
        BrowserGetTestability.init = function () {
            setTestabilityGetter(new BrowserGetTestability());
        };
        BrowserGetTestability.prototype.addToWindow = function (registry) {
            global['getAngularTestability'] = function (elem, findInAncestors) {
                if (findInAncestors === void 0) {
                    findInAncestors = true;
                }
                var testability = registry.findTestabilityInTree(elem, findInAncestors);
                if (testability == null) {
                    throw new Error('Could not find testability for element.');
                }
                return testability;
            };
            global['getAllAngularTestabilities'] = function () {
                return registry.getAllTestabilities();
            };
            global['getAllAngularRootElements'] = function () {
                return registry.getAllRootElements();
            };
            var whenAllStable = function (callback /** TODO #9100 */) {
                var testabilities = global['getAllAngularTestabilities']();
                var count = testabilities.length;
                var didWork = false;
                var decrement = function (didWork_ /** TODO #9100 */) {
                    didWork = didWork || didWork_;
                    count--;
                    if (count == 0) {
                        callback(didWork);
                    }
                };
                testabilities.forEach(function (testability /** TODO #9100 */) {
                    testability.whenStable(decrement);
                });
            };
            if (!global['frameworkStabilizers']) {
                global['frameworkStabilizers'] = [];
            }
            global['frameworkStabilizers'].push(whenAllStable);
        };
        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
            if (elem == null) {
                return null;
            }
            var t = registry.getTestability(elem);
            if (t != null) {
                return t;
            } else if (!findInAncestors) {
                return null;
            }
            if (getDOM().isShadowRoot(elem)) {
                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
            }
            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
        };
        return BrowserGetTestability;
    }();
    export { BrowserGetTestability };
});
//# sourceMappingURL=testability.js.map