{"version":3,"sources":["../../../../../../../../../../../packages/platform-browser/src/browser/location/browser_platform_location.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAgC,gBAAhC,QAAuD,iBAAvD;AACA,aAAQ,MAAR,EAAgB,UAAhB,QAAiC,eAAjC;AAEA,aAAQ,MAAR,QAAqB,uBAArB;AACA,aAAQ,QAAR,QAAuB,sBAAvB;AAEA,aAAQ,aAAR,QAA4B,WAA5B;AAIA;;;;;AAMA,QAAA,0BAAA,aAAA,UAAA,MAAA,EAAA;AAA6C,gBAAA,SAAA,CAAA,uBAAA,EAAA,MAAA;AAM3C,iBAAA,uBAAA,CAAsC,IAAtC,EAA+C;AAA/C,gBAAA,QACE,OAAA,IAAA,CAAA,IAAA,KAAO,IADT;AAAsC,kBAAA,IAAA,GAAA,IAAA;AAEpC,kBAAK,KAAL;;AACD;AAED;AACA;AACA,gCAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACG,iBAA6B,QAA7B,GAAwC,SAAS,WAAT,EAAxC;AACD,iBAAK,QAAL,GAAgB,SAAS,UAAT,EAAhB;AACD,SAHD;AAKA,gCAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAA+B,mBAAO,SAAS,WAAT,CAAqB,KAAK,IAA1B,CAAP;AAA2C,SAA1E;AAEA,gCAAA,SAAA,CAAA,UAAA,GAAA,UAAW,EAAX,EAAqC;AACnC,qBAAS,oBAAT,CAA8B,KAAK,IAAnC,EAAyC,QAAzC,EAAmD,gBAAnD,CAAoE,UAApE,EAAgF,EAAhF,EAAoF,KAApF;AACD,SAFD;AAIA,gCAAA,SAAA,CAAA,YAAA,GAAA,UAAa,EAAb,EAAuC;AACrC,qBAAS,oBAAT,CAA8B,KAAK,IAAnC,EAAyC,QAAzC,EAAmD,gBAAnD,CAAoE,YAApE,EAAkF,EAAlF,EAAsF,KAAtF;AACD,SAFD;AAIA,eAAA,cAAA,CAAI,wBAAA,SAAJ,EAAI,UAAJ,EAAY;iBAAZ,YAAA;AAAyB,uBAAO,KAAK,QAAL,CAAc,QAArB;AAAgC,aAA7C;iBAGZ,UAAa,OAAb,EAA4B;AAAI,qBAAK,QAAL,CAAc,QAAd,GAAyB,OAAzB;AAAmC,aAHvD;4BAAA;;AAAA,SAAZ;AACA,eAAA,cAAA,CAAI,wBAAA,SAAJ,EAAI,QAAJ,EAAU;iBAAV,YAAA;AAAuB,uBAAO,KAAK,QAAL,CAAc,MAArB;AAA8B,aAA3C;4BAAA;;AAAA,SAAV;AACA,eAAA,cAAA,CAAI,wBAAA,SAAJ,EAAI,MAAJ,EAAQ;iBAAR,YAAA;AAAqB,uBAAO,KAAK,QAAL,CAAc,IAArB;AAA4B,aAAzC;4BAAA;;AAAA,SAAR;AAGA,gCAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAsB,KAAtB,EAAqC,GAArC,EAAgD;AAC9C,gBAAI,eAAJ,EAAqB;AACnB,qBAAK,QAAL,CAAc,SAAd,CAAwB,KAAxB,EAA+B,KAA/B,EAAsC,GAAtC;AACD,aAFD,MAEO;AACL,qBAAK,QAAL,CAAc,IAAd,GAAqB,GAArB;AACD;AACF,SAND;AAQA,gCAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAAyB,KAAzB,EAAwC,GAAxC,EAAmD;AACjD,gBAAI,eAAJ,EAAqB;AACnB,qBAAK,QAAL,CAAc,YAAd,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC,GAAzC;AACD,aAFD,MAEO;AACL,qBAAK,QAAL,CAAc,IAAd,GAAqB,GAArB;AACD;AACF,SAND;AAQA,gCAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAkB,iBAAK,QAAL,CAAc,OAAd;AAA0B,SAA5C;AAEA,gCAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAe,iBAAK,QAAL,CAAc,IAAd;AAAuB,SAAtC;AAnDW,kCAAuB,QAAA,UAAA,CAAA,CADnC,YACmC,EAMrB,QAAA,OAAA,CAAA,CAAA,EAAA,OAAO,QAAP,CAAA,CANqB,E,iDAAA,CAAA,EAAvB,uBAAuB,CAAvB;AAoDb,eAAA,uBAAA;AAAC,KApDD,CAA6C,gBAA7C,CAAA;aAAa,uB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable()\nexport class BrowserPlatformLocation extends PlatformLocation {\n  // TODO(issue/24571): remove '!'.\n  public readonly location !: Location;\n  // TODO(issue/24571): remove '!'.\n  private _history !: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as{location: Location}).location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n\n  getBaseHrefFromDOM(): string { return getDOM().getBaseHref(this._doc) !; }\n\n  onPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n\n  get pathname(): string { return this.location.pathname; }\n  get search(): string { return this.location.search; }\n  get hash(): string { return this.location.hash; }\n  set pathname(newPath: string) { this.location.pathname = newPath; }\n\n  pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  forward(): void { this._history.forward(); }\n\n  back(): void { this._history.back(); }\n}\n"],"sourceRoot":""}