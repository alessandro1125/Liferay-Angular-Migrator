{"version":3,"sources":["../../../../../../../../../../packages/platform-browser/src/browser/transfer_state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_ID, Injectable, NgModule} from '@angular/core';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport function escapeHtml(text: string): string {\n  const escapedText: {[k: string]: string} = {\n    '&': '&a;',\n    '\"': '&q;',\n    '\\'': '&s;',\n    '<': '&l;',\n    '>': '&g;',\n  };\n  return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\n\nexport function unescapeHtml(text: string): string {\n  const unescapedText: {[k: string]: string} = {\n    '&a;': '&',\n    '&q;': '\"',\n    '&s;': '\\'',\n    '&l;': '<',\n    '&g;': '>',\n  };\n  return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @experimental\n */\nexport type StateKey<T> = string & {__not_a_string: never};\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @experimental\n */\nexport function makeStateKey<T = void>(key: string): StateKey<T> {\n  return key as StateKey<T>;\n}\n\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * @experimental\n */\n@Injectable()\nexport class TransferState {\n  private store: {[k: string]: {} | undefined} = {};\n  private onSerializeCallbacks: {[k: string]: () => {} | undefined} = {};\n\n  /** @internal */\n  static init(initState: {}) {\n    const transferState = new TransferState();\n    transferState.store = initState;\n    return transferState;\n  }\n\n  /**\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n   */\n  get<T>(key: StateKey<T>, defaultValue: T): T {\n    return this.store[key] !== undefined ? this.store[key] as T : defaultValue;\n  }\n\n  /**\n   * Set the value corresponding to a key.\n   */\n  set<T>(key: StateKey<T>, value: T): void { this.store[key] = value; }\n\n  /**\n   * Remove a key from the store.\n   */\n  remove<T>(key: StateKey<T>): void { delete this.store[key]; }\n\n  /**\n   * Test whether a key exists in the store.\n   */\n  hasKey<T>(key: StateKey<T>) { return this.store.hasOwnProperty(key); }\n\n  /**\n   * Register a callback to provide the value for a key when `toJson` is called.\n   */\n  onSerialize<T>(key: StateKey<T>, callback: () => T): void {\n    this.onSerializeCallbacks[key] = callback;\n  }\n\n  /**\n   * Serialize the current state of the store to JSON.\n   */\n  toJson(): string {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n    return JSON.stringify(this.store);\n  }\n}\n\nexport function initTransferState(doc: Document, appId: string) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  let initialState = {};\n  if (script && script.textContent) {\n    try {\n      initialState = JSON.parse(unescapeHtml(script.textContent));\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return TransferState.init(initialState);\n}\n\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @experimental\n */\n@NgModule({\n  providers: [{provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT, APP_ID]}],\n})\nexport class BrowserTransferStateModule {\n}\n"],"sourceRoot":""}