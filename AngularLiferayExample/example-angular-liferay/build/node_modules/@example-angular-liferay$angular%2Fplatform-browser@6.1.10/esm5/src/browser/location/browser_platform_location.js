Liferay.Loader.define('@example-angular-liferay$angular/platform-browser@6.1.10/esm5/src/browser/location/browser_platform_location', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { PlatformLocation } from '@angular/common';
    import { Inject, Injectable } from '@angular/core';
    import { getDOM } from '../../dom/dom_adapter';
    import { DOCUMENT } from '../../dom/dom_tokens';
    import { supportsState } from './history';
    /**
     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
     * This class should not be used directly by an application developer. Instead, use
     * {@link Location}.
     */
    var BrowserPlatformLocation = /** @class */function (_super) {
        tslib_1.__extends(BrowserPlatformLocation, _super);
        function BrowserPlatformLocation(_doc) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            _this._init();
            return _this;
        }
        // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
        /** @internal */
        BrowserPlatformLocation.prototype._init = function () {
            this.location = getDOM().getLocation();
            this._history = getDOM().getHistory();
        };
        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () {
            return getDOM().getBaseHref(this._doc);
        };
        BrowserPlatformLocation.prototype.onPopState = function (fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
        };
        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
            get: function () {
                return this.location.pathname;
            },
            set: function (newPath) {
                this.location.pathname = newPath;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
            get: function () {
                return this.location.search;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
            get: function () {
                return this.location.hash;
            },
            enumerable: true,
            configurable: true
        });
        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
            if (supportsState()) {
                this._history.pushState(state, title, url);
            } else {
                this.location.hash = url;
            }
        };
        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
            if (supportsState()) {
                this._history.replaceState(state, title, url);
            } else {
                this.location.hash = url;
            }
        };
        BrowserPlatformLocation.prototype.forward = function () {
            this._history.forward();
        };
        BrowserPlatformLocation.prototype.back = function () {
            this._history.back();
        };
        BrowserPlatformLocation = tslib_1.__decorate([Injectable(), tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__metadata("design:paramtypes", [Object])], BrowserPlatformLocation);
        return BrowserPlatformLocation;
    }(PlatformLocation);
    export { BrowserPlatformLocation };
});
//# sourceMappingURL=browser_platform_location.js.map