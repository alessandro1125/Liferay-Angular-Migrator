Liferay.Loader.define('@example-angular-liferay$angular/platform-browser@6.1.10/esm5/testing/src/browser_util', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { NgZone, ɵglobal as global } from '@angular/core';
    import { ɵgetDOM as getDOM } from '@angular/platform-browser';
    export var browserDetection;
    var BrowserDetection = /** @class */function () {
        function BrowserDetection(ua) {
            this._overrideUa = ua;
        }
        Object.defineProperty(BrowserDetection.prototype, "_ua", {
            get: function () {
                if (typeof this._overrideUa === 'string') {
                    return this._overrideUa;
                }
                return getDOM() ? getDOM().getUserAgent() : '';
            },
            enumerable: true,
            configurable: true
        });
        BrowserDetection.setup = function () {
            browserDetection = new BrowserDetection(null);
        };
        Object.defineProperty(BrowserDetection.prototype, "isFirefox", {
            get: function () {
                return this._ua.indexOf('Firefox') > -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isAndroid", {
            get: function () {
                return this._ua.indexOf('Mozilla/5.0') > -1 && this._ua.indexOf('Android') > -1 && this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Chrome') == -1 && this._ua.indexOf('IEMobile') == -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isEdge", {
            get: function () {
                return this._ua.indexOf('Edge') > -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isIE", {
            get: function () {
                return this._ua.indexOf('Trident') > -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isWebkit", {
            get: function () {
                return this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Edge') == -1 && this._ua.indexOf('IEMobile') == -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isIOS7", {
            get: function () {
                return (this._ua.indexOf('iPhone OS 7') > -1 || this._ua.indexOf('iPad OS 7') > -1) && this._ua.indexOf('IEMobile') == -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isSlow", {
            get: function () {
                return this.isAndroid || this.isIE || this.isIOS7;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "supportsNativeIntlApi", {
            // The Intl API is only natively supported in Chrome, Firefox, IE11 and Edge.
            // This detector is needed in tests to make the difference between:
            // 1) IE11/Edge: they have a native Intl API, but with some discrepancies
            // 2) IE9/IE10: they use the polyfill, and so no discrepancies
            get: function () {
                return !!global.Intl && global.Intl !== global.IntlPolyfill;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isChromeDesktop", {
            get: function () {
                return this._ua.indexOf('Chrome') > -1 && this._ua.indexOf('Mobile Safari') == -1 && this._ua.indexOf('Edge') == -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserDetection.prototype, "isOldChrome", {
            // "Old Chrome" means Chrome 3X, where there are some discrepancies in the Intl API.
            // Android 4.4 and 5.X have such browsers by default (respectively 30 and 39).
            get: function () {
                return this._ua.indexOf('Chrome') > -1 && this._ua.indexOf('Chrome/3') > -1 && this._ua.indexOf('Edge') == -1;
            },
            enumerable: true,
            configurable: true
        });
        return BrowserDetection;
    }();
    export { BrowserDetection };
    BrowserDetection.setup();
    export function dispatchEvent(element, eventType) {
        getDOM().dispatchEvent(element, getDOM().createEvent(eventType));
    }
    export function el(html) {
        return getDOM().firstChild(getDOM().content(getDOM().createTemplate(html)));
    }
    export function normalizeCSS(css) {
        return css.replace(/\s+/g, ' ').replace(/:\s/g, ':').replace(/'/g, '"').replace(/ }/g, '}').replace(/url\((\"|\s)(.+)(\"|\s)\)(\s*)/g, function () {
            var match = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                match[_i] = arguments[_i];
            }
            return "url(\"" + match[2] + "\")";
        }).replace(/\[(.+)=([^"\]]+)\]/g, function () {
            var match = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                match[_i] = arguments[_i];
            }
            return "[" + match[1] + "=\"" + match[2] + "\"]";
        });
    }
    var _singleTagWhitelist = ['br', 'hr', 'input'];
    export function stringifyElement(el /** TODO #9100 */) {
        var e_1, _a;
        var result = '';
        if (getDOM().isElementNode(el)) {
            var tagName = getDOM().tagName(el).toLowerCase();
            // Opening tag
            result += "<" + tagName;
            // Attributes in an ordered way
            var attributeMap = getDOM().attributeMap(el);
            var sortedKeys = Array.from(attributeMap.keys()).sort();
            try {
                for (var sortedKeys_1 = tslib_1.__values(sortedKeys), sortedKeys_1_1 = sortedKeys_1.next(); !sortedKeys_1_1.done; sortedKeys_1_1 = sortedKeys_1.next()) {
                    var key = sortedKeys_1_1.value;
                    var lowerCaseKey = key.toLowerCase();
                    var attValue = attributeMap.get(key);
                    if (typeof attValue !== 'string') {
                        result += " " + lowerCaseKey;
                    } else {
                        // Browsers order style rules differently. Order them alphabetically for consistency.
                        if (lowerCaseKey === 'style') {
                            attValue = attValue.split(/; ?/).filter(function (s) {
                                return !!s;
                            }).sort().map(function (s) {
                                return s + ";";
                            }).join(' ');
                        }
                        result += " " + lowerCaseKey + "=\"" + attValue + "\"";
                    }
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (sortedKeys_1_1 && !sortedKeys_1_1.done && (_a = sortedKeys_1.return)) _a.call(sortedKeys_1);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
            result += '>';
            // Children
            var childrenRoot = getDOM().templateAwareRoot(el);
            var children = childrenRoot ? getDOM().childNodes(childrenRoot) : [];
            for (var j = 0; j < children.length; j++) {
                result += stringifyElement(children[j]);
            }
            // Closing tag
            if (_singleTagWhitelist.indexOf(tagName) == -1) {
                result += "</" + tagName + ">";
            }
        } else if (getDOM().isCommentNode(el)) {
            result += "<!--" + getDOM().nodeValue(el) + "-->";
        } else {
            result += getDOM().getText(el);
        }
        return result;
    }
    export function createNgZone() {
        return new NgZone({ enableLongStackTrace: true });
    }
});
//# sourceMappingURL=browser_util.js.map