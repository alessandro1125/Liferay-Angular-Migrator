{"version":3,"sources":["../../../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeStyle as _sanitizeStyle, ɵ_sanitizeUrl as _sanitizeUrl} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n *\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n *\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n *\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n *\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n *\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n *\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n *\n */\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n\n@Injectable()\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) { super(); }\n\n  sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return _sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return _sanitizeStyle(value as string);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  private checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n  bypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n  bypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n  bypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\n}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  getTypeName() { return 'ResourceURL'; }\n}\n"],"sourceRoot":""}