{"version":3,"sources":["../../../../../../../../packages/platform-browser/src/browser/tools/common_tools.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,cAAR,QAA2C,eAA3C;AACA,aAAQ,MAAR,QAAqB,uBAArB;AACA,aAAQ,MAAR,QAAqB,WAArB;AAEA,WAAM,MAAA,yBAAA,CAAA;;;;;AACJ,oBAAmB,SAAnB,EAA6C,QAA7C,EAA6D;AAA1C,iBAAA,SAAA,GAAA,SAAA;AAA0B,iBAAA,QAAA,GAAA,QAAA;AAAoB;AAD7D;;;;;;;;;;;AAQN,WAAM,MAAA,eAAA,CAAA;;;;AAGJ,oBAAY,GAAZ,EAAkC;AAAI,iBAAK,MAAL,GAAc,IAAI,QAAJ,CAAa,GAAb,CAAiB,cAAjB,CAAd;AAAiD;;;;;;;;;;;;;;;;;;;AAmBvF,4BAAoB,MAApB,EAA+B;;AAC7B,kBAAM,SAAS,UAAU,OAAO,QAAP,CAAzB;;AACA,kBAAM,cAAc,kBAApB;;AAEA,kBAAM,sBAAsB,OAAO,OAAP,CAAe,OAAf,IAA0B,IAAtD;AACA,gBAAI,UAAU,mBAAd,EAAmC;AACjC,uBAAO,OAAP,CAAe,OAAf,CAAuB,WAAvB;AACD;;AACD,kBAAM,QAAQ,SAAS,cAAT,EAAd;;AACA,gBAAI,WAAW,CAAf;AACA,mBAAO,WAAW,CAAX,IAAiB,SAAS,cAAT,KAA4B,KAA7B,GAAsC,GAA7D,EAAkE;AAChE,qBAAK,MAAL,CAAY,IAAZ;AACA;AACD;;AACD,kBAAM,MAAM,SAAS,cAAT,EAAZ;AACA,gBAAI,UAAU,mBAAd,EAAmC;;;;;AAKjC,gCAAM,OAAO,OAAP,CAAe,UAArB,CAAiC,WAAjC;AACD;;AACD,kBAAM,YAAY,CAAC,MAAM,KAAP,IAAgB,QAAlC;AACA,mBAAO,OAAP,CAAe,GAAf,CAAmB,OAAO,QAAQ,0BAAlC;AACA,mBAAO,OAAP,CAAe,GAAf,CAAmB,GAAG,UAAU,OAAV,CAAkB,CAAlB,CAAoB,eAA1C;AAEA,mBAAO,IAAI,yBAAJ,CAA8B,SAA9B,EAAyC,QAAzC,CAAP;AACD;AAjDG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\nimport {getDOM} from '../../dom/dom_adapter';\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) { this.appRef = ref.injector.get(ApplicationRef); }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = getDOM().performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = getDOM().performanceNow();\n    if (record && isProfilerAvailable) {\n      // need to cast to <any> because type checker thinks there's no argument\n      // while in fact there is:\n      //\n      // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n      (<any>window.console.profileEnd)(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n"],"sourceRoot":""}