{"version":3,"sources":["../../../../../../../packages/platform-browser/src/browser/testability.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAA0D,oBAA1D,EAAgF,WAAW,MAA3F,QAAwG,eAAxG;AAEA,aAAQ,MAAR,QAAqB,oBAArB;AAEA,WAAM,MAAA,qBAAA,CAAA;;;;AACJ,eAAO,IAAP,GAAW;AAAK,iCAAqB,IAAI,qBAAJ,EAArB;AAAoD;;;;;AAEpE,oBAAY,QAAZ,EAAyC;AACvC,mBAAO,uBAAP,IAAkC,CAAC,IAAD,EAAY,kBAA2B,IAAvC,KAA+C;;AAC/E,sBAAM,cAAc,SAAS,qBAAT,CAA+B,IAA/B,EAAqC,eAArC,CAApB;AACA,oBAAI,eAAe,IAAnB,EAAyB;AACvB,0BAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;AACD,uBAAO,WAAP;AACD,aAND;AAQA,mBAAO,4BAAP,IAAuC,MAAM,SAAS,mBAAT,EAA7C;AAEA,mBAAO,2BAAP,IAAsC,MAAM,SAAS,kBAAT,EAA5C;;AAEA,kBAAM,gBAAgB,CAAC,QAAD,CAAc,iBAAd,KAAoC;;AACxD,sBAAM,gBAAgB,OAAO,4BAAP,GAAtB;;AACA,oBAAI,QAAQ,cAAc,MAA1B;;AACA,oBAAI,UAAU,KAAd;;AACA,sBAAM,YAAY,UAAS,QAAT,CAAsB,iBAAtB,EAAsB;AACtC,8BAAU,WAAW,QAArB;AACA;AACA,wBAAI,SAAS,CAAb,EAAgB;AACd,iCAAS,OAAT;AACD;AACF,iBAND;AAOA,8BAAc,OAAd,CAAsB,UAAS,WAAT,CAAyB,iBAAzB,EAAyB;AAC7C,gCAAY,UAAZ,CAAuB,SAAvB;AACD,iBAFD;AAGD,aAdD;AAgBA,gBAAI,CAAC,OAAO,sBAAP,CAAL,EAAqC;AACnC,uBAAO,sBAAP,IAAiC,EAAjC;AACD;AACD,mBAAO,sBAAP,EAA+B,IAA/B,CAAoC,aAApC;AACD;;;;;;;AAED,8BAAsB,QAAtB,EAAqD,IAArD,EAAgE,eAAhE,EAAwF;AAEtF,gBAAI,QAAQ,IAAZ,EAAkB;AAChB,uBAAO,IAAP;AACD;;AACD,kBAAM,IAAI,SAAS,cAAT,CAAwB,IAAxB,CAAV;AACA,gBAAI,KAAK,IAAT,EAAe;AACb,uBAAO,CAAP;AACD,aAFD,MAEO,IAAI,CAAC,eAAL,EAAsB;AAC3B,uBAAO,IAAP;AACD;AACD,gBAAI,SAAS,YAAT,CAAsB,IAAtB,CAAJ,EAAiC;AAC/B,uBAAO,KAAK,qBAAL,CAA2B,QAA3B,EAAqC,SAAS,OAAT,CAAiB,IAAjB,CAArC,EAA6D,IAA7D,CAAP;AACD;AACD,mBAAO,KAAK,qBAAL,CAA2B,QAA3B,EAAqC,SAAS,aAAT,CAAuB,IAAvB,CAArC,EAAmE,IAAnE,CAAP;AACD;AArDG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, Éµglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() { setTestabilityGetter(new BrowserGetTestability()); }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n"],"sourceRoot":""}