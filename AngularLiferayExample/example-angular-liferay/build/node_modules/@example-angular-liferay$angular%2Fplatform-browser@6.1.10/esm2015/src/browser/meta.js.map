{"version":3,"sources":["../../../../../../../packages/platform-browser/src/browser/meta.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, inject} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create Meta service.\n */\nexport function createMeta() {\n  return new Meta(inject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and add meta tags.\n *\n * @experimental\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) { this._dom = getDOM(); }\n\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\n  }\n\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector) !;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  removeTag(attrSelector: string): void { this.removeTagElement(this.getTag(attrSelector) !); }\n\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      const elem: HTMLMetaElement = this.getTag(selector) !;\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\n}\n"],"sourceRoot":""}