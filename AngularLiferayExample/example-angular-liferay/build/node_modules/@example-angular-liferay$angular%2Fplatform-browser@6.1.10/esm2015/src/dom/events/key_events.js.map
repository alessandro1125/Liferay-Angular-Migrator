{"version":3,"sources":["../../../../../../../../packages/platform-browser/src/dom/events/key_events.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @experimental\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) { super(doc); }\n\n  /**\n    * Reports whether a named key event is supported.\n    * @param eventName The event name to query.\n    * @return True if the named key event is supported.\n   */\n  supports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n  */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName) !;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {[key: string]: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop() !);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n"],"sourceRoot":""}