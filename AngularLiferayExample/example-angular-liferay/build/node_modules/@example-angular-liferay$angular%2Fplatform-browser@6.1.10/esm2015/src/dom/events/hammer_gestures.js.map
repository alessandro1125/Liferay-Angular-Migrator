{"version":3,"sources":["../../../../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, Optional, ÉµConsole as Console} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @experimental\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/** Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded. */\nexport type HammerLoader = () => Promise<void>;\n\n/** Injection token used to provide a {@link HammerLoader} to Angular. */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @experimental\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n  * Maps gesture event names to a set of configuration options\n  * that specify overrides to the default values for specific properties.\n  *\n  * The key is a supported event name to be configured,\n  * and the options object contains a set of properties, with override values\n  * to be applied to the named recognizer event.\n  * For example, to disable recognition of the rotate event, specify\n  *  `{\"rotate\": {\"enable\": false}}`.\n  *\n  * Properties that are not present take the HammerJS default values.\n  * For information about which properties are supported for which events,\n  * and their allowed and default values, see\n  * [HammerJS documentation](http://hammerjs.github.io/).\n  *\n  */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any; domEvents?: boolean; enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer !(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      this.console.warn(\n          `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n          `loaded and no custom loader has been specified.`);\n      return false;\n    }\n\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => { cancelRegistration = true; };\n\n      this.loader()\n          .then(() => {\n            // If Hammer isn't actually loaded when the custom loader resolves, give up.\n            if (!(window as any).Hammer) {\n              this.console.warn(\n                  `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n              deregister = () => {};\n              return;\n            }\n\n            if (!cancelRegistration) {\n              // Now that Hammer is loaded and the listener is being loaded for real,\n              // the deregistration function changes from canceling registration to removal.\n              deregister = this.addEventListener(element, eventName, handler);\n            }\n          })\n          .catch(() => {\n            this.console.warn(\n                `The \"${eventName}\" event cannot be bound because the custom ` +\n                `Hammer.JS loader failed.`);\n            deregister = () => {};\n          });\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => { deregister(); };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\n}\n"],"sourceRoot":""}