{"version":3,"sources":["../../../../../../../packages/platform-browser/src/dom/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,WAAQ,WAAW,MAAnB,QAAgC,eAAhC;;AAEA,QAAM,oBAAoB,UAA1B;;AACA,QAAM,mBAAmB,WAAzB;;;;;AAGA,SAAM,SAAA,mBAAA,CAA8B,KAA9B,EAA2C;AAC/C,WAAO,MAAM,OAAN,CAAc,iBAAd,EAAiC,CAAC,GAAG,CAAJ,KAAoB,MAAM,EAAE,CAAF,EAAK,WAAL,EAA3D,CAAP;AACD;;;;;AAED,SAAM,SAAA,mBAAA,CAA8B,KAA9B,EAA2C;AAC/C,WAAO,MAAM,OAAN,CAAc,gBAAd,EAAgC,CAAC,GAAG,CAAJ,KAAoB,EAAE,CAAF,EAAK,WAAL,EAApD,CAAP;AACD;;;;;;;;;AASD,SAAM,SAAA,WAAA,CAAsB,IAAtB,EAAoC,KAApC,EAA8C;AAClD,QAAI,OAAO,QAAP,KAAoB,WAApB,IAAmC,CAAC,QAAxC,EAAkD;;AAKhD,YAAM,KAAK,OAAO,IAAP,IAAe,gBAAC,OAAO,IAAP,CAAD,IAAqD,EAA/E;AACA,SAAG,IAAH,IAAW,KAAX;AACD;AACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµglobal as global} from '@angular/core';\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as{[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n"],"sourceRoot":""}