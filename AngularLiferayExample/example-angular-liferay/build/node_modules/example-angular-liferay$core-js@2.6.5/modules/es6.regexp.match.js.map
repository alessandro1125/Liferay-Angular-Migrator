{"version":3,"sources":["es6.regexp.match.js"],"names":["anObject","require","toLength","advanceStringIndex","regExpExec","defined","MATCH","$match","maybeCallNative","match","regexp","O","fn","undefined","call","RegExp","String","res","done","value","rx","S","global","fullUnicode","unicode","lastIndex","A","n","result","matchStr"],"mappings":"AAAA;;;;AAEA,MAAIA,WAAWC,QAAQ,cAAR,CAAf;AACA,MAAIC,WAAWD,QAAQ,cAAR,CAAf;AACA,MAAIE,qBAAqBF,QAAQ,yBAAR,CAAzB;AACA,MAAIG,aAAaH,QAAQ,yBAAR,CAAjB;;AAEA;AACAA,UAAQ,eAAR,EAAyB,OAAzB,EAAkC,CAAlC,EAAqC,UAAUI,OAAV,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,eAAlC,EAAmD;AACtF,WAAO;AACL;AACA;AACA,aAASC,KAAT,CAAeC,MAAf,EAAuB;AACrB,UAAIC,IAAIN,QAAQ,IAAR,CAAR;AACA,UAAIO,KAAKF,UAAUG,SAAV,GAAsBA,SAAtB,GAAkCH,OAAOJ,KAAP,CAA3C;AACA,aAAOM,OAAOC,SAAP,GAAmBD,GAAGE,IAAH,CAAQJ,MAAR,EAAgBC,CAAhB,CAAnB,GAAwC,IAAII,MAAJ,CAAWL,MAAX,EAAmBJ,KAAnB,EAA0BU,OAAOL,CAAP,CAA1B,CAA/C;AACD,KAPI;AAQL;AACA;AACA,cAAUD,MAAV,EAAkB;AAChB,UAAIO,MAAMT,gBAAgBD,MAAhB,EAAwBG,MAAxB,EAAgC,IAAhC,CAAV;AACA,UAAIO,IAAIC,IAAR,EAAc,OAAOD,IAAIE,KAAX;AACd,UAAIC,KAAKpB,SAASU,MAAT,CAAT;AACA,UAAIW,IAAIL,OAAO,IAAP,CAAR;AACA,UAAI,CAACI,GAAGE,MAAR,EAAgB,OAAOlB,WAAWgB,EAAX,EAAeC,CAAf,CAAP;AAChB,UAAIE,cAAcH,GAAGI,OAArB;AACAJ,SAAGK,SAAH,GAAe,CAAf;AACA,UAAIC,IAAI,EAAR;AACA,UAAIC,IAAI,CAAR;AACA,UAAIC,MAAJ;AACA,aAAO,CAACA,SAASxB,WAAWgB,EAAX,EAAeC,CAAf,CAAV,MAAiC,IAAxC,EAA8C;AAC5C,YAAIQ,WAAWb,OAAOY,OAAO,CAAP,CAAP,CAAf;AACAF,UAAEC,CAAF,IAAOE,QAAP;AACA,YAAIA,aAAa,EAAjB,EAAqBT,GAAGK,SAAH,GAAetB,mBAAmBkB,CAAnB,EAAsBnB,SAASkB,GAAGK,SAAZ,CAAtB,EAA8CF,WAA9C,CAAf;AACrBI;AACD;AACD,aAAOA,MAAM,CAAN,GAAU,IAAV,GAAiBD,CAAxB;AACD,KA5BI,CAAP;AA8BD,GA/BD","file":"es6.regexp.match.js","sourcesContent":["'use strict';\n\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n"]}