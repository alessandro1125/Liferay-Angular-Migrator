{"version":3,"sources":["es6.regexp.replace.js"],"names":["anObject","require","toObject","toLength","toInteger","advanceStringIndex","regExpExec","max","Math","min","floor","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","maybeToString","it","undefined","String","defined","REPLACE","$replace","maybeCallNative","replace","searchValue","replaceValue","O","fn","call","regexp","res","done","value","rx","S","functionalReplace","global","fullUnicode","unicode","lastIndex","results","result","push","matchStr","accumulatedResult","nextSourcePosition","i","length","matched","position","index","captures","j","namedCaptures","groups","replacerArgs","concat","replacement","apply","getSubstitution","slice","str","tailPos","m","symbols","match","ch","capture","charAt","n","f"],"mappings":"AAAA;;;;AAEA,MAAIA,WAAWC,QAAQ,cAAR,CAAf;AACA,MAAIC,WAAWD,QAAQ,cAAR,CAAf;AACA,MAAIE,WAAWF,QAAQ,cAAR,CAAf;AACA,MAAIG,YAAYH,QAAQ,eAAR,CAAhB;AACA,MAAII,qBAAqBJ,QAAQ,yBAAR,CAAzB;AACA,MAAIK,aAAaL,QAAQ,yBAAR,CAAjB;AACA,MAAIM,MAAMC,KAAKD,GAAf;AACA,MAAIE,MAAMD,KAAKC,GAAf;AACA,MAAIC,QAAQF,KAAKE,KAAjB;AACA,MAAIC,uBAAuB,2BAA3B;AACA,MAAIC,gCAAgC,mBAApC;;AAEA,MAAIC,gBAAgB,UAAUC,EAAV,EAAc;AAChC,WAAOA,OAAOC,SAAP,GAAmBD,EAAnB,GAAwBE,OAAOF,EAAP,CAA/B;AACD,GAFD;;AAIA;AACAb,UAAQ,eAAR,EAAyB,SAAzB,EAAoC,CAApC,EAAuC,UAAUgB,OAAV,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAsCC,eAAtC,EAAuD;AAC5F,WAAO;AACL;AACA;AACA,aAASC,OAAT,CAAiBC,WAAjB,EAA8BC,YAA9B,EAA4C;AAC1C,UAAIC,IAAIP,QAAQ,IAAR,CAAR;AACA,UAAIQ,KAAKH,eAAeP,SAAf,GAA2BA,SAA3B,GAAuCO,YAAYJ,OAAZ,CAAhD;AACA,aAAOO,OAAOV,SAAP,GACHU,GAAGC,IAAH,CAAQJ,WAAR,EAAqBE,CAArB,EAAwBD,YAAxB,CADG,GAEHJ,SAASO,IAAT,CAAcV,OAAOQ,CAAP,CAAd,EAAyBF,WAAzB,EAAsCC,YAAtC,CAFJ;AAGD,KATI;AAUL;AACA;AACA,cAAUI,MAAV,EAAkBJ,YAAlB,EAAgC;AAC9B,UAAIK,MAAMR,gBAAgBD,QAAhB,EAA0BQ,MAA1B,EAAkC,IAAlC,EAAwCJ,YAAxC,CAAV;AACA,UAAIK,IAAIC,IAAR,EAAc,OAAOD,IAAIE,KAAX;;AAEd,UAAIC,KAAK/B,SAAS2B,MAAT,CAAT;AACA,UAAIK,IAAIhB,OAAO,IAAP,CAAR;AACA,UAAIiB,oBAAoB,OAAOV,YAAP,KAAwB,UAAhD;AACA,UAAI,CAACU,iBAAL,EAAwBV,eAAeP,OAAOO,YAAP,CAAf;AACxB,UAAIW,SAASH,GAAGG,MAAhB;AACA,UAAIA,MAAJ,EAAY;AACV,YAAIC,cAAcJ,GAAGK,OAArB;AACAL,WAAGM,SAAH,GAAe,CAAf;AACD;AACD,UAAIC,UAAU,EAAd;AACA,aAAO,IAAP,EAAa;AACX,YAAIC,SAASjC,WAAWyB,EAAX,EAAeC,CAAf,CAAb;AACA,YAAIO,WAAW,IAAf,EAAqB;AACrBD,gBAAQE,IAAR,CAAaD,MAAb;AACA,YAAI,CAACL,MAAL,EAAa;AACb,YAAIO,WAAWzB,OAAOuB,OAAO,CAAP,CAAP,CAAf;AACA,YAAIE,aAAa,EAAjB,EAAqBV,GAAGM,SAAH,GAAehC,mBAAmB2B,CAAnB,EAAsB7B,SAAS4B,GAAGM,SAAZ,CAAtB,EAA8CF,WAA9C,CAAf;AACtB;AACD,UAAIO,oBAAoB,EAAxB;AACA,UAAIC,qBAAqB,CAAzB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,QAAQO,MAA5B,EAAoCD,GAApC,EAAyC;AACvCL,iBAASD,QAAQM,CAAR,CAAT;AACA,YAAIE,UAAU9B,OAAOuB,OAAO,CAAP,CAAP,CAAd;AACA,YAAIQ,WAAWxC,IAAIE,IAAIL,UAAUmC,OAAOS,KAAjB,CAAJ,EAA6BhB,EAAEa,MAA/B,CAAJ,EAA4C,CAA5C,CAAf;AACA,YAAII,WAAW,EAAf;AACA;AACA;AACA;AACA;AACA;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIX,OAAOM,MAA3B,EAAmCK,GAAnC,EAAwCD,SAAST,IAAT,CAAc3B,cAAc0B,OAAOW,CAAP,CAAd,CAAd;AACxC,YAAIC,gBAAgBZ,OAAOa,MAA3B;AACA,YAAInB,iBAAJ,EAAuB;AACrB,cAAIoB,eAAe,CAACP,OAAD,EAAUQ,MAAV,CAAiBL,QAAjB,EAA2BF,QAA3B,EAAqCf,CAArC,CAAnB;AACA,cAAImB,kBAAkBpC,SAAtB,EAAiCsC,aAAab,IAAb,CAAkBW,aAAlB;AACjC,cAAII,cAAcvC,OAAOO,aAAaiC,KAAb,CAAmBzC,SAAnB,EAA8BsC,YAA9B,CAAP,CAAlB;AACD,SAJD,MAIO;AACLE,wBAAcE,gBAAgBX,OAAhB,EAAyBd,CAAzB,EAA4Be,QAA5B,EAAsCE,QAAtC,EAAgDE,aAAhD,EAA+D5B,YAA/D,CAAd;AACD;AACD,YAAIwB,YAAYJ,kBAAhB,EAAoC;AAClCD,+BAAqBV,EAAE0B,KAAF,CAAQf,kBAAR,EAA4BI,QAA5B,IAAwCQ,WAA7D;AACAZ,+BAAqBI,WAAWD,QAAQD,MAAxC;AACD;AACF;AACD,aAAOH,oBAAoBV,EAAE0B,KAAF,CAAQf,kBAAR,CAA3B;AACD,KA7DI,CAAP;;AAgEE;AACF,aAASc,eAAT,CAAyBX,OAAzB,EAAkCa,GAAlC,EAAuCZ,QAAvC,EAAiDE,QAAjD,EAA2DE,aAA3D,EAA0EI,WAA1E,EAAuF;AACrF,UAAIK,UAAUb,WAAWD,QAAQD,MAAjC;AACA,UAAIgB,IAAIZ,SAASJ,MAAjB;AACA,UAAIiB,UAAUlD,6BAAd;AACA,UAAIuC,kBAAkBpC,SAAtB,EAAiC;AAC/BoC,wBAAgBjD,SAASiD,aAAT,CAAhB;AACAW,kBAAUnD,oBAAV;AACD;AACD,aAAOQ,SAASO,IAAT,CAAc6B,WAAd,EAA2BO,OAA3B,EAAoC,UAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AAC9D,YAAIC,OAAJ;AACA,gBAAQD,GAAGE,MAAH,CAAU,CAAV,CAAR;AACE,eAAK,GAAL;AAAU,mBAAO,GAAP;AACV,eAAK,GAAL;AAAU,mBAAOpB,OAAP;AACV,eAAK,GAAL;AAAU,mBAAOa,IAAID,KAAJ,CAAU,CAAV,EAAaX,QAAb,CAAP;AACV,eAAK,GAAL;AAAU,mBAAOY,IAAID,KAAJ,CAAUE,OAAV,CAAP;AACV,eAAK,GAAL;AACEK,sBAAUd,cAAca,GAAGN,KAAH,CAAS,CAAT,EAAY,CAAC,CAAb,CAAd,CAAV;AACA;AACF;AAAS;AACP,gBAAIS,IAAI,CAACH,EAAT;AACA,gBAAIG,MAAM,CAAV,EAAa,OAAOJ,KAAP;AACb,gBAAII,IAAIN,CAAR,EAAW;AACT,kBAAIO,IAAI1D,MAAMyD,IAAI,EAAV,CAAR;AACA,kBAAIC,MAAM,CAAV,EAAa,OAAOL,KAAP;AACb,kBAAIK,KAAKP,CAAT,EAAY,OAAOZ,SAASmB,IAAI,CAAb,MAAoBrD,SAApB,GAAgCiD,GAAGE,MAAH,CAAU,CAAV,CAAhC,GAA+CjB,SAASmB,IAAI,CAAb,IAAkBJ,GAAGE,MAAH,CAAU,CAAV,CAAxE;AACZ,qBAAOH,KAAP;AACD;AACDE,sBAAUhB,SAASkB,IAAI,CAAb,CAAV;AAjBJ;AAmBA,eAAOF,YAAYlD,SAAZ,GAAwB,EAAxB,GAA6BkD,OAApC;AACD,OAtBM,CAAP;AAuBD;AACF,GAlGD","file":"es6.regexp.replace.js","sourcesContent":["'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n"]}