{"version":3,"sources":["_for-of.js"],"names":["ctx","require","call","isArrayIter","anObject","toLength","getIterFn","BREAK","RETURN","exports","module","iterable","entries","fn","that","ITERATOR","iterFn","f","index","length","step","iterator","result","TypeError","next","done","value"],"mappings":";;AAAA,MAAIA,MAAMC,QAAQ,QAAR,CAAV;AACA,MAAIC,OAAOD,QAAQ,cAAR,CAAX;AACA,MAAIE,cAAcF,QAAQ,kBAAR,CAAlB;AACA,MAAIG,WAAWH,QAAQ,cAAR,CAAf;AACA,MAAII,WAAWJ,QAAQ,cAAR,CAAf;AACA,MAAIK,YAAYL,QAAQ,4BAAR,CAAhB;AACA,MAAIM,QAAQ,EAAZ;AACA,MAAIC,SAAS,EAAb;AACA,MAAIC,UAAUC,OAAOD,OAAP,GAAiB,UAAUE,QAAV,EAAoBC,OAApB,EAA6BC,EAA7B,EAAiCC,IAAjC,EAAuCC,QAAvC,EAAiD;AAC9E,QAAIC,SAASD,WAAW,YAAY;AAAE,aAAOJ,QAAP;AAAkB,KAA3C,GAA8CL,UAAUK,QAAV,CAA3D;AACA,QAAIM,IAAIjB,IAAIa,EAAJ,EAAQC,IAAR,EAAcF,UAAU,CAAV,GAAc,CAA5B,CAAR;AACA,QAAIM,QAAQ,CAAZ;AACA,QAAIC,MAAJ,EAAYC,IAAZ,EAAkBC,QAAlB,EAA4BC,MAA5B;AACA,QAAI,OAAON,MAAP,IAAiB,UAArB,EAAiC,MAAMO,UAAUZ,WAAW,mBAArB,CAAN;AACjC;AACA,QAAIR,YAAYa,MAAZ,CAAJ,EAAyB,KAAKG,SAASd,SAASM,SAASQ,MAAlB,CAAd,EAAyCA,SAASD,KAAlD,EAAyDA,OAAzD,EAAkE;AACzFI,eAASV,UAAUK,EAAEb,SAASgB,OAAOT,SAASO,KAAT,CAAhB,EAAiC,CAAjC,CAAF,EAAuCE,KAAK,CAAL,CAAvC,CAAV,GAA4DH,EAAEN,SAASO,KAAT,CAAF,CAArE;AACA,UAAII,WAAWf,KAAX,IAAoBe,WAAWd,MAAnC,EAA2C,OAAOc,MAAP;AAC5C,KAHD,MAGO,KAAKD,WAAWL,OAAOd,IAAP,CAAYS,QAAZ,CAAhB,EAAuC,CAAC,CAACS,OAAOC,SAASG,IAAT,EAAR,EAAyBC,IAAjE,GAAwE;AAC7EH,eAASpB,KAAKmB,QAAL,EAAeJ,CAAf,EAAkBG,KAAKM,KAAvB,EAA8Bd,OAA9B,CAAT;AACA,UAAIU,WAAWf,KAAX,IAAoBe,WAAWd,MAAnC,EAA2C,OAAOc,MAAP;AAC5C;AACF,GAdD;AAeAb,UAAQF,KAAR,GAAgBA,KAAhB;AACAE,UAAQD,MAAR,GAAiBA,MAAjB","file":"_for-of.js","sourcesContent":["var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n"]}