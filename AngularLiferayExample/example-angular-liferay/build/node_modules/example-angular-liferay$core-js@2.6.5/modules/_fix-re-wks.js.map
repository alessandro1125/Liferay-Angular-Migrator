{"version":3,"sources":["_fix-re-wks.js"],"names":["require","redefine","hide","fails","defined","wks","regexpExec","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","re","exec","result","groups","a","replace","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","apply","arguments","split","length","module","exports","KEY","SYMBOL","DELEGATES_TO_SYMBOL","O","DELEGATES_TO_EXEC","execCalled","constructor","undefined","nativeRegExpMethod","fns","maybeCallNative","nativeMethod","regexp","str","arg2","forceStringMethod","done","value","call","strfn","rxfn","String","prototype","RegExp","string","arg"],"mappings":"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","file":"_fix-re-wks.js","sourcesContent":["'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n"]}