{"version":3,"sources":["../../../../../../packages/http/src/body.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAAQ,mBAAR,QAAkC,cAAlC;AACA,aAAQ,eAAR,QAA8B,qBAA9B;;;;;;AAOA,WAAM,MAAA,IAAA,CAAA;;;;;AASJ,eAAI;AACF,gBAAI,OAAO,KAAK,KAAZ,KAAsB,QAA1B,EAAoC;AAClC,uBAAO,KAAK,KAAL,EAAU,gBAAS,KAAK,KAAxB,CAAP;AACD;AAED,gBAAI,KAAK,KAAL,YAAsB,WAA1B,EAAuC;AACrC,uBAAO,KAAK,KAAL,CAAW,KAAK,IAAL,EAAX,CAAP;AACD;AAED,mBAAO,KAAK,KAAZ;AACD;;;;;;;;;;;;;;;;;AAgBD,aAAK,eAAoC,QAAzC,EAAiD;AAC/C,gBAAI,KAAK,KAAL,YAAsB,eAA1B,EAA2C;AACzC,uBAAO,KAAK,KAAL,CAAW,QAAX,EAAP;AACD;AAED,gBAAI,KAAK,KAAL,YAAsB,WAA1B,EAAuC;AACrC,wBAAQ,YAAR;AACE,yBAAK,QAAL;AACE,+BAAO,OAAO,YAAP,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,IAAI,WAAJ,EAAe,gBAAC,KAAK,KAArB,CAAhC,CAAP;AACF,yBAAK,UAAL;AACE,+BAAO,OAAO,YAAP,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,IAAI,UAAJ,EAAc,gBAAC,KAAK,KAApB,CAAhC,CAAP;AACF;AACE,8BAAM,IAAI,KAAJ,CAAU,mCAAmC,YAAY,EAAzD,CAAN;AANJ;AAQD;AAED,gBAAI,KAAK,KAAL,IAAc,IAAlB,EAAwB;AACtB,uBAAO,EAAP;AACD;AAED,gBAAI,OAAO,KAAK,KAAZ,KAAsB,QAA1B,EAAoC;AAClC,uBAAO,KAAK,SAAL,CAAe,KAAK,KAApB,EAA2B,IAA3B,EAAiC,CAAjC,CAAP;AACD;AAED,mBAAO,KAAK,KAAL,CAAW,QAAX,EAAP;AACD;;;;;AAKD,sBAAW;AACT,gBAAI,KAAK,KAAL,YAAsB,WAA1B,EAAuC;AACrC,uBAAA,iBAAoB,KAAK;AAAzB;AACD;AAED,mBAAO,oBAAoB,KAAK,IAAL,EAApB,CAAP;AACD;;;;;AAKD,eAAI;AACF,gBAAI,KAAK,KAAL,YAAsB,IAA1B,EAAgC;AAC9B,uBAAA,iBAAa,KAAK;AAAlB;AACD;AAED,gBAAI,KAAK,KAAL,YAAsB,WAA1B,EAAuC;AACrC,uBAAO,IAAI,IAAJ,CAAS,CAAC,KAAK,KAAN,CAAT,CAAP;AACD;AAED,kBAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;AACD;AAtFG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nexport abstract class Body {\n  /**\n   * @internal\n   */\n  protected _body: any;\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse(<string>this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   */\n  text(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(this._body as ArrayBuffer));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(this._body as ArrayBuffer));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return <ArrayBuffer>this._body;\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  blob(): Blob {\n    if (this._body instanceof Blob) {\n      return <Blob>this._body;\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n"],"sourceRoot":""}