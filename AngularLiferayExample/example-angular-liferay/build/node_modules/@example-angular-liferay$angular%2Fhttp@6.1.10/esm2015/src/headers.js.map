{"version":3,"sources":["../../../../../../packages/http/src/headers.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class Headers {\n  /** @internal header names are lower case */\n  _headers: Map<string, string[]> = new Map();\n  /** @internal map lower case names to actual names */\n  _normalizedNames: Map<string, string> = new Map();\n\n  // TODO(vicb): any -> string|string[]\n  constructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  static fromResponseHeaderString(headersString: string): Headers {\n    const headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const index = line.indexOf(':');\n      if (index > 0) {\n        const name = line.slice(0, index);\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  append(name: string, value: string): void {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n\n  /**\n   * Deletes all header values for the given name.\n   */\n  delete (name: string): void {\n    const lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n\n  forEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string|null {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] { return Array.from(this._normalizedNames.values()); }\n\n  /**\n   * Sets or overrides header value for given name.\n   */\n  set(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n\n  /**\n   * Returns values of all headers.\n   */\n  values(): string[][] { return Array.from(this._headers.values()); }\n\n  /**\n   * Returns string of all headers.\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  toJSON(): {[name: string]: any} {\n    const serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name) !] = split;\n    });\n\n    return serialized;\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n\n  /**\n   * This method is not implemented.\n   */\n  entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n\n  private mayBeSetNormalizedName(name: string): void {\n    const lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n"],"sourceRoot":""}