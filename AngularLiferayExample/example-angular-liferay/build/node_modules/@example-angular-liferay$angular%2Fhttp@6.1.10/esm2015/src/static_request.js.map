{"version":3,"sources":["../../../../../../packages/http/src/static_request.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\n  /** Type of the request body **/\n  private contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n  constructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n\n  /**\n   * Returns the content type enum based on header options.\n   */\n  detectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  detectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  getBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst noop = function() {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = (w as any /** TODO #9100 */)['FormData'] || noop;\nconst Blob = (w as any /** TODO #9100 */)['Blob'] || noop;\nexport const ArrayBuffer: ArrayBufferConstructor =\n    (w as any /** TODO #9100 */)['ArrayBuffer'] || noop;\n"],"sourceRoot":""}