{"version":3,"sources":["http.js"],"names":["Injectable","NgModule","Version","Observable","ɵgetDOM","BrowserXhr","constructor","build","XMLHttpRequest","decorators","type","ctorParameters","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Error","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","headers","_headers","Map","_normalizedNames","forEach","values","name","value","append","Object","keys","Array","isArray","delete","fromResponseHeaderString","headersString","split","line","index","indexOf","slice","trim","set","getAll","push","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","toJSON","serialized","v","entries","ResponseOptions","opts","body","status","statusText","url","merge","options","BaseResponseOptions","ConnectionBackend","Connection","XSRFStrategy","normalizeMethodName","method","toUpperCase","isSuccess","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","params","param","eqIdx","key","val","list","QueryEncoder","encodeKey","standardEncoding","encodeValue","encodeURIComponent","replace","URLSearchParams","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","k","Body","json","_body","parse","text","encodingHint","String","fromCharCode","apply","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","connections","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","request","response","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","_browserJSONP","_baseResponseOptions","createConnection","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","err","setDetectedContentType","setRequestHeader","responseType","getBody","abort","contentType","CookieXSRFStrategy","_cookieName","_headerName","configureRequest","xsrfToken","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","RequestOptions","search","_mergeSearchParams","_parseParams","objParams","item","_appendParam","BaseRequestOptions","Request","requestOptions","paramsArg","urlEncodeParams","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","element","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","newOptions","Http","_backend","_defaultOptions","responseObservable","post","put","patch","head","Jsonp","defaultOptions","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","args","providers","provide","useFactory","deps","useClass","JsonpModule","VERSION","ɵangular_packages_http_http_e","ɵangular_packages_http_http_f","ɵangular_packages_http_http_a","ɵangular_packages_http_http_b","ɵangular_packages_http_http_c"],"mappings":"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","file":"http.js","sourcesContent":["/**\n * @license Angular v6.1.10\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return /** @type {?} */ ((new XMLHttpRequest())); }\n}\nBrowserXhr.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\nconst ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\nconst ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\nconst ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\nconst ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass Headers {\n    /**\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach((values, name) => {\n                values.forEach(value => this.append(name, value));\n            });\n            return;\n        }\n        Object.keys(headers).forEach((name) => {\n            /** @type {?} */\n            const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            this.delete(name);\n            values.forEach(value => this.append(name, value));\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    static fromResponseHeaderString(headersString) {\n        /** @type {?} */\n        const headers = new Headers();\n        headersString.split('\\n').forEach(line => {\n            /** @type {?} */\n            const index = line.indexOf(':');\n            if (index > 0) {\n                /** @type {?} */\n                const name = line.slice(0, index);\n                /** @type {?} */\n                const value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    }\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    append(name, value) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    delete(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    get(name) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    has(name) { return this._headers.has(name.toLowerCase()); }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    keys() { return Array.from(this._normalizedNames.values()); }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    set(name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    values() { return Array.from(this._headers.values()); }\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    toJSON() {\n        /** @type {?} */\n        const serialized = {};\n        this._headers.forEach((values, name) => {\n            /** @type {?} */\n            const split = [];\n            values.forEach(v => split.push(...v.split(',')));\n            serialized[/** @type {?} */ ((this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    getAll(name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    mayBeSetNormalizedName(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass ResponseOptions {\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { body, status, headers, statusText, type, url } = opts;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    }\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass BaseResponseOptions extends ResponseOptions {\n    constructor() {\n        super({ status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n    }\n}\nBaseResponseOptions.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBaseResponseOptions.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * @abstract\n */\nclass ConnectionBackend {\n}\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * @abstract\n */\nclass Connection {\n}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @abstract\n */\nclass XSRFStrategy {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n/** @type {?} */\nconst isSuccess = (status) => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    /** @type {?} */\n    const view = new Uint16Array(input.length);\n    for (let i = 0, strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams = '') {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n *\n */\nclass QueryEncoder {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    encodeValue(value) { return standardEncoding(value); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n */\nclass URLSearchParams {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    clone() {\n        /** @type {?} */\n        const clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    has(param) { return this.paramsMap.has(param); }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    get(param) {\n        /** @type {?} */\n        const storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    getAll(param) { return this.paramsMap.get(param) || []; }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    set(param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    setAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    append(param, val) {\n        if (val === void 0 || val === null)\n            return;\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    appendAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    replaceAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const paramsList = [];\n        this.paramsMap.forEach((values, k) => {\n            values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n        });\n        return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    delete(param) { this.paramsMap.delete(param); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nclass Body {\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    json() {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    text(encodingHint = 'legacy') {\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    arrayBuffer() {\n        if (this._body instanceof ArrayBuffer) {\n            return /** @type {?} */ (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    blob() {\n        if (this._body instanceof Blob) {\n            return /** @type {?} */ (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass Response extends Body {\n    /**\n     * @param {?} responseOptions\n     */\n    constructor(responseOptions) {\n        super();\n        this._body = responseOptions.body;\n        this.status = /** @type {?} */ ((responseOptions.status));\n        this.ok = (this.status >= 200 && this.status <= 299);\n        this.statusText = responseOptions.statusText;\n        this.headers = responseOptions.headers;\n        this.type = /** @type {?} */ ((responseOptions.type));\n        this.url = /** @type {?} */ ((responseOptions.url));\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _nextRequestId = 0;\n/** @type {?} */\nconst JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    /** @type {?} */\n    const w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nclass BrowserJsonp {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    build(url) {\n        /** @type {?} */\n        const node = document.createElement('script');\n        node.src = url;\n        return node;\n    }\n    /**\n     * @return {?}\n     */\n    nextRequestID() { return `__req${_nextRequestId++}`; }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    requestCallback(id) { return `${JSONP_HOME}.${id}.finished`; }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    exposeConnection(id, connection) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    removeConnection(id) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = null;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    send(node) { document.body.appendChild(/** @type {?} */ ((node))); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    cleanup(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    }\n}\nBrowserJsonp.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass JSONPConnection {\n    /**\n     * \\@internal\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, _dom, baseResponseOptions) {\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            this.readyState = ReadyState.Loading;\n            /** @type {?} */\n            const id = this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, this);\n            /** @type {?} */\n            const callback = _dom.requestCallback(this._id);\n            /** @type {?} */\n            let url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n            }\n            /** @type {?} */\n            const script = this._script = _dom.build(url);\n            /** @type {?} */\n            const onLoad = (event) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!this._finished) {\n                    /** @type {?} */\n                    let responseOptions = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                    return;\n                }\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: this._responseData, url });\n                if (this.baseResponseOptions) {\n                    responseOptions = this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            /** @type {?} */\n            const onError = (error) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return () => {\n                this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    finished(data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    }\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass JSONPBackend extends ConnectionBackend {\n    /**\n     * \\@internal\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    constructor(_browserJSONP, _baseResponseOptions) {\n        super();\n        this._browserJSONP = _browserJSONP;\n        this._baseResponseOptions = _baseResponseOptions;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    }\n}\nJSONPBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJSONPBackend.ctorParameters = () => [\n    { type: BrowserJsonp },\n    { type: ResponseOptions }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass XHRConnection {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, browserXHR, baseResponseOptions) {\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            /** @type {?} */\n            const _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            /** @type {?} */\n            const onLoad = () => {\n                /** @type {?} */\n                let status = _xhr.status === 1223 ? 204 : _xhr.status;\n                /** @type {?} */\n                let body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                /** @type {?} */\n                const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                /** @type {?} */\n                const url = getResponseURL(_xhr) || req.url;\n                /** @type {?} */\n                const statusText = _xhr.statusText || 'OK';\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body, status, headers, statusText, url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                /** @type {?} */\n                const response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            /** @type {?} */\n            const onError = (err) => {\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach((values, name) => _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')));\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(this.request.getBody());\n            return () => {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    setDetectedContentType(req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                /** @type {?} */\n                const blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    }\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass CookieXSRFStrategy {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    configureRequest(req) {\n        /** @type {?} */\n        const xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    }\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n */\nclass XHRBackend {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n}\nXHRBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nXHRBackend.ctorParameters = () => [\n    { type: BrowserXhr },\n    { type: ResponseOptions },\n    { type: XSRFStrategy }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass RequestOptions {\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    get search() { return this.params; }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    set search(params) { this.params = params; }\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { method, headers, body, url, search, params, withCredentials, responseType } = opts;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    }\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    _mergeSearchParams(params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    }\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    _parseParams(objParams = {}) {\n        /** @type {?} */\n        const params = new URLSearchParams();\n        Object.keys(objParams).forEach((key) => {\n            /** @type {?} */\n            const value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach((item) => this._appendParam(key, item, params));\n            }\n            else {\n                this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    }\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    _appendParam(key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    }\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass BaseRequestOptions extends RequestOptions {\n    constructor() { super({ method: RequestMethod.Get, headers: new Headers() }); }\n}\nBaseRequestOptions.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBaseRequestOptions.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass Request extends Body {\n    /**\n     * @param {?} requestOptions\n     */\n    constructor(requestOptions) {\n        super();\n        /** @type {?} */\n        const url = requestOptions.url;\n        this.url = /** @type {?} */ ((requestOptions.url));\n        /** @type {?} */\n        const paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            /** @type {?} */\n            let params;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                /** @type {?} */\n                let prefix = '?';\n                if (this.url.indexOf('?') != -1) {\n                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                this.url = url + prefix + params;\n            }\n        }\n        this._body = requestOptions.body;\n        this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        this.headers = new Headers(requestOptions.headers);\n        this.contentType = this.detectContentType();\n        this.withCredentials = /** @type {?} */ ((requestOptions.withCredentials));\n        this.responseType = /** @type {?} */ ((requestOptions.responseType));\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    detectContentType() {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    detectContentTypeFromBody() {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    getBody() {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    }\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    /** @type {?} */\n    const searchParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n        /** @type {?} */\n        const value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(element => searchParams.append(key, element.toString()));\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\n/** @type {?} */\nconst noop = function () { };\n/** @type {?} */\nconst w = typeof window == 'object' ? window : noop;\n/** @type {?} */\nconst FormData = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['FormData'] || noop;\n/** @type {?} */\nconst Blob$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['Blob'] || noop;\n/** @type {?} */\nconst ArrayBuffer$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    /** @type {?} */\n    const newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return /** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return /** @type {?} */ (newOptions.merge(new RequestOptions({ method, url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass Http {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    constructor(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    delete(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    }\n}\nHttp.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n/**\n * @deprecated see https://angular.io/guide/http\n */\nclass Jsonp extends Http {\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    constructor(backend, defaultOptions) {\n        super(backend, defaultOptions);\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n}\nJsonp.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass HttpModule {\n}\nHttpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] }\n];\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/guide/http\n */\nclass JsonpModule {\n}\nJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    JSONPBackend,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @deprecated see https://angular.io/guide/http\n  @type {?} */\nconst VERSION = new Version('6.1.10');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };\n//# sourceMappingURL=http.js.map\n"]}