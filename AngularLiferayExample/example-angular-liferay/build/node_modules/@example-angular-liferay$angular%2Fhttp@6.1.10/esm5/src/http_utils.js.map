{"version":3,"sources":["../../../../../../../../../packages/http/src/http_utils.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,aAAR,QAA4B,SAA5B;AAEA,WAAM,SAAA,mBAAA,CAA8B,MAA9B,EAA4D;AAChE,YAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC,OAAO,MAAP;AAEhC,gBAAQ,OAAO,WAAP,EAAR;AACE,iBAAK,KAAL;AACE,uBAAO,cAAc,GAArB;AACF,iBAAK,MAAL;AACE,uBAAO,cAAc,IAArB;AACF,iBAAK,KAAL;AACE,uBAAO,cAAc,GAArB;AACF,iBAAK,QAAL;AACE,uBAAO,cAAc,MAArB;AACF,iBAAK,SAAL;AACE,uBAAO,cAAc,OAArB;AACF,iBAAK,MAAL;AACE,uBAAO,cAAc,IAArB;AACF,iBAAK,OAAL;AACE,uBAAO,cAAc,KAArB;AAdJ;AAgBA,cAAM,IAAI,KAAJ,CAAU,0CAAuC,MAAvC,GAA6C,sBAAvD,CAAN;AACD;AAED,WAAO,IAAM,YAAY,UAAC,MAAD,EAAe;AAAc,eAAC,UAAU,GAAV,IAAiB,SAAlB,GAAA;AAA+B,KAA9E;AAEP,WAAM,SAAA,cAAA,CAAyB,GAAzB,EAAiC;AACrC,YAAI,iBAAiB,GAArB,EAA0B;AACxB,mBAAO,IAAI,WAAX;AACD;AACD,YAAI,mBAAmB,IAAnB,CAAwB,IAAI,qBAAJ,EAAxB,CAAJ,EAA0D;AACxD,mBAAO,IAAI,iBAAJ,CAAsB,eAAtB,CAAP;AACD;AACD,eAAO,IAAP;AACD;AAED,WAAM,SAAA,oBAAA,CAA+B,KAA/B,EAA4C;AAChD,YAAM,OAAO,IAAI,UAAJ,CAAe,MAAM,MAArB,CAAb;AACA,aAAK,IAAI,IAAI,CAAR,EAAW,SAAS,MAAM,MAA/B,EAAuC,IAAI,MAA3C,EAAmD,GAAnD,EAAwD;AACtD,iBAAK,CAAL,IAAU,MAAM,UAAN,CAAiB,CAAjB,CAAV;AACD;AACD,eAAO,KAAK,MAAZ;AACD;AAGD,WAAM,SAAA,mBAAA,CAA8B,KAA9B,EAA2C;AAC/C,YAAM,OAAO,IAAI,WAAJ,CAAgB,MAAM,MAAtB,CAAb;AACA,aAAK,IAAI,IAAI,CAAR,EAAW,SAAS,MAAM,MAA/B,EAAuC,IAAI,MAA3C,EAAmD,GAAnD,EAAwD;AACtD,iBAAK,CAAL,IAAU,MAAM,UAAN,CAAiB,CAAjB,CAAV;AACD;AACD,eAAO,KAAK,MAAZ;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const view = new Uint8Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n"],"sourceRoot":""}