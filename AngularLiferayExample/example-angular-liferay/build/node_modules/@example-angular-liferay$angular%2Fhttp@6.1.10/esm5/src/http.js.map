{"version":3,"sources":["../../../../../../../../../packages/http/src/http.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs;\n  }\n\n  return newOptions.merge(new RequestOptions({method, url})) as RequestArgs;\n}\n\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class Http {\n  constructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n}\n\n\n/**\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class Jsonp extends Http {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n}\n"],"sourceRoot":""}