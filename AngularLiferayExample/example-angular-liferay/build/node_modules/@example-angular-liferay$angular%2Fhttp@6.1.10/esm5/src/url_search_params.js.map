{"version":3,"sources":["../../../../../../../../../packages/http/src/url_search_params.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAA,WAAA,CAAqB,SAArB,EAA2C;AAAtB,YAAA,cAAA,KAAA,CAAA,EAAA;AAAA,wBAAA,EAAA;AAAsB;AACzC,YAAM,MAAM,IAAI,GAAJ,EAAZ;AACA,YAAI,UAAU,MAAV,GAAmB,CAAvB,EAA0B;AACxB,gBAAM,SAAmB,UAAU,KAAV,CAAgB,GAAhB,CAAzB;AACA,mBAAO,OAAP,CAAe,UAAC,KAAD,EAAc;AAC3B,oBAAM,QAAQ,MAAM,OAAN,CAAc,GAAd,CAAd;AACM,oBAAA,KAAA,QAAA,MAAA,CAAA,SAAA,CAAA,CAAA,GAAA,CAAA,KAAA,EAAA,EAAA,CAAA,GAAA,CAAA,MAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,MAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,oBAAC,MAAA,GAAA,CAAA,CAAD;AAAA,oBAAM,MAAA,GAAA,CAAA,CAAN;AAEN,oBAAM,OAAO,IAAI,GAAJ,CAAQ,GAAR,KAAgB,EAA7B;AACA,qBAAK,IAAL,CAAU,GAAV;AACA,oBAAI,GAAJ,CAAQ,GAAR,EAAa,IAAb;AACD,aAPD;AAQD;AACD,eAAO,GAAP;AACD;AACD;;;AAGA,QAAA,eAAA,aAAA,YAAA;AAAA,iBAAA,YAAA,GAAA,CAIC;AAHC,qBAAA,SAAA,CAAA,SAAA,GAAA,UAAU,GAAV,EAAqB;AAAY,mBAAO,iBAAiB,GAAjB,CAAP;AAA+B,SAAhE;AAEA,qBAAA,SAAA,CAAA,WAAA,GAAA,UAAY,KAAZ,EAAyB;AAAY,mBAAO,iBAAiB,KAAjB,CAAP;AAAiC,SAAtE;AACF,eAAA,YAAA;AAAC,KAJD,EAAA;;AAMA,aAAA,gBAAA,CAA0B,CAA1B,EAAmC;AACjC,eAAO,mBAAmB,CAAnB,EACF,OADE,CACM,OADN,EACe,GADf,EAEF,OAFE,CAEM,OAFN,EAEe,GAFf,EAGF,OAHE,CAGM,OAHN,EAGe,GAHf,EAIF,OAJE,CAIM,OAJN,EAIe,GAJf,EAKF,OALE,CAKM,OALN,EAKe,GALf,EAMF,OANE,CAMM,OANN,EAMe,GANf,EAOF,OAPE,CAOM,OAPN,EAOe,GAPf,EAQF,OARE,CAQM,OARN,EAQe,GARf,EASF,OATE,CASM,OATN,EASe,GATf,CAAP;AAUD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,QAAA,kBAAA,aAAA,YAAA;AAEE,iBAAA,eAAA,CACW,SADX,EAC2C,YAD3C,EAC0F;AAA/E,gBAAA,cAAA,KAAA,CAAA,EAAA;AAAA,4BAAA,EAAA;AAAsB;AAAU,gBAAA,iBAAA,KAAA,CAAA,EAAA;AAAA,+BAAA,IAAiC,YAAjC,EAAA;AAA+C;AAA/E,iBAAA,SAAA,GAAA,SAAA;AAAgC,iBAAA,YAAA,GAAA,YAAA;AACzC,iBAAK,SAAL,GAAiB,YAAY,SAAZ,CAAjB;AACD;AAED,wBAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,gBAAM,QAAQ,IAAI,eAAJ,CAAoB,EAApB,EAAwB,KAAK,YAA7B,CAAd;AACA,kBAAM,SAAN,CAAgB,IAAhB;AACA,mBAAO,KAAP;AACD,SAJD;AAMA,wBAAA,SAAA,CAAA,GAAA,GAAA,UAAI,KAAJ,EAAiB;AAAa,mBAAO,KAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,CAAP;AAAmC,SAAjE;AAEA,wBAAA,SAAA,CAAA,GAAA,GAAA,UAAI,KAAJ,EAAiB;AACf,gBAAM,cAAc,KAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,CAApB;AAEA,mBAAO,MAAM,OAAN,CAAc,WAAd,IAA6B,YAAY,CAAZ,CAA7B,GAA8C,IAArD;AACD,SAJD;AAMA,wBAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAoB;AAAc,mBAAO,KAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,KAA6B,EAApC;AAAyC,SAA3E;AAEA,wBAAA,SAAA,CAAA,GAAA,GAAA,UAAI,KAAJ,EAAmB,GAAnB,EAA8B;AAC5B,gBAAI,QAAQ,KAAK,CAAb,IAAkB,QAAQ,IAA9B,EAAoC;AAClC,qBAAK,MAAL,CAAY,KAAZ;AACA;AACD;AACD,gBAAM,OAAO,KAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,KAA6B,EAA1C;AACA,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,IAAL,CAAU,GAAV;AACA,iBAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,EAA0B,IAA1B;AACD,SATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAA,SAAA,CAAA,MAAA,GAAA,UAAO,YAAP,EAAoC;AAApC,gBAAA,QAAA,IAAA;AACE,yBAAa,SAAb,CAAuB,OAAvB,CAA+B,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC1C,oBAAM,OAAO,MAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,KAA6B,EAA1C;AACA,qBAAK,MAAL,GAAc,CAAd;AACA,qBAAK,IAAL,CAAU,MAAM,CAAN,CAAV;AACA,sBAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,EAA0B,IAA1B;AACD,aALD;AAMD,SAPD;AASA,wBAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAsB,GAAtB,EAAiC;AAC/B,gBAAI,QAAQ,KAAK,CAAb,IAAkB,QAAQ,IAA9B,EAAoC;AACpC,gBAAM,OAAO,KAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,KAA6B,EAA1C;AACA,iBAAK,IAAL,CAAU,GAAV;AACA,iBAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,EAA0B,IAA1B;AACD,SALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAA,SAAA,CAAA,SAAA,GAAA,UAAU,YAAV,EAAuC;AAAvC,gBAAA,QAAA,IAAA;AACE,yBAAa,SAAb,CAAuB,OAAvB,CAA+B,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC1C,oBAAM,OAAO,MAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,KAA6B,EAA1C;AACA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,yBAAK,IAAL,CAAU,MAAM,CAAN,CAAV;AACD;AACD,sBAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,EAA0B,IAA1B;AACD,aAND;AAOD,SARD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAA,SAAA,CAAA,UAAA,GAAA,UAAW,YAAX,EAAwC;AAAxC,gBAAA,QAAA,IAAA;AACE,yBAAa,SAAb,CAAuB,OAAvB,CAA+B,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC1C,oBAAM,OAAO,MAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,KAA6B,EAA1C;AACA,qBAAK,MAAL,GAAc,CAAd;AACA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,yBAAK,IAAL,CAAU,MAAM,CAAN,CAAV;AACD;AACD,sBAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,EAA0B,IAA1B;AACD,aAPD;AAQD,SATD;AAWA,wBAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AAAA,gBAAA,QAAA,IAAA;AACE,gBAAM,aAAuB,EAA7B;AACA,iBAAK,SAAL,CAAe,OAAf,CAAuB,UAAC,MAAD,EAAS,CAAT,EAAU;AAC/B,uBAAO,OAAP,CACI,UAAA,CAAA,EAAC;AAAI,2BAAA,WAAW,IAAX,CACD,MAAK,YAAL,CAAkB,SAAlB,CAA4B,CAA5B,IAAiC,GAAjC,GAAuC,MAAK,YAAL,CAAkB,WAAlB,CADtC,CACsC,CADtC,CAAA;AACuE,iBAFhF;AAGD,aAJD;AAKA,mBAAO,WAAW,IAAX,CAAgB,GAAhB,CAAP;AACD,SARD;AAUA,wBAAA,SAAA,CAAA,MAAA,GAAA,UAAQ,KAAR,EAAqB;AAAU,iBAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB;AAA+B,SAA9D;AACF,eAAA,eAAA;AAAC,KAvGD,EAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n **/\nexport class QueryEncoder {\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  encodeValue(value: string): string { return standardEncoding(value); }\n}\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n  constructor(\n      public rawParams: string = '', private queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n\n  clone(): URLSearchParams {\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n\n  has(param: string): boolean { return this.paramsMap.has(param); }\n\n  get(param: string): string|null {\n    const storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n\n  getAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n\n  set(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  setAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  append(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  appendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  replaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  toString(): string {\n    const paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n\n  delete (param: string): void { this.paramsMap.delete(param); }\n}\n"],"sourceRoot":""}