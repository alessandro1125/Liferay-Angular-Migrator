{"version":3,"sources":["../../../../../../../../../../packages/http/src/backends/xhr_backend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable, Observer} from 'rxjs';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n\n  setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n  constructor(\n      private _cookieName: string = 'XSRF-TOKEN', private _headerName: string = 'X-XSRF-TOKEN') {}\n\n  configureRequest(req: Request): void {\n    const xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class XHRBackend implements ConnectionBackend {\n  constructor(\n      private _browserXHR: BrowserXhr, private _baseResponseOptions: ResponseOptions,\n      private _xsrfStrategy: XSRFStrategy) {}\n\n  createConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n}\n"],"sourceRoot":""}