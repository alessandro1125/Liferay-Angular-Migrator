{"version":3,"sources":["../../../../../../../../../packages/http/src/base_request_options.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string|null;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers|null;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string|null;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  get search(): URLSearchParams { return this.params; }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  set search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n\n  // TODO(Dzmitry): remove search when this.search is removed\n  constructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  merge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n\n  private _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n\n  private _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n\n  private _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n */\n@Injectable()\nexport class BaseRequestOptions extends RequestOptions {\n  constructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\n}\n"],"sourceRoot":""}