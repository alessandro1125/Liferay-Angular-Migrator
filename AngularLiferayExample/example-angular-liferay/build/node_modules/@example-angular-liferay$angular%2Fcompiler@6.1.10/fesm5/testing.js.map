{"version":3,"sources":["../../../../../../packages/compiler/testing/src/resource_loader_mock.ts","../../../../../../packages/compiler/testing/src/schema_registry_mock.ts","../../../../../../packages/compiler/testing/src/directive_resolver_mock.ts","../../../../../../packages/compiler/testing/src/ng_module_resolver_mock.ts","../../../../../../packages/compiler/testing/src/pipe_resolver_mock.ts","../../../../../../packages/compiler/testing/src/testing.ts","../../../../../../packages/compiler/testing/public_api.ts","../../../../../../packages/compiler/testing/index.ts","../../../../../../packages/compiler/testing/testing.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\n\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport class MockResourceLoader extends ResourceLoader {\n  private _expectations: _Expectation[] = [];\n  private _definitions = new Map<string, string>();\n  private _requests: _PendingRequest[] = [];\n\n  get(url: string): Promise<string> {\n    const request = new _PendingRequest(url);\n    this._requests.push(request);\n    return request.getPromise();\n  }\n\n  hasPendingRequests() { return !!this._requests.length; }\n\n  /**\n   * Add an expectation for the given URL. Incoming requests will be checked against\n   * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n   * can be used to check if any expectations have not yet been met.\n   *\n   * The response given will be returned if the expectation matches.\n   */\n  expect(url: string, response: string) {\n    const expectation = new _Expectation(url, response);\n    this._expectations.push(expectation);\n  }\n\n  /**\n   * Add a definition for the given URL to return the given response. Unlike expectations,\n   * definitions have no order and will satisfy any matching request at any time. Also\n   * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n   * to return an error.\n   */\n  when(url: string, response: string) { this._definitions.set(url, response); }\n\n  /**\n   * Process pending requests and verify there are no outstanding expectations. Also fails\n   * if no requests are pending.\n   */\n  flush() {\n    if (this._requests.length === 0) {\n      throw new Error('No pending requests to flush');\n    }\n\n    do {\n      this._processRequest(this._requests.shift() !);\n    } while (this._requests.length > 0);\n\n    this.verifyNoOutstandingExpectations();\n  }\n\n  /**\n   * Throw an exception if any expectations have not been satisfied.\n   */\n  verifyNoOutstandingExpectations() {\n    if (this._expectations.length === 0) return;\n\n    const urls: string[] = [];\n    for (let i = 0; i < this._expectations.length; i++) {\n      const expectation = this._expectations[i];\n      urls.push(expectation.url);\n    }\n\n    throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\n  }\n\n  private _processRequest(request: _PendingRequest) {\n    const url = request.url;\n\n    if (this._expectations.length > 0) {\n      const expectation = this._expectations[0];\n      if (expectation.url == url) {\n        remove(this._expectations, expectation);\n        request.complete(expectation.response);\n        return;\n      }\n    }\n\n    if (this._definitions.has(url)) {\n      const response = this._definitions.get(url);\n      request.complete(response == null ? null : response);\n      return;\n    }\n\n    throw new Error(`Unexpected request ${url}`);\n  }\n}\n\nclass _PendingRequest {\n  // TODO(issue/24571): remove '!'.\n  resolve !: (result: string) => void;\n  // TODO(issue/24571): remove '!'.\n  reject !: (error: any) => void;\n  promise: Promise<string>;\n\n  constructor(public url: string) {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  complete(response: string|null) {\n    if (response == null) {\n      this.reject(`Failed to load ${this.url}`);\n    } else {\n      this.resolve(response);\n    }\n  }\n\n  getPromise(): Promise<string> { return this.promise; }\n}\n\nclass _Expectation {\n  url: string;\n  response: string;\n  constructor(url: string, response: string) {\n    this.url = url;\n    this.response = response;\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry, core} from '@angular/compiler';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: core.SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: core.SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] { return Object.keys(this.existingElements); }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): core.SecurityContext {\n    return core.SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string { return propName; }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null !, value: val.toString()};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileReflector, DirectiveResolver, core} from '@angular/compiler';\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<core.Type, core.Directive>();\n\n  constructor(reflector: CompileReflector) { super(reflector); }\n\n  resolve(type: core.Type): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: true): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: boolean): core.Directive|null;\n  resolve(type: core.Type, throwIfNotFound = true): core.Directive|null {\n    return this._directives.get(type) || super.resolve(type, throwIfNotFound);\n  }\n\n  /**\n   * Overrides the {@link core.Directive} for a directive.\n   */\n  setDirective(type: core.Type, metadata: core.Directive): void {\n    this._directives.set(type, metadata);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, NgModuleResolver, core} from '@angular/compiler';\n\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<core.Type, core.NgModule>();\n\n  constructor(reflector: CompileReflector) { super(reflector); }\n\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n  setNgModule(type: core.Type, metadata: core.NgModule): void {\n    this._ngModules.set(type, metadata);\n  }\n\n  /**\n   * Returns the {@link NgModule} for a module:\n   * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.NgModule {\n    return this._ngModules.get(type) || super.resolve(type, throwIfNotFound) !;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, PipeResolver, core} from '@angular/compiler';\n\nexport class MockPipeResolver extends PipeResolver {\n  private _pipes = new Map<core.Type, core.Pipe>();\n\n  constructor(refector: CompileReflector) { super(refector); }\n\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n  setPipe(type: core.Type, metadata: core.Pipe): void { this._pipes.set(type, metadata); }\n\n  /**\n   * Returns the {@link Pipe} for a pipe:\n   * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n   * default\n   * `PipeResolver`, see `setPipe`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.Pipe {\n    let metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound) !;\n    }\n    return metadata;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport * from './resource_loader_mock';\nexport * from './schema_registry_mock';\nexport * from './directive_resolver_mock';\nexport * from './ng_module_resolver_mock';\nexport * from './pipe_resolver_mock';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"node\" />\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}