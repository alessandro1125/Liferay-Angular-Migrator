{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/render3/util.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,YAAR,QAA2B,sBAA3B;AACA,WAAO,KAAK,CAAZ,MAAmB,sBAAnB;AAGA;;;AAGA,WAAM,SAAA,kBAAA,CAA6B,GAA7B,EAA+D;AACnE,YAAM,SAAS,OAAO,IAAP,CAAY,GAAZ,EAAiB,GAAjB,CAAqB,UAAA,GAAA,EAAG;AAAI,mBAAC,EAAC,KAAG,GAAJ,EAAM,OAAO,IAAI,GAAJ,CAAb,EAAuB,QAAxB,KAAC,EAAD;AAAuC,SAAnE,CAAf;AACA,eAAO,EAAE,UAAF,CAAa,MAAb,CAAP;AACD;AAED;;;;;AAKA,WAAM,SAAA,mBAAA,CAA8B,IAA9B,EAAyC,GAAzC,EAA2D;AAC/D,YAAI,MAAM,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,mBAAO,EAAE,UAAF,CAAa,KAAK,GAAL,CAAS,UAAA,KAAA,EAAK;AAAI,uBAAA,oBAAoB,KAApB,EAAA,GAAA,CAAA;AAA+B,aAAjD,CAAb,CAAP;AACD;AACD,YAAI,gBAAgB,YAApB,EAAkC;AAChC,mBAAO,IAAI,UAAJ,CAAe,IAAf,CAAP;AACD;AACD,YAAI,QAAQ,IAAZ,EAAkB;AAChB,mBAAO,EAAE,OAAF,CAAU,IAAV,CAAP;AACD;AAED,cAAM,IAAI,KAAJ,CAAU,sDAAoD,IAA9D,CAAN;AACD;AAED,WAAM,SAAA,kBAAA,CAA6B,IAA7B,EAAiD,SAAjD,EAAkE;AACtE,YAAI,SAAwB,IAA5B;AACA,YAAI,YAAY,CAAhB,EAAmB;AACjB,qBAAS,EAAT;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAApB,EAA+B,GAA/B,EAAoC;AAClC,uBAAO,IAAP,CAAY,EAAE,YAAd;AACD;AACF;AACD,eAAO,EAAE,cAAF,CAAiB,IAAjB,EAAuB,IAAvB,EAA6B,MAA7B,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol} from '../aot/static_symbol';\nimport * as o from '../output/output_ast';\nimport {OutputContext} from '../util';\n\n/**\n * Convert an object map with `Expression` values into a `LiteralMapExpr`.\n */\nexport function mapToMapExpression(map: {[key: string]: o.Expression}): o.LiteralMapExpr {\n  const result = Object.keys(map).map(key => ({key, value: map[key], quoted: false}));\n  return o.literalMap(result);\n}\n\n/**\n * Convert metadata into an `Expression` in the given `OutputContext`.\n *\n * This operation will handle arrays, references to symbols, or literal `null` or `undefined`.\n */\nexport function convertMetaToOutput(meta: any, ctx: OutputContext): o.Expression {\n  if (Array.isArray(meta)) {\n    return o.literalArr(meta.map(entry => convertMetaToOutput(entry, ctx)));\n  }\n  if (meta instanceof StaticSymbol) {\n    return ctx.importExpr(meta);\n  }\n  if (meta == null) {\n    return o.literal(meta);\n  }\n\n  throw new Error(`Internal error: Unsupported or unknown metadata: ${meta}`);\n}\n\nexport function typeWithParameters(type: o.Expression, numParams: number): o.ExpressionType {\n  let params: o.Type[]|null = null;\n  if (numParams > 0) {\n    params = [];\n    for (let i = 0; i < numParams; i++) {\n      params.push(o.DYNAMIC_TYPE);\n    }\n  }\n  return o.expressionType(type, null, params);\n}\n"],"sourceRoot":""}