Liferay.Loader.define('@example-angular-liferay$angular/compiler@6.1.10/esm5/src/render3/r3_module_compiler', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { identifierName } from '../compile_metadata';
    import { mapLiteral } from '../output/map_util';
    import * as o from '../output/output_ast';
    import { compileFactoryFunction } from './r3_factory';
    import { Identifiers as R3 } from './r3_identifiers';
    import { convertMetaToOutput, mapToMapExpression } from './util';
    /**
     * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.
     */
    export function compileNgModule(meta) {
        var moduleType = meta.type,
            bootstrap = meta.bootstrap,
            declarations = meta.declarations,
            imports = meta.imports,
            exports = meta.exports;
        var expression = o.importExpr(R3.defineNgModule).callFn([mapToMapExpression({
            type: moduleType,
            bootstrap: o.literalArr(bootstrap),
            declarations: o.literalArr(declarations),
            imports: o.literalArr(imports),
            exports: o.literalArr(exports)
        })]);
        var type = new o.ExpressionType(o.importExpr(R3.NgModuleDef, [new o.ExpressionType(moduleType), tupleTypeOf(declarations), tupleTypeOf(imports), tupleTypeOf(exports)]));
        var additionalStatements = [];
        return { expression: expression, type: type, additionalStatements: additionalStatements };
    }
    export function compileInjector(meta) {
        var expression = o.importExpr(R3.defineInjector).callFn([mapToMapExpression({
            factory: compileFactoryFunction({
                name: meta.name,
                fnOrClass: meta.type,
                deps: meta.deps,
                useNew: true,
                injectFn: R3.inject
            }),
            providers: meta.providers,
            imports: meta.imports
        })]);
        var type = new o.ExpressionType(o.importExpr(R3.InjectorDef, [new o.ExpressionType(meta.type)]));
        return { expression: expression, type: type };
    }
    // TODO(alxhub): integrate this with `compileNgModule`. Currently the two are separate operations.
    export function compileNgModuleFromRender2(ctx, ngModule, injectableCompiler) {
        var className = identifierName(ngModule.type);
        var rawImports = ngModule.rawImports ? [ngModule.rawImports] : [];
        var rawExports = ngModule.rawExports ? [ngModule.rawExports] : [];
        var injectorDefArg = mapLiteral({
            'factory': injectableCompiler.factoryFor({ type: ngModule.type, symbol: ngModule.type.reference }, ctx),
            'providers': convertMetaToOutput(ngModule.rawProviders, ctx),
            'imports': convertMetaToOutput(tslib_1.__spread(rawImports, rawExports), ctx)
        });
        var injectorDef = o.importExpr(R3.defineInjector).callFn([injectorDefArg]);
        ctx.statements.push(new o.ClassStmt(
        /* name */className,
        /* parent */null,
        /* fields */[new o.ClassField(
        /* name */'ngInjectorDef',
        /* type */o.INFERRED_TYPE,
        /* modifiers */[o.StmtModifier.Static],
        /* initializer */injectorDef)],
        /* getters */[],
        /* constructorMethod */new o.ClassMethod(null, [], []),
        /* methods */[]));
    }
    function accessExportScope(module) {
        var selectorScope = new o.ReadPropExpr(module, 'ngModuleDef');
        return new o.ReadPropExpr(selectorScope, 'exported');
    }
    function tupleTypeOf(exp) {
        var types = exp.map(function (type) {
            return o.typeofExpr(type);
        });
        return exp.length > 0 ? o.expressionType(o.literalArr(types)) : o.NONE_TYPE;
    }
});
//# sourceMappingURL=r3_module_compiler.js.map