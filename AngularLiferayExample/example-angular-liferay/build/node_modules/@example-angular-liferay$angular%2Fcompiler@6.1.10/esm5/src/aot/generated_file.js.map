{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/aot/generated_file.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAmB,gBAAnB,QAA0C,sBAA1C;AACA,aAAQ,iBAAR,QAAgC,sBAAhC;AAEA,QAAA,gBAAA,aAAA,YAAA;AAIE,iBAAA,aAAA,CACW,UADX,EACsC,UADtC,EAC0D,aAD1D,EAC2F;AAAhF,iBAAA,UAAA,GAAA,UAAA;AAA2B,iBAAA,UAAA,GAAA,UAAA;AACpC,gBAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACrC,qBAAK,MAAL,GAAc,aAAd;AACA,qBAAK,KAAL,GAAa,IAAb;AACD,aAHD,MAGO;AACL,qBAAK,MAAL,GAAc,IAAd;AACA,qBAAK,KAAL,GAAa,aAAb;AACD;AACF;AAED,sBAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAAiC;AAC/B,gBAAI,KAAK,UAAL,KAAoB,MAAM,UAA9B,EAA0C;AACxC,uBAAO,KAAP;AACD;AACD,gBAAI,KAAK,MAAT,EAAiB;AACf,uBAAO,KAAK,MAAL,KAAgB,MAAM,MAA7B;AACD;AACD,gBAAI,MAAM,KAAN,IAAe,IAAnB,EAAyB;AACvB,uBAAO,KAAP;AACD;AACD;AACA;AACA,mBAAO,iBAAiB,KAAK,KAAtB,EAA+B,MAAM,KAArC,CAAP;AACD,SAbD;AAcF,eAAA,aAAA;AAAC,KA7BD,EAAA;;AA+BA,WAAM,SAAA,YAAA,CAAuB,IAAvB,EAA4C,QAA5C,EAAiE;AAArB,YAAA,aAAA,KAAA,CAAA,EAAA;AAAA,uBAAA,EAAA;AAAqB;AACrE,YAAI,CAAC,KAAK,KAAV,EAAiB;AACf,kBAAM,IAAI,KAAJ,CAAU,sDAAoD,KAAK,UAAnE,CAAN;AACD;AACD,eAAO,IAAI,iBAAJ,GAAwB,cAAxB,CAAuC,KAAK,UAA5C,EAAwD,KAAK,KAA7D,EAAoE,QAApE,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Statement, areAllEquivalent} from '../output/output_ast';\nimport {TypeScriptEmitter} from '../output/ts_emitter';\n\nexport class GeneratedFile {\n  public source: string|null;\n  public stmts: Statement[]|null;\n\n  constructor(\n      public srcFileUrl: string, public genFileUrl: string, sourceOrStmts: string|Statement[]) {\n    if (typeof sourceOrStmts === 'string') {\n      this.source = sourceOrStmts;\n      this.stmts = null;\n    } else {\n      this.source = null;\n      this.stmts = sourceOrStmts;\n    }\n  }\n\n  isEquivalent(other: GeneratedFile): boolean {\n    if (this.genFileUrl !== other.genFileUrl) {\n      return false;\n    }\n    if (this.source) {\n      return this.source === other.source;\n    }\n    if (other.stmts == null) {\n      return false;\n    }\n    // Note: the constructor guarantees that if this.source is not filled,\n    // then this.stmts is.\n    return areAllEquivalent(this.stmts !, other.stmts !);\n  }\n}\n\nexport function toTypeScript(file: GeneratedFile, preamble: string = ''): string {\n  if (!file.stmts) {\n    throw new Error(`Illegal state: No stmts present on GeneratedFile ${file.genFileUrl}`);\n  }\n  return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\n}\n"],"sourceRoot":""}