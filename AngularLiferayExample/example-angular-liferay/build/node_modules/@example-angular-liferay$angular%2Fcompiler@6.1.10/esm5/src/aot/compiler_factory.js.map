{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/aot/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig} from '../config';\nimport {MissingTranslationStrategy, ViewEncapsulation} from '../core';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {Lexer} from '../expression_parser/lexer';\nimport {Parser} from '../expression_parser/parser';\nimport {I18NHtmlParser} from '../i18n/i18n_html_parser';\nimport {InjectableCompiler} from '../injectable_compiler';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {TypeScriptEmitter} from '../output/ts_emitter';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {StyleCompiler} from '../style_compiler';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {UrlResolver} from '../url_resolver';\nimport {syntaxError} from '../util';\nimport {TypeCheckCompiler} from '../view_compiler/type_check_compiler';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {AotCompiler} from './compiler';\nimport {AotCompilerHost} from './compiler_host';\nimport {AotCompilerOptions} from './compiler_options';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\nimport {AotSummaryResolver} from './summary_resolver';\n\nexport function createAotUrlResolver(host: {\n  resourceNameToFileName(resourceName: string, containingFileName: string): string | null;\n}): UrlResolver {\n  return {\n    resolve: (basePath: string, url: string) => {\n      const filePath = host.resourceNameToFileName(url, basePath);\n      if (!filePath) {\n        throw syntaxError(`Couldn't resolve resource ${url} from ${basePath}`);\n      }\n      return filePath;\n    }\n  };\n}\n\n/**\n * Creates a new AotCompiler based on options and a host.\n */\nexport function createAotCompiler(\n    compilerHost: AotCompilerHost, options: AotCompilerOptions,\n    errorCollector?: (error: any, type?: any) =>\n        void): {compiler: AotCompiler, reflector: StaticReflector} {\n  let translations: string = options.translations || '';\n\n  const urlResolver = createAotUrlResolver(compilerHost);\n  const symbolCache = new StaticSymbolCache();\n  const summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n  const symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n  const staticReflector =\n      new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n  let htmlParser: I18NHtmlParser;\n  if (!!options.enableIvy) {\n    // Ivy handles i18n at the compiler level so we must use a regular parser\n    htmlParser = new HtmlParser() as I18NHtmlParser;\n  } else {\n    htmlParser = new I18NHtmlParser(\n        new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n  }\n  const config = new CompilerConfig({\n    defaultEncapsulation: ViewEncapsulation.Emulated,\n    useJit: false,\n    missingTranslation: options.missingTranslation,\n    preserveWhitespaces: options.preserveWhitespaces,\n    strictInjectionParameters: options.strictInjectionParameters,\n  });\n  const normalizer = new DirectiveNormalizer(\n      {get: (url: string) => compilerHost.loadResource(url)}, urlResolver, htmlParser, config);\n  const expressionParser = new Parser(new Lexer());\n  const elementSchemaRegistry = new DomElementSchemaRegistry();\n  const tmplParser = new TemplateParser(\n      config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n  const resolver = new CompileMetadataResolver(\n      config, htmlParser, new NgModuleResolver(staticReflector),\n      new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver,\n      elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\n  // TODO(vicb): do not pass options.i18nFormat here\n  const viewCompiler = new ViewCompiler(staticReflector);\n  const typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n  const compiler = new AotCompiler(\n      config, options, compilerHost, staticReflector, resolver, tmplParser,\n      new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler,\n      new NgModuleCompiler(staticReflector),\n      new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(),\n      summaryResolver, symbolResolver);\n  return {compiler, reflector: staticReflector};\n}\n"],"sourceRoot":""}