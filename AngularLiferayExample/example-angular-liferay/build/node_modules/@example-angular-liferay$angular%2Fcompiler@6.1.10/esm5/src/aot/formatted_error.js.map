{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/aot/formatted_error.ts"],"names":[],"mappings":";;;;;;;;;AAQA,aAAQ,WAAR,QAA0B,SAA1B;AAmBA,QAAM,oBAAoB,oBAA1B;AAEA,aAAA,SAAA,CAAmB,KAAnB,EAAgC;AAC9B,YAAI,SAAS,CAAb,EAAgB,OAAO,EAAP;AAChB,YAAI,QAAQ,CAAZ,EAAe,OAAO,CAAC,EAAD,EAAK,GAAL,EAAU,IAAV,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,OAA/B,EAAwC,KAAxC,CAAP;AACf,YAAM,OAAO,UAAU,KAAK,KAAL,CAAW,QAAQ,CAAnB,CAAV,CAAb;AACA,eAAO,OAAO,IAAP,IAAe,QAAQ,CAAR,KAAc,CAAd,GAAkB,GAAlB,GAAwB,EAAvC,CAAP;AACD;AAED,aAAA,WAAA,CAAqB,KAArB,EAA+D,MAA/D,EAAiF;AAAlB,YAAA,WAAA,KAAA,CAAA,EAAA;AAAA,qBAAA,CAAA;AAAkB;AAC/E,YAAI,CAAC,KAAL,EAAY,OAAO,EAAP;AACZ,YAAM,WAAW,MAAM,QAAN,GACV,MAAM,QAAN,CAAe,QAAf,GAAuB,GAAvB,IAA2B,MAAM,QAAN,CAAe,IAAf,GAAoB,CAA/C,IAAgD,GAAhD,IAAoD,MAAM,QAAN,CAAe,MAAf,GAAsB,CAA1E,IAA2E,GADjE,GAEb,EAFJ;AAGA,YAAM,SAAS,YAAY,WAAW,CAAvB,GAA8B,WAAQ,IAAtC,GAA6C,EAA5D;AACA,YAAM,UAAU,YAAY,WAAW,CAAvB,GAA2B,SAAO,QAAlC,GAA+C,EAA/D;AACA,YAAM,UAAU,KAAG,MAAH,GAAY,MAAM,OAAlB,GAA4B,OAA5C;AAEA,eAAO,KAAG,UAAU,MAAV,CAAH,GAAuB,OAAvB,IAAkC,MAAM,IAAN,IAAe,OAAO,YAAY,MAAM,IAAlB,EAAwB,SAAS,CAAjC,CAAvB,IAAgE,EAAjG,CAAP;AACD;AAED,WAAM,SAAA,cAAA,CAAyB,KAAzB,EAAqD;AACzD,YAAM,UAAU,YAAY,KAAZ,IAAqB,GAArC;AACA,YAAM,QAAQ,YAAY,OAAZ,CAAd;AACC,cAAc,iBAAd,IAAmC,IAAnC;AACD,cAAM,KAAN,GAAc,KAAd;AACA,cAAM,QAAN,GAAiB,MAAM,QAAvB;AACA,eAAO,KAAP;AACD;AAED,WAAM,SAAA,gBAAA,CAA2B,KAA3B,EAAuC;AAC3C,eAAO,CAAC,CAAE,MAAc,iBAAd,CAAV;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {syntaxError} from '../util';\n\nexport interface Position {\n  fileName: string;\n  line: number;\n  column: number;\n}\n\nexport interface FormattedMessageChain {\n  message: string;\n  position?: Position;\n  next?: FormattedMessageChain;\n}\n\nexport type FormattedError = Error & {\n  chain: FormattedMessageChain;\n  position?: Position;\n};\n\nconst FORMATTED_MESSAGE = 'ngFormattedMessage';\n\nfunction indentStr(level: number): string {\n  if (level <= 0) return '';\n  if (level < 6) return ['', ' ', '  ', '   ', '    ', '     '][level];\n  const half = indentStr(Math.floor(level / 2));\n  return half + half + (level % 2 === 1 ? ' ' : '');\n}\n\nfunction formatChain(chain: FormattedMessageChain | undefined, indent: number = 0): string {\n  if (!chain) return '';\n  const position = chain.position ?\n      `${chain.position.fileName}(${chain.position.line+1},${chain.position.column+1})` :\n      '';\n  const prefix = position && indent === 0 ? `${position}: ` : '';\n  const postfix = position && indent !== 0 ? ` at ${position}` : '';\n  const message = `${prefix}${chain.message}${postfix}`;\n\n  return `${indentStr(indent)}${message}${(chain.next && ('\\n' + formatChain(chain.next, indent + 2))) || ''}`;\n}\n\nexport function formattedError(chain: FormattedMessageChain): FormattedError {\n  const message = formatChain(chain) + '.';\n  const error = syntaxError(message) as FormattedError;\n  (error as any)[FORMATTED_MESSAGE] = true;\n  error.chain = chain;\n  error.position = chain.position;\n  return error;\n}\n\nexport function isFormattedError(error: Error): error is FormattedError {\n  return !!(error as any)[FORMATTED_MESSAGE];\n}\n"],"sourceRoot":""}