{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/css_parser/css_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseLocation, ParseSourceSpan} from '../parse_util';\n\nimport {CssToken, CssTokenType} from './css_lexer';\n\nexport enum BlockType {\n  Import,\n  Charset,\n  Namespace,\n  Supports,\n  Keyframes,\n  MediaQuery,\n  Selector,\n  FontFace,\n  Page,\n  Document,\n  Viewport,\n  Unsupported\n}\n\nexport interface CssAstVisitor {\n  visitCssValue(ast: CssStyleValueAst, context?: any): any;\n  visitCssInlineRule(ast: CssInlineRuleAst, context?: any): any;\n  visitCssAtRulePredicate(ast: CssAtRulePredicateAst, context?: any): any;\n  visitCssKeyframeRule(ast: CssKeyframeRuleAst, context?: any): any;\n  visitCssKeyframeDefinition(ast: CssKeyframeDefinitionAst, context?: any): any;\n  visitCssMediaQueryRule(ast: CssMediaQueryRuleAst, context?: any): any;\n  visitCssSelectorRule(ast: CssSelectorRuleAst, context?: any): any;\n  visitCssSelector(ast: CssSelectorAst, context?: any): any;\n  visitCssSimpleSelector(ast: CssSimpleSelectorAst, context?: any): any;\n  visitCssPseudoSelector(ast: CssPseudoSelectorAst, context?: any): any;\n  visitCssDefinition(ast: CssDefinitionAst, context?: any): any;\n  visitCssBlock(ast: CssBlockAst, context?: any): any;\n  visitCssStylesBlock(ast: CssStylesBlockAst, context?: any): any;\n  visitCssStyleSheet(ast: CssStyleSheetAst, context?: any): any;\n  visitCssUnknownRule(ast: CssUnknownRuleAst, context?: any): any;\n  visitCssUnknownTokenList(ast: CssUnknownTokenListAst, context?: any): any;\n}\n\nexport abstract class CssAst {\n  constructor(public location: ParseSourceSpan) {}\n  get start(): ParseLocation { return this.location.start; }\n  get end(): ParseLocation { return this.location.end; }\n  abstract visit(visitor: CssAstVisitor, context?: any): any;\n}\n\nexport class CssStyleValueAst extends CssAst {\n  constructor(location: ParseSourceSpan, public tokens: CssToken[], public strValue: string) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any { return visitor.visitCssValue(this); }\n}\n\nexport abstract class CssRuleAst extends CssAst {\n  constructor(location: ParseSourceSpan) { super(location); }\n}\n\nexport class CssBlockRuleAst extends CssRuleAst {\n  constructor(\n      public location: ParseSourceSpan, public type: BlockType, public block: CssBlockAst,\n      public name: CssToken|null = null) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssBlock(this.block, context);\n  }\n}\n\nexport class CssKeyframeRuleAst extends CssBlockRuleAst {\n  constructor(location: ParseSourceSpan, name: CssToken, block: CssBlockAst) {\n    super(location, BlockType.Keyframes, block, name);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssKeyframeRule(this, context);\n  }\n}\n\nexport class CssKeyframeDefinitionAst extends CssBlockRuleAst {\n  constructor(location: ParseSourceSpan, public steps: CssToken[], block: CssBlockAst) {\n    super(location, BlockType.Keyframes, block, mergeTokens(steps, ','));\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssKeyframeDefinition(this, context);\n  }\n}\n\nexport class CssBlockDefinitionRuleAst extends CssBlockRuleAst {\n  constructor(\n      location: ParseSourceSpan, public strValue: string, type: BlockType,\n      public query: CssAtRulePredicateAst, block: CssBlockAst) {\n    super(location, type, block);\n    const firstCssToken: CssToken = query.tokens[0];\n    this.name = new CssToken(\n        firstCssToken.index, firstCssToken.column, firstCssToken.line, CssTokenType.Identifier,\n        this.strValue);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssBlock(this.block, context);\n  }\n}\n\nexport class CssMediaQueryRuleAst extends CssBlockDefinitionRuleAst {\n  constructor(\n      location: ParseSourceSpan, strValue: string, query: CssAtRulePredicateAst,\n      block: CssBlockAst) {\n    super(location, strValue, BlockType.MediaQuery, query, block);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssMediaQueryRule(this, context);\n  }\n}\n\nexport class CssAtRulePredicateAst extends CssAst {\n  constructor(location: ParseSourceSpan, public strValue: string, public tokens: CssToken[]) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssAtRulePredicate(this, context);\n  }\n}\n\nexport class CssInlineRuleAst extends CssRuleAst {\n  constructor(location: ParseSourceSpan, public type: BlockType, public value: CssStyleValueAst) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssInlineRule(this, context);\n  }\n}\n\nexport class CssSelectorRuleAst extends CssBlockRuleAst {\n  public strValue: string;\n\n  constructor(location: ParseSourceSpan, public selectors: CssSelectorAst[], block: CssBlockAst) {\n    super(location, BlockType.Selector, block);\n    this.strValue = selectors.map(selector => selector.strValue).join(',');\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssSelectorRule(this, context);\n  }\n}\n\nexport class CssDefinitionAst extends CssAst {\n  constructor(\n      location: ParseSourceSpan, public property: CssToken, public value: CssStyleValueAst) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssDefinition(this, context);\n  }\n}\n\nexport abstract class CssSelectorPartAst extends CssAst {\n  constructor(location: ParseSourceSpan) { super(location); }\n}\n\nexport class CssSelectorAst extends CssSelectorPartAst {\n  public strValue: string;\n  constructor(location: ParseSourceSpan, public selectorParts: CssSimpleSelectorAst[]) {\n    super(location);\n    this.strValue = selectorParts.map(part => part.strValue).join('');\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssSelector(this, context);\n  }\n}\n\nexport class CssSimpleSelectorAst extends CssSelectorPartAst {\n  constructor(\n      location: ParseSourceSpan, public tokens: CssToken[], public strValue: string,\n      public pseudoSelectors: CssPseudoSelectorAst[], public operator: CssToken) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssSimpleSelector(this, context);\n  }\n}\n\nexport class CssPseudoSelectorAst extends CssSelectorPartAst {\n  constructor(\n      location: ParseSourceSpan, public strValue: string, public name: string,\n      public tokens: CssToken[], public innerSelectors: CssSelectorAst[]) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssPseudoSelector(this, context);\n  }\n}\n\nexport class CssBlockAst extends CssAst {\n  constructor(location: ParseSourceSpan, public entries: CssAst[]) { super(location); }\n  visit(visitor: CssAstVisitor, context?: any): any { return visitor.visitCssBlock(this, context); }\n}\n\n/*\n a style block is different from a standard block because it contains\n css prop:value definitions. A regular block can contain a list of Ast entries.\n */\nexport class CssStylesBlockAst extends CssBlockAst {\n  constructor(location: ParseSourceSpan, public definitions: CssDefinitionAst[]) {\n    super(location, definitions);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssStylesBlock(this, context);\n  }\n}\n\nexport class CssStyleSheetAst extends CssAst {\n  constructor(location: ParseSourceSpan, public rules: CssAst[]) { super(location); }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssStyleSheet(this, context);\n  }\n}\n\nexport class CssUnknownRuleAst extends CssRuleAst {\n  constructor(location: ParseSourceSpan, public ruleName: string, public tokens: CssToken[]) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssUnknownRule(this, context);\n  }\n}\n\nexport class CssUnknownTokenListAst extends CssRuleAst {\n  constructor(location: ParseSourceSpan, public name: string, public tokens: CssToken[]) {\n    super(location);\n  }\n  visit(visitor: CssAstVisitor, context?: any): any {\n    return visitor.visitCssUnknownTokenList(this, context);\n  }\n}\n\nexport function mergeTokens(tokens: CssToken[], separator: string = ''): CssToken {\n  const mainToken = tokens[0];\n  let str = mainToken.strValue;\n  for (let i = 1; i < tokens.length; i++) {\n    str += separator + tokens[i].strValue;\n  }\n\n  return new CssToken(mainToken.index, mainToken.column, mainToken.line, mainToken.type, str);\n}\n"],"sourceRoot":""}