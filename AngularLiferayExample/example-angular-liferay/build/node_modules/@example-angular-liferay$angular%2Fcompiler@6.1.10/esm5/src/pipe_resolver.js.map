{"version":3,"sources":["../../../../../../../../../packages/compiler/src/pipe_resolver.ts"],"names":[],"mappings":";;;;;;;;;AASA,aAAoB,UAApB,QAAqC,QAArC;AACA,aAAQ,QAAR,QAAuB,sBAAvB;AACA,aAAQ,iBAAR,EAA2B,SAA3B,QAA2C,QAA3C;AAEA;;;;;;;AAOA,QAAA,eAAA,aAAA,YAAA;AACE,iBAAA,YAAA,CAAoB,UAApB,EAAgD;AAA5B,iBAAA,UAAA,GAAA,UAAA;AAAgC;AAEpD,qBAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAiB;AACf,gBAAM,eAAe,KAAK,UAAL,CAAgB,WAAhB,CAA4B,kBAAkB,IAAlB,CAA5B,CAArB;AACA,mBAAO,gBAAgB,aAAa,IAAb,CAAkB,WAAW,QAA7B,CAAvB;AACD,SAHD;AAKA;;;AAGA,qBAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAoB,eAApB,EAA0C;AAAtB,gBAAA,oBAAA,KAAA,CAAA,EAAA;AAAA,kCAAA,IAAA;AAAsB;AACxC,gBAAM,QAAQ,KAAK,UAAL,CAAgB,WAAhB,CAA4B,kBAAkB,IAAlB,CAA5B,CAAd;AACA,gBAAI,KAAJ,EAAW;AACT,oBAAM,aAAa,SAAS,KAAT,EAAgB,WAAW,QAA3B,CAAnB;AACA,oBAAI,UAAJ,EAAgB;AACd,2BAAO,UAAP;AACD;AACF;AACD,gBAAI,eAAJ,EAAqB;AACnB,sBAAM,IAAI,KAAJ,CAAU,gCAA8B,UAAU,IAAV,CAAxC,CAAN;AACD;AACD,mBAAO,IAAP;AACD,SAZD;AAaF,eAAA,YAAA;AAAC,KAxBD,EAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector} from './compile_reflector';\nimport {Pipe, Type, createPipe} from './core';\nimport {findLast} from './directive_resolver';\nimport {resolveForwardRef, stringify} from './util';\n\n/**\n * Resolve a `Type` for {@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n */\nexport class PipeResolver {\n  constructor(private _reflector: CompileReflector) {}\n\n  isPipe(type: Type) {\n    const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(createPipe.isTypeOf);\n  }\n\n  /**\n   * Return {@link Pipe} for a given `Type`.\n   */\n  resolve(type: Type, throwIfNotFound = true): Pipe|null {\n    const metas = this._reflector.annotations(resolveForwardRef(type));\n    if (metas) {\n      const annotation = findLast(metas, createPipe.isTypeOf);\n      if (annotation) {\n        return annotation;\n      }\n    }\n    if (throwIfNotFound) {\n      throw new Error(`No Pipe decorator found on ${stringify(type)}`);\n    }\n    return null;\n  }\n}\n"],"sourceRoot":""}