{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/ml_parser/html_whitespaces.ts"],"names":[],"mappings":";;;;;;;;;AAQA,WAAO,KAAK,IAAZ,MAAsB,OAAtB;AACA,aAAQ,eAAR,QAA8B,UAA9B;AACA,aAAQ,YAAR,QAA2B,QAA3B;AAEA,WAAO,IAAM,wBAAwB,uBAA9B;AAEP,QAAM,oBAAoB,IAAI,GAAJ,CAAQ,CAAC,KAAD,EAAQ,UAAR,EAAoB,UAApB,EAAgC,QAAhC,EAA0C,OAA1C,CAAR,CAA1B;AAEA;AACA;AACA,QAAM,WAAW,0EAAjB;AACA,QAAM,eAAe,IAAI,MAAJ,CAAW,OAAK,QAAL,GAAa,GAAxB,CAArB;AACA,QAAM,oBAAoB,IAAI,MAAJ,CAAW,MAAI,QAAJ,GAAY,OAAvB,EAAgC,GAAhC,CAA1B;AAEA,aAAA,0BAAA,CAAoC,KAApC,EAA2D;AACzD,eAAO,MAAM,IAAN,CAAW,UAAC,IAAD,EAAqB;AAAK,mBAAA,KAAK,IAAL,KAAA,qBAAA;AAAmC,SAAxE,CAAP;AACD;AAED;;;;;;AAMA,WAAM,SAAA,WAAA,CAAsB,KAAtB,EAAmC;AACvC;AACA,eAAO,MAAM,OAAN,CAAc,IAAI,MAAJ,CAAW,YAAX,EAAyB,GAAzB,CAAd,EAA6C,GAA7C,CAAP;AACD;AAED;;;;;;;;;;;;;;AAcA,QAAA,oBAAA,aAAA,YAAA;AAAA,iBAAA,iBAAA,GAAA,CAmCC;AAlCC,0BAAA,SAAA,CAAA,YAAA,GAAA,UAAa,OAAb,EAAoC,OAApC,EAAgD;AAC9C,gBAAI,kBAAkB,GAAlB,CAAsB,QAAQ,IAA9B,KAAuC,2BAA2B,QAAQ,KAAnC,CAA3C,EAAsF;AACpF;AACA;AACA,uBAAO,IAAI,KAAK,OAAT,CACH,QAAQ,IADL,EACW,KAAK,QAAL,CAAc,IAAd,EAAoB,QAAQ,KAA5B,CADX,EAC+C,QAAQ,QADvD,EACiE,QAAQ,UADzE,EAEH,QAAQ,eAFL,EAEsB,QAAQ,aAF9B,CAAP;AAGD;AAED,mBAAO,IAAI,KAAK,OAAT,CACH,QAAQ,IADL,EACW,QAAQ,KADnB,EAC0B,KAAK,QAAL,CAAc,IAAd,EAAoB,QAAQ,QAA5B,CAD1B,EACiE,QAAQ,UADzE,EAEH,QAAQ,eAFL,EAEsB,QAAQ,aAF9B,CAAP;AAGD,SAZD;AAcA,0BAAA,SAAA,CAAA,cAAA,GAAA,UAAe,SAAf,EAA0C,OAA1C,EAAsD;AACpD,mBAAO,UAAU,IAAV,KAAmB,qBAAnB,GAA2C,SAA3C,GAAuD,IAA9D;AACD,SAFD;AAIA,0BAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAA2B,OAA3B,EAAuC;AACrC,gBAAM,aAAa,KAAK,KAAL,CAAW,KAAX,CAAiB,YAAjB,CAAnB;AAEA,gBAAI,UAAJ,EAAgB;AACd,uBAAO,IAAI,KAAK,IAAT,CACH,YAAY,KAAK,KAAjB,EAAwB,OAAxB,CAAgC,iBAAhC,EAAmD,GAAnD,CADG,EACsD,KAAK,UAD3D,CAAP;AAED;AAED,mBAAO,IAAP;AACD,SATD;AAWA,0BAAA,SAAA,CAAA,YAAA,GAAA,UAAa,OAAb,EAAoC,OAApC,EAAgD;AAAS,mBAAO,OAAP;AAAiB,SAA1E;AAEA,0BAAA,SAAA,CAAA,cAAA,GAAA,UAAe,SAAf,EAA0C,OAA1C,EAAsD;AAAS,mBAAO,SAAP;AAAmB,SAAlF;AAEA,0BAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,aAAnB,EAAsD,OAAtD,EAAkE;AAAS,mBAAO,aAAP;AAAuB,SAAlG;AACF,eAAA,iBAAA;AAAC,KAnCD,EAAA;;AAqCA,WAAM,SAAA,iBAAA,CAA4B,iBAA5B,EAA8D;AAClE,eAAO,IAAI,eAAJ,CACH,KAAK,QAAL,CAAc,IAAI,iBAAJ,EAAd,EAAuC,kBAAkB,SAAzD,CADG,EAEH,kBAAkB,MAFf,CAAP;AAGD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from './ast';\nimport {ParseTreeResult} from './parser';\nimport {NGSP_UNICODE} from './tags';\n\nexport const PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\n\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\n\nfunction hasPreserveWhitespacesAttr(attrs: html.Attribute[]): boolean {\n  return attrs.some((attr: html.Attribute) => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n */\nexport function replaceNgsp(value: string): string {\n  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nexport class WhitespaceVisitor implements html.Visitor {\n  visitElement(element: html.Element, context: any): any {\n    if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n      // don't descent into elements where we need to preserve whitespaces\n      // but still visit all attributes to eliminate one used as a market to preserve WS\n      return new html.Element(\n          element.name, html.visitAll(this, element.attrs), element.children, element.sourceSpan,\n          element.startSourceSpan, element.endSourceSpan);\n    }\n\n    return new html.Element(\n        element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan,\n        element.startSourceSpan, element.endSourceSpan);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n  }\n\n  visitText(text: html.Text, context: any): any {\n    const isNotBlank = text.value.match(NO_WS_REGEXP);\n\n    if (isNotBlank) {\n      return new html.Text(\n          replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan);\n    }\n\n    return null;\n  }\n\n  visitComment(comment: html.Comment, context: any): any { return comment; }\n\n  visitExpansion(expansion: html.Expansion, context: any): any { return expansion; }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any { return expansionCase; }\n}\n\nexport function removeWhitespaces(htmlAstWithErrors: ParseTreeResult): ParseTreeResult {\n  return new ParseTreeResult(\n      html.visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes),\n      htmlAstWithErrors.errors);\n}\n"],"sourceRoot":""}