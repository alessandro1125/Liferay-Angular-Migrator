{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/ml_parser/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: Visitor, context: any): any;\n}\n\nexport class Text implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitText(this, context); }\n}\n\nexport class Expansion implements Node {\n  constructor(\n      public switchValue: string, public type: string, public cases: ExpansionCase[],\n      public sourceSpan: ParseSourceSpan, public switchValueSourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitExpansion(this, context); }\n}\n\nexport class ExpansionCase implements Node {\n  constructor(\n      public value: string, public expression: Node[], public sourceSpan: ParseSourceSpan,\n      public valueSourceSpan: ParseSourceSpan, public expSourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context: any): any { return visitor.visitExpansionCase(this, context); }\n}\n\nexport class Attribute implements Node {\n  constructor(\n      public name: string, public value: string, public sourceSpan: ParseSourceSpan,\n      public valueSpan?: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitAttribute(this, context); }\n}\n\nexport class Element implements Node {\n  constructor(\n      public name: string, public attrs: Attribute[], public children: Node[],\n      public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan|null = null,\n      public endSourceSpan: ParseSourceSpan|null = null) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitElement(this, context); }\n}\n\nexport class Comment implements Node {\n  constructor(public value: string|null, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitComment(this, context); }\n}\n\nexport interface Visitor {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node, context: any): any;\n\n  visitElement(element: Element, context: any): any;\n  visitAttribute(attribute: Attribute, context: any): any;\n  visitText(text: Text, context: any): any;\n  visitComment(comment: Comment, context: any): any;\n  visitExpansion(expansion: Expansion, context: any): any;\n  visitExpansionCase(expansionCase: ExpansionCase, context: any): any;\n}\n\nexport function visitAll(visitor: Visitor, nodes: Node[], context: any = null): any[] {\n  const result: any[] = [];\n\n  const visit = visitor.visit ?\n      (ast: Node) => visitor.visit !(ast, context) || ast.visit(visitor, context) :\n      (ast: Node) => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nexport class RecursiveVisitor implements Visitor {\n  constructor() {}\n\n  visitElement(ast: Element, context: any): any {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n\n  visitAttribute(ast: Attribute, context: any): any {}\n  visitText(ast: Text, context: any): any {}\n  visitComment(ast: Comment, context: any): any {}\n\n  visitExpansion(ast: Expansion, context: any): any {\n    return this.visitChildren(context, visit => { visit(ast.cases); });\n  }\n\n  visitExpansionCase(ast: ExpansionCase, context: any): any {}\n\n  private visitChildren<T extends Node>(\n      context: any, cb: (visit: (<V extends Node>(children: V[]|undefined) => void)) => void) {\n    let results: any[][] = [];\n    let t = this;\n    function visit<T extends Node>(children: T[] | undefined) {\n      if (children) results.push(visitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\nexport type HtmlAstPath = AstPath<Node>;\n\nfunction spanOf(ast: Node) {\n  const start = ast.sourceSpan.start.offset;\n  let end = ast.sourceSpan.end.offset;\n  if (ast instanceof Element) {\n    if (ast.endSourceSpan) {\n      end = ast.endSourceSpan.end.offset;\n    } else if (ast.children && ast.children.length) {\n      end = spanOf(ast.children[ast.children.length - 1]).end;\n    }\n  }\n  return {start, end};\n}\n\nexport function findNode(nodes: Node[], position: number): HtmlAstPath {\n  const path: Node[] = [];\n\n  const visitor = new class extends RecursiveVisitor {\n    visit(ast: Node, context: any): any {\n      const span = spanOf(ast);\n      if (span.start <= position && position < span.end) {\n        path.push(ast);\n      } else {\n        // Returning a value here will result in the children being skipped.\n        return true;\n      }\n    }\n  };\n\n  visitAll(visitor, nodes);\n\n  return new AstPath<Node>(path, position);\n}"],"sourceRoot":""}