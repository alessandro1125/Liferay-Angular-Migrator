{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/i18n/digest.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {utf8Encode} from '../util';\n\nimport * as i18n from './i18n_ast';\n\nexport function digest(message: i18n.Message): string {\n  return message.id || sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n\nexport function decimalDigest(message: i18n.Message): string {\n  if (message.id) {\n    return message.id;\n  }\n\n  const visitor = new _SerializerIgnoreIcuExpVisitor();\n  const parts = message.nodes.map(a => a.visit(visitor, null));\n  return computeMsgId(parts.join(''), message.meaning);\n}\n\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context: any): any { return text.value; }\n\n  visitContainer(container: i18n.Container, context: any): any {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n\n  visitIcu(icu: i18n.Icu, context: any): any {\n    const strCases =\n        Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context: any): any {\n    return ph.isVoid ?\n        `<ph tag name=\"${ph.startName}\"/>` :\n        `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context: any): any {\n    return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n}\n\nconst serializerVisitor = new _SerializerVisitor();\n\nexport function serializeNodes(nodes: i18n.Node[]): string[] {\n  return nodes.map(a => a.visit(serializerVisitor, null));\n}\n\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * @internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n  visitIcu(icu: i18n.Icu, context: any): any {\n    let strCases = Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    // Do not take the expression into account\n    return `{${icu.type}, ${strCases.join(', ')}}`;\n  }\n}\n\n/**\n * Compute the SHA1 of the given string\n *\n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n */\nexport function sha1(str: string): string {\n  const utf8 = utf8Encode(str);\n  const words32 = stringToWords32(utf8, Endian.Big);\n  const len = utf8.length * 8;\n\n  const w = new Array(80);\n  let [a, b, c, d, e]: number[] = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  words32[len >> 5] |= 0x80 << (24 - len % 32);\n  words32[((len + 64 >> 9) << 4) + 15] = len;\n\n  for (let i = 0; i < words32.length; i += 16) {\n    const [h0, h1, h2, h3, h4]: number[] = [a, b, c, d, e];\n\n    for (let j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      const [f, k] = fk(j, b, c, d);\n      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];\n    }\n\n    [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];\n  }\n\n  return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n}\n\nfunction fk(index: number, b: number, c: number, d: number): [number, number] {\n  if (index < 20) {\n    return [(b & c) | (~b & d), 0x5a827999];\n  }\n\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n\n  if (index < 60) {\n    return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n  }\n\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n */\nexport function fingerprint(str: string): [number, number] {\n  const utf8 = utf8Encode(str);\n\n  let [hi, lo] = [hash32(utf8, 0), hash32(utf8, 102072)];\n\n  if (hi == 0 && (lo == 0 || lo == 1)) {\n    hi = hi ^ 0x130f9bef;\n    lo = lo ^ -0x6b5f56d8;\n  }\n\n  return [hi, lo];\n}\n\nexport function computeMsgId(msg: string, meaning: string): string {\n  let [hi, lo] = fingerprint(msg);\n\n  if (meaning) {\n    const [him, lom] = fingerprint(meaning);\n    [hi, lo] = add64(rol64([hi, lo], 1), [him, lom]);\n  }\n\n  return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n}\n\nfunction hash32(str: string, c: number): number {\n  let [a, b] = [0x9e3779b9, 0x9e3779b9];\n  let i: number;\n\n  const len = str.length;\n\n  for (i = 0; i + 12 <= len; i += 12) {\n    a = add32(a, wordAt(str, i, Endian.Little));\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\n    c = add32(c, wordAt(str, i + 8, Endian.Little));\n    [a, b, c] = mix([a, b, c]);\n  }\n\n  a = add32(a, wordAt(str, i, Endian.Little));\n  b = add32(b, wordAt(str, i + 4, Endian.Little));\n  // the first byte of c is reserved for the length\n  c = add32(c, len);\n  c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n\n  return mix([a, b, c])[2];\n}\n\n// clang-format off\nfunction mix([a, b, c]: [number, number, number]): [number, number, number] {\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 13;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 8;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 13;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 12;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 16;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 5;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 3;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 10;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 15;\n  return [a, b, c];\n}\n// clang-format on\n\n// Utils\n\nenum Endian {\n  Little,\n  Big,\n}\n\nfunction add32(a: number, b: number): number {\n  return add32to64(a, b)[1];\n}\n\nfunction add32to64(a: number, b: number): [number, number] {\n  const low = (a & 0xffff) + (b & 0xffff);\n  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n\nfunction add64([ah, al]: [number, number], [bh, bl]: [number, number]): [number, number] {\n  const [carry, l] = add32to64(al, bl);\n  const h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\n\nfunction sub32(a: number, b: number): number {\n  const low = (a & 0xffff) - (b & 0xffff);\n  const high = (a >> 16) - (b >> 16) + (low >> 16);\n  return (high << 16) | (low & 0xffff);\n}\n\n// Rotate a 32b number left `count` position\nfunction rol32(a: number, count: number): number {\n  return (a << count) | (a >>> (32 - count));\n}\n\n// Rotate a 64b number left `count` position\nfunction rol64([hi, lo]: [number, number], count: number): [number, number] {\n  const h = (hi << count) | (lo >>> (32 - count));\n  const l = (lo << count) | (hi >>> (32 - count));\n  return [h, l];\n}\n\nfunction stringToWords32(str: string, endian: Endian): number[] {\n  const words32 = Array((str.length + 3) >>> 2);\n\n  for (let i = 0; i < words32.length; i++) {\n    words32[i] = wordAt(str, i * 4, endian);\n  }\n\n  return words32;\n}\n\nfunction byteAt(str: string, index: number): number {\n  return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n}\n\nfunction wordAt(str: string, index: number, endian: Endian): number {\n  let word = 0;\n  if (endian === Endian.Big) {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << (24 - 8 * i);\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << 8 * i;\n    }\n  }\n  return word;\n}\n\nfunction words32ToByteString(words32: number[]): string {\n  return words32.reduce((str, word) => str + word32ToByteString(word), '');\n}\n\nfunction word32ToByteString(word: number): string {\n  let str = '';\n  for (let i = 0; i < 4; i++) {\n    str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n  }\n  return str;\n}\n\nfunction byteStringToHexString(str: string): string {\n  let hex: string = '';\n  for (let i = 0; i < str.length; i++) {\n    const b = byteAt(str, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n  return hex.toLowerCase();\n}\n\n// based on http://www.danvk.org/hex2dec.html (JS can not handle more than 56b)\nfunction byteStringToDecString(str: string): string {\n  let decimal = '';\n  let toThePower = '1';\n\n  for (let i = str.length - 1; i >= 0; i--) {\n    decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n    toThePower = numberTimesBigInt(256, toThePower);\n  }\n\n  return decimal.split('').reverse().join('');\n}\n\n// x and y decimal, lowest significant digit first\nfunction addBigInt(x: string, y: string): string {\n  let sum = '';\n  const len = Math.max(x.length, y.length);\n  for (let i = 0, carry = 0; i < len || carry; i++) {\n    const tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n    if (tmpSum >= 10) {\n      carry = 1;\n      sum += tmpSum - 10;\n    } else {\n      carry = 0;\n      sum += tmpSum;\n    }\n  }\n\n  return sum;\n}\n\nfunction numberTimesBigInt(num: number, b: string): string {\n  let product = '';\n  let bToThePower = b;\n  for (; num !== 0; num = num >>> 1) {\n    if (num & 1) product = addBigInt(product, bToThePower);\n    bToThePower = addBigInt(bToThePower, bToThePower);\n  }\n  return product;\n}\n"],"sourceRoot":""}