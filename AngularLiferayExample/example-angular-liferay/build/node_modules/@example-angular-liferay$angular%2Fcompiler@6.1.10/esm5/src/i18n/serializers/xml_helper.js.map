{"version":3,"sources":["../../../../../../../../../../../packages/compiler/src/i18n/serializers/xml_helper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface IVisitor {\n  visitTag(tag: Tag): any;\n  visitText(text: Text): any;\n  visitDeclaration(decl: Declaration): any;\n  visitDoctype(doctype: Doctype): any;\n}\n\nclass _Visitor implements IVisitor {\n  visitTag(tag: Tag): string {\n    const strAttrs = this._serializeAttributes(tag.attrs);\n\n    if (tag.children.length == 0) {\n      return `<${tag.name}${strAttrs}/>`;\n    }\n\n    const strChildren = tag.children.map(node => node.visit(this));\n    return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n  }\n\n  visitText(text: Text): string { return text.value; }\n\n  visitDeclaration(decl: Declaration): string {\n    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n  }\n\n  private _serializeAttributes(attrs: {[k: string]: string}) {\n    const strAttrs = Object.keys(attrs).map((name: string) => `${name}=\"${attrs[name]}\"`).join(' ');\n    return strAttrs.length > 0 ? ' ' + strAttrs : '';\n  }\n\n  visitDoctype(doctype: Doctype): any {\n    return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n  }\n}\n\nconst _visitor = new _Visitor();\n\nexport function serialize(nodes: Node[]): string {\n  return nodes.map((node: Node): string => node.visit(_visitor)).join('');\n}\n\nexport interface Node { visit(visitor: IVisitor): any; }\n\nexport class Declaration implements Node {\n  public attrs: {[k: string]: string} = {};\n\n  constructor(unescapedAttrs: {[k: string]: string}) {\n    Object.keys(unescapedAttrs).forEach((k: string) => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor: IVisitor): any { return visitor.visitDeclaration(this); }\n}\n\nexport class Doctype implements Node {\n  constructor(public rootTag: string, public dtd: string) {}\n\n  visit(visitor: IVisitor): any { return visitor.visitDoctype(this); }\n}\n\nexport class Tag implements Node {\n  public attrs: {[k: string]: string} = {};\n\n  constructor(\n      public name: string, unescapedAttrs: {[k: string]: string} = {},\n      public children: Node[] = []) {\n    Object.keys(unescapedAttrs).forEach((k: string) => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor: IVisitor): any { return visitor.visitTag(this); }\n}\n\nexport class Text implements Node {\n  value: string;\n  constructor(unescapedValue: string) { this.value = escapeXml(unescapedValue); }\n\n  visit(visitor: IVisitor): any { return visitor.visitText(this); }\n}\n\nexport class CR extends Text {\n  constructor(ws: number = 0) { super(`\\n${new Array(ws + 1).join(' ')}`); }\n}\n\nconst _ESCAPED_CHARS: [RegExp, string][] = [\n  [/&/g, '&amp;'],\n  [/\"/g, '&quot;'],\n  [/'/g, '&apos;'],\n  [/</g, '&lt;'],\n  [/>/g, '&gt;'],\n];\n\n// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\nexport function escapeXml(text: string): string {\n  return _ESCAPED_CHARS.reduce(\n      (text: string, entry: [RegExp, string]) => text.replace(entry[0], entry[1]), text);\n}\n"],"sourceRoot":""}