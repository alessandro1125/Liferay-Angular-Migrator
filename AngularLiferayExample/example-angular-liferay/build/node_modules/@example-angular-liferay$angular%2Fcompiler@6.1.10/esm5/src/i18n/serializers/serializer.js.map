{"version":3,"sources":["../../../../../../../../../../../packages/compiler/src/i18n/serializers/serializer.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,WAAO,KAAK,IAAZ,MAAsB,aAAtB;AAEA,QAAA,aAAA,aAAA,YAAA;AAAA,iBAAA,UAAA,GAAA,CAcC;AAHC;AACA;AACA,mBAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,OAAjB,EAAsC;AAA4B,mBAAO,IAAP;AAAc,SAAhF;AACF,eAAA,UAAA;AAAC,KAdD,EAAA;;AA4BA;;;AAGA,QAAA,0BAAA,aAAA,UAAA,MAAA,EAAA;AAA6C,gBAAA,SAAA,CAAA,uBAAA,EAAA,MAAA;AAK3C;AACA,iBAAA,uBAAA,CAAY,OAAZ,EAA2C,OAA3C,EAA4E;AAA5E,gBAAA,QACE,OAAA,IAAA,CAAA,IAAA,KAAO,IADT;AAA2C,kBAAA,OAAA,GAAA,OAAA;AALnC,kBAAA,gBAAA,GAA0C,EAA1C;AACA,kBAAA,cAAA,GAAwC,EAAxC;AACA,kBAAA,gBAAA,GAA0C,EAA1C;AAKN,oBAAQ,KAAR,CAAc,OAAd,CAAsB,UAAA,IAAA,EAAI;AAAI,uBAAA,KAAK,KAAL,CAAA,KAAA,CAAA;AAAgB,aAA9C;;AACD;AAED,gCAAA,SAAA,CAAA,YAAA,GAAA,UAAa,YAAb,EAAiC;AAC/B,mBAAO,KAAK,gBAAL,CAAsB,cAAtB,CAAqC,YAArC,IACH,KAAK,gBAAL,CAAsB,YAAtB,CADG,GAEH,IAFJ;AAGD,SAJD;AAMA,gCAAA,SAAA,CAAA,cAAA,GAAA,UAAe,UAAf,EAAiC;AAC/B,mBAAO,KAAK,gBAAL,CAAsB,cAAtB,CAAqC,UAArC,IAAmD,KAAK,gBAAL,CAAsB,UAAtB,CAAnD,GACmD,IAD1D;AAED,SAHD;AAKA,gCAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAA2B,OAA3B,EAAwC;AAAS,mBAAO,IAAP;AAAc,SAA/D;AAEA,gCAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,EAApB,EAA6C,OAA7C,EAA0D;AACxD,iBAAK,oBAAL,CAA0B,GAAG,SAA7B;AACA,mBAAA,SAAA,CAAM,mBAAN,CAAyB,IAAzB,CAAyB,IAAzB,EAA0B,EAA1B,EAA8B,OAA9B;AACA,iBAAK,oBAAL,CAA0B,GAAG,SAA7B;AACD,SAJD;AAMA,gCAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,EAAjB,EAAuC,OAAvC,EAAoD;AAAS,iBAAK,oBAAL,CAA0B,GAAG,IAA7B;AAAqC,SAAlG;AAEA,gCAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,EAApB,EAA6C,OAA7C,EAA0D;AACxD,iBAAK,oBAAL,CAA0B,GAAG,IAA7B;AACD,SAFD;AAIA;AACQ,gCAAA,SAAA,CAAA,oBAAA,GAAR,UAA6B,YAA7B,EAAiD;AAC/C,gBAAI,CAAC,YAAD,IAAiB,KAAK,gBAAL,CAAsB,cAAtB,CAAqC,YAArC,CAArB,EAAyE;AACvE;AACD;AAED,gBAAI,aAAa,KAAK,OAAL,CAAa,YAAb,CAAjB;AAEA,gBAAI,KAAK,gBAAL,CAAsB,cAAtB,CAAqC,UAArC,CAAJ,EAAsD;AACpD;AACA,oBAAM,SAAS,KAAK,cAAL,CAAoB,UAApB,CAAf;AACA,qBAAK,cAAL,CAAoB,UAApB,IAAkC,SAAS,CAA3C;AACA,6BAAgB,aAAU,GAAV,GAAc,MAA9B;AACD,aALD,MAKO;AACL,qBAAK,cAAL,CAAoB,UAApB,IAAkC,CAAlC;AACD;AAED,iBAAK,gBAAL,CAAsB,YAAtB,IAAsC,UAAtC;AACA,iBAAK,gBAAL,CAAsB,UAAtB,IAAoC,YAApC;AACD,SAlBO;AAmBV,eAAA,uBAAA;AAAC,KAxDD,CAA6C,KAAK,cAAlD,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from '../i18n_ast';\n\nexport abstract class Serializer {\n  // - The `placeholders` and `placeholderToMessage` properties are irrelevant in the input messages\n  // - The `id` contains the message id that the serializer is expected to use\n  // - Placeholder names are already map to public names using the provided mapper\n  abstract write(messages: i18n.Message[], locale: string|null): string;\n\n  abstract load(content: string, url: string):\n      {locale: string | null, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}};\n\n  abstract digest(message: i18n.Message): string;\n\n  // Creates a name mapper, see `PlaceholderMapper`\n  // Returning `null` means that no name mapping is used.\n  createNameMapper(message: i18n.Message): PlaceholderMapper|null { return null; }\n}\n\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n */\nexport interface PlaceholderMapper {\n  toPublicName(internalName: string): string|null;\n\n  toInternalName(publicName: string): string|null;\n}\n\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport class SimplePlaceholderMapper extends i18n.RecurseVisitor implements PlaceholderMapper {\n  private internalToPublic: {[k: string]: string} = {};\n  private publicToNextId: {[k: string]: number} = {};\n  private publicToInternal: {[k: string]: string} = {};\n\n  // create a mapping from the message\n  constructor(message: i18n.Message, private mapName: (name: string) => string) {\n    super();\n    message.nodes.forEach(node => node.visit(this));\n  }\n\n  toPublicName(internalName: string): string|null {\n    return this.internalToPublic.hasOwnProperty(internalName) ?\n        this.internalToPublic[internalName] :\n        null;\n  }\n\n  toInternalName(publicName: string): string|null {\n    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n                                                              null;\n  }\n\n  visitText(text: i18n.Text, context?: any): any { return null; }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.startName);\n    super.visitTagPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): any { this.visitPlaceholderName(ph.name); }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.name);\n  }\n\n  // XMB placeholders could only contains A-Z, 0-9 and _\n  private visitPlaceholderName(internalName: string): void {\n    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n      return;\n    }\n\n    let publicName = this.mapName(internalName);\n\n    if (this.publicToInternal.hasOwnProperty(publicName)) {\n      // Create a new XMB when it has already been used\n      const nextId = this.publicToNextId[publicName];\n      this.publicToNextId[publicName] = nextId + 1;\n      publicName = `${publicName}_${nextId}`;\n    } else {\n      this.publicToNextId[publicName] = 1;\n    }\n\n    this.internalToPublic[internalName] = publicName;\n    this.publicToInternal[publicName] = internalName;\n  }\n}\n"],"sourceRoot":""}