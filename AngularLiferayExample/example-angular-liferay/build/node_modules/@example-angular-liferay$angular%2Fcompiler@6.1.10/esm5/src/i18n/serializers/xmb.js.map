{"version":3,"sources":["../../../../../../../../../../../packages/compiler/src/i18n/serializers/xmb.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {decimalDigest} from '../digest';\nimport * as i18n from '../i18n_ast';\n\nimport {PlaceholderMapper, Serializer, SimplePlaceholderMapper} from './serializer';\nimport * as xml from './xml_helper';\n\nconst _MESSAGES_TAG = 'messagebundle';\nconst _MESSAGE_TAG = 'msg';\nconst _PLACEHOLDER_TAG = 'ph';\nconst _EXEMPLE_TAG = 'ex';\nconst _SOURCE_TAG = 'source';\n\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\n\nexport class Xmb extends Serializer {\n  write(messages: i18n.Message[], locale: string|null): string {\n    const exampleVisitor = new ExampleVisitor();\n    const visitor = new _Visitor();\n    let rootNode = new xml.Tag(_MESSAGES_TAG);\n\n    messages.forEach(message => {\n      const attrs: {[k: string]: string} = {id: message.id};\n\n      if (message.description) {\n        attrs['desc'] = message.description;\n      }\n\n      if (message.meaning) {\n        attrs['meaning'] = message.meaning;\n      }\n\n      let sourceTags: xml.Tag[] = [];\n      message.sources.forEach((source: i18n.MessageSpan) => {\n        sourceTags.push(new xml.Tag(_SOURCE_TAG, {}, [\n          new xml.Text(\n              `${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)\n        ]));\n      });\n\n      rootNode.children.push(\n          new xml.CR(2),\n          new xml.Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\n    });\n\n    rootNode.children.push(new xml.CR());\n\n    return xml.serialize([\n      new xml.Declaration({version: '1.0', encoding: 'UTF-8'}),\n      new xml.CR(),\n      new xml.Doctype(_MESSAGES_TAG, _DOCTYPE),\n      new xml.CR(),\n      exampleVisitor.addDefaultExamples(rootNode),\n      new xml.CR(),\n    ]);\n  }\n\n  load(content: string, url: string):\n      {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}} {\n    throw new Error('Unsupported');\n  }\n\n  digest(message: i18n.Message): string { return digest(message); }\n\n\n  createNameMapper(message: i18n.Message): PlaceholderMapper {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n}\n\nclass _Visitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context?: any): xml.Node[] { return [new xml.Text(text.value)]; }\n\n  visitContainer(container: i18n.Container, context: any): xml.Node[] {\n    const nodes: xml.Node[] = [];\n    container.children.forEach((node: i18n.Node) => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): xml.Node[] {\n    const nodes = [new xml.Text(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n\n    Object.keys(icu.cases).forEach((c: string) => {\n      nodes.push(new xml.Text(`${c} {`), ...icu.cases[c].visit(this), new xml.Text(`} `));\n    });\n\n    nodes.push(new xml.Text(`}`));\n\n    return nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): xml.Node[] {\n    const startEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`<${ph.tag}>`)]);\n    const startTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.startName}, [startEx]);\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [startTagPh];\n    }\n\n    const closeEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`</${ph.tag}>`)]);\n    const closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.closeName}, [closeEx]);\n\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): xml.Node[] {\n    const exTag = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`{{${ph.value}}}`)]);\n    return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name}, [exTag])];\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): xml.Node[] {\n    const exTag = new xml.Tag(_EXEMPLE_TAG, {}, [\n      new xml.Text(\n          `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map((value: string) => value + ' {...}').join(' ')}}`)\n    ]);\n    return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name}, [exTag])];\n  }\n\n  serialize(nodes: i18n.Node[]): xml.Node[] {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\n\nexport function digest(message: i18n.Message): string {\n  return decimalDigest(message);\n}\n\n// TC requires at least one non-empty example on placeholders\nclass ExampleVisitor implements xml.IVisitor {\n  addDefaultExamples(node: xml.Node): xml.Node {\n    node.visit(this);\n    return node;\n  }\n\n  visitTag(tag: xml.Tag): void {\n    if (tag.name === _PLACEHOLDER_TAG) {\n      if (!tag.children || tag.children.length == 0) {\n        const exText = new xml.Text(tag.attrs['name'] || '...');\n        tag.children = [new xml.Tag(_EXEMPLE_TAG, {}, [exText])];\n      }\n    } else if (tag.children) {\n      tag.children.forEach(node => node.visit(this));\n    }\n  }\n\n  visitText(text: xml.Text): void {}\n  visitDeclaration(decl: xml.Declaration): void {}\n  visitDoctype(doctype: xml.Doctype): void {}\n}\n\n// XMB/XTB placeholders can only contain A-Z, 0-9 and _\nexport function toPublicName(internalName: string): string {\n  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n"],"sourceRoot":""}