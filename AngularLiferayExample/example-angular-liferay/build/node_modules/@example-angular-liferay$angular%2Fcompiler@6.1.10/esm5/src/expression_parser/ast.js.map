{"version":3,"sources":["../../../../../../../../../../packages/compiler/src/expression_parser/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '../core';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport class ParserError {\n  public message: string;\n  constructor(\n      message: string, public input: string, public errLocation: string, public ctxLocation?: any) {\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\n\nexport class ParseSpan {\n  constructor(public start: number, public end: number) {}\n}\n\nexport class AST {\n  constructor(public span: ParseSpan) {}\n  visit(visitor: AstVisitor, context: any = null): any { return null; }\n  toString(): string { return 'AST'; }\n}\n\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n  constructor(\n      span: ParseSpan, public prefix: string, public uninterpretedExpression: string,\n      public location: any) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n  toString(): string { return 'Quote'; }\n}\n\nexport class EmptyExpr extends AST {\n  visit(visitor: AstVisitor, context: any = null) {\n    // do nothing\n  }\n}\n\nexport class ImplicitReceiver extends AST {\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nexport class Conditional extends AST {\n  constructor(span: ParseSpan, public condition: AST, public trueExp: AST, public falseExp: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitConditional(this, context);\n  }\n}\n\nexport class PropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\n\nexport class PropertyWrite extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public value: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\n\nexport class SafePropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\n\nexport class KeyedRead extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\n\nexport class KeyedWrite extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST, public value: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\n\nexport class BindingPipe extends AST {\n  constructor(span: ParseSpan, public exp: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nexport class LiteralPrimitive extends AST {\n  constructor(span: ParseSpan, public value: any) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\n\nexport class LiteralArray extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\n\nexport type LiteralMapKey = {\n  key: string; quoted: boolean;\n};\n\nexport class LiteralMap extends AST {\n  constructor(span: ParseSpan, public keys: LiteralMapKey[], public values: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\n\nexport class Interpolation extends AST {\n  constructor(span: ParseSpan, public strings: any[], public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitInterpolation(this, context);\n  }\n}\n\nexport class Binary extends AST {\n  constructor(span: ParseSpan, public operation: string, public left: AST, public right: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitBinary(this, context);\n  }\n}\n\nexport class PrefixNot extends AST {\n  constructor(span: ParseSpan, public expression: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\n\nexport class NonNullAssert extends AST {\n  constructor(span: ParseSpan, public expression: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitNonNullAssert(this, context);\n  }\n}\n\nexport class MethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitMethodCall(this, context);\n  }\n}\n\nexport class SafeMethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n}\n\nexport class FunctionCall extends AST {\n  constructor(span: ParseSpan, public target: AST|null, public args: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitFunctionCall(this, context);\n  }\n}\n\nexport class ASTWithSource extends AST {\n  constructor(\n      public ast: AST, public source: string|null, public location: string,\n      public errors: ParserError[]) {\n    super(new ParseSpan(0, source == null ? 0 : source.length));\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n  toString(): string { return `${this.source} in ${this.location}`; }\n}\n\nexport class TemplateBinding {\n  constructor(\n      public span: ParseSpan, public key: string, public keyIsVar: boolean, public name: string,\n      public expression: ASTWithSource|null) {}\n}\n\nexport interface AstVisitor {\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitNonNullAssert(ast: NonNullAssert, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitQuote(ast: Quote, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n  visit?(ast: AST, context?: any): any;\n}\n\nexport class NullAstVisitor implements AstVisitor {\n  visitBinary(ast: Binary, context: any): any {}\n  visitChain(ast: Chain, context: any): any {}\n  visitConditional(ast: Conditional, context: any): any {}\n  visitFunctionCall(ast: FunctionCall, context: any): any {}\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any {}\n  visitInterpolation(ast: Interpolation, context: any): any {}\n  visitKeyedRead(ast: KeyedRead, context: any): any {}\n  visitKeyedWrite(ast: KeyedWrite, context: any): any {}\n  visitLiteralArray(ast: LiteralArray, context: any): any {}\n  visitLiteralMap(ast: LiteralMap, context: any): any {}\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any {}\n  visitMethodCall(ast: MethodCall, context: any): any {}\n  visitPipe(ast: BindingPipe, context: any): any {}\n  visitPrefixNot(ast: PrefixNot, context: any): any {}\n  visitNonNullAssert(ast: NonNullAssert, context: any): any {}\n  visitPropertyRead(ast: PropertyRead, context: any): any {}\n  visitPropertyWrite(ast: PropertyWrite, context: any): any {}\n  visitQuote(ast: Quote, context: any): any {}\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any {}\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any {}\n}\n\nexport class RecursiveAstVisitor implements AstVisitor {\n  visitBinary(ast: Binary, context: any): any {\n    ast.left.visit(this);\n    ast.right.visit(this);\n    return null;\n  }\n  visitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n  visitConditional(ast: Conditional, context: any): any {\n    ast.condition.visit(this);\n    ast.trueExp.visit(this);\n    ast.falseExp.visit(this);\n    return null;\n  }\n  visitPipe(ast: BindingPipe, context: any): any {\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitFunctionCall(ast: FunctionCall, context: any): any {\n    ast.target !.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n  visitInterpolation(ast: Interpolation, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitKeyedRead(ast: KeyedRead, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    return null;\n  }\n  visitKeyedWrite(ast: KeyedWrite, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitLiteralArray(ast: LiteralArray, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n  visitMethodCall(ast: MethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitPrefixNot(ast: PrefixNot, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n  visitNonNullAssert(ast: NonNullAssert, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n  visitPropertyRead(ast: PropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitPropertyWrite(ast: PropertyWrite, context: any): any {\n    ast.receiver.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitAll(asts: AST[], context: any): any {\n    asts.forEach(ast => ast.visit(this, context));\n    return null;\n  }\n  visitQuote(ast: Quote, context: any): any { return null; }\n}\n\nexport class AstTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n  visitInterpolation(ast: Interpolation, context: any): AST {\n    return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n    return new LiteralPrimitive(ast.span, ast.value);\n  }\n\n  visitPropertyRead(ast: PropertyRead, context: any): AST {\n    return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitMethodCall(ast: MethodCall, context: any): AST {\n    return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    return new SafeMethodCall(\n        ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitFunctionCall(ast: FunctionCall, context: any): AST {\n    return new FunctionCall(ast.span, ast.target !.visit(this), this.visitAll(ast.args));\n  }\n\n  visitLiteralArray(ast: LiteralArray, context: any): AST {\n    return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralMap(ast: LiteralMap, context: any): AST {\n    return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n  }\n\n  visitBinary(ast: Binary, context: any): AST {\n    return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n\n  visitPrefixNot(ast: PrefixNot, context: any): AST {\n    return new PrefixNot(ast.span, ast.expression.visit(this));\n  }\n\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST {\n    return new NonNullAssert(ast.span, ast.expression.visit(this));\n  }\n\n  visitConditional(ast: Conditional, context: any): AST {\n    return new Conditional(\n        ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n\n  visitPipe(ast: BindingPipe, context: any): AST {\n    return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitKeyedRead(ast: KeyedRead, context: any): AST {\n    return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n  }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    return new KeyedWrite(\n        ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n\n  visitAll(asts: any[]): any[] {\n    const res = new Array(asts.length);\n    for (let i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n\n  visitChain(ast: Chain, context: any): AST {\n    return new Chain(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitQuote(ast: Quote, context: any): AST {\n    return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n}\n\n// A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\nexport class AstMemoryEfficientTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n  visitInterpolation(ast: Interpolation, context: any): Interpolation {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions)\n      return new Interpolation(ast.span, ast.strings, expressions);\n    return ast;\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST { return ast; }\n\n  visitPropertyRead(ast: PropertyRead, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new PropertyRead(ast.span, receiver, ast.name);\n    }\n    return ast;\n  }\n\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    const value = ast.value.visit(this);\n    if (receiver !== ast.receiver || value !== ast.value) {\n      return new PropertyWrite(ast.span, receiver, ast.name, value);\n    }\n    return ast;\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new SafePropertyRead(ast.span, receiver, ast.name);\n    }\n    return ast;\n  }\n\n  visitMethodCall(ast: MethodCall, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new MethodCall(ast.span, receiver, ast.name, this.visitAll(ast.args));\n    }\n    return ast;\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    const args = this.visitAll(ast.args);\n    if (receiver !== ast.receiver || args !== ast.args) {\n      return new SafeMethodCall(ast.span, receiver, ast.name, args);\n    }\n    return ast;\n  }\n\n  visitFunctionCall(ast: FunctionCall, context: any): AST {\n    const target = ast.target && ast.target.visit(this);\n    const args = this.visitAll(ast.args);\n    if (target !== ast.target || args !== ast.args) {\n      return new FunctionCall(ast.span, target, args);\n    }\n    return ast;\n  }\n\n  visitLiteralArray(ast: LiteralArray, context: any): AST {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new LiteralArray(ast.span, expressions);\n    }\n    return ast;\n  }\n\n  visitLiteralMap(ast: LiteralMap, context: any): AST {\n    const values = this.visitAll(ast.values);\n    if (values !== ast.values) {\n      return new LiteralMap(ast.span, ast.keys, values);\n    }\n    return ast;\n  }\n\n  visitBinary(ast: Binary, context: any): AST {\n    const left = ast.left.visit(this);\n    const right = ast.right.visit(this);\n    if (left !== ast.left || right !== ast.right) {\n      return new Binary(ast.span, ast.operation, left, right);\n    }\n    return ast;\n  }\n\n  visitPrefixNot(ast: PrefixNot, context: any): AST {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new PrefixNot(ast.span, expression);\n    }\n    return ast;\n  }\n\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new NonNullAssert(ast.span, expression);\n    }\n    return ast;\n  }\n\n  visitConditional(ast: Conditional, context: any): AST {\n    const condition = ast.condition.visit(this);\n    const trueExp = ast.trueExp.visit(this);\n    const falseExp = ast.falseExp.visit(this);\n    if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== falseExp) {\n      return new Conditional(ast.span, condition, trueExp, falseExp);\n    }\n    return ast;\n  }\n\n  visitPipe(ast: BindingPipe, context: any): AST {\n    const exp = ast.exp.visit(this);\n    const args = this.visitAll(ast.args);\n    if (exp !== ast.exp || args !== ast.args) {\n      return new BindingPipe(ast.span, exp, ast.name, args);\n    }\n    return ast;\n  }\n\n  visitKeyedRead(ast: KeyedRead, context: any): AST {\n    const obj = ast.obj.visit(this);\n    const key = ast.key.visit(this);\n    if (obj !== ast.obj || key !== ast.key) {\n      return new KeyedRead(ast.span, obj, key);\n    }\n    return ast;\n  }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    const obj = ast.obj.visit(this);\n    const key = ast.key.visit(this);\n    const value = ast.value.visit(this);\n    if (obj !== ast.obj || key !== ast.key || value !== ast.value) {\n      return new KeyedWrite(ast.span, obj, key, value);\n    }\n    return ast;\n  }\n\n  visitAll(asts: any[]): any[] {\n    const res = new Array(asts.length);\n    let modified = false;\n    for (let i = 0; i < asts.length; ++i) {\n      const original = asts[i];\n      const value = original.visit(this);\n      res[i] = value;\n      modified = modified || value !== original;\n    }\n    return modified ? res : asts;\n  }\n\n  visitChain(ast: Chain, context: any): AST {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new Chain(ast.span, expressions);\n    }\n    return ast;\n  }\n\n  visitQuote(ast: Quote, context: any): AST { return ast; }\n}\n\nexport function visitAstChildren(ast: AST, visitor: AstVisitor, context?: any) {\n  function visit(ast: AST) {\n    visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\n  }\n\n  function visitAll<T extends AST>(asts: T[]) { asts.forEach(visit); }\n\n  ast.visit({\n    visitBinary(ast) {\n      visit(ast.left);\n      visit(ast.right);\n    },\n    visitChain(ast) { visitAll(ast.expressions); },\n    visitConditional(ast) {\n      visit(ast.condition);\n      visit(ast.trueExp);\n      visit(ast.falseExp);\n    },\n    visitFunctionCall(ast) {\n      if (ast.target) {\n        visit(ast.target);\n      }\n      visitAll(ast.args);\n    },\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) { visitAll(ast.expressions); },\n    visitKeyedRead(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n    },\n    visitKeyedWrite(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n      visit(ast.obj);\n    },\n    visitLiteralArray(ast) { visitAll(ast.expressions); },\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitPipe(ast) {\n      visit(ast.exp);\n      visitAll(ast.args);\n    },\n    visitPrefixNot(ast) { visit(ast.expression); },\n    visitNonNullAssert(ast) { visit(ast.expression); },\n    visitPropertyRead(ast) { visit(ast.receiver); },\n    visitPropertyWrite(ast) {\n      visit(ast.receiver);\n      visit(ast.value);\n    },\n    visitQuote(ast) {},\n    visitSafeMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitSafePropertyRead(ast) { visit(ast.receiver); },\n  });\n}\n\n\n// Bindings\n\nexport class ParsedProperty {\n  public readonly isLiteral: boolean;\n  public readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public expression: ASTWithSource, public type: ParsedPropertyType,\n      public sourceSpan: ParseSourceSpan) {\n    this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n    this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n  }\n}\n\nexport enum ParsedPropertyType {\n  DEFAULT,\n  LITERAL_ATTR,\n  ANIMATION\n}\n\nexport const enum ParsedEventType {\n  // DOM or Directive event\n  Regular,\n  // Animation specific event\n  Animation,\n}\n\nexport class ParsedEvent {\n  // Regular events have a target\n  // Animation events have a phase\n  constructor(\n      public name: string, public targetOrPhase: string, public type: ParsedEventType,\n      public handler: AST, public sourceSpan: ParseSourceSpan) {}\n}\n\nexport class ParsedVariable {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n}\n\nexport const enum BindingType {\n  // A regular binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}\n\nexport class BoundElementProperty {\n  constructor(\n      public name: string, public type: BindingType, public securityContext: SecurityContext,\n      public value: AST, public unit: string|null, public sourceSpan: ParseSourceSpan) {}\n}\n"],"sourceRoot":""}