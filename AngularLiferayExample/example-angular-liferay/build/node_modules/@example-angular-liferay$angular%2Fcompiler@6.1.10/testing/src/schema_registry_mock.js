Liferay.Loader.define("@example-angular-liferay$angular/compiler@6.1.10/testing/src/schema_registry_mock", ['module', 'exports', 'require', '@example-angular-liferay$angular/compiler'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
            define("@angular/compiler/testing/src/schema_registry_mock", ["require", "exports", "@angular/compiler"], factory);
        }
    })(function (require, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var compiler_1 = require("@example-angular-liferay$angular/compiler");
        var MockSchemaRegistry = /** @class */function () {
            function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {
                this.existingProperties = existingProperties;
                this.attrPropMapping = attrPropMapping;
                this.existingElements = existingElements;
                this.invalidProperties = invalidProperties;
                this.invalidAttributes = invalidAttributes;
            }
            MockSchemaRegistry.prototype.hasProperty = function (tagName, property, schemas) {
                var value = this.existingProperties[property];
                return value === void 0 ? true : value;
            };
            MockSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
                var value = this.existingElements[tagName.toLowerCase()];
                return value === void 0 ? true : value;
            };
            MockSchemaRegistry.prototype.allKnownElementNames = function () {
                return Object.keys(this.existingElements);
            };
            MockSchemaRegistry.prototype.securityContext = function (selector, property, isAttribute) {
                return compiler_1.core.SecurityContext.NONE;
            };
            MockSchemaRegistry.prototype.getMappedPropName = function (attrName) {
                return this.attrPropMapping[attrName] || attrName;
            };
            MockSchemaRegistry.prototype.getDefaultComponentElementName = function () {
                return 'ng-component';
            };
            MockSchemaRegistry.prototype.validateProperty = function (name) {
                if (this.invalidProperties.indexOf(name) > -1) {
                    return { error: true, msg: "Binding to property '" + name + "' is disallowed for security reasons" };
                } else {
                    return { error: false };
                }
            };
            MockSchemaRegistry.prototype.validateAttribute = function (name) {
                if (this.invalidAttributes.indexOf(name) > -1) {
                    return {
                        error: true,
                        msg: "Binding to attribute '" + name + "' is disallowed for security reasons"
                    };
                } else {
                    return { error: false };
                }
            };
            MockSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
                return propName;
            };
            MockSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
                return { error: null, value: val.toString() };
            };
            return MockSchemaRegistry;
        }();
        exports.MockSchemaRegistry = MockSchemaRegistry;
    });
});
//# sourceMappingURL=schema_registry_mock.js.map