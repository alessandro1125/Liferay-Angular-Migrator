{"version":3,"sources":["../../../../../../../packages/compiler/testing/src/schema_registry_mock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAQA,YAAA,aAAA,QAAA,2CAAA,CAAA;AAEA,YAAA,qBAAA,aAAA,YAAA;AACE,qBAAA,kBAAA,CACW,kBADX,EAEW,eAFX,EAGW,gBAHX,EAG8D,iBAH9D,EAIW,iBAJX,EAI2C;AAHhC,qBAAA,kBAAA,GAAA,kBAAA;AACA,qBAAA,eAAA,GAAA,eAAA;AACA,qBAAA,gBAAA,GAAA,gBAAA;AAAmD,qBAAA,iBAAA,GAAA,iBAAA;AACnD,qBAAA,iBAAA,GAAA,iBAAA;AAAoC;AAE/C,+BAAA,SAAA,CAAA,WAAA,GAAA,UAAY,OAAZ,EAA6B,QAA7B,EAA+C,OAA/C,EAA6E;AAC3E,oBAAM,QAAQ,KAAK,kBAAL,CAAwB,QAAxB,CAAd;AACA,uBAAO,UAAU,KAAK,CAAf,GAAmB,IAAnB,GAA0B,KAAjC;AACD,aAHD;AAKA,+BAAA,SAAA,CAAA,UAAA,GAAA,UAAW,OAAX,EAA4B,WAA5B,EAA8D;AAC5D,oBAAM,QAAQ,KAAK,gBAAL,CAAsB,QAAQ,WAAR,EAAtB,CAAd;AACA,uBAAO,UAAU,KAAK,CAAf,GAAmB,IAAnB,GAA0B,KAAjC;AACD,aAHD;AAKA,+BAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAmC,uBAAO,OAAO,IAAP,CAAY,KAAK,gBAAjB,CAAP;AAA4C,aAA/E;AAEA,+BAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,QAAhB,EAAkC,QAAlC,EAAoD,WAApD,EAAwE;AACtE,uBAAO,WAAA,IAAA,CAAK,eAAL,CAAqB,IAA5B;AACD,aAFD;AAIA,+BAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,QAAlB,EAAkC;AAAY,uBAAO,KAAK,eAAL,CAAqB,QAArB,KAAkC,QAAzC;AAAoD,aAAlG;AAEA,+BAAA,SAAA,CAAA,8BAAA,GAAA,YAAA;AAA2C,uBAAO,cAAP;AAAwB,aAAnE;AAEA,+BAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA6B;AAC3B,oBAAI,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,IAA/B,IAAuC,CAAC,CAA5C,EAA+C;AAC7C,2BAAO,EAAC,OAAO,IAAR,EAAc,KAAK,0BAAwB,IAAxB,GAA4B,sCAA/C,EAAP;AACD,iBAFD,MAEO;AACL,2BAAO,EAAC,OAAO,KAAR,EAAP;AACD;AACF,aAND;AAQA,+BAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,IAAlB,EAA8B;AAC5B,oBAAI,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,IAA/B,IAAuC,CAAC,CAA5C,EAA+C;AAC7C,2BAAO;AACL,+BAAO,IADF;AAEL,6BAAK,2BAAyB,IAAzB,GAA6B;AAF7B,qBAAP;AAID,iBALD,MAKO;AACL,2BAAO,EAAC,OAAO,KAAR,EAAP;AACD;AACF,aATD;AAWA,+BAAA,SAAA,CAAA,+BAAA,GAAA,UAAgC,QAAhC,EAAgD;AAAY,uBAAO,QAAP;AAAkB,aAA9E;AACA,+BAAA,SAAA,CAAA,4BAAA,GAAA,UAA6B,aAA7B,EAAoD,gBAApD,EAA8E,GAA9E,EAAgG;AAE9F,uBAAO,EAAC,OAAO,IAAR,EAAgB,OAAO,IAAI,QAAJ,EAAvB,EAAP;AACD,aAHD;AAIF,mBAAA,kBAAA;AAAC,SAnDD,EAAA;AAAa,gBAAA,kBAAA,GAAA,kBAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry, core} from '@angular/compiler';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: core.SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: core.SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] { return Object.keys(this.existingElements); }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): core.SecurityContext {\n    return core.SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string { return propName; }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null !, value: val.toString()};\n  }\n}\n"],"sourceRoot":""}