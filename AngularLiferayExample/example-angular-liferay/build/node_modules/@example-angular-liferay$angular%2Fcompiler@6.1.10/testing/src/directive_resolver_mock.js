Liferay.Loader.define("@example-angular-liferay$angular/compiler@6.1.10/testing/src/directive_resolver_mock", ['module', 'exports', 'require', 'example-angular-liferay$tslib', '@example-angular-liferay$angular/compiler'], function (module, exports, require) {
    var define = undefined;
    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
            define("@angular/compiler/testing/src/directive_resolver_mock", ["require", "exports", "tslib", "@angular/compiler"], factory);
        }
    })(function (require, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var tslib_1 = require("example-angular-liferay$tslib");
        /**
         * @license
         * Copyright Google Inc. All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */
        var compiler_1 = require("@example-angular-liferay$angular/compiler");
        /**
         * An implementation of {@link DirectiveResolver} that allows overriding
         * various properties of directives.
         */
        var MockDirectiveResolver = /** @class */function (_super) {
            tslib_1.__extends(MockDirectiveResolver, _super);
            function MockDirectiveResolver(reflector) {
                var _this = _super.call(this, reflector) || this;
                _this._directives = new Map();
                return _this;
            }
            MockDirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
                if (throwIfNotFound === void 0) {
                    throwIfNotFound = true;
                }
                return this._directives.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);
            };
            /**
             * Overrides the {@link core.Directive} for a directive.
             */
            MockDirectiveResolver.prototype.setDirective = function (type, metadata) {
                this._directives.set(type, metadata);
            };
            return MockDirectiveResolver;
        }(compiler_1.DirectiveResolver);
        exports.MockDirectiveResolver = MockDirectiveResolver;
    });
});
//# sourceMappingURL=directive_resolver_mock.js.map