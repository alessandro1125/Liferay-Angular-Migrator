{"version":3,"sources":["../../../../../../../packages/compiler/testing/src/resource_loader_mock.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\n\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport class MockResourceLoader extends ResourceLoader {\n  private _expectations: _Expectation[] = [];\n  private _definitions = new Map<string, string>();\n  private _requests: _PendingRequest[] = [];\n\n  get(url: string): Promise<string> {\n    const request = new _PendingRequest(url);\n    this._requests.push(request);\n    return request.getPromise();\n  }\n\n  hasPendingRequests() { return !!this._requests.length; }\n\n  /**\n   * Add an expectation for the given URL. Incoming requests will be checked against\n   * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n   * can be used to check if any expectations have not yet been met.\n   *\n   * The response given will be returned if the expectation matches.\n   */\n  expect(url: string, response: string) {\n    const expectation = new _Expectation(url, response);\n    this._expectations.push(expectation);\n  }\n\n  /**\n   * Add a definition for the given URL to return the given response. Unlike expectations,\n   * definitions have no order and will satisfy any matching request at any time. Also\n   * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n   * to return an error.\n   */\n  when(url: string, response: string) { this._definitions.set(url, response); }\n\n  /**\n   * Process pending requests and verify there are no outstanding expectations. Also fails\n   * if no requests are pending.\n   */\n  flush() {\n    if (this._requests.length === 0) {\n      throw new Error('No pending requests to flush');\n    }\n\n    do {\n      this._processRequest(this._requests.shift() !);\n    } while (this._requests.length > 0);\n\n    this.verifyNoOutstandingExpectations();\n  }\n\n  /**\n   * Throw an exception if any expectations have not been satisfied.\n   */\n  verifyNoOutstandingExpectations() {\n    if (this._expectations.length === 0) return;\n\n    const urls: string[] = [];\n    for (let i = 0; i < this._expectations.length; i++) {\n      const expectation = this._expectations[i];\n      urls.push(expectation.url);\n    }\n\n    throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\n  }\n\n  private _processRequest(request: _PendingRequest) {\n    const url = request.url;\n\n    if (this._expectations.length > 0) {\n      const expectation = this._expectations[0];\n      if (expectation.url == url) {\n        remove(this._expectations, expectation);\n        request.complete(expectation.response);\n        return;\n      }\n    }\n\n    if (this._definitions.has(url)) {\n      const response = this._definitions.get(url);\n      request.complete(response == null ? null : response);\n      return;\n    }\n\n    throw new Error(`Unexpected request ${url}`);\n  }\n}\n\nclass _PendingRequest {\n  // TODO(issue/24571): remove '!'.\n  resolve !: (result: string) => void;\n  // TODO(issue/24571): remove '!'.\n  reject !: (error: any) => void;\n  promise: Promise<string>;\n\n  constructor(public url: string) {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  complete(response: string|null) {\n    if (response == null) {\n      this.reject(`Failed to load ${this.url}`);\n    } else {\n      this.resolve(response);\n    }\n  }\n\n  getPromise(): Promise<string> { return this.promise; }\n}\n\nclass _Expectation {\n  url: string;\n  response: string;\n  constructor(url: string, response: string) {\n    this.url = url;\n    this.response = response;\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n"],"sourceRoot":""}