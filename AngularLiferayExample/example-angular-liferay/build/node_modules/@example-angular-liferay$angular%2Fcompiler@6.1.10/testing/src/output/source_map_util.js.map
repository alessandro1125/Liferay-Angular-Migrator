{"version":3,"sources":["../../../../../../../../packages/compiler/testing/src/output/source_map_util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AASA,YAAM,MAAM,QAAQ,mCAAR,CAAZ;AACA,YAAM,oBAAoB,QAAQ,oCAAR,EAAsB,iBAAhD;AAQA,iBAAA,mBAAA,CACI,SADJ,EAEI,WAFJ,EAE6D;AAC3D,gBAAM,MAAM,IAAI,iBAAJ,CAAsB,SAAtB,CAAZ;AACA;AACA;AACM,gBAAA,KAAA,IAAA,mBAAA,CAAA,WAAA,CAAA;AAAA,gBAAC,OAAA,GAAA,IAAD;AAAA,gBAAO,SAAA,GAAA,MAAP;AAAA,gBAAe,SAAA,GAAA,MAAf;AACN,mBAAO,EAAC,MAAI,IAAL,EAAO,QAAM,MAAb,EAAe,QAAM,MAArB,EAAP;AACD;AARD,gBAAA,mBAAA,GAAA,mBAAA;AAUA,iBAAA,gBAAA,CAAiC,MAAjC,EAA+C;AAC7C,gBAAI,MAAM,OAAO,WAAP,CAAmB,OAAnB,CAAV;AACA,gBAAI,OAAO,CAAC,CAAZ,EAAe,OAAO,IAAP;AACf,gBAAM,YAAY,OAAO,KAAP,CAAa,GAAb,EAAkB,IAAlB,EAAlB;AACA,gBAAM,QAAQ,UAAU,KAAV,CAAgB,gDAAhB,EAAkE,CAAlE,CAAd;AACA,mBAAO,QAAQ,KAAK,KAAL,CAAW,gBAAgB,KAAhB,CAAX,CAAR,GAA6C,IAApD;AACD;AAND,gBAAA,gBAAA,GAAA,gBAAA;AAQA,iBAAA,eAAA,CAAyB,CAAzB,EAAkC;AAChC,mBAAO,IAAI,WAAJ,CAAgB,CAAhB,EAAmB,MAAnB,CAA0B,UAAC,CAAD,EAAY,CAAZ,EAAqB;AAAK,uBAAA,IAAI,OAAO,YAAP,CAAJ,CAAI,CAAJ;AAA0B,aAA9E,EAAgF,EAAhF,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SourceMap} from '@angular/compiler';\nconst b64 = require('base64-js');\nconst SourceMapConsumer = require('source-map').SourceMapConsumer;\n\nexport interface SourceLocation {\n  line: number;\n  column: number;\n  source: string;\n}\n\nexport function originalPositionFor(\n    sourceMap: SourceMap,\n    genPosition: {line: number | null, column: number | null}): SourceLocation {\n  const smc = new SourceMapConsumer(sourceMap);\n  // Note: We don't return the original object as it also contains a `name` property\n  // which is always null and we don't want to include that in our assertions...\n  const {line, column, source} = smc.originalPositionFor(genPosition);\n  return {line, column, source};\n}\n\nexport function extractSourceMap(source: string): SourceMap|null {\n  let idx = source.lastIndexOf('\\n//#');\n  if (idx == -1) return null;\n  const smComment = source.slice(idx).trim();\n  const smB64 = smComment.split('sourceMappingURL=data:application/json;base64,')[1];\n  return smB64 ? JSON.parse(decodeB64String(smB64)) : null;\n}\n\nfunction decodeB64String(s: string): string {\n  return b64.toByteArray(s).reduce((s: string, c: number) => s + String.fromCharCode(c), '');\n}\n"],"sourceRoot":""}