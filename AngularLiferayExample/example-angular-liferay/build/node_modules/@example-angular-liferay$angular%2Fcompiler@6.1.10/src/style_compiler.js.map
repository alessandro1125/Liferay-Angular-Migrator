{"version":3,"sources":["../../../../../../packages/compiler/src/style_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileIdentifierMetadata, CompileStylesheetMetadata, identifierModuleUrl, identifierName} from './compile_metadata';\nimport {ViewEncapsulation} from './core';\nimport * as o from './output/output_ast';\nimport {ShadowCss} from './shadow_css';\nimport {UrlResolver} from './url_resolver';\nimport {OutputContext} from './util';\n\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport class StylesCompileDependency {\n  constructor(\n      public name: string, public moduleUrl: string, public setValue: (value: any) => void) {}\n}\n\nexport class CompiledStylesheet {\n  constructor(\n      public outputCtx: OutputContext, public stylesVar: string,\n      public dependencies: StylesCompileDependency[], public isShimmed: boolean,\n      public meta: CompileStylesheetMetadata) {}\n}\n\nexport class StyleCompiler {\n  private _shadowCss: ShadowCss = new ShadowCss();\n\n  constructor(private _urlResolver: UrlResolver) {}\n\n  compileComponent(outputCtx: OutputContext, comp: CompileDirectiveMetadata): CompiledStylesheet {\n    const template = comp.template !;\n    return this._compileStyles(\n        outputCtx, comp, new CompileStylesheetMetadata({\n          styles: template.styles,\n          styleUrls: template.styleUrls,\n          moduleUrl: identifierModuleUrl(comp.type)\n        }),\n        this.needsStyleShim(comp), true);\n  }\n\n  compileStyles(\n      outputCtx: OutputContext, comp: CompileDirectiveMetadata,\n      stylesheet: CompileStylesheetMetadata,\n      shim: boolean = this.needsStyleShim(comp)): CompiledStylesheet {\n    return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n  }\n\n  needsStyleShim(comp: CompileDirectiveMetadata): boolean {\n    return comp.template !.encapsulation === ViewEncapsulation.Emulated;\n  }\n\n  private _compileStyles(\n      outputCtx: OutputContext, comp: CompileDirectiveMetadata,\n      stylesheet: CompileStylesheetMetadata, shim: boolean,\n      isComponentStylesheet: boolean): CompiledStylesheet {\n    const styleExpressions: o.Expression[] =\n        stylesheet.styles.map(plainStyle => o.literal(this._shimIfNeeded(plainStyle, shim)));\n    const dependencies: StylesCompileDependency[] = [];\n    stylesheet.styleUrls.forEach((styleUrl) => {\n      const exprIndex = styleExpressions.length;\n      // Note: This placeholder will be filled later.\n      styleExpressions.push(null !);\n      dependencies.push(new StylesCompileDependency(\n          getStylesVarName(null), styleUrl,\n          (value) => styleExpressions[exprIndex] = outputCtx.importExpr(value)));\n    });\n    // styles variable contains plain strings and arrays of other styles arrays (recursive),\n    // so we set its type to dynamic.\n    const stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n    const stmt = o.variable(stylesVar)\n                     .set(o.literalArr(\n                         styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])))\n                     .toDeclStmt(null, isComponentStylesheet ? [o.StmtModifier.Final] : [\n                       o.StmtModifier.Final, o.StmtModifier.Exported\n                     ]);\n    outputCtx.statements.push(stmt);\n    return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n  }\n\n  private _shimIfNeeded(style: string, shim: boolean): string {\n    return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n  }\n}\n\nfunction getStylesVarName(component: CompileDirectiveMetadata | null): string {\n  let result = `styles`;\n  if (component) {\n    result += `_${identifierName(component.type)}`;\n  }\n  return result;\n}\n"],"sourceRoot":""}