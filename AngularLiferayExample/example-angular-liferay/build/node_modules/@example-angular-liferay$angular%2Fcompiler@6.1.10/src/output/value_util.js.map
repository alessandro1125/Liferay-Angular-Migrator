{"version":3,"sources":["../../../../../../../packages/compiler/src/output/value_util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AASA,YAAA,SAAA,QAAA,oDAAA,CAAA;AAEA,YAAA,IAAA,QAAA,iEAAA,CAAA;AAEa,gBAAA,WAAA,GAAc,UAAd;AAEb,iBAAA,uBAAA,CACI,GADJ,EACwB,KADxB,EACoC,IADpC,EAC8D;AAA1B,gBAAA,SAAA,KAAA,CAAA,EAAA;AAAA,uBAAA,IAAA;AAA0B;AAC5D,mBAAO,OAAA,UAAA,CAAW,KAAX,EAAkB,IAAI,0BAAJ,CAA+B,GAA/B,CAAlB,EAAuD,IAAvD,CAAP;AACD;AAHD,gBAAA,uBAAA,GAAA,uBAAA;AAKA,YAAA,6BAAA,aAAA,YAAA;AACE,qBAAA,0BAAA,CAAoB,GAApB,EAAsC;AAAlB,qBAAA,GAAA,GAAA,GAAA;AAAsB;AAC1C,uCAAA,SAAA,CAAA,UAAA,GAAA,UAAW,GAAX,EAAuB,IAAvB,EAAmC;AAAnC,oBAAA,QAAA,IAAA;AACE,uBAAO,EAAE,UAAF,CAAa,IAAI,GAAJ,CAAQ,UAAA,KAAA,EAAK;AAAI,2BAAA,OAAA,UAAA,CAAW,KAAX,EAAkB,KAAlB,EAAA,IAAA,CAAA;AAA6B,iBAA9C,CAAb,EAA8D,IAA9D,CAAP;AACD,aAFD;AAIA,uCAAA,SAAA,CAAA,cAAA,GAAA,UAAe,GAAf,EAA0C,IAA1C,EAAyD;AAAzD,oBAAA,QAAA,IAAA;AACE,oBAAM,UAA+B,EAArC;AACA,oBAAM,YAAY,IAAI,GAAJ,CAAgB,OAAO,IAAI,QAAA,WAAJ,CAAvB,CAAlB;AACA,uBAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,UAAA,GAAA,EAAG;AAC1B,4BAAQ,IAAR,CACI,IAAI,EAAE,eAAN,CAAsB,GAAtB,EAA2B,OAAA,UAAA,CAAW,IAAI,GAAJ,CAAX,EAAqB,KAArB,EAA2B,IAA3B,CAA3B,EAA6D,UAAU,GAAV,CAAc,GAAd,CAA7D,CADJ;AAED,iBAHD;AAIA,uBAAO,IAAI,EAAE,cAAN,CAAqB,OAArB,EAA8B,IAA9B,CAAP;AACD,aARD;AAUA,uCAAA,SAAA,CAAA,cAAA,GAAA,UAAe,KAAf,EAA2B,IAA3B,EAAuC;AAAkB,uBAAO,EAAE,OAAF,CAAU,KAAV,EAAiB,IAAjB,CAAP;AAAgC,aAAzF;AAEA,uCAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAAuB,IAAvB,EAAmC;AACjC,oBAAI,iBAAiB,EAAE,UAAvB,EAAmC;AACjC,2BAAO,KAAP;AACD,iBAFD,MAEO;AACL,2BAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,KAApB,CAAP;AACD;AACF,aAND;AAOF,mBAAA,0BAAA;AAAC,SAzBD,EAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OutputContext, ValueTransformer, visitValue} from '../util';\n\nimport * as o from './output_ast';\n\nexport const QUOTED_KEYS = '$quoted$';\n\nexport function convertValueToOutputAst(\n    ctx: OutputContext, value: any, type: o.Type | null = null): o.Expression {\n  return visitValue(value, new _ValueOutputAstTransformer(ctx), type);\n}\n\nclass _ValueOutputAstTransformer implements ValueTransformer {\n  constructor(private ctx: OutputContext) {}\n  visitArray(arr: any[], type: o.Type): o.Expression {\n    return o.literalArr(arr.map(value => visitValue(value, this, null)), type);\n  }\n\n  visitStringMap(map: {[key: string]: any}, type: o.MapType): o.Expression {\n    const entries: o.LiteralMapEntry[] = [];\n    const quotedSet = new Set<string>(map && map[QUOTED_KEYS]);\n    Object.keys(map).forEach(key => {\n      entries.push(\n          new o.LiteralMapEntry(key, visitValue(map[key], this, null), quotedSet.has(key)));\n    });\n    return new o.LiteralMapExpr(entries, type);\n  }\n\n  visitPrimitive(value: any, type: o.Type): o.Expression { return o.literal(value, type); }\n\n  visitOther(value: any, type: o.Type): o.Expression {\n    if (value instanceof o.Expression) {\n      return value;\n    } else {\n      return this.ctx.importExpr(value);\n    }\n  }\n}\n"],"sourceRoot":""}