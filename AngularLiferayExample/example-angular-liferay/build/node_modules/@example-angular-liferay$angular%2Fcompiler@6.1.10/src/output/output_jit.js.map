{"version":3,"sources":["../../../../../../../packages/compiler/src/output/output_jit.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {identifierName} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\n\nimport {EmitterVisitorContext} from './abstract_emitter';\nimport {AbstractJsEmitterVisitor} from './abstract_js_emitter';\nimport * as o from './output_ast';\n\nfunction evalExpression(\n    sourceUrl: string, ctx: EmitterVisitorContext, vars: {[key: string]: any},\n    createSourceMap: boolean): any {\n  let fnBody = `${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\n  const fnArgNames: string[] = [];\n  const fnArgValues: any[] = [];\n  for (const argName in vars) {\n    fnArgNames.push(argName);\n    fnArgValues.push(vars[argName]);\n  }\n  if (createSourceMap) {\n    // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n    // E.g. ```\n    // function anonymous(a,b,c\n    // /**/) { ... }```\n    // We don't want to hard code this fact, so we auto detect it via an empty function first.\n    const emptyFn = new Function(...fnArgNames.concat('return null;')).toString();\n    const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n    fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\n  }\n  return new Function(...fnArgNames.concat(fnBody))(...fnArgValues);\n}\n\nexport function jitStatements(\n    sourceUrl: string, statements: o.Statement[], reflector: CompileReflector,\n    createSourceMaps: boolean): {[key: string]: any} {\n  const converter = new JitEmitterVisitor(reflector);\n  const ctx = EmitterVisitorContext.createRoot();\n  converter.visitAllStatements(statements, ctx);\n  converter.createReturnStmt(ctx);\n  return evalExpression(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n}\n\nexport class JitEmitterVisitor extends AbstractJsEmitterVisitor {\n  private _evalArgNames: string[] = [];\n  private _evalArgValues: any[] = [];\n  private _evalExportedVars: string[] = [];\n\n  constructor(private reflector: CompileReflector) { super(); }\n\n  createReturnStmt(ctx: EmitterVisitorContext) {\n    const stmt = new o.ReturnStatement(new o.LiteralMapExpr(this._evalExportedVars.map(\n        resultVar => new o.LiteralMapEntry(resultVar, o.variable(resultVar), false))));\n    stmt.visitStatement(this, ctx);\n  }\n\n  getArgs(): {[key: string]: any} {\n    const result: {[key: string]: any} = {};\n    for (let i = 0; i < this._evalArgNames.length; i++) {\n      result[this._evalArgNames[i]] = this._evalArgValues[i];\n    }\n    return result;\n  }\n\n  visitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext): any {\n    this._emitReferenceToExternal(ast, this.reflector.resolveExternalReference(ast.value), ctx);\n    return null;\n  }\n\n  visitWrappedNodeExpr(ast: o.WrappedNodeExpr<any>, ctx: EmitterVisitorContext): any {\n    this._emitReferenceToExternal(ast, ast.node, ctx);\n    return null;\n  }\n\n  visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext): any {\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareVarStmt(stmt, ctx);\n  }\n\n  visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: EmitterVisitorContext): any {\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareFunctionStmt(stmt, ctx);\n  }\n\n  visitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext): any {\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareClassStmt(stmt, ctx);\n  }\n\n  private _emitReferenceToExternal(ast: o.Expression, value: any, ctx: EmitterVisitorContext):\n      void {\n    let id = this._evalArgValues.indexOf(value);\n    if (id === -1) {\n      id = this._evalArgValues.length;\n      this._evalArgValues.push(value);\n      const name = identifierName({reference: value}) || 'val';\n      this._evalArgNames.push(`jit_${name}_${id}`);\n    }\n    ctx.print(ast, this._evalArgNames[id]);\n  }\n}\n"],"sourceRoot":""}