{"version":3,"sources":["../../../../../../../packages/compiler/src/output/source_map.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {utf8Encode} from '../util';\n\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nconst VERSION = 3;\n\nconst JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\n\ntype Segment = {\n  col0: number,\n  sourceUrl?: string,\n  sourceLine0?: number,\n  sourceCol0?: number,\n};\n\nexport type SourceMap = {\n  version: number,\n  file?: string,\n  sourceRoot: string,\n  sources: string[],\n  sourcesContent: (string | null)[],\n  mappings: string,\n};\n\nexport class SourceMapGenerator {\n  private sourcesContent: Map<string, string|null> = new Map();\n  private lines: Segment[][] = [];\n  private lastCol0: number = 0;\n  private hasMappings = false;\n\n  constructor(private file: string|null = null) {}\n\n  // The content is `null` when the content is expected to be loaded using the URL\n  addSource(url: string, content: string|null = null): this {\n    if (!this.sourcesContent.has(url)) {\n      this.sourcesContent.set(url, content);\n    }\n    return this;\n  }\n\n  addLine(): this {\n    this.lines.push([]);\n    this.lastCol0 = 0;\n    return this;\n  }\n\n  addMapping(col0: number, sourceUrl?: string, sourceLine0?: number, sourceCol0?: number): this {\n    if (!this.currentLine) {\n      throw new Error(`A line must be added before mappings can be added`);\n    }\n    if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n      throw new Error(`Unknown source file \"${sourceUrl}\"`);\n    }\n    if (col0 == null) {\n      throw new Error(`The column in the generated code must be provided`);\n    }\n    if (col0 < this.lastCol0) {\n      throw new Error(`Mapping should be added in output order`);\n    }\n    if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n      throw new Error(`The source location must be provided when a source url is provided`);\n    }\n\n    this.hasMappings = true;\n    this.lastCol0 = col0;\n    this.currentLine.push({col0, sourceUrl, sourceLine0, sourceCol0});\n    return this;\n  }\n\n  private get currentLine(): Segment[]|null { return this.lines.slice(-1)[0]; }\n\n  toJSON(): SourceMap|null {\n    if (!this.hasMappings) {\n      return null;\n    }\n\n    const sourcesIndex = new Map<string, number>();\n    const sources: string[] = [];\n    const sourcesContent: (string | null)[] = [];\n\n    Array.from(this.sourcesContent.keys()).forEach((url: string, i: number) => {\n      sourcesIndex.set(url, i);\n      sources.push(url);\n      sourcesContent.push(this.sourcesContent.get(url) || null);\n    });\n\n    let mappings: string = '';\n    let lastCol0: number = 0;\n    let lastSourceIndex: number = 0;\n    let lastSourceLine0: number = 0;\n    let lastSourceCol0: number = 0;\n\n    this.lines.forEach(segments => {\n      lastCol0 = 0;\n\n      mappings += segments\n                      .map(segment => {\n                        // zero-based starting column of the line in the generated code\n                        let segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                        lastCol0 = segment.col0;\n\n                        if (segment.sourceUrl != null) {\n                          // zero-based index into the “sources” list\n                          segAsStr +=\n                              toBase64VLQ(sourcesIndex.get(segment.sourceUrl) ! - lastSourceIndex);\n                          lastSourceIndex = sourcesIndex.get(segment.sourceUrl) !;\n                          // the zero-based starting line in the original source\n                          segAsStr += toBase64VLQ(segment.sourceLine0 ! - lastSourceLine0);\n                          lastSourceLine0 = segment.sourceLine0 !;\n                          // the zero-based starting column in the original source\n                          segAsStr += toBase64VLQ(segment.sourceCol0 ! - lastSourceCol0);\n                          lastSourceCol0 = segment.sourceCol0 !;\n                        }\n\n                        return segAsStr;\n                      })\n                      .join(',');\n      mappings += ';';\n    });\n\n    mappings = mappings.slice(0, -1);\n\n    return {\n      'file': this.file || '',\n      'version': VERSION,\n      'sourceRoot': '',\n      'sources': sources,\n      'sourcesContent': sourcesContent,\n      'mappings': mappings,\n    };\n  }\n\n  toJsComment(): string {\n    return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n                              '';\n  }\n}\n\nexport function toBase64String(value: string): string {\n  let b64 = '';\n  value = utf8Encode(value);\n  for (let i = 0; i < value.length;) {\n    const i1 = value.charCodeAt(i++);\n    const i2 = value.charCodeAt(i++);\n    const i3 = value.charCodeAt(i++);\n    b64 += toBase64Digit(i1 >> 2);\n    b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));\n    b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));\n    b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);\n  }\n\n  return b64;\n}\n\nfunction toBase64VLQ(value: number): string {\n  value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n\n  let out = '';\n  do {\n    let digit = value & 31;\n    value = value >> 5;\n    if (value > 0) {\n      digit = digit | 32;\n    }\n    out += toBase64Digit(digit);\n  } while (value > 0);\n\n  return out;\n}\n\nconst B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfunction toBase64Digit(value: number): string {\n  if (value < 0 || value >= 64) {\n    throw new Error(`Can only encode value in the range [0, 63]`);\n  }\n\n  return B64_DIGITS[value];\n}\n"],"sourceRoot":""}