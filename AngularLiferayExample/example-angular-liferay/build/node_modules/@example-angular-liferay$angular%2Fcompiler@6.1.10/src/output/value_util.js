Liferay.Loader.define("@example-angular-liferay$angular/compiler@6.1.10/src/output/value_util", ['module', 'exports', 'require', '@example-angular-liferay$angular/compiler/src/util', '@example-angular-liferay$angular/compiler/src/output/output_ast'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
            define("@angular/compiler/src/output/value_util", ["require", "exports", "@angular/compiler/src/util", "@angular/compiler/src/output/output_ast"], factory);
        }
    })(function (require, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var util_1 = require("@example-angular-liferay$angular/compiler/src/util");
        var o = require("@example-angular-liferay$angular/compiler/src/output/output_ast");
        exports.QUOTED_KEYS = '$quoted$';
        function convertValueToOutputAst(ctx, value, type) {
            if (type === void 0) {
                type = null;
            }
            return util_1.visitValue(value, new _ValueOutputAstTransformer(ctx), type);
        }
        exports.convertValueToOutputAst = convertValueToOutputAst;
        var _ValueOutputAstTransformer = /** @class */function () {
            function _ValueOutputAstTransformer(ctx) {
                this.ctx = ctx;
            }
            _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
                var _this = this;
                return o.literalArr(arr.map(function (value) {
                    return util_1.visitValue(value, _this, null);
                }), type);
            };
            _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
                var _this = this;
                var entries = [];
                var quotedSet = new Set(map && map[exports.QUOTED_KEYS]);
                Object.keys(map).forEach(function (key) {
                    entries.push(new o.LiteralMapEntry(key, util_1.visitValue(map[key], _this, null), quotedSet.has(key)));
                });
                return new o.LiteralMapExpr(entries, type);
            };
            _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) {
                return o.literal(value, type);
            };
            _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
                if (value instanceof o.Expression) {
                    return value;
                } else {
                    return this.ctx.importExpr(value);
                }
            };
            return _ValueOutputAstTransformer;
        }();
    });
});
//# sourceMappingURL=value_util.js.map