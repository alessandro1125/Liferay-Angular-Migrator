{"version":3,"sources":["../../../../../../packages/compiler/src/compile_metadata.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol} from './aot/static_symbol';\nimport {ChangeDetectionStrategy, SchemaMetadata, Type, ViewEncapsulation} from './core';\nimport {LifecycleHooks} from './lifecycle_reflector';\nimport {ParseTreeResult as HtmlParseTreeResult} from './ml_parser/parser';\nimport {splitAtColon, stringify} from './util';\n\n// group 0: \"[prop] or (event) or @trigger\"\n// group 1: \"prop\" from \"[prop]\"\n// group 2: \"event\" from \"(event)\"\n// group 3: \"@trigger\" from \"@trigger\"\nconst HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n\nexport function sanitizeIdentifier(name: string): string {\n  return name.replace(/\\W/g, '_');\n}\n\nlet _anonymousTypeIndex = 0;\n\nexport function identifierName(compileIdentifier: CompileIdentifierMetadata | null | undefined):\n    string|null {\n  if (!compileIdentifier || !compileIdentifier.reference) {\n    return null;\n  }\n  const ref = compileIdentifier.reference;\n  if (ref instanceof StaticSymbol) {\n    return ref.name;\n  }\n  if (ref['__anonymousType']) {\n    return ref['__anonymousType'];\n  }\n  let identifier = stringify(ref);\n  if (identifier.indexOf('(') >= 0) {\n    // case: anonymous functions!\n    identifier = `anonymous_${_anonymousTypeIndex++}`;\n    ref['__anonymousType'] = identifier;\n  } else {\n    identifier = sanitizeIdentifier(identifier);\n  }\n  return identifier;\n}\n\nexport function identifierModuleUrl(compileIdentifier: CompileIdentifierMetadata): string {\n  const ref = compileIdentifier.reference;\n  if (ref instanceof StaticSymbol) {\n    return ref.filePath;\n  }\n  // Runtime type\n  return `./${stringify(ref)}`;\n}\n\nexport function viewClassName(compType: any, embeddedTemplateIndex: number): string {\n  return `View_${identifierName({reference: compType})}_${embeddedTemplateIndex}`;\n}\n\nexport function rendererTypeName(compType: any): string {\n  return `RenderType_${identifierName({reference: compType})}`;\n}\n\nexport function hostViewClassName(compType: any): string {\n  return `HostView_${identifierName({reference: compType})}`;\n}\n\nexport function componentFactoryName(compType: any): string {\n  return `${identifierName({reference: compType})}NgFactory`;\n}\n\nexport interface ProxyClass { setDelegate(delegate: any): void; }\n\nexport interface CompileIdentifierMetadata { reference: any; }\n\nexport enum CompileSummaryKind {\n  Pipe,\n  Directive,\n  NgModule,\n  Injectable\n}\n\n/**\n * A CompileSummary is the data needed to use a directive / pipe / module\n * in other modules / components. However, this data is not enough to compile\n * the directive / module itself.\n */\nexport interface CompileTypeSummary {\n  summaryKind: CompileSummaryKind|null;\n  type: CompileTypeMetadata;\n}\n\nexport interface CompileDiDependencyMetadata {\n  isAttribute?: boolean;\n  isSelf?: boolean;\n  isHost?: boolean;\n  isSkipSelf?: boolean;\n  isOptional?: boolean;\n  isValue?: boolean;\n  token?: CompileTokenMetadata;\n  value?: any;\n}\n\nexport interface CompileProviderMetadata {\n  token: CompileTokenMetadata;\n  useClass?: CompileTypeMetadata;\n  useValue?: any;\n  useExisting?: CompileTokenMetadata;\n  useFactory?: CompileFactoryMetadata;\n  deps?: CompileDiDependencyMetadata[];\n  multi?: boolean;\n}\n\nexport interface CompileFactoryMetadata extends CompileIdentifierMetadata {\n  diDeps: CompileDiDependencyMetadata[];\n  reference: any;\n}\n\nexport function tokenName(token: CompileTokenMetadata) {\n  return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);\n}\n\nexport function tokenReference(token: CompileTokenMetadata) {\n  if (token.identifier != null) {\n    return token.identifier.reference;\n  } else {\n    return token.value;\n  }\n}\n\nexport interface CompileTokenMetadata {\n  value?: any;\n  identifier?: CompileIdentifierMetadata|CompileTypeMetadata;\n}\n\nexport interface CompileInjectableMetadata {\n  symbol: StaticSymbol;\n  type: CompileTypeMetadata;\n\n  providedIn?: StaticSymbol;\n\n  useValue?: any;\n  useClass?: StaticSymbol;\n  useExisting?: StaticSymbol;\n  useFactory?: StaticSymbol;\n  deps?: any[];\n}\n\n/**\n * Metadata regarding compilation of a type.\n */\nexport interface CompileTypeMetadata extends CompileIdentifierMetadata {\n  diDeps: CompileDiDependencyMetadata[];\n  lifecycleHooks: LifecycleHooks[];\n  reference: any;\n}\n\nexport interface CompileQueryMetadata {\n  selectors: Array<CompileTokenMetadata>;\n  descendants: boolean;\n  first: boolean;\n  propertyName: string;\n  read: CompileTokenMetadata;\n}\n\n/**\n * Metadata about a stylesheet\n */\nexport class CompileStylesheetMetadata {\n  moduleUrl: string|null;\n  styles: string[];\n  styleUrls: string[];\n  constructor(\n      {moduleUrl, styles,\n       styleUrls}: {moduleUrl?: string, styles?: string[], styleUrls?: string[]} = {}) {\n    this.moduleUrl = moduleUrl || null;\n    this.styles = _normalizeArray(styles);\n    this.styleUrls = _normalizeArray(styleUrls);\n  }\n}\n\n/**\n * Summary Metadata regarding compilation of a template.\n */\nexport interface CompileTemplateSummary {\n  ngContentSelectors: string[];\n  encapsulation: ViewEncapsulation|null;\n}\n\n/**\n * Metadata regarding compilation of a template.\n */\nexport class CompileTemplateMetadata {\n  encapsulation: ViewEncapsulation|null;\n  template: string|null;\n  templateUrl: string|null;\n  htmlAst: HtmlParseTreeResult|null;\n  isInline: boolean;\n  styles: string[];\n  styleUrls: string[];\n  externalStylesheets: CompileStylesheetMetadata[];\n  animations: any[];\n  ngContentSelectors: string[];\n  interpolation: [string, string]|null;\n  preserveWhitespaces: boolean;\n  constructor({encapsulation, template, templateUrl, htmlAst, styles, styleUrls,\n               externalStylesheets, animations, ngContentSelectors, interpolation, isInline,\n               preserveWhitespaces}: {\n    encapsulation: ViewEncapsulation | null,\n    template: string|null,\n    templateUrl: string|null,\n    htmlAst: HtmlParseTreeResult|null,\n    styles: string[],\n    styleUrls: string[],\n    externalStylesheets: CompileStylesheetMetadata[],\n    ngContentSelectors: string[],\n    animations: any[],\n    interpolation: [string, string]|null,\n    isInline: boolean,\n    preserveWhitespaces: boolean\n  }) {\n    this.encapsulation = encapsulation;\n    this.template = template;\n    this.templateUrl = templateUrl;\n    this.htmlAst = htmlAst;\n    this.styles = _normalizeArray(styles);\n    this.styleUrls = _normalizeArray(styleUrls);\n    this.externalStylesheets = _normalizeArray(externalStylesheets);\n    this.animations = animations ? flatten(animations) : [];\n    this.ngContentSelectors = ngContentSelectors || [];\n    if (interpolation && interpolation.length != 2) {\n      throw new Error(`'interpolation' should have a start and an end symbol.`);\n    }\n    this.interpolation = interpolation;\n    this.isInline = isInline;\n    this.preserveWhitespaces = preserveWhitespaces;\n  }\n\n  toSummary(): CompileTemplateSummary {\n    return {\n      ngContentSelectors: this.ngContentSelectors,\n      encapsulation: this.encapsulation,\n    };\n  }\n}\n\nexport interface CompileEntryComponentMetadata {\n  componentType: any;\n  componentFactory: StaticSymbol|object;\n}\n\n// Note: This should only use interfaces as nested data types\n// as we need to be able to serialize this from/to JSON!\nexport interface CompileDirectiveSummary extends CompileTypeSummary {\n  type: CompileTypeMetadata;\n  isComponent: boolean;\n  selector: string|null;\n  exportAs: string|null;\n  inputs: {[key: string]: string};\n  outputs: {[key: string]: string};\n  hostListeners: {[key: string]: string};\n  hostProperties: {[key: string]: string};\n  hostAttributes: {[key: string]: string};\n  providers: CompileProviderMetadata[];\n  viewProviders: CompileProviderMetadata[];\n  queries: CompileQueryMetadata[];\n  guards: {[key: string]: any};\n  viewQueries: CompileQueryMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  changeDetection: ChangeDetectionStrategy|null;\n  template: CompileTemplateSummary|null;\n  componentViewType: StaticSymbol|ProxyClass|null;\n  rendererType: StaticSymbol|object|null;\n  componentFactory: StaticSymbol|object|null;\n}\n\n/**\n * Metadata regarding compilation of a directive.\n */\nexport class CompileDirectiveMetadata {\n  static create({isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs,\n                 host, providers, viewProviders, queries, guards, viewQueries, entryComponents,\n                 template, componentViewType, rendererType, componentFactory}: {\n    isHost: boolean,\n    type: CompileTypeMetadata,\n    isComponent: boolean,\n    selector: string|null,\n    exportAs: string|null,\n    changeDetection: ChangeDetectionStrategy|null,\n    inputs: string[],\n    outputs: string[],\n    host: {[key: string]: string},\n    providers: CompileProviderMetadata[],\n    viewProviders: CompileProviderMetadata[],\n    queries: CompileQueryMetadata[],\n    guards: {[key: string]: any};\n    viewQueries: CompileQueryMetadata[],\n    entryComponents: CompileEntryComponentMetadata[],\n    template: CompileTemplateMetadata,\n    componentViewType: StaticSymbol|ProxyClass|null,\n    rendererType: StaticSymbol|object|null,\n    componentFactory: StaticSymbol|object|null,\n  }): CompileDirectiveMetadata {\n    const hostListeners: {[key: string]: string} = {};\n    const hostProperties: {[key: string]: string} = {};\n    const hostAttributes: {[key: string]: string} = {};\n    if (host != null) {\n      Object.keys(host).forEach(key => {\n        const value = host[key];\n        const matches = key.match(HOST_REG_EXP);\n        if (matches === null) {\n          hostAttributes[key] = value;\n        } else if (matches[1] != null) {\n          hostProperties[matches[1]] = value;\n        } else if (matches[2] != null) {\n          hostListeners[matches[2]] = value;\n        }\n      });\n    }\n    const inputsMap: {[key: string]: string} = {};\n    if (inputs != null) {\n      inputs.forEach((bindConfig: string) => {\n        // canonical syntax: `dirProp: elProp`\n        // if there is no `:`, use dirProp = elProp\n        const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n        inputsMap[parts[0]] = parts[1];\n      });\n    }\n    const outputsMap: {[key: string]: string} = {};\n    if (outputs != null) {\n      outputs.forEach((bindConfig: string) => {\n        // canonical syntax: `dirProp: elProp`\n        // if there is no `:`, use dirProp = elProp\n        const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n        outputsMap[parts[0]] = parts[1];\n      });\n    }\n\n    return new CompileDirectiveMetadata({\n      isHost,\n      type,\n      isComponent: !!isComponent, selector, exportAs, changeDetection,\n      inputs: inputsMap,\n      outputs: outputsMap,\n      hostListeners,\n      hostProperties,\n      hostAttributes,\n      providers,\n      viewProviders,\n      queries,\n      guards,\n      viewQueries,\n      entryComponents,\n      template,\n      componentViewType,\n      rendererType,\n      componentFactory,\n    });\n  }\n  isHost: boolean;\n  type: CompileTypeMetadata;\n  isComponent: boolean;\n  selector: string|null;\n  exportAs: string|null;\n  changeDetection: ChangeDetectionStrategy|null;\n  inputs: {[key: string]: string};\n  outputs: {[key: string]: string};\n  hostListeners: {[key: string]: string};\n  hostProperties: {[key: string]: string};\n  hostAttributes: {[key: string]: string};\n  providers: CompileProviderMetadata[];\n  viewProviders: CompileProviderMetadata[];\n  queries: CompileQueryMetadata[];\n  guards: {[key: string]: any};\n  viewQueries: CompileQueryMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n\n  template: CompileTemplateMetadata|null;\n\n  componentViewType: StaticSymbol|ProxyClass|null;\n  rendererType: StaticSymbol|object|null;\n  componentFactory: StaticSymbol|object|null;\n\n  constructor({isHost,\n               type,\n               isComponent,\n               selector,\n               exportAs,\n               changeDetection,\n               inputs,\n               outputs,\n               hostListeners,\n               hostProperties,\n               hostAttributes,\n               providers,\n               viewProviders,\n               queries,\n               guards,\n               viewQueries,\n               entryComponents,\n               template,\n               componentViewType,\n               rendererType,\n               componentFactory}: {\n    isHost: boolean,\n    type: CompileTypeMetadata,\n    isComponent: boolean,\n    selector: string|null,\n    exportAs: string|null,\n    changeDetection: ChangeDetectionStrategy|null,\n    inputs: {[key: string]: string},\n    outputs: {[key: string]: string},\n    hostListeners: {[key: string]: string},\n    hostProperties: {[key: string]: string},\n    hostAttributes: {[key: string]: string},\n    providers: CompileProviderMetadata[],\n    viewProviders: CompileProviderMetadata[],\n    queries: CompileQueryMetadata[],\n    guards: {[key: string]: any},\n    viewQueries: CompileQueryMetadata[],\n    entryComponents: CompileEntryComponentMetadata[],\n    template: CompileTemplateMetadata|null,\n    componentViewType: StaticSymbol|ProxyClass|null,\n    rendererType: StaticSymbol|object|null,\n    componentFactory: StaticSymbol|object|null,\n  }) {\n    this.isHost = !!isHost;\n    this.type = type;\n    this.isComponent = isComponent;\n    this.selector = selector;\n    this.exportAs = exportAs;\n    this.changeDetection = changeDetection;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.hostListeners = hostListeners;\n    this.hostProperties = hostProperties;\n    this.hostAttributes = hostAttributes;\n    this.providers = _normalizeArray(providers);\n    this.viewProviders = _normalizeArray(viewProviders);\n    this.queries = _normalizeArray(queries);\n    this.guards = guards;\n    this.viewQueries = _normalizeArray(viewQueries);\n    this.entryComponents = _normalizeArray(entryComponents);\n    this.template = template;\n\n    this.componentViewType = componentViewType;\n    this.rendererType = rendererType;\n    this.componentFactory = componentFactory;\n  }\n\n  toSummary(): CompileDirectiveSummary {\n    return {\n      summaryKind: CompileSummaryKind.Directive,\n      type: this.type,\n      isComponent: this.isComponent,\n      selector: this.selector,\n      exportAs: this.exportAs,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      hostListeners: this.hostListeners,\n      hostProperties: this.hostProperties,\n      hostAttributes: this.hostAttributes,\n      providers: this.providers,\n      viewProviders: this.viewProviders,\n      queries: this.queries,\n      guards: this.guards,\n      viewQueries: this.viewQueries,\n      entryComponents: this.entryComponents,\n      changeDetection: this.changeDetection,\n      template: this.template && this.template.toSummary(),\n      componentViewType: this.componentViewType,\n      rendererType: this.rendererType,\n      componentFactory: this.componentFactory\n    };\n  }\n}\n\nexport interface CompilePipeSummary extends CompileTypeSummary {\n  type: CompileTypeMetadata;\n  name: string;\n  pure: boolean;\n}\n\nexport class CompilePipeMetadata {\n  type: CompileTypeMetadata;\n  name: string;\n  pure: boolean;\n\n  constructor({type, name, pure}: {\n    type: CompileTypeMetadata,\n    name: string,\n    pure: boolean,\n  }) {\n    this.type = type;\n    this.name = name;\n    this.pure = !!pure;\n  }\n\n  toSummary(): CompilePipeSummary {\n    return {\n      summaryKind: CompileSummaryKind.Pipe,\n      type: this.type,\n      name: this.name,\n      pure: this.pure\n    };\n  }\n}\n\n// Note: This should only use interfaces as nested data types\n// as we need to be able to serialize this from/to JSON!\nexport interface CompileNgModuleSummary extends CompileTypeSummary {\n  type: CompileTypeMetadata;\n\n  // Note: This is transitive over the exported modules.\n  exportedDirectives: CompileIdentifierMetadata[];\n  // Note: This is transitive over the exported modules.\n  exportedPipes: CompileIdentifierMetadata[];\n\n  // Note: This is transitive.\n  entryComponents: CompileEntryComponentMetadata[];\n  // Note: This is transitive.\n  providers: {provider: CompileProviderMetadata, module: CompileIdentifierMetadata}[];\n  // Note: This is transitive.\n  modules: CompileTypeMetadata[];\n}\n\nexport class CompileShallowModuleMetadata {\n  // TODO(issue/24571): remove '!'.\n  type !: CompileTypeMetadata;\n\n  rawExports: any;\n  rawImports: any;\n  rawProviders: any;\n}\n\n/**\n * Metadata regarding compilation of a module.\n */\nexport class CompileNgModuleMetadata {\n  type: CompileTypeMetadata;\n  declaredDirectives: CompileIdentifierMetadata[];\n  exportedDirectives: CompileIdentifierMetadata[];\n  declaredPipes: CompileIdentifierMetadata[];\n\n  exportedPipes: CompileIdentifierMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  bootstrapComponents: CompileIdentifierMetadata[];\n  providers: CompileProviderMetadata[];\n\n  importedModules: CompileNgModuleSummary[];\n  exportedModules: CompileNgModuleSummary[];\n  schemas: SchemaMetadata[];\n  id: string|null;\n\n  transitiveModule: TransitiveCompileNgModuleMetadata;\n\n  constructor({type, providers, declaredDirectives, exportedDirectives, declaredPipes,\n               exportedPipes, entryComponents, bootstrapComponents, importedModules,\n               exportedModules, schemas, transitiveModule, id}: {\n    type: CompileTypeMetadata,\n    providers: CompileProviderMetadata[],\n    declaredDirectives: CompileIdentifierMetadata[],\n    exportedDirectives: CompileIdentifierMetadata[],\n    declaredPipes: CompileIdentifierMetadata[],\n    exportedPipes: CompileIdentifierMetadata[],\n    entryComponents: CompileEntryComponentMetadata[],\n    bootstrapComponents: CompileIdentifierMetadata[],\n    importedModules: CompileNgModuleSummary[],\n    exportedModules: CompileNgModuleSummary[],\n    transitiveModule: TransitiveCompileNgModuleMetadata,\n    schemas: SchemaMetadata[],\n    id: string|null\n  }) {\n    this.type = type || null;\n    this.declaredDirectives = _normalizeArray(declaredDirectives);\n    this.exportedDirectives = _normalizeArray(exportedDirectives);\n    this.declaredPipes = _normalizeArray(declaredPipes);\n    this.exportedPipes = _normalizeArray(exportedPipes);\n    this.providers = _normalizeArray(providers);\n    this.entryComponents = _normalizeArray(entryComponents);\n    this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n    this.importedModules = _normalizeArray(importedModules);\n    this.exportedModules = _normalizeArray(exportedModules);\n    this.schemas = _normalizeArray(schemas);\n    this.id = id || null;\n    this.transitiveModule = transitiveModule || null;\n  }\n\n  toSummary(): CompileNgModuleSummary {\n    const module = this.transitiveModule !;\n    return {\n      summaryKind: CompileSummaryKind.NgModule,\n      type: this.type,\n      entryComponents: module.entryComponents,\n      providers: module.providers,\n      modules: module.modules,\n      exportedDirectives: module.exportedDirectives,\n      exportedPipes: module.exportedPipes\n    };\n  }\n}\n\nexport class TransitiveCompileNgModuleMetadata {\n  directivesSet = new Set<any>();\n  directives: CompileIdentifierMetadata[] = [];\n  exportedDirectivesSet = new Set<any>();\n  exportedDirectives: CompileIdentifierMetadata[] = [];\n  pipesSet = new Set<any>();\n  pipes: CompileIdentifierMetadata[] = [];\n  exportedPipesSet = new Set<any>();\n  exportedPipes: CompileIdentifierMetadata[] = [];\n  modulesSet = new Set<any>();\n  modules: CompileTypeMetadata[] = [];\n  entryComponentsSet = new Set<any>();\n  entryComponents: CompileEntryComponentMetadata[] = [];\n\n  providers: {provider: CompileProviderMetadata, module: CompileIdentifierMetadata}[] = [];\n\n  addProvider(provider: CompileProviderMetadata, module: CompileIdentifierMetadata) {\n    this.providers.push({provider: provider, module: module});\n  }\n\n  addDirective(id: CompileIdentifierMetadata) {\n    if (!this.directivesSet.has(id.reference)) {\n      this.directivesSet.add(id.reference);\n      this.directives.push(id);\n    }\n  }\n  addExportedDirective(id: CompileIdentifierMetadata) {\n    if (!this.exportedDirectivesSet.has(id.reference)) {\n      this.exportedDirectivesSet.add(id.reference);\n      this.exportedDirectives.push(id);\n    }\n  }\n  addPipe(id: CompileIdentifierMetadata) {\n    if (!this.pipesSet.has(id.reference)) {\n      this.pipesSet.add(id.reference);\n      this.pipes.push(id);\n    }\n  }\n  addExportedPipe(id: CompileIdentifierMetadata) {\n    if (!this.exportedPipesSet.has(id.reference)) {\n      this.exportedPipesSet.add(id.reference);\n      this.exportedPipes.push(id);\n    }\n  }\n  addModule(id: CompileTypeMetadata) {\n    if (!this.modulesSet.has(id.reference)) {\n      this.modulesSet.add(id.reference);\n      this.modules.push(id);\n    }\n  }\n  addEntryComponent(ec: CompileEntryComponentMetadata) {\n    if (!this.entryComponentsSet.has(ec.componentType)) {\n      this.entryComponentsSet.add(ec.componentType);\n      this.entryComponents.push(ec);\n    }\n  }\n}\n\nfunction _normalizeArray(obj: any[] | undefined | null): any[] {\n  return obj || [];\n}\n\nexport class ProviderMeta {\n  token: any;\n  useClass: Type|null;\n  useValue: any;\n  useExisting: any;\n  useFactory: Function|null;\n  dependencies: Object[]|null;\n  multi: boolean;\n\n  constructor(token: any, {useClass, useValue, useExisting, useFactory, deps, multi}: {\n    useClass?: Type,\n    useValue?: any,\n    useExisting?: any,\n    useFactory?: Function|null,\n    deps?: Object[]|null,\n    multi?: boolean\n  }) {\n    this.token = token;\n    this.useClass = useClass || null;\n    this.useValue = useValue;\n    this.useExisting = useExisting;\n    this.useFactory = useFactory || null;\n    this.dependencies = deps || null;\n    this.multi = !!multi;\n  }\n}\n\nexport function flatten<T>(list: Array<T|T[]>): T[] {\n  return list.reduce((flat: any[], item: T | T[]): T[] => {\n    const flatItem = Array.isArray(item) ? flatten(item) : item;\n    return (<T[]>flat).concat(flatItem);\n  }, []);\n}\n\nfunction jitSourceUrl(url: string) {\n  // Note: We need 3 \"/\" so that ng shows up as a separate domain\n  // in the chrome dev tools.\n  return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\n}\n\nexport function templateSourceUrl(\n    ngModuleType: CompileIdentifierMetadata, compMeta: {type: CompileIdentifierMetadata},\n    templateMeta: {isInline: boolean, templateUrl: string | null}) {\n  let url: string;\n  if (templateMeta.isInline) {\n    if (compMeta.type.reference instanceof StaticSymbol) {\n      // Note: a .ts file might contain multiple components with inline templates,\n      // so we need to give them unique urls, as these will be used for sourcemaps.\n      url = `${compMeta.type.reference.filePath}.${compMeta.type.reference.name}.html`;\n    } else {\n      url = `${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.html`;\n    }\n  } else {\n    url = templateMeta.templateUrl !;\n  }\n  return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);\n}\n\nexport function sharedStylesheetJitUrl(meta: CompileStylesheetMetadata, id: number) {\n  const pathParts = meta.moduleUrl !.split(/\\/\\\\/g);\n  const baseName = pathParts[pathParts.length - 1];\n  return jitSourceUrl(`css/${id}${baseName}.ngstyle.js`);\n}\n\nexport function ngModuleJitUrl(moduleMeta: CompileNgModuleMetadata): string {\n  return jitSourceUrl(`${identifierName(moduleMeta.type)}/module.ngfactory.js`);\n}\n\nexport function templateJitUrl(\n    ngModuleType: CompileIdentifierMetadata, compMeta: CompileDirectiveMetadata): string {\n  return jitSourceUrl(\n      `${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.ngfactory.js`);\n}\n"],"sourceRoot":""}