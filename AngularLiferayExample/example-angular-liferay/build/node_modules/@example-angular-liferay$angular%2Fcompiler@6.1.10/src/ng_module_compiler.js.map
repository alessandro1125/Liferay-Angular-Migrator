{"version":3,"sources":["../../../../../../packages/compiler/src/ng_module_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileNgModuleMetadata, CompileProviderMetadata, identifierName} from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {NodeFlags} from './core';\nimport {Identifiers} from './identifiers';\nimport * as o from './output/output_ast';\nimport {typeSourceSpan} from './parse_util';\nimport {NgModuleProviderAnalyzer} from './provider_analyzer';\nimport {OutputContext} from './util';\nimport {componentFactoryResolverProviderDef, depDef, providerDef} from './view_compiler/provider_compiler';\n\nexport class NgModuleCompileResult {\n  constructor(public ngModuleFactoryVar: string) {}\n}\n\nconst LOG_VAR = o.variable('_l');\n\nexport class NgModuleCompiler {\n  constructor(private reflector: CompileReflector) {}\n  compile(\n      ctx: OutputContext, ngModuleMeta: CompileNgModuleMetadata,\n      extraProviders: CompileProviderMetadata[]): NgModuleCompileResult {\n    const sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n    const entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n    const bootstrapComponents = ngModuleMeta.bootstrapComponents;\n    const providerParser =\n        new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n    const providerDefs =\n        [componentFactoryResolverProviderDef(\n             this.reflector, ctx, NodeFlags.None, entryComponentFactories)]\n            .concat(providerParser.parse().map((provider) => providerDef(ctx, provider)))\n            .map(({providerExpr, depsExpr, flags, tokenExpr}) => {\n              return o.importExpr(Identifiers.moduleProviderDef).callFn([\n                o.literal(flags), tokenExpr, providerExpr, depsExpr\n              ]);\n            });\n\n    const ngModuleDef = o.importExpr(Identifiers.moduleDef).callFn([o.literalArr(providerDefs)]);\n    const ngModuleDefFactory = o.fn(\n        [new o.FnParam(LOG_VAR.name !)], [new o.ReturnStatement(ngModuleDef)], o.INFERRED_TYPE);\n\n    const ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;\n    this._createNgModuleFactory(\n        ctx, ngModuleMeta.type.reference, o.importExpr(Identifiers.createModuleFactory).callFn([\n          ctx.importExpr(ngModuleMeta.type.reference),\n          o.literalArr(bootstrapComponents.map(id => ctx.importExpr(id.reference))),\n          ngModuleDefFactory\n        ]));\n\n    if (ngModuleMeta.id) {\n      const id = typeof ngModuleMeta.id === 'string' ? o.literal(ngModuleMeta.id) :\n                                                       ctx.importExpr(ngModuleMeta.id);\n      const registerFactoryStmt = o.importExpr(Identifiers.RegisterModuleFactoryFn)\n                                      .callFn([id, o.variable(ngModuleFactoryVar)])\n                                      .toStmt();\n      ctx.statements.push(registerFactoryStmt);\n    }\n\n    return new NgModuleCompileResult(ngModuleFactoryVar);\n  }\n\n  createStub(ctx: OutputContext, ngModuleReference: any) {\n    this._createNgModuleFactory(ctx, ngModuleReference, o.NULL_EXPR);\n  }\n\n  private _createNgModuleFactory(ctx: OutputContext, reference: any, value: o.Expression) {\n    const ngModuleFactoryVar = `${identifierName({reference: reference})}NgFactory`;\n    const ngModuleFactoryStmt =\n        o.variable(ngModuleFactoryVar)\n            .set(value)\n            .toDeclStmt(\n                o.importType(\n                    Identifiers.NgModuleFactory, [o.expressionType(ctx.importExpr(reference)) !],\n                    [o.TypeModifier.Const]),\n                [o.StmtModifier.Final, o.StmtModifier.Exported]);\n\n    ctx.statements.push(ngModuleFactoryStmt);\n  }\n}\n"],"sourceRoot":""}