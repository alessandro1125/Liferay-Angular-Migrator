{"version":3,"sources":["../../../../../../../packages/compiler/src/css_parser/css_lexer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport * as chars from '../chars';\n\nexport enum CssTokenType {\n  EOF,\n  String,\n  Comment,\n  Identifier,\n  Number,\n  IdentifierOrNumber,\n  AtKeyword,\n  Character,\n  Whitespace,\n  Invalid\n}\n\nexport enum CssLexerMode {\n  ALL,\n  ALL_TRACK_WS,\n  SELECTOR,\n  PSEUDO_SELECTOR,\n  PSEUDO_SELECTOR_WITH_ARGUMENTS,\n  ATTRIBUTE_SELECTOR,\n  AT_RULE_QUERY,\n  MEDIA_QUERY,\n  BLOCK,\n  KEYFRAME_BLOCK,\n  STYLE_BLOCK,\n  STYLE_VALUE,\n  STYLE_VALUE_FUNCTION,\n  STYLE_CALC_FUNCTION\n}\n\nexport class LexedCssResult {\n  constructor(public error: Error|null, public token: CssToken) {}\n}\n\nexport function generateErrorMessage(\n    input: string, message: string, errorValue: string, index: number, row: number,\n    column: number): string {\n  return `${message} at column ${row}:${column} in expression [` +\n      findProblemCode(input, errorValue, index, column) + ']';\n}\n\nexport function findProblemCode(\n    input: string, errorValue: string, index: number, column: number): string {\n  let endOfProblemLine = index;\n  let current = charCode(input, index);\n  while (current > 0 && !isNewline(current)) {\n    current = charCode(input, ++endOfProblemLine);\n  }\n  const choppedString = input.substring(0, endOfProblemLine);\n  let pointerPadding = '';\n  for (let i = 0; i < column; i++) {\n    pointerPadding += ' ';\n  }\n  let pointerString = '';\n  for (let i = 0; i < errorValue.length; i++) {\n    pointerString += '^';\n  }\n  return choppedString + '\\n' + pointerPadding + pointerString + '\\n';\n}\n\nexport class CssToken {\n  numValue: number;\n  constructor(\n      public index: number, public column: number, public line: number, public type: CssTokenType,\n      public strValue: string) {\n    this.numValue = charCode(strValue, 0);\n  }\n}\n\nexport class CssLexer {\n  scan(text: string, trackComments: boolean = false): CssScanner {\n    return new CssScanner(text, trackComments);\n  }\n}\n\nexport function cssScannerError(token: CssToken, message: string): Error {\n  const error = Error('CssParseError: ' + message);\n  (error as any)[ERROR_RAW_MESSAGE] = message;\n  (error as any)[ERROR_TOKEN] = token;\n  return error;\n}\n\nconst ERROR_TOKEN = 'ngToken';\nconst ERROR_RAW_MESSAGE = 'ngRawMessage';\n\nexport function getRawMessage(error: Error): string {\n  return (error as any)[ERROR_RAW_MESSAGE];\n}\n\nexport function getToken(error: Error): CssToken {\n  return (error as any)[ERROR_TOKEN];\n}\n\nfunction _trackWhitespace(mode: CssLexerMode) {\n  switch (mode) {\n    case CssLexerMode.SELECTOR:\n    case CssLexerMode.PSEUDO_SELECTOR:\n    case CssLexerMode.ALL_TRACK_WS:\n    case CssLexerMode.STYLE_VALUE:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport class CssScanner {\n  // TODO(issue/24571): remove '!'.\n  peek !: number;\n  peekPeek: number;\n  length: number = 0;\n  index: number = -1;\n  column: number = -1;\n  line: number = 0;\n\n  /** @internal */\n  _currentMode: CssLexerMode = CssLexerMode.BLOCK;\n  /** @internal */\n  _currentError: Error|null = null;\n\n  constructor(public input: string, private _trackComments: boolean = false) {\n    this.length = this.input.length;\n    this.peekPeek = this.peekAt(0);\n    this.advance();\n  }\n\n  getMode(): CssLexerMode { return this._currentMode; }\n\n  setMode(mode: CssLexerMode) {\n    if (this._currentMode != mode) {\n      if (_trackWhitespace(this._currentMode) && !_trackWhitespace(mode)) {\n        this.consumeWhitespace();\n      }\n      this._currentMode = mode;\n    }\n  }\n\n  advance(): void {\n    if (isNewline(this.peek)) {\n      this.column = 0;\n      this.line++;\n    } else {\n      this.column++;\n    }\n\n    this.index++;\n    this.peek = this.peekPeek;\n    this.peekPeek = this.peekAt(this.index + 1);\n  }\n\n  peekAt(index: number): number {\n    return index >= this.length ? chars.$EOF : this.input.charCodeAt(index);\n  }\n\n  consumeEmptyStatements(): void {\n    this.consumeWhitespace();\n    while (this.peek == chars.$SEMICOLON) {\n      this.advance();\n      this.consumeWhitespace();\n    }\n  }\n\n  consumeWhitespace(): void {\n    while (chars.isWhitespace(this.peek) || isNewline(this.peek)) {\n      this.advance();\n      if (!this._trackComments && isCommentStart(this.peek, this.peekPeek)) {\n        this.advance();  // /\n        this.advance();  // *\n        while (!isCommentEnd(this.peek, this.peekPeek)) {\n          if (this.peek == chars.$EOF) {\n            this.error('Unterminated comment');\n          }\n          this.advance();\n        }\n        this.advance();  // *\n        this.advance();  // /\n      }\n    }\n  }\n\n  consume(type: CssTokenType, value: string|null = null): LexedCssResult {\n    const mode = this._currentMode;\n\n    this.setMode(_trackWhitespace(mode) ? CssLexerMode.ALL_TRACK_WS : CssLexerMode.ALL);\n\n    const previousIndex = this.index;\n    const previousLine = this.line;\n    const previousColumn = this.column;\n\n    let next: CssToken = undefined !;\n    const output = this.scan();\n    if (output != null) {\n      // just incase the inner scan method returned an error\n      if (output.error != null) {\n        this.setMode(mode);\n        return output;\n      }\n\n      next = output.token;\n    }\n\n    if (next == null) {\n      next = new CssToken(this.index, this.column, this.line, CssTokenType.EOF, 'end of file');\n    }\n\n    let isMatchingType: boolean = false;\n    if (type == CssTokenType.IdentifierOrNumber) {\n      // TODO (matsko): implement array traversal for lookup here\n      isMatchingType = next.type == CssTokenType.Number || next.type == CssTokenType.Identifier;\n    } else {\n      isMatchingType = next.type == type;\n    }\n\n    // before throwing the error we need to bring back the former\n    // mode so that the parser can recover...\n    this.setMode(mode);\n\n    let error: Error|null = null;\n    if (!isMatchingType || (value != null && value != next.strValue)) {\n      let errorMessage =\n          CssTokenType[next.type] + ' does not match expected ' + CssTokenType[type] + ' value';\n\n      if (value != null) {\n        errorMessage += ' (\"' + next.strValue + '\" should match \"' + value + '\")';\n      }\n\n      error = cssScannerError(\n          next, generateErrorMessage(\n                    this.input, errorMessage, next.strValue, previousIndex, previousLine,\n                    previousColumn));\n    }\n\n    return new LexedCssResult(error, next);\n  }\n\n\n  scan(): LexedCssResult|null {\n    const trackWS = _trackWhitespace(this._currentMode);\n    if (this.index == 0 && !trackWS) {  // first scan\n      this.consumeWhitespace();\n    }\n\n    const token = this._scan();\n    if (token == null) return null;\n\n    const error = this._currentError !;\n    this._currentError = null;\n\n    if (!trackWS) {\n      this.consumeWhitespace();\n    }\n    return new LexedCssResult(error, token);\n  }\n\n  /** @internal */\n  _scan(): CssToken|null {\n    let peek = this.peek;\n    let peekPeek = this.peekPeek;\n    if (peek == chars.$EOF) return null;\n\n    if (isCommentStart(peek, peekPeek)) {\n      // even if comments are not tracked we still lex the\n      // comment so we can move the pointer forward\n      const commentToken = this.scanComment();\n      if (this._trackComments) {\n        return commentToken;\n      }\n    }\n\n    if (_trackWhitespace(this._currentMode) && (chars.isWhitespace(peek) || isNewline(peek))) {\n      return this.scanWhitespace();\n    }\n\n    peek = this.peek;\n    peekPeek = this.peekPeek;\n    if (peek == chars.$EOF) return null;\n\n    if (isStringStart(peek, peekPeek)) {\n      return this.scanString();\n    }\n\n    // something like url(cool)\n    if (this._currentMode == CssLexerMode.STYLE_VALUE_FUNCTION) {\n      return this.scanCssValueFunction();\n    }\n\n    const isModifier = peek == chars.$PLUS || peek == chars.$MINUS;\n    const digitA = isModifier ? false : chars.isDigit(peek);\n    const digitB = chars.isDigit(peekPeek);\n    if (digitA || (isModifier && (peekPeek == chars.$PERIOD || digitB)) ||\n        (peek == chars.$PERIOD && digitB)) {\n      return this.scanNumber();\n    }\n\n    if (peek == chars.$AT) {\n      return this.scanAtExpression();\n    }\n\n    if (isIdentifierStart(peek, peekPeek)) {\n      return this.scanIdentifier();\n    }\n\n    if (isValidCssCharacter(peek, this._currentMode)) {\n      return this.scanCharacter();\n    }\n\n    return this.error(`Unexpected character [${String.fromCharCode(peek)}]`);\n  }\n\n  scanComment(): CssToken|null {\n    if (this.assertCondition(\n            isCommentStart(this.peek, this.peekPeek), 'Expected comment start value')) {\n      return null;\n    }\n\n    const start = this.index;\n    const startingColumn = this.column;\n    const startingLine = this.line;\n\n    this.advance();  // /\n    this.advance();  // *\n\n    while (!isCommentEnd(this.peek, this.peekPeek)) {\n      if (this.peek == chars.$EOF) {\n        this.error('Unterminated comment');\n      }\n      this.advance();\n    }\n\n    this.advance();  // *\n    this.advance();  // /\n\n    const str = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, startingLine, CssTokenType.Comment, str);\n  }\n\n  scanWhitespace(): CssToken {\n    const start = this.index;\n    const startingColumn = this.column;\n    const startingLine = this.line;\n    while (chars.isWhitespace(this.peek) && this.peek != chars.$EOF) {\n      this.advance();\n    }\n    const str = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, startingLine, CssTokenType.Whitespace, str);\n  }\n\n  scanString(): CssToken|null {\n    if (this.assertCondition(\n            isStringStart(this.peek, this.peekPeek), 'Unexpected non-string starting value')) {\n      return null;\n    }\n\n    const target = this.peek;\n    const start = this.index;\n    const startingColumn = this.column;\n    const startingLine = this.line;\n    let previous = target;\n    this.advance();\n\n    while (!isCharMatch(target, previous, this.peek)) {\n      if (this.peek == chars.$EOF || isNewline(this.peek)) {\n        this.error('Unterminated quote');\n      }\n      previous = this.peek;\n      this.advance();\n    }\n\n    if (this.assertCondition(this.peek == target, 'Unterminated quote')) {\n      return null;\n    }\n    this.advance();\n\n    const str = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, startingLine, CssTokenType.String, str);\n  }\n\n  scanNumber(): CssToken {\n    const start = this.index;\n    const startingColumn = this.column;\n    if (this.peek == chars.$PLUS || this.peek == chars.$MINUS) {\n      this.advance();\n    }\n    let periodUsed = false;\n    while (chars.isDigit(this.peek) || this.peek == chars.$PERIOD) {\n      if (this.peek == chars.$PERIOD) {\n        if (periodUsed) {\n          this.error('Unexpected use of a second period value');\n        }\n        periodUsed = true;\n      }\n      this.advance();\n    }\n    const strValue = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Number, strValue);\n  }\n\n  scanIdentifier(): CssToken|null {\n    if (this.assertCondition(\n            isIdentifierStart(this.peek, this.peekPeek), 'Expected identifier starting value')) {\n      return null;\n    }\n\n    const start = this.index;\n    const startingColumn = this.column;\n    while (isIdentifierPart(this.peek)) {\n      this.advance();\n    }\n    const strValue = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Identifier, strValue);\n  }\n\n  scanCssValueFunction(): CssToken {\n    const start = this.index;\n    const startingColumn = this.column;\n    let parenBalance = 1;\n    while (this.peek != chars.$EOF && parenBalance > 0) {\n      this.advance();\n      if (this.peek == chars.$LPAREN) {\n        parenBalance++;\n      } else if (this.peek == chars.$RPAREN) {\n        parenBalance--;\n      }\n    }\n    const strValue = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Identifier, strValue);\n  }\n\n  scanCharacter(): CssToken|null {\n    const start = this.index;\n    const startingColumn = this.column;\n    if (this.assertCondition(\n            isValidCssCharacter(this.peek, this._currentMode),\n            charStr(this.peek) + ' is not a valid CSS character')) {\n      return null;\n    }\n\n    const c = this.input.substring(start, start + 1);\n    this.advance();\n\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Character, c);\n  }\n\n  scanAtExpression(): CssToken|null {\n    if (this.assertCondition(this.peek == chars.$AT, 'Expected @ value')) {\n      return null;\n    }\n\n    const start = this.index;\n    const startingColumn = this.column;\n    this.advance();\n    if (isIdentifierStart(this.peek, this.peekPeek)) {\n      const ident = this.scanIdentifier() !;\n      const strValue = '@' + ident.strValue;\n      return new CssToken(start, startingColumn, this.line, CssTokenType.AtKeyword, strValue);\n    } else {\n      return this.scanCharacter();\n    }\n  }\n\n  assertCondition(status: boolean, errorMessage: string): boolean {\n    if (!status) {\n      this.error(errorMessage);\n      return true;\n    }\n    return false;\n  }\n\n  error(message: string, errorTokenValue: string|null = null, doNotAdvance: boolean = false):\n      CssToken {\n    const index: number = this.index;\n    const column: number = this.column;\n    const line: number = this.line;\n    errorTokenValue = errorTokenValue || String.fromCharCode(this.peek);\n    const invalidToken = new CssToken(index, column, line, CssTokenType.Invalid, errorTokenValue);\n    const errorMessage =\n        generateErrorMessage(this.input, message, errorTokenValue, index, line, column);\n    if (!doNotAdvance) {\n      this.advance();\n    }\n    this._currentError = cssScannerError(invalidToken, errorMessage);\n    return invalidToken;\n  }\n}\n\nfunction isCharMatch(target: number, previous: number, code: number): boolean {\n  return code == target && previous != chars.$BACKSLASH;\n}\n\nfunction isCommentStart(code: number, next: number): boolean {\n  return code == chars.$SLASH && next == chars.$STAR;\n}\n\nfunction isCommentEnd(code: number, next: number): boolean {\n  return code == chars.$STAR && next == chars.$SLASH;\n}\n\nfunction isStringStart(code: number, next: number): boolean {\n  let target = code;\n  if (target == chars.$BACKSLASH) {\n    target = next;\n  }\n  return target == chars.$DQ || target == chars.$SQ;\n}\n\nfunction isIdentifierStart(code: number, next: number): boolean {\n  let target = code;\n  if (target == chars.$MINUS) {\n    target = next;\n  }\n\n  return chars.isAsciiLetter(target) || target == chars.$BACKSLASH || target == chars.$MINUS ||\n      target == chars.$_;\n}\n\nfunction isIdentifierPart(target: number): boolean {\n  return chars.isAsciiLetter(target) || target == chars.$BACKSLASH || target == chars.$MINUS ||\n      target == chars.$_ || chars.isDigit(target);\n}\n\nfunction isValidPseudoSelectorCharacter(code: number): boolean {\n  switch (code) {\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidKeyframeBlockCharacter(code: number): boolean {\n  return code == chars.$PERCENT;\n}\n\nfunction isValidAttributeSelectorCharacter(code: number): boolean {\n  // value^*|$~=something\n  switch (code) {\n    case chars.$$:\n    case chars.$PIPE:\n    case chars.$CARET:\n    case chars.$TILDA:\n    case chars.$STAR:\n    case chars.$EQ:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidSelectorCharacter(code: number): boolean {\n  // selector [ key   = value ]\n  // IDENT    C IDENT C IDENT C\n  // #id, .class, *+~>\n  // tag:PSEUDO\n  switch (code) {\n    case chars.$HASH:\n    case chars.$PERIOD:\n    case chars.$TILDA:\n    case chars.$STAR:\n    case chars.$PLUS:\n    case chars.$GT:\n    case chars.$COLON:\n    case chars.$PIPE:\n    case chars.$COMMA:\n    case chars.$LBRACKET:\n    case chars.$RBRACKET:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidStyleBlockCharacter(code: number): boolean {\n  // key:value;\n  // key:calc(something ... )\n  switch (code) {\n    case chars.$HASH:\n    case chars.$SEMICOLON:\n    case chars.$COLON:\n    case chars.$PERCENT:\n    case chars.$SLASH:\n    case chars.$BACKSLASH:\n    case chars.$BANG:\n    case chars.$PERIOD:\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidMediaQueryRuleCharacter(code: number): boolean {\n  // (min-width: 7.5em) and (orientation: landscape)\n  switch (code) {\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n    case chars.$COLON:\n    case chars.$PERCENT:\n    case chars.$PERIOD:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidAtRuleCharacter(code: number): boolean {\n  // @document url(http://www.w3.org/page?something=on#hash),\n  switch (code) {\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n    case chars.$COLON:\n    case chars.$PERCENT:\n    case chars.$PERIOD:\n    case chars.$SLASH:\n    case chars.$BACKSLASH:\n    case chars.$HASH:\n    case chars.$EQ:\n    case chars.$QUESTION:\n    case chars.$AMPERSAND:\n    case chars.$STAR:\n    case chars.$COMMA:\n    case chars.$MINUS:\n    case chars.$PLUS:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidStyleFunctionCharacter(code: number): boolean {\n  switch (code) {\n    case chars.$PERIOD:\n    case chars.$MINUS:\n    case chars.$PLUS:\n    case chars.$STAR:\n    case chars.$SLASH:\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n    case chars.$COMMA:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidBlockCharacter(code: number): boolean {\n  // @something { }\n  // IDENT\n  return code == chars.$AT;\n}\n\nfunction isValidCssCharacter(code: number, mode: CssLexerMode): boolean {\n  switch (mode) {\n    case CssLexerMode.ALL:\n    case CssLexerMode.ALL_TRACK_WS:\n      return true;\n\n    case CssLexerMode.SELECTOR:\n      return isValidSelectorCharacter(code);\n\n    case CssLexerMode.PSEUDO_SELECTOR_WITH_ARGUMENTS:\n      return isValidPseudoSelectorCharacter(code);\n\n    case CssLexerMode.ATTRIBUTE_SELECTOR:\n      return isValidAttributeSelectorCharacter(code);\n\n    case CssLexerMode.MEDIA_QUERY:\n      return isValidMediaQueryRuleCharacter(code);\n\n    case CssLexerMode.AT_RULE_QUERY:\n      return isValidAtRuleCharacter(code);\n\n    case CssLexerMode.KEYFRAME_BLOCK:\n      return isValidKeyframeBlockCharacter(code);\n\n    case CssLexerMode.STYLE_BLOCK:\n    case CssLexerMode.STYLE_VALUE:\n      return isValidStyleBlockCharacter(code);\n\n    case CssLexerMode.STYLE_CALC_FUNCTION:\n      return isValidStyleFunctionCharacter(code);\n\n    case CssLexerMode.BLOCK:\n      return isValidBlockCharacter(code);\n\n    default:\n      return false;\n  }\n}\n\nfunction charCode(input: string, index: number): number {\n  return index >= input.length ? chars.$EOF : input.charCodeAt(index);\n}\n\nfunction charStr(code: number): string {\n  return String.fromCharCode(code);\n}\n\nexport function isNewline(code: number): boolean {\n  switch (code) {\n    case chars.$FF:\n    case chars.$CR:\n    case chars.$LF:\n    case chars.$VTAB:\n      return true;\n\n    default:\n      return false;\n  }\n}\n"],"sourceRoot":""}