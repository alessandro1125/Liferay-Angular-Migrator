{"version":3,"sources":["../../../../../../../packages/compiler/src/render3/r3_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '../core';\nimport {AST, BindingType, BoundElementProperty, ParsedEvent, ParsedEventType} from '../expression_parser/ast';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit<Result>(visitor: Visitor<Result>): Result;\n}\n\nexport class Text implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitText(this); }\n}\n\nexport class BoundText implements Node {\n  constructor(public value: AST, public sourceSpan: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitBoundText(this); }\n}\n\nexport class TextAttribute implements Node {\n  constructor(\n      public name: string, public value: string, public sourceSpan: ParseSourceSpan,\n      public valueSpan?: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitTextAttribute(this); }\n}\n\nexport class BoundAttribute implements Node {\n  constructor(\n      public name: string, public type: BindingType, public securityContext: SecurityContext,\n      public value: AST, public unit: string|null, public sourceSpan: ParseSourceSpan) {}\n\n  static fromBoundElementProperty(prop: BoundElementProperty) {\n    return new BoundAttribute(\n        prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n  }\n\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitBoundAttribute(this); }\n}\n\nexport class BoundEvent implements Node {\n  constructor(\n      public name: string, public handler: AST, public target: string|null,\n      public phase: string|null, public sourceSpan: ParseSourceSpan) {}\n\n  static fromParsedEvent(event: ParsedEvent) {\n    const target: string|null = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;\n    const phase: string|null =\n        event.type === ParsedEventType.Animation ? event.targetOrPhase : null;\n    return new BoundEvent(event.name, event.handler, target, phase, event.sourceSpan);\n  }\n\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitBoundEvent(this); }\n}\n\nexport class Element implements Node {\n  constructor(\n      public name: string, public attributes: TextAttribute[], public inputs: BoundAttribute[],\n      public outputs: BoundEvent[], public children: Node[], public references: Reference[],\n      public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan|null,\n      public endSourceSpan: ParseSourceSpan|null) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitElement(this); }\n}\n\nexport class Template implements Node {\n  constructor(\n      public attributes: TextAttribute[], public inputs: BoundAttribute[], public children: Node[],\n      public references: Reference[], public variables: Variable[],\n      public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan|null,\n      public endSourceSpan: ParseSourceSpan|null) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitTemplate(this); }\n}\n\nexport class Content implements Node {\n  constructor(\n      public selectorIndex: number, public attributes: TextAttribute[],\n      public sourceSpan: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitContent(this); }\n}\n\nexport class Variable implements Node {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitVariable(this); }\n}\n\nexport class Reference implements Node {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result { return visitor.visitReference(this); }\n}\n\nexport interface Visitor<Result = any> {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node): Result;\n\n  visitElement(element: Element): Result;\n  visitTemplate(template: Template): Result;\n  visitContent(content: Content): Result;\n  visitVariable(variable: Variable): Result;\n  visitReference(reference: Reference): Result;\n  visitTextAttribute(attribute: TextAttribute): Result;\n  visitBoundAttribute(attribute: BoundAttribute): Result;\n  visitBoundEvent(attribute: BoundEvent): Result;\n  visitText(text: Text): Result;\n  visitBoundText(text: BoundText): Result;\n}\n\nexport class NullVisitor implements Visitor<void> {\n  visitElement(element: Element): void {}\n  visitTemplate(template: Template): void {}\n  visitContent(content: Content): void {}\n  visitVariable(variable: Variable): void {}\n  visitReference(reference: Reference): void {}\n  visitTextAttribute(attribute: TextAttribute): void {}\n  visitBoundAttribute(attribute: BoundAttribute): void {}\n  visitBoundEvent(attribute: BoundEvent): void {}\n  visitText(text: Text): void {}\n  visitBoundText(text: BoundText): void {}\n}\n\nexport class RecursiveVisitor implements Visitor<void> {\n  visitElement(element: Element): void {\n    visitAll(this, element.attributes);\n    visitAll(this, element.children);\n    visitAll(this, element.references);\n  }\n  visitTemplate(template: Template): void {\n    visitAll(this, template.attributes);\n    visitAll(this, template.children);\n    visitAll(this, template.references);\n    visitAll(this, template.variables);\n  }\n  visitContent(content: Content): void {}\n  visitVariable(variable: Variable): void {}\n  visitReference(reference: Reference): void {}\n  visitTextAttribute(attribute: TextAttribute): void {}\n  visitBoundAttribute(attribute: BoundAttribute): void {}\n  visitBoundEvent(attribute: BoundEvent): void {}\n  visitText(text: Text): void {}\n  visitBoundText(text: BoundText): void {}\n}\n\nexport class TransformVisitor implements Visitor<Node> {\n  visitElement(element: Element): Node {\n    const newAttributes = transformAll(this, element.attributes);\n    const newInputs = transformAll(this, element.inputs);\n    const newOutputs = transformAll(this, element.outputs);\n    const newChildren = transformAll(this, element.children);\n    const newReferences = transformAll(this, element.references);\n    if (newAttributes != element.attributes || newInputs != element.inputs ||\n        newOutputs != element.outputs || newChildren != element.children ||\n        newReferences != element.references) {\n      return new Element(\n          element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences,\n          element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    }\n    return element;\n  }\n\n  visitTemplate(template: Template): Node {\n    const newAttributes = transformAll(this, template.attributes);\n    const newInputs = transformAll(this, template.inputs);\n    const newChildren = transformAll(this, template.children);\n    const newReferences = transformAll(this, template.references);\n    const newVariables = transformAll(this, template.variables);\n    if (newAttributes != template.attributes || newInputs != template.inputs ||\n        newChildren != template.children || newVariables != template.variables ||\n        newReferences != template.references) {\n      return new Template(\n          newAttributes, newInputs, newChildren, newReferences, newVariables, template.sourceSpan,\n          template.startSourceSpan, template.endSourceSpan);\n    }\n    return template;\n  }\n\n  visitContent(content: Content): Node { return content; }\n\n  visitVariable(variable: Variable): Node { return variable; }\n  visitReference(reference: Reference): Node { return reference; }\n  visitTextAttribute(attribute: TextAttribute): Node { return attribute; }\n  visitBoundAttribute(attribute: BoundAttribute): Node { return attribute; }\n  visitBoundEvent(attribute: BoundEvent): Node { return attribute; }\n  visitText(text: Text): Node { return text; }\n  visitBoundText(text: BoundText): Node { return text; }\n}\n\nexport function visitAll<Result>(visitor: Visitor<Result>, nodes: Node[]): Result[] {\n  const result: Result[] = [];\n  if (visitor.visit) {\n    for (const node of nodes) {\n      const newNode = visitor.visit(node) || node.visit(visitor);\n    }\n  } else {\n    for (const node of nodes) {\n      const newNode = node.visit(visitor);\n      if (newNode) {\n        result.push(newNode);\n      }\n    }\n  }\n  return result;\n}\n\nexport function transformAll<Result extends Node>(\n    visitor: Visitor<Node>, nodes: Result[]): Result[] {\n  const result: Result[] = [];\n  let changed = false;\n  for (const node of nodes) {\n    const newNode = node.visit(visitor);\n    if (newNode) {\n      result.push(newNode as Result);\n    }\n    changed = changed || newNode != node;\n  }\n  return changed ? result : nodes;\n}"],"sourceRoot":""}