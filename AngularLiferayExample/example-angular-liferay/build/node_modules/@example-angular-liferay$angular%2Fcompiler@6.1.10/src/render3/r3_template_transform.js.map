{"version":3,"sources":["../../../../../../../packages/compiler/src/render3/r3_template_transform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParsedEvent, ParsedProperty, ParsedVariable, ParserError} from '../expression_parser/ast';\nimport * as html from '../ml_parser/ast';\nimport {replaceNgsp} from '../ml_parser/html_whitespaces';\nimport {isNgTemplate} from '../ml_parser/tags';\nimport {ParseError, ParseErrorLevel, ParseSourceSpan} from '../parse_util';\nimport {isStyleUrlResolvable} from '../style_url_resolver';\nimport {BindingParser} from '../template_parser/binding_parser';\nimport {PreparsedElementType, preparseElement} from '../template_parser/template_preparser';\nimport {syntaxError} from '../util';\nimport * as t from './r3_ast';\n\n\nconst BIND_NAME_REGEXP =\n    /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n\n// Group 1 = \"bind-\"\nconst KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nconst KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nconst KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nconst KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nconst KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nconst KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nconst IDENT_KW_IDX = 7;\n// Group 8 = identifier inside [()]\nconst IDENT_BANANA_BOX_IDX = 8;\n// Group 9 = identifier inside []\nconst IDENT_PROPERTY_IDX = 9;\n// Group 10 = identifier inside ()\nconst IDENT_EVENT_IDX = 10;\n\nconst TEMPLATE_ATTR_PREFIX = '*';\nconst CLASS_ATTR = 'class';\n// Default selector used by `<ng-content>` if none specified\nconst DEFAULT_CONTENT_SELECTOR = '*';\n\n// Result of the html AST to Ivy AST transformation\nexport type Render3ParseResult = {\n  nodes: t.Node[]; errors: ParseError[];\n  // Any non default (empty or '*') selector found in the template\n  ngContentSelectors: string[];\n  // Wether the template contains any `<ng-content>`\n  hasNgContent: boolean;\n};\n\nexport function htmlAstToRender3Ast(\n    htmlNodes: html.Node[], bindingParser: BindingParser): Render3ParseResult {\n  const transformer = new HtmlAstToIvyAst(bindingParser);\n  const ivyNodes = html.visitAll(transformer, htmlNodes);\n\n  // Errors might originate in either the binding parser or the html to ivy transformer\n  const allErrors = bindingParser.errors.concat(transformer.errors);\n  const errors: ParseError[] = allErrors.filter(e => e.level === ParseErrorLevel.ERROR);\n\n  if (errors.length > 0) {\n    const errorString = errors.join('\\n');\n    throw syntaxError(`Template parse errors:\\n${errorString}`, errors);\n  }\n\n  return {\n    nodes: ivyNodes,\n    errors: allErrors,\n    ngContentSelectors: transformer.ngContentSelectors,\n    hasNgContent: transformer.hasNgContent,\n  };\n}\n\nclass HtmlAstToIvyAst implements html.Visitor {\n  errors: ParseError[] = [];\n  // Selectors for the `ng-content` tags. Only non `*` selectors are recorded here\n  ngContentSelectors: string[] = [];\n  // Any `<ng-content>` in the template ?\n  hasNgContent = false;\n\n  constructor(private bindingParser: BindingParser) {}\n\n  // HTML visitor\n  visitElement(element: html.Element): t.Node|null {\n    const preparsedElement = preparseElement(element);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n        preparsedElement.type === PreparsedElementType.STYLE) {\n      // Skipping <script> for security reasons\n      // Skipping <style> as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n    if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n        isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n      // Skipping stylesheets with either relative urls or package scheme as we already processed\n      // them in the StyleCompiler\n      return null;\n    }\n\n    // Whether the element is a `<ng-template>`\n    const isTemplateElement = isNgTemplate(element.name);\n\n    const matchableAttributes: [string, string][] = [];\n    const parsedProperties: ParsedProperty[] = [];\n    const boundEvents: t.BoundEvent[] = [];\n    const variables: t.Variable[] = [];\n    const references: t.Reference[] = [];\n    const attributes: t.TextAttribute[] = [];\n\n    const templateMatchableAttributes: [string, string][] = [];\n    let inlineTemplateSourceSpan: ParseSourceSpan;\n    const templateParsedProperties: ParsedProperty[] = [];\n    const templateVariables: t.Variable[] = [];\n\n    // Whether the element has any *-attribute\n    let elementHasInlineTemplate = false;\n\n    for (const attribute of element.attrs) {\n      let hasBinding = false;\n      const normalizedName = normalizeAttributeName(attribute.name);\n\n      // `*attr` defines template bindings\n      let isTemplateBinding = false;\n\n      if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n        if (elementHasInlineTemplate) {\n          this.reportError(\n              `Can't have multiple template bindings on one element. Use only one attribute prefixed with *`,\n              attribute.sourceSpan);\n        }\n        isTemplateBinding = true;\n        elementHasInlineTemplate = true;\n        const templateValue = attribute.value;\n        const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n\n        inlineTemplateSourceSpan = attribute.valueSpan || attribute.sourceSpan;\n\n        const parsedVariables: ParsedVariable[] = [];\n        this.bindingParser.parseInlineTemplateBinding(\n            templateKey, templateValue, attribute.sourceSpan, templateMatchableAttributes,\n            templateParsedProperties, parsedVariables);\n        templateVariables.push(\n            ...parsedVariables.map(v => new t.Variable(v.name, v.value, v.sourceSpan)));\n      } else {\n        // Check for variables, events, property bindings, interpolation\n        hasBinding = this.parseAttribute(\n            isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents,\n            variables, references);\n      }\n\n      if (!hasBinding && !isTemplateBinding) {\n        // don't include the bindings as attributes as well in the AST\n        attributes.push(this.visitAttribute(attribute) as t.TextAttribute);\n        matchableAttributes.push([attribute.name, attribute.value]);\n      }\n    }\n\n    const children: t.Node[] =\n        html.visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children);\n\n    let parsedElement: t.Node|undefined;\n    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n      // `<ng-content>`\n      this.hasNgContent = true;\n\n      if (element.children && !element.children.every(isEmptyTextNode)) {\n        this.reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n      }\n\n      const selector = preparsedElement.selectAttr;\n\n      let attributes: t.TextAttribute[] = element.attrs.map(attribute => {\n        return new t.TextAttribute(\n            attribute.name, attribute.value, attribute.sourceSpan, attribute.valueSpan);\n      });\n\n      const selectorIndex =\n          selector === DEFAULT_CONTENT_SELECTOR ? 0 : this.ngContentSelectors.push(selector);\n      parsedElement = new t.Content(selectorIndex, attributes, element.sourceSpan);\n    } else if (isTemplateElement) {\n      // `<ng-template>`\n      const boundAttributes = this.createBoundAttributes(element.name, parsedProperties);\n      parsedElement = new t.Template(\n          attributes, boundAttributes, children, references, variables, element.sourceSpan,\n          element.startSourceSpan, element.endSourceSpan);\n    } else {\n      const boundAttributes = this.createBoundAttributes(element.name, parsedProperties);\n\n      parsedElement = new t.Element(\n          element.name, attributes, boundAttributes, boundEvents, children, references,\n          element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    }\n\n    if (elementHasInlineTemplate) {\n      const attributes: t.TextAttribute[] = [];\n\n      templateMatchableAttributes.forEach(\n          ([name, value]) =>\n              attributes.push(new t.TextAttribute(name, value, inlineTemplateSourceSpan)));\n\n      const boundAttributes = this.createBoundAttributes('ng-template', templateParsedProperties);\n      parsedElement = new t.Template(\n          attributes, boundAttributes, [parsedElement], [], templateVariables, element.sourceSpan,\n          element.startSourceSpan, element.endSourceSpan);\n    }\n    return parsedElement;\n  }\n\n  visitAttribute(attribute: html.Attribute): t.Node {\n    return new t.TextAttribute(\n        attribute.name, attribute.value, attribute.sourceSpan, attribute.valueSpan);\n  }\n\n  visitText(text: html.Text): t.Node {\n    const valueNoNgsp = replaceNgsp(text.value);\n    const expr = this.bindingParser.parseInterpolation(valueNoNgsp, text.sourceSpan);\n    return expr ? new t.BoundText(expr, text.sourceSpan) : new t.Text(valueNoNgsp, text.sourceSpan);\n  }\n\n  visitComment(comment: html.Comment): null { return null; }\n\n  visitExpansion(expansion: html.Expansion): null { return null; }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase): null { return null; }\n\n  private createBoundAttributes(elementName: string, properties: ParsedProperty[]):\n      t.BoundAttribute[] {\n    return properties.filter(prop => !prop.isLiteral)\n        .map(prop => this.bindingParser.createBoundElementProperty(elementName, prop))\n        .map(prop => t.BoundAttribute.fromBoundElementProperty(prop));\n  }\n\n  private parseAttribute(\n      isTemplateElement: boolean, attribute: html.Attribute, matchableAttributes: string[][],\n      parsedProperties: ParsedProperty[], boundEvents: t.BoundEvent[], variables: t.Variable[],\n      references: t.Reference[]) {\n    const name = normalizeAttributeName(attribute.name);\n    const value = attribute.value;\n    const srcSpan = attribute.sourceSpan;\n\n    const bindParts = name.match(BIND_NAME_REGEXP);\n    let hasBinding = false;\n\n    if (bindParts) {\n      hasBinding = true;\n      if (bindParts[KW_BIND_IDX] != null) {\n        this.bindingParser.parsePropertyBinding(\n            bindParts[IDENT_KW_IDX], value, false, srcSpan, matchableAttributes, parsedProperties);\n\n      } else if (bindParts[KW_LET_IDX]) {\n        if (isTemplateElement) {\n          const identifier = bindParts[IDENT_KW_IDX];\n          this.parseVariable(identifier, value, srcSpan, variables);\n        } else {\n          this.reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n        }\n\n      } else if (bindParts[KW_REF_IDX]) {\n        const identifier = bindParts[IDENT_KW_IDX];\n        this.parseReference(identifier, value, srcSpan, references);\n\n      } else if (bindParts[KW_ON_IDX]) {\n        const events: ParsedEvent[] = [];\n        this.bindingParser.parseEvent(\n            bindParts[IDENT_KW_IDX], value, srcSpan, matchableAttributes, events);\n        addEvents(events, boundEvents);\n      } else if (bindParts[KW_BINDON_IDX]) {\n        this.bindingParser.parsePropertyBinding(\n            bindParts[IDENT_KW_IDX], value, false, srcSpan, matchableAttributes, parsedProperties);\n        this.parseAssignmentEvent(\n            bindParts[IDENT_KW_IDX], value, srcSpan, matchableAttributes, boundEvents);\n      } else if (bindParts[KW_AT_IDX]) {\n        this.bindingParser.parseLiteralAttr(\n            name, value, srcSpan, matchableAttributes, parsedProperties);\n\n      } else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n        this.bindingParser.parsePropertyBinding(\n            bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, matchableAttributes,\n            parsedProperties);\n        this.parseAssignmentEvent(\n            bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, matchableAttributes, boundEvents);\n\n      } else if (bindParts[IDENT_PROPERTY_IDX]) {\n        this.bindingParser.parsePropertyBinding(\n            bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, matchableAttributes,\n            parsedProperties);\n\n      } else if (bindParts[IDENT_EVENT_IDX]) {\n        const events: ParsedEvent[] = [];\n        this.bindingParser.parseEvent(\n            bindParts[IDENT_EVENT_IDX], value, srcSpan, matchableAttributes, events);\n        addEvents(events, boundEvents);\n      }\n    } else {\n      hasBinding = this.bindingParser.parsePropertyInterpolation(\n          name, value, srcSpan, matchableAttributes, parsedProperties);\n    }\n\n    return hasBinding;\n  }\n\n  private parseVariable(\n      identifier: string, value: string, sourceSpan: ParseSourceSpan, variables: t.Variable[]) {\n    if (identifier.indexOf('-') > -1) {\n      this.reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n    }\n    variables.push(new t.Variable(identifier, value, sourceSpan));\n  }\n\n  private parseReference(\n      identifier: string, value: string, sourceSpan: ParseSourceSpan, references: t.Reference[]) {\n    if (identifier.indexOf('-') > -1) {\n      this.reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n    }\n\n    references.push(new t.Reference(identifier, value, sourceSpan));\n  }\n\n  private parseAssignmentEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], boundEvents: t.BoundEvent[]) {\n    const events: ParsedEvent[] = [];\n    this.bindingParser.parseEvent(\n        `${name}Change`, `${expression}=$event`, sourceSpan, targetMatchableAttrs, events);\n    addEvents(events, boundEvents);\n  }\n\n  private reportError(\n      message: string, sourceSpan: ParseSourceSpan,\n      level: ParseErrorLevel = ParseErrorLevel.ERROR) {\n    this.errors.push(new ParseError(sourceSpan, message, level));\n  }\n}\n\nclass NonBindableVisitor implements html.Visitor {\n  visitElement(ast: html.Element): t.Element|null {\n    const preparsedElement = preparseElement(ast);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n        preparsedElement.type === PreparsedElementType.STYLE ||\n        preparsedElement.type === PreparsedElementType.STYLESHEET) {\n      // Skipping <script> for security reasons\n      // Skipping <style> and stylesheets as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n\n    const children: t.Node[] = html.visitAll(this, ast.children, null);\n    return new t.Element(\n        ast.name, html.visitAll(this, ast.attrs) as t.TextAttribute[],\n        /* inputs */[], /* outputs */[], children,  /* references */[], ast.sourceSpan,\n        ast.startSourceSpan, ast.endSourceSpan);\n  }\n\n  visitComment(comment: html.Comment): any { return null; }\n\n  visitAttribute(attribute: html.Attribute): t.TextAttribute {\n    return new t.TextAttribute(attribute.name, attribute.value, attribute.sourceSpan);\n  }\n\n  visitText(text: html.Text): t.Text { return new t.Text(text.value, text.sourceSpan); }\n\n  visitExpansion(expansion: html.Expansion): any { return null; }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase): any { return null; }\n}\n\nconst NON_BINDABLE_VISITOR = new NonBindableVisitor();\n\nfunction normalizeAttributeName(attrName: string): string {\n  return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\n\nfunction addEvents(events: ParsedEvent[], boundEvents: t.BoundEvent[]) {\n  boundEvents.push(...events.map(e => t.BoundEvent.fromParsedEvent(e)));\n}\n\nfunction isEmptyTextNode(node: html.Node): boolean {\n  return node instanceof html.Text && node.value.trim().length == 0;\n}\n"],"sourceRoot":""}