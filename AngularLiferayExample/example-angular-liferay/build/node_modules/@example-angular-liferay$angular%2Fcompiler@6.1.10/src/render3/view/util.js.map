{"version":3,"sources":["../../../../../../../../packages/compiler/src/render3/view/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConstantPool} from '../../constant_pool';\nimport * as o from '../../output/output_ast';\nimport * as t from '../r3_ast';\n\nimport {R3QueryMetadata} from './api';\n\n/** Name of the temporary to use during data binding */\nexport const TEMPORARY_NAME = '_t';\n\n/** Name of the context parameter passed into a template function */\nexport const CONTEXT_NAME = 'ctx';\n\n/** Name of the RenderFlag passed into a template function */\nexport const RENDER_FLAGS = 'rf';\n\n/** The prefix reference variables */\nexport const REFERENCE_PREFIX = '_r';\n\n/** The name of the implicit context reference */\nexport const IMPLICIT_REFERENCE = '$implicit';\n\n/** Name of the i18n attributes **/\nexport const I18N_ATTR = 'i18n';\nexport const I18N_ATTR_PREFIX = 'i18n-';\n\n/** I18n separators for metadata **/\nexport const MEANING_SEPARATOR = '|';\nexport const ID_SEPARATOR = '@@';\n\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n */\nexport function temporaryAllocator(statements: o.Statement[], name: string): () => o.ReadVarExpr {\n  let temp: o.ReadVarExpr|null = null;\n  return () => {\n    if (!temp) {\n      statements.push(new o.DeclareVarStmt(TEMPORARY_NAME, undefined, o.DYNAMIC_TYPE));\n      temp = o.variable(name);\n    }\n    return temp;\n  };\n}\n\n\nexport function unsupported(feature: string): never {\n  if (this) {\n    throw new Error(`Builder ${this.constructor.name} doesn't support ${feature} yet`);\n  }\n  throw new Error(`Feature ${feature} is not supported yet`);\n}\n\nexport function invalid<T>(arg: o.Expression | o.Statement | t.Node): never {\n  throw new Error(\n      `Invalid state: Visitor ${this.constructor.name} doesn't handle ${o.constructor.name}`);\n}\n\nexport function asLiteral(value: any): o.Expression {\n  if (Array.isArray(value)) {\n    return o.literalArr(value.map(asLiteral));\n  }\n  return o.literal(value, o.INFERRED_TYPE);\n}\n\nexport function conditionallyCreateMapObjectLiteral(keys: {[key: string]: string}): o.Expression|\n    null {\n  if (Object.getOwnPropertyNames(keys).length > 0) {\n    return mapToExpression(keys);\n  }\n  return null;\n}\n\nexport function mapToExpression(map: {[key: string]: any}, quoted = false): o.Expression {\n  return o.literalMap(\n      Object.getOwnPropertyNames(map).map(key => ({key, quoted, value: asLiteral(map[key])})));\n}\n\n/**\n *  Remove trailing null nodes as they are implied.\n */\nexport function trimTrailingNulls(parameters: o.Expression[]): o.Expression[] {\n  while (o.isNull(parameters[parameters.length - 1])) {\n    parameters.pop();\n  }\n  return parameters;\n}\n\nexport function getQueryPredicate(\n    query: R3QueryMetadata, constantPool: ConstantPool): o.Expression {\n  if (Array.isArray(query.predicate)) {\n    return constantPool.getConstLiteral(\n        o.literalArr(query.predicate.map(selector => o.literal(selector) as o.Expression)));\n  } else {\n    return query.predicate;\n  }\n}\n\nexport function noop() {}\n\nexport class DefinitionMap {\n  values: {key: string, quoted: boolean, value: o.Expression}[] = [];\n\n  set(key: string, value: o.Expression|null): void {\n    if (value) {\n      this.values.push({key, value, quoted: false});\n    }\n  }\n\n  toLiteralMap(): o.LiteralMapExpr { return o.literalMap(this.values); }\n}\n"],"sourceRoot":""}