Liferay.Loader.define("@example-angular-liferay$angular/compiler@6.1.10/src/render3/r3_module_compiler", ['module', 'exports', 'require', 'example-angular-liferay$tslib', '@example-angular-liferay$angular/compiler/src/compile_metadata', '@example-angular-liferay$angular/compiler/src/output/map_util', '@example-angular-liferay$angular/compiler/src/output/output_ast', '@example-angular-liferay$angular/compiler/src/render3/r3_factory', '@example-angular-liferay$angular/compiler/src/render3/r3_identifiers', '@example-angular-liferay$angular/compiler/src/render3/util'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
            define("@angular/compiler/src/render3/r3_module_compiler", ["require", "exports", "tslib", "@angular/compiler/src/compile_metadata", "@angular/compiler/src/output/map_util", "@angular/compiler/src/output/output_ast", "@angular/compiler/src/render3/r3_factory", "@angular/compiler/src/render3/r3_identifiers", "@angular/compiler/src/render3/util"], factory);
        }
    })(function (require, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var tslib_1 = require("example-angular-liferay$tslib");
        var compile_metadata_1 = require("@example-angular-liferay$angular/compiler/src/compile_metadata");
        var map_util_1 = require("@example-angular-liferay$angular/compiler/src/output/map_util");
        var o = require("@example-angular-liferay$angular/compiler/src/output/output_ast");
        var r3_factory_1 = require("@example-angular-liferay$angular/compiler/src/render3/r3_factory");
        var r3_identifiers_1 = require("@example-angular-liferay$angular/compiler/src/render3/r3_identifiers");
        var util_1 = require("@example-angular-liferay$angular/compiler/src/render3/util");
        /**
         * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.
         */
        function compileNgModule(meta) {
            var moduleType = meta.type,
                bootstrap = meta.bootstrap,
                declarations = meta.declarations,
                imports = meta.imports,
                exports = meta.exports;
            var expression = o.importExpr(r3_identifiers_1.Identifiers.defineNgModule).callFn([util_1.mapToMapExpression({
                type: moduleType,
                bootstrap: o.literalArr(bootstrap),
                declarations: o.literalArr(declarations),
                imports: o.literalArr(imports),
                exports: o.literalArr(exports)
            })]);
            var type = new o.ExpressionType(o.importExpr(r3_identifiers_1.Identifiers.NgModuleDef, [new o.ExpressionType(moduleType), tupleTypeOf(declarations), tupleTypeOf(imports), tupleTypeOf(exports)]));
            var additionalStatements = [];
            return { expression: expression, type: type, additionalStatements: additionalStatements };
        }
        exports.compileNgModule = compileNgModule;
        function compileInjector(meta) {
            var expression = o.importExpr(r3_identifiers_1.Identifiers.defineInjector).callFn([util_1.mapToMapExpression({
                factory: r3_factory_1.compileFactoryFunction({
                    name: meta.name,
                    fnOrClass: meta.type,
                    deps: meta.deps,
                    useNew: true,
                    injectFn: r3_identifiers_1.Identifiers.inject
                }),
                providers: meta.providers,
                imports: meta.imports
            })]);
            var type = new o.ExpressionType(o.importExpr(r3_identifiers_1.Identifiers.InjectorDef, [new o.ExpressionType(meta.type)]));
            return { expression: expression, type: type };
        }
        exports.compileInjector = compileInjector;
        // TODO(alxhub): integrate this with `compileNgModule`. Currently the two are separate operations.
        function compileNgModuleFromRender2(ctx, ngModule, injectableCompiler) {
            var className = compile_metadata_1.identifierName(ngModule.type);
            var rawImports = ngModule.rawImports ? [ngModule.rawImports] : [];
            var rawExports = ngModule.rawExports ? [ngModule.rawExports] : [];
            var injectorDefArg = map_util_1.mapLiteral({
                'factory': injectableCompiler.factoryFor({ type: ngModule.type, symbol: ngModule.type.reference }, ctx),
                'providers': util_1.convertMetaToOutput(ngModule.rawProviders, ctx),
                'imports': util_1.convertMetaToOutput(tslib_1.__spread(rawImports, rawExports), ctx)
            });
            var injectorDef = o.importExpr(r3_identifiers_1.Identifiers.defineInjector).callFn([injectorDefArg]);
            ctx.statements.push(new o.ClassStmt(
            /* name */className,
            /* parent */null,
            /* fields */[new o.ClassField(
            /* name */'ngInjectorDef',
            /* type */o.INFERRED_TYPE,
            /* modifiers */[o.StmtModifier.Static],
            /* initializer */injectorDef)],
            /* getters */[],
            /* constructorMethod */new o.ClassMethod(null, [], []),
            /* methods */[]));
        }
        exports.compileNgModuleFromRender2 = compileNgModuleFromRender2;
        function accessExportScope(module) {
            var selectorScope = new o.ReadPropExpr(module, 'ngModuleDef');
            return new o.ReadPropExpr(selectorScope, 'exported');
        }
        function tupleTypeOf(exp) {
            var types = exp.map(function (type) {
                return o.typeofExpr(type);
            });
            return exp.length > 0 ? o.expressionType(o.literalArr(types)) : o.NONE_TYPE;
        }
    });
});
//# sourceMappingURL=r3_module_compiler.js.map