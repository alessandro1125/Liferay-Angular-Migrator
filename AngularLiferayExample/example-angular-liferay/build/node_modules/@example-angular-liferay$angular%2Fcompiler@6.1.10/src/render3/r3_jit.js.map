{"version":3,"sources":["../../../../../../../packages/compiler/src/render3/r3_jit.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAUA,YAAA,IAAA,QAAA,iEAAA,CAAA;AACA,YAAA,eAAA,QAAA,iEAAA,CAAA;AAEA;;;;;;AAMA,YAAA,iBAAA,aAAA,YAAA;AACE,qBAAA,cAAA,CAAoB,OAApB,EAAiD;AAA7B,qBAAA,OAAA,GAAA,OAAA;AAAiC;AAErD,2BAAA,SAAA,CAAA,wBAAA,GAAA,UAAyB,GAAzB,EAAiD;AAC/C;AACA,oBAAI,IAAI,UAAJ,KAAmB,eAAvB,EAAwC;AACtC,0BAAM,IAAI,KAAJ,CACF,0CAAwC,IAAI,UAA5C,GAAsD,mDADpD,CAAN;AAED;AACD,oBAAI,CAAC,KAAK,OAAL,CAAa,cAAb,CAA4B,IAAI,IAAhC,CAAL,EAA8C;AAC5C,0BAAM,IAAI,KAAJ,CAAU,iDAA+C,IAAI,IAAnD,GAAwD,IAAlE,CAAN;AACD;AACD,uBAAO,KAAK,OAAL,CAAa,IAAI,IAAjB,CAAP;AACD,aAVD;AAYA,2BAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAA0B;AAAa,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAA7E;AAEA,2BAAA,SAAA,CAAA,WAAA,GAAA,UAAY,UAAZ,EAA2B;AAAW,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAA5E;AAEA,2BAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,UAAnB,EAAkC;AAAW,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAAnF;AAEA,2BAAA,SAAA,CAAA,cAAA,GAAA,UAAe,UAAf,EAA8B;AAAW,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAA/E;AAEA,2BAAA,SAAA,CAAA,YAAA,GAAA,UAAa,UAAb,EAA4B;AAA6B,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAA/F;AAEA,2BAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA4B,UAA5B,EAA8C;AAAa,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAAjG;AAEA,2BAAA,SAAA,CAAA,MAAA,GAAA,UAAO,UAAP,EAAsB;AAA2B,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAAvF;AAEA,2BAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,IAAnB,EAA8B,WAA9B,EAA8C;AAAY,sBAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AAAsC,aAAhG;AACF,mBAAA,cAAA;AAAC,SA9BD,EAAA;AAgCA;;;;;;;;;AASA,iBAAA,aAAA,CACI,GADJ,EACuB,OADvB,EACsD,SADtD,EAEI,YAFJ,EAE+B;AAC7B;AACA;AACA;AACA,gBAAM,aAAU,QAAA,QAAA,CACV,iBAAiB,SAAjB,GAA6B,aAAa,UAA1C,GAAuD,EAD7C,EACgD,CAC9D,IAAI,EAAE,cAAN,CAAqB,MAArB,EAA6B,GAA7B,EAAkC,SAAlC,EAA6C,CAAC,EAAE,YAAF,CAAe,QAAhB,CAA7C,CAD8D,CADhD,CAAhB;AAKA,gBAAM,MAAM,aAAA,aAAA,CAAc,SAAd,EAAyB,UAAzB,EAAqC,IAAI,cAAJ,CAAmB,OAAnB,CAArC,EAAkE,KAAlE,CAAZ;AACA,mBAAO,IAAI,MAAJ,CAAP;AACD;AAbD,gBAAA,aAAA,GAAA,aAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector} from '../compile_reflector';\nimport {ConstantPool} from '../constant_pool';\nimport * as o from '../output/output_ast';\nimport {jitStatements} from '../output/output_jit';\n\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\nclass R3JitReflector implements CompileReflector {\n  constructor(private context: {[key: string]: any}) {}\n\n  resolveExternalReference(ref: o.ExternalReference): any {\n    // This reflector only handles @angular/core imports.\n    if (ref.moduleName !== '@angular/core') {\n      throw new Error(\n          `Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);\n    }\n    if (!this.context.hasOwnProperty(ref.name !)) {\n      throw new Error(`No value provided for @angular/core symbol '${ref.name!}'.`);\n    }\n    return this.context[ref.name !];\n  }\n\n  parameters(typeOrFunc: any): any[][] { throw new Error('Not implemented.'); }\n\n  annotations(typeOrFunc: any): any[] { throw new Error('Not implemented.'); }\n\n  shallowAnnotations(typeOrFunc: any): any[] { throw new Error('Not implemented.'); }\n\n  tryAnnotations(typeOrFunc: any): any[] { throw new Error('Not implemented.'); }\n\n  propMetadata(typeOrFunc: any): {[key: string]: any[];} { throw new Error('Not implemented.'); }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean { throw new Error('Not implemented.'); }\n\n  guards(typeOrFunc: any): {[key: string]: any;} { throw new Error('Not implemented.'); }\n\n  componentModuleUrl(type: any, cmpMetadata: any): string { throw new Error('Not implemented.'); }\n}\n\n/**\n * JIT compiles an expression and returns the result of executing that expression.\n *\n * @param def the definition which will be compiled and executed to get the value to patch\n * @param context an object map of @angular/core symbol names to symbols which will be available in\n * the context of the compiled expression\n * @param sourceUrl a URL to use for the source map of the compiled expression\n * @param constantPool an optional `ConstantPool` which contains constants used in the expression\n */\nexport function jitExpression(\n    def: o.Expression, context: {[key: string]: any}, sourceUrl: string,\n    constantPool?: ConstantPool): any {\n  // The ConstantPool may contain Statements which declare variables used in the final expression.\n  // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n  // declaration of $def which is set to the expression being compiled.\n  const statements: o.Statement[] = [\n    ...(constantPool !== undefined ? constantPool.statements : []),\n    new o.DeclareVarStmt('$def', def, undefined, [o.StmtModifier.Exported]),\n  ];\n\n  const res = jitStatements(sourceUrl, statements, new R3JitReflector(context), false);\n  return res['$def'];\n}\n"],"sourceRoot":""}