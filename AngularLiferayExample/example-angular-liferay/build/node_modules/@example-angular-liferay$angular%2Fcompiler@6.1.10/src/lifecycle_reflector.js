Liferay.Loader.define("@example-angular-liferay$angular/compiler@6.1.10/src/lifecycle_reflector", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
            define("@angular/compiler/src/lifecycle_reflector", ["require", "exports"], factory);
        }
    })(function (require, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var LifecycleHooks;
        (function (LifecycleHooks) {
            LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
            LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
            LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
            LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
            LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
            LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
            LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
            LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
        })(LifecycleHooks = exports.LifecycleHooks || (exports.LifecycleHooks = {}));
        exports.LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];
        function hasLifecycleHook(reflector, hook, token) {
            return reflector.hasLifecycleHook(token, getHookName(hook));
        }
        exports.hasLifecycleHook = hasLifecycleHook;
        function getAllLifecycleHooks(reflector, token) {
            return exports.LIFECYCLE_HOOKS_VALUES.filter(function (hook) {
                return hasLifecycleHook(reflector, hook, token);
            });
        }
        exports.getAllLifecycleHooks = getAllLifecycleHooks;
        function getHookName(hook) {
            switch (hook) {
                case LifecycleHooks.OnInit:
                    return 'ngOnInit';
                case LifecycleHooks.OnDestroy:
                    return 'ngOnDestroy';
                case LifecycleHooks.DoCheck:
                    return 'ngDoCheck';
                case LifecycleHooks.OnChanges:
                    return 'ngOnChanges';
                case LifecycleHooks.AfterContentInit:
                    return 'ngAfterContentInit';
                case LifecycleHooks.AfterContentChecked:
                    return 'ngAfterContentChecked';
                case LifecycleHooks.AfterViewInit:
                    return 'ngAfterViewInit';
                case LifecycleHooks.AfterViewChecked:
                    return 'ngAfterViewChecked';
            }
        }
    });
});
//# sourceMappingURL=lifecycle_reflector.js.map