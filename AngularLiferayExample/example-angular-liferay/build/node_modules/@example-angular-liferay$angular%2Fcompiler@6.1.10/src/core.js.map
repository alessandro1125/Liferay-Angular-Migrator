{"version":3,"sources":["../../../../../../packages/compiler/src/core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Attention:\n// This file duplicates types and values from @angular/core\n// so that we are able to make @angular/compiler independent of @angular/core.\n// This is important to prevent a build cycle, as @angular/core needs to\n// be compiled with the compiler.\n\nimport {CssSelector} from './selector';\n\nexport interface Inject { token: any; }\nexport const createInject = makeMetadataFactory<Inject>('Inject', (token: any) => ({token}));\nexport const createInjectionToken = makeMetadataFactory<object>(\n    'InjectionToken', (desc: string) => ({_desc: desc, ngInjectableDef: undefined}));\n\nexport interface Attribute { attributeName?: string; }\nexport const createAttribute =\n    makeMetadataFactory<Attribute>('Attribute', (attributeName?: string) => ({attributeName}));\n\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n}\n\nexport const createContentChildren = makeMetadataFactory<Query>(\n    'ContentChildren',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: false, isViewQuery: false, descendants: false, ...data}));\nexport const createContentChild = makeMetadataFactory<Query>(\n    'ContentChild', (selector?: any, data: any = {}) =>\n                        ({selector, first: true, isViewQuery: false, descendants: true, ...data}));\nexport const createViewChildren = makeMetadataFactory<Query>(\n    'ViewChildren', (selector?: any, data: any = {}) =>\n                        ({selector, first: false, isViewQuery: true, descendants: true, ...data}));\nexport const createViewChild = makeMetadataFactory<Query>(\n    'ViewChild', (selector: any, data: any) =>\n                     ({selector, first: true, isViewQuery: true, descendants: true, ...data}));\n\nexport interface Directive {\n  selector?: string;\n  inputs?: string[];\n  outputs?: string[];\n  host?: {[key: string]: string};\n  providers?: Provider[];\n  exportAs?: string;\n  queries?: {[key: string]: any};\n  guards?: {[key: string]: any};\n}\nexport const createDirective =\n    makeMetadataFactory<Directive>('Directive', (dir: Directive = {}) => dir);\n\nexport interface Component extends Directive {\n  changeDetection?: ChangeDetectionStrategy;\n  viewProviders?: Provider[];\n  moduleId?: string;\n  templateUrl?: string;\n  template?: string;\n  styleUrls?: string[];\n  styles?: string[];\n  animations?: any[];\n  encapsulation?: ViewEncapsulation;\n  interpolation?: [string, string];\n  entryComponents?: Array<Type|any[]>;\n  preserveWhitespaces?: boolean;\n}\nexport enum ViewEncapsulation {\n  Emulated = 0,\n  Native = 1,\n  None = 2,\n  ShadowDom = 3\n}\n\nexport enum ChangeDetectionStrategy {\n  OnPush = 0,\n  Default = 1\n}\n\nexport const createComponent = makeMetadataFactory<Component>(\n    'Component', (c: Component = {}) => ({changeDetection: ChangeDetectionStrategy.Default, ...c}));\n\nexport interface Pipe {\n  name: string;\n  pure?: boolean;\n}\nexport const createPipe = makeMetadataFactory<Pipe>('Pipe', (p: Pipe) => ({pure: true, ...p}));\n\nexport interface Input { bindingPropertyName?: string; }\nexport const createInput =\n    makeMetadataFactory<Input>('Input', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\nexport interface Output { bindingPropertyName?: string; }\nexport const createOutput = makeMetadataFactory<Output>(\n    'Output', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\nexport interface HostBinding { hostPropertyName?: string; }\nexport const createHostBinding = makeMetadataFactory<HostBinding>(\n    'HostBinding', (hostPropertyName?: string) => ({hostPropertyName}));\n\nexport interface HostListener {\n  eventName?: string;\n  args?: string[];\n}\nexport const createHostListener = makeMetadataFactory<HostListener>(\n    'HostListener', (eventName?: string, args?: string[]) => ({eventName, args}));\n\nexport interface NgModule {\n  providers?: Provider[];\n  declarations?: Array<Type|any[]>;\n  imports?: Array<Type|ModuleWithProviders|any[]>;\n  exports?: Array<Type|any[]>;\n  entryComponents?: Array<Type|any[]>;\n  bootstrap?: Array<Type|any[]>;\n  schemas?: Array<SchemaMetadata|any[]>;\n  id?: string;\n}\nexport const createNgModule =\n    makeMetadataFactory<NgModule>('NgModule', (ngModule: NgModule) => ngModule);\n\nexport interface ModuleWithProviders {\n  ngModule: Type;\n  providers?: Provider[];\n}\nexport interface Injectable {\n  providedIn?: Type|'root'|any;\n  useClass?: Type|any;\n  useExisting?: Type|any;\n  useValue?: any;\n  useFactory?: Type|any;\n  deps?: Array<Type|any[]>;\n}\nexport const createInjectable =\n    makeMetadataFactory('Injectable', (injectable: Injectable = {}) => injectable);\nexport interface SchemaMetadata { name: string; }\n\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\nexport const NO_ERRORS_SCHEMA: SchemaMetadata = {\n  name: 'no-errors-schema'\n};\n\nexport const createOptional = makeMetadataFactory('Optional');\nexport const createSelf = makeMetadataFactory('Self');\nexport const createSkipSelf = makeMetadataFactory('SkipSelf');\nexport const createHost = makeMetadataFactory('Host');\n\nexport interface Type extends Function { new (...args: any[]): any; }\nexport const Type = Function;\n\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n\nexport type Provider = any;\n\nexport const enum NodeFlags {\n  None = 0,\n  TypeElement = 1 << 0,\n  TypeText = 1 << 1,\n  ProjectedTemplate = 1 << 2,\n  CatRenderNode = TypeElement | TypeText,\n  TypeNgContent = 1 << 3,\n  TypePipe = 1 << 4,\n  TypePureArray = 1 << 5,\n  TypePureObject = 1 << 6,\n  TypePurePipe = 1 << 7,\n  CatPureExpression = TypePureArray | TypePureObject | TypePurePipe,\n  TypeValueProvider = 1 << 8,\n  TypeClassProvider = 1 << 9,\n  TypeFactoryProvider = 1 << 10,\n  TypeUseExistingProvider = 1 << 11,\n  LazyProvider = 1 << 12,\n  PrivateProvider = 1 << 13,\n  TypeDirective = 1 << 14,\n  Component = 1 << 15,\n  CatProviderNoDirective =\n      TypeValueProvider | TypeClassProvider | TypeFactoryProvider | TypeUseExistingProvider,\n  CatProvider = CatProviderNoDirective | TypeDirective,\n  OnInit = 1 << 16,\n  OnDestroy = 1 << 17,\n  DoCheck = 1 << 18,\n  OnChanges = 1 << 19,\n  AfterContentInit = 1 << 20,\n  AfterContentChecked = 1 << 21,\n  AfterViewInit = 1 << 22,\n  AfterViewChecked = 1 << 23,\n  EmbeddedViews = 1 << 24,\n  ComponentView = 1 << 25,\n  TypeContentQuery = 1 << 26,\n  TypeViewQuery = 1 << 27,\n  StaticQuery = 1 << 28,\n  DynamicQuery = 1 << 29,\n  TypeModuleProvider = 1 << 30,\n  CatQuery = TypeContentQuery | TypeViewQuery,\n\n  // mutually exclusive values...\n  Types = CatRenderNode | TypeNgContent | TypePipe | CatPureExpression | CatProvider | CatQuery\n}\n\nexport const enum DepFlags {\n  None = 0,\n  SkipSelf = 1 << 0,\n  Optional = 1 << 1,\n  Self = 1 << 2,\n  Value = 1 << 3,\n}\n\n/**\n * Injection flags for DI.\n */\nexport const enum InjectFlags {\n  Default = 0,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 1 << 0,\n  /** Don't descend into ancestors of the node requesting injection. */\n  Self = 1 << 1,\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 1 << 2,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 1 << 3,\n}\n\nexport const enum ArgumentType {Inline = 0, Dynamic = 1}\n\nexport const enum BindingFlags {\n  TypeElementAttribute = 1 << 0,\n  TypeElementClass = 1 << 1,\n  TypeElementStyle = 1 << 2,\n  TypeProperty = 1 << 3,\n  SyntheticProperty = 1 << 4,\n  SyntheticHostProperty = 1 << 5,\n  CatSyntheticProperty = SyntheticProperty | SyntheticHostProperty,\n\n  // mutually exclusive values...\n  Types = TypeElementAttribute | TypeElementClass | TypeElementStyle | TypeProperty\n}\n\nexport const enum QueryBindingType {First = 0, All = 1}\n\nexport const enum QueryValueType {\n  ElementRef = 0,\n  RenderElement = 1,\n  TemplateRef = 2,\n  ViewContainerRef = 3,\n  Provider = 4\n}\n\nexport const enum ViewFlags {\n  None = 0,\n  OnPush = 1 << 1,\n}\n\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n\nexport interface MetadataFactory<T> {\n  (...args: any[]): T;\n  isTypeOf(obj: any): obj is T;\n  ngMetadataName: string;\n}\n\nfunction makeMetadataFactory<T>(name: string, props?: (...args: any[]) => T): MetadataFactory<T> {\n  const factory: any = (...args: any[]) => {\n    const values = props ? props(...args) : {};\n    return {\n      ngMetadataName: name,\n      ...values,\n    };\n  };\n  factory.isTypeOf = (obj: any) => obj && obj.ngMetadataName === name;\n  factory.ngMetadataName = name;\n  return factory;\n}\n\nexport interface Route {\n  children?: Route[];\n  loadChildren?: string|Type|any;\n}\n\n/**\n * Flags used to generate R3-style CSS Selectors. They are pasted from\n * core/src/render3/projection.ts because they cannot be referenced directly.\n */\nexport const enum SelectorFlags {\n  /** Indicates this is the beginning of a new negative selector */\n  NOT = 0b0001,\n\n  /** Mode for matching attributes */\n  ATTRIBUTE = 0b0010,\n\n  /** Mode for matching tag names */\n  ELEMENT = 0b0100,\n\n  /** Mode for matching class names */\n  CLASS = 0b1000,\n}\n\n// These are a copy the CSS types from core/src/render3/interfaces/projection.ts\n// They are duplicated here as they cannot be directly referenced from core.\nexport type R3CssSelector = (string | SelectorFlags)[];\nexport type R3CssSelectorList = R3CssSelector[];\n\nfunction parserSelectorToSimpleSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n  const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n  return [elementName, ...selector.attrs, ...classes];\n}\n\nfunction parserSelectorToNegativeSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n\n  if (selector.element) {\n    return [\n      SelectorFlags.NOT | SelectorFlags.ELEMENT, selector.element, ...selector.attrs, ...classes\n    ];\n  } else if (selector.attrs.length) {\n    return [SelectorFlags.NOT | SelectorFlags.ATTRIBUTE, ...selector.attrs, ...classes];\n  } else {\n    return selector.classNames && selector.classNames.length ?\n        [SelectorFlags.NOT | SelectorFlags.CLASS, ...selector.classNames] :\n        [];\n  }\n}\n\nfunction parserSelectorToR3Selector(selector: CssSelector): R3CssSelector {\n  const positive = parserSelectorToSimpleSelector(selector);\n\n  const negative: R3CssSelectorList = selector.notSelectors && selector.notSelectors.length ?\n      selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) :\n      [];\n\n  return positive.concat(...negative);\n}\n\nexport function parseSelectorToR3Selector(selector: string): R3CssSelectorList {\n  const selectors = CssSelector.parse(selector);\n  return selectors.map(parserSelectorToR3Selector);\n}\n\n// Pasted from render3/interfaces/definition since it cannot be referenced directly\n/**\n * Flags passed into template functions to determine which blocks (i.e. creation, update)\n * should be executed.\n *\n * Typically, a template runs both the creation block and the update block on initialization and\n * subsequent runs only execute the update block. However, dynamically created views require that\n * the creation block be executed separately from the update block (for backwards compat).\n */\nexport const enum RenderFlags {\n  /* Whether to run the creation block (e.g. create elements and directives) */\n  Create = 0b01,\n\n  /* Whether to run the update block (e.g. refresh bindings) */\n  Update = 0b10\n}\n\nexport const enum InitialStylingFlags {\n  VALUES_MODE = 0b1,\n}\n"],"sourceRoot":""}