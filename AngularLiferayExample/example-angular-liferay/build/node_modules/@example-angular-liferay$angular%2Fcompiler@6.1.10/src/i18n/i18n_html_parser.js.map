{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/i18n_html_parser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAQA,YAAA,SAAA,QAAA,oDAAA,CAAA;AAEA,YAAA,yBAAA,QAAA,8EAAA,CAAA;AACA,YAAA,WAAA,QAAA,gEAAA,CAAA;AAGA,YAAA,WAAA,QAAA,2DAAA,CAAA;AACA,YAAA,qBAAA,QAAA,qEAAA,CAAA;AAEA,YAAA,UAAA,QAAA,sEAAA,CAAA;AACA,YAAA,WAAA,QAAA,uEAAA,CAAA;AACA,YAAA,QAAA,QAAA,oEAAA,CAAA;AACA,YAAA,QAAA,QAAA,oEAAA,CAAA;AACA,YAAA,uBAAA,QAAA,uEAAA,CAAA;AAEA,YAAA,iBAAA,aAAA,YAAA;AAME,qBAAA,cAAA,CACY,WADZ,EACqC,YADrC,EAC4D,kBAD5D,EAEI,kBAFJ,EAGI,OAHJ,EAGqB;AADjB,oBAAA,uBAAA,KAAA,CAAA,EAAA;AAAA,yCAAiD,OAAA,0BAAA,CAA2B,OAA5E;AAAmF;AAD3E,qBAAA,WAAA,GAAA,WAAA;AAGV,oBAAI,YAAJ,EAAkB;AAChB,wBAAM,aAAa,iBAAiB,kBAAjB,CAAnB;AACA,yBAAK,kBAAL,GACI,qBAAA,iBAAA,CAAkB,IAAlB,CAAuB,YAAvB,EAAqC,MAArC,EAA6C,UAA7C,EAAyD,kBAAzD,EAA6E,OAA7E,CADJ;AAED,iBAJD,MAIO;AACL,yBAAK,kBAAL,GACI,IAAI,qBAAA,iBAAJ,CAAsB,EAAtB,EAA0B,IAA1B,EAAgC,SAAA,MAAhC,EAAwC,SAAxC,EAAmD,kBAAnD,EAAuE,OAAvE,CADJ;AAED;AACF;AAED,2BAAA,SAAA,CAAA,KAAA,GAAA,UACI,MADJ,EACoB,GADpB,EACiC,mBADjC,EAEI,mBAFJ,EAE2E;AAD1C,oBAAA,wBAAA,KAAA,CAAA,EAAA;AAAA,0CAAA,KAAA;AAAoC;AACjE,oBAAA,wBAAA,KAAA,CAAA,EAAA;AAAA,0CAA2C,uBAAA,4BAA3C;AAAuE;AACzE,oBAAM,cACF,KAAK,WAAL,CAAiB,KAAjB,CAAuB,MAAvB,EAA+B,GAA/B,EAAoC,mBAApC,EAAyD,mBAAzD,CADJ;AAGA,oBAAI,YAAY,MAAZ,CAAmB,MAAvB,EAA+B;AAC7B,2BAAO,IAAI,SAAA,eAAJ,CAAoB,YAAY,SAAhC,EAA2C,YAAY,MAAvD,CAAP;AACD;AAED,uBAAO,mBAAA,iBAAA,CACH,YAAY,SADT,EACoB,KAAK,kBADzB,EAC6C,mBAD7C,EACkE,EADlE,EACsE,EADtE,CAAP;AAED,aAZD;AAaF,mBAAA,cAAA;AAAC,SAjCD,EAAA;AAAa,gBAAA,cAAA,GAAA,cAAA;AAmCb,iBAAA,gBAAA,CAA0B,MAA1B,EAAyC;AACvC,qBAAS,CAAC,UAAU,KAAX,EAAkB,WAAlB,EAAT;AAEA,oBAAQ,MAAR;AACE,qBAAK,KAAL;AACE,2BAAO,IAAI,MAAA,GAAJ,EAAP;AACF,qBAAK,KAAL;AACE,2BAAO,IAAI,MAAA,GAAJ,EAAP;AACF,qBAAK,QAAL;AACA,qBAAK,MAAL;AACE,2BAAO,IAAI,SAAA,MAAJ,EAAP;AACF,qBAAK,OAAL;AACA,qBAAK,KAAL;AACA;AACE,2BAAO,IAAI,QAAA,KAAJ,EAAP;AAXJ;AAaD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MissingTranslationStrategy} from '../core';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseTreeResult} from '../ml_parser/parser';\nimport {Console} from '../util';\n\nimport {digest} from './digest';\nimport {mergeTranslations} from './extractor_merger';\nimport {Serializer} from './serializers/serializer';\nimport {Xliff} from './serializers/xliff';\nimport {Xliff2} from './serializers/xliff2';\nimport {Xmb} from './serializers/xmb';\nimport {Xtb} from './serializers/xtb';\nimport {TranslationBundle} from './translation_bundle';\n\nexport class I18NHtmlParser implements HtmlParser {\n  // @override\n  getTagDefinition: any;\n\n  private _translationBundle: TranslationBundle;\n\n  constructor(\n      private _htmlParser: HtmlParser, translations?: string, translationsFormat?: string,\n      missingTranslation: MissingTranslationStrategy = MissingTranslationStrategy.Warning,\n      console?: Console) {\n    if (translations) {\n      const serializer = createSerializer(translationsFormat);\n      this._translationBundle =\n          TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n    } else {\n      this._translationBundle =\n          new TranslationBundle({}, null, digest, undefined, missingTranslation, console);\n    }\n  }\n\n  parse(\n      source: string, url: string, parseExpansionForms: boolean = false,\n      interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ParseTreeResult {\n    const parseResult =\n        this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);\n\n    if (parseResult.errors.length) {\n      return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n    }\n\n    return mergeTranslations(\n        parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n  }\n}\n\nfunction createSerializer(format?: string): Serializer {\n  format = (format || 'xlf').toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return new Xmb();\n    case 'xtb':\n      return new Xtb();\n    case 'xliff2':\n    case 'xlf2':\n      return new Xliff2();\n    case 'xliff':\n    case 'xlf':\n    default:\n      return new Xliff();\n  }\n}\n"],"sourceRoot":""}