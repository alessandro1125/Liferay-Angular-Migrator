{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/i18n_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseSourceSpan} from '../parse_util';\n\nexport class Message {\n  sources: MessageSpan[];\n\n  /**\n   * @param nodes message AST\n   * @param placeholders maps placeholder names to static content\n   * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n   * @param meaning\n   * @param description\n   * @param id\n   */\n  constructor(\n      public nodes: Node[], public placeholders: {[phName: string]: string},\n      public placeholderToMessage: {[phName: string]: Message}, public meaning: string,\n      public description: string, public id: string) {\n    if (nodes.length) {\n      this.sources = [{\n        filePath: nodes[0].sourceSpan.start.file.url,\n        startLine: nodes[0].sourceSpan.start.line + 1,\n        startCol: nodes[0].sourceSpan.start.col + 1,\n        endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n        endCol: nodes[0].sourceSpan.start.col + 1\n      }];\n    } else {\n      this.sources = [];\n    }\n  }\n}\n\n// line and columns indexes are 1 based\nexport interface MessageSpan {\n  filePath: string;\n  startLine: number;\n  startCol: number;\n  endLine: number;\n  endCol: number;\n}\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: Visitor, context?: any): any;\n}\n\nexport class Text implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context?: any): any { return visitor.visitText(this, context); }\n}\n\n// TODO(vicb): do we really need this node (vs an array) ?\nexport class Container implements Node {\n  constructor(public children: Node[], public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context?: any): any { return visitor.visitContainer(this, context); }\n}\n\nexport class Icu implements Node {\n  // TODO(issue/24571): remove '!'.\n  public expressionPlaceholder !: string;\n  constructor(\n      public expression: string, public type: string, public cases: {[k: string]: Node},\n      public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context?: any): any { return visitor.visitIcu(this, context); }\n}\n\nexport class TagPlaceholder implements Node {\n  constructor(\n      public tag: string, public attrs: {[k: string]: string}, public startName: string,\n      public closeName: string, public children: Node[], public isVoid: boolean,\n      public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context?: any): any { return visitor.visitTagPlaceholder(this, context); }\n}\n\nexport class Placeholder implements Node {\n  constructor(public value: string, public name: string, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context?: any): any { return visitor.visitPlaceholder(this, context); }\n}\n\nexport class IcuPlaceholder implements Node {\n  constructor(public value: Icu, public name: string, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context?: any): any { return visitor.visitIcuPlaceholder(this, context); }\n}\n\nexport interface Visitor {\n  visitText(text: Text, context?: any): any;\n  visitContainer(container: Container, context?: any): any;\n  visitIcu(icu: Icu, context?: any): any;\n  visitTagPlaceholder(ph: TagPlaceholder, context?: any): any;\n  visitPlaceholder(ph: Placeholder, context?: any): any;\n  visitIcuPlaceholder(ph: IcuPlaceholder, context?: any): any;\n}\n\n// Clone the AST\nexport class CloneVisitor implements Visitor {\n  visitText(text: Text, context?: any): Text { return new Text(text.value, text.sourceSpan); }\n\n  visitContainer(container: Container, context?: any): Container {\n    const children = container.children.map(n => n.visit(this, context));\n    return new Container(children, container.sourceSpan);\n  }\n\n  visitIcu(icu: Icu, context?: any): Icu {\n    const cases: {[k: string]: Node} = {};\n    Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));\n    const msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);\n    msg.expressionPlaceholder = icu.expressionPlaceholder;\n    return msg;\n  }\n\n  visitTagPlaceholder(ph: TagPlaceholder, context?: any): TagPlaceholder {\n    const children = ph.children.map(n => n.visit(this, context));\n    return new TagPlaceholder(\n        ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);\n  }\n\n  visitPlaceholder(ph: Placeholder, context?: any): Placeholder {\n    return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n  }\n\n  visitIcuPlaceholder(ph: IcuPlaceholder, context?: any): IcuPlaceholder {\n    return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n  }\n}\n\n// Visit all the nodes recursively\nexport class RecurseVisitor implements Visitor {\n  visitText(text: Text, context?: any): any {}\n\n  visitContainer(container: Container, context?: any): any {\n    container.children.forEach(child => child.visit(this));\n  }\n\n  visitIcu(icu: Icu, context?: any): any {\n    Object.keys(icu.cases).forEach(k => { icu.cases[k].visit(this); });\n  }\n\n  visitTagPlaceholder(ph: TagPlaceholder, context?: any): any {\n    ph.children.forEach(child => child.visit(this));\n  }\n\n  visitPlaceholder(ph: Placeholder, context?: any): any {}\n\n  visitIcuPlaceholder(ph: IcuPlaceholder, context?: any): any {}\n}\n"],"sourceRoot":""}