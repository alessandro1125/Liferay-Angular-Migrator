{"version":3,"sources":["../../../../../../../../packages/compiler/src/i18n/serializers/xtb.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ml from '../../ml_parser/ast';\nimport {XmlParser} from '../../ml_parser/xml_parser';\nimport * as i18n from '../i18n_ast';\nimport {I18nError} from '../parse_util';\n\nimport {PlaceholderMapper, Serializer, SimplePlaceholderMapper} from './serializer';\nimport {digest, toPublicName} from './xmb';\n\nconst _TRANSLATIONS_TAG = 'translationbundle';\nconst _TRANSLATION_TAG = 'translation';\nconst _PLACEHOLDER_TAG = 'ph';\n\nexport class Xtb extends Serializer {\n  write(messages: i18n.Message[], locale: string|null): string { throw new Error('Unsupported'); }\n\n  load(content: string, url: string):\n      {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}} {\n    // xtb to xml nodes\n    const xtbParser = new XtbParser();\n    const {locale, msgIdToHtml, errors} = xtbParser.parse(content, url);\n\n    // xml nodes to i18n nodes\n    const i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {};\n    const converter = new XmlToI18n();\n\n    // Because we should be able to load xtb files that rely on features not supported by angular,\n    // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n    // converted\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const valueFn = function() {\n        const {i18nNodes, errors} = converter.convert(msgIdToHtml[msgId], url);\n        if (errors.length) {\n          throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n        }\n        return i18nNodes;\n      };\n      createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n    });\n\n    if (errors.length) {\n      throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n    }\n\n    return {locale: locale !, i18nNodesByMsgId};\n  }\n\n  digest(message: i18n.Message): string { return digest(message); }\n\n  createNameMapper(message: i18n.Message): PlaceholderMapper {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n}\n\nfunction createLazyProperty(messages: any, id: string, valueFn: () => any) {\n  Object.defineProperty(messages, id, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      const value = valueFn();\n      Object.defineProperty(messages, id, {enumerable: true, value});\n      return value;\n    },\n    set: _ => { throw new Error('Could not overwrite an XTB translation'); },\n  });\n}\n\n// Extract messages as xml nodes from the xtb file\nclass XtbParser implements ml.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _bundleDepth !: number;\n  // TODO(issue/24571): remove '!'.\n  private _errors !: I18nError[];\n  // TODO(issue/24571): remove '!'.\n  private _msgIdToHtml !: {[msgId: string]: string};\n  private _locale: string|null = null;\n\n  parse(xtb: string, url: string) {\n    this._bundleDepth = 0;\n    this._msgIdToHtml = {};\n\n    // We can not parse the ICU messages at this point as some messages might not originate\n    // from Angular that could not be lex'd.\n    const xml = new XmlParser().parse(xtb, url, false);\n\n    this._errors = xml.errors;\n    ml.visitAll(this, xml.rootNodes);\n\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale,\n    };\n  }\n\n  visitElement(element: ml.Element, context: any): any {\n    switch (element.name) {\n      case _TRANSLATIONS_TAG:\n        this._bundleDepth++;\n        if (this._bundleDepth > 1) {\n          this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\n        }\n        const langAttr = element.attrs.find((attr) => attr.name === 'lang');\n        if (langAttr) {\n          this._locale = langAttr.value;\n        }\n        ml.visitAll(this, element.children, null);\n        this._bundleDepth--;\n        break;\n\n      case _TRANSLATION_TAG:\n        const idAttr = element.attrs.find((attr) => attr.name === 'id');\n        if (!idAttr) {\n          this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            const innerTextStart = element.startSourceSpan !.end.offset;\n            const innerTextEnd = element.endSourceSpan !.start.offset;\n            const content = element.startSourceSpan !.start.file.content;\n            const innerText = content.slice(innerTextStart !, innerTextEnd !);\n            this._msgIdToHtml[id] = innerText;\n          }\n        }\n        break;\n\n      default:\n        this._addError(element, 'Unexpected tag');\n    }\n  }\n\n  visitAttribute(attribute: ml.Attribute, context: any): any {}\n\n  visitText(text: ml.Text, context: any): any {}\n\n  visitComment(comment: ml.Comment, context: any): any {}\n\n  visitExpansion(expansion: ml.Expansion, context: any): any {}\n\n  visitExpansionCase(expansionCase: ml.ExpansionCase, context: any): any {}\n\n  private _addError(node: ml.Node, message: string): void {\n    this._errors.push(new I18nError(node.sourceSpan !, message));\n  }\n}\n\n// Convert ml nodes (xtb syntax) to i18n nodes\nclass XmlToI18n implements ml.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _errors !: I18nError[];\n\n  convert(message: string, url: string) {\n    const xmlIcu = new XmlParser().parse(message, url, true);\n    this._errors = xmlIcu.errors;\n\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n        [] :\n        ml.visitAll(this, xmlIcu.rootNodes);\n\n    return {\n      i18nNodes,\n      errors: this._errors,\n    };\n  }\n\n  visitText(text: ml.Text, context: any) { return new i18n.Text(text.value, text.sourceSpan !); }\n\n  visitExpansion(icu: ml.Expansion, context: any) {\n    const caseMap: {[value: string]: i18n.Node} = {};\n\n    ml.visitAll(this, icu.cases).forEach(c => {\n      caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n    });\n\n    return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n\n  visitExpansionCase(icuCase: ml.ExpansionCase, context: any): any {\n    return {\n      value: icuCase.value,\n      nodes: ml.visitAll(this, icuCase.expression),\n    };\n  }\n\n  visitElement(el: ml.Element, context: any): i18n.Placeholder|null {\n    if (el.name === _PLACEHOLDER_TAG) {\n      const nameAttr = el.attrs.find((attr) => attr.name === 'name');\n      if (nameAttr) {\n        return new i18n.Placeholder('', nameAttr.value, el.sourceSpan !);\n      }\n\n      this._addError(el, `<${_PLACEHOLDER_TAG}> misses the \"name\" attribute`);\n    } else {\n      this._addError(el, `Unexpected tag`);\n    }\n    return null;\n  }\n\n  visitComment(comment: ml.Comment, context: any) {}\n\n  visitAttribute(attribute: ml.Attribute, context: any) {}\n\n  private _addError(node: ml.Node, message: string): void {\n    this._errors.push(new I18nError(node.sourceSpan !, message));\n  }\n}\n"],"sourceRoot":""}