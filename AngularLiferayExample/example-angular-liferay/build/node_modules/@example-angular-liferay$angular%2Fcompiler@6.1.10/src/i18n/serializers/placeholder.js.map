{"version":3,"sources":["../../../../../../../../packages/compiler/src/i18n/serializers/placeholder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst TAG_TO_PLACEHOLDER_NAMES: {[k: string]: string} = {\n  'A': 'LINK',\n  'B': 'BOLD_TEXT',\n  'BR': 'LINE_BREAK',\n  'EM': 'EMPHASISED_TEXT',\n  'H1': 'HEADING_LEVEL1',\n  'H2': 'HEADING_LEVEL2',\n  'H3': 'HEADING_LEVEL3',\n  'H4': 'HEADING_LEVEL4',\n  'H5': 'HEADING_LEVEL5',\n  'H6': 'HEADING_LEVEL6',\n  'HR': 'HORIZONTAL_RULE',\n  'I': 'ITALIC_TEXT',\n  'LI': 'LIST_ITEM',\n  'LINK': 'MEDIA_LINK',\n  'OL': 'ORDERED_LIST',\n  'P': 'PARAGRAPH',\n  'Q': 'QUOTATION',\n  'S': 'STRIKETHROUGH_TEXT',\n  'SMALL': 'SMALL_TEXT',\n  'SUB': 'SUBSTRIPT',\n  'SUP': 'SUPERSCRIPT',\n  'TBODY': 'TABLE_BODY',\n  'TD': 'TABLE_CELL',\n  'TFOOT': 'TABLE_FOOTER',\n  'TH': 'TABLE_HEADER_CELL',\n  'THEAD': 'TABLE_HEADER',\n  'TR': 'TABLE_ROW',\n  'TT': 'MONOSPACED_TEXT',\n  'U': 'UNDERLINED_TEXT',\n  'UL': 'UNORDERED_LIST',\n};\n\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nexport class PlaceholderRegistry {\n  // Count the occurrence of the base name top generate a unique name\n  private _placeHolderNameCounts: {[k: string]: number} = {};\n  // Maps signature to placeholder names\n  private _signatureToName: {[k: string]: string} = {};\n\n  getStartTagPlaceholderName(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const signature = this._hashTag(tag, attrs, isVoid);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n\n  getCloseTagPlaceholderName(tag: string): string {\n    const signature = this._hashClosingTag(tag);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const name = this._generateUniqueName(`CLOSE_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n\n  getPlaceholderName(name: string, content: string): string {\n    const upperName = name.toUpperCase();\n    const signature = `PH: ${upperName}=${content}`;\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const uniqueName = this._generateUniqueName(upperName);\n    this._signatureToName[signature] = uniqueName;\n\n    return uniqueName;\n  }\n\n  getUniquePlaceholder(name: string): string {\n    return this._generateUniqueName(name.toUpperCase());\n  }\n\n  // Generate a hash for a tag - does not take attribute order into account\n  private _hashTag(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const start = `<${tag}`;\n    const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\n    const end = isVoid ? '/>' : `></${tag}>`;\n\n    return start + strAttrs + end;\n  }\n\n  private _hashClosingTag(tag: string): string { return this._hashTag(`/${tag}`, {}, false); }\n\n  private _generateUniqueName(base: string): string {\n    const seen = this._placeHolderNameCounts.hasOwnProperty(base);\n    if (!seen) {\n      this._placeHolderNameCounts[base] = 1;\n      return base;\n    }\n\n    const id = this._placeHolderNameCounts[base];\n    this._placeHolderNameCounts[base] = id + 1;\n    return `${base}_${id}`;\n  }\n}\n"],"sourceRoot":""}