{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/translation_bundle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MissingTranslationStrategy} from '../core';\nimport * as html from '../ml_parser/ast';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {Console} from '../util';\n\nimport * as i18n from './i18n_ast';\nimport {I18nError} from './parse_util';\nimport {PlaceholderMapper, Serializer} from './serializers/serializer';\nimport {escapeXml} from './serializers/xml_helper';\n\n\n/**\n * A container for translated messages\n */\nexport class TranslationBundle {\n  private _i18nToHtml: I18nToHtmlVisitor;\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {}, locale: string|null,\n      public digest: (m: i18n.Message) => string,\n      public mapperFactory?: (m: i18n.Message) => PlaceholderMapper,\n      missingTranslationStrategy: MissingTranslationStrategy = MissingTranslationStrategy.Warning,\n      console?: Console) {\n    this._i18nToHtml = new I18nToHtmlVisitor(\n        _i18nNodesByMsgId, locale, digest, mapperFactory !, missingTranslationStrategy, console);\n  }\n\n  // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n  static load(\n      content: string, url: string, serializer: Serializer,\n      missingTranslationStrategy: MissingTranslationStrategy,\n      console?: Console): TranslationBundle {\n    const {locale, i18nNodesByMsgId} = serializer.load(content, url);\n    const digestFn = (m: i18n.Message) => serializer.digest(m);\n    const mapperFactory = (m: i18n.Message) => serializer.createNameMapper(m) !;\n    return new TranslationBundle(\n        i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n  }\n\n  // Returns the translation as HTML nodes from the given source message.\n  get(srcMsg: i18n.Message): html.Node[] {\n    const html = this._i18nToHtml.convert(srcMsg);\n\n    if (html.errors.length) {\n      throw new Error(html.errors.join('\\n'));\n    }\n\n    return html.nodes;\n  }\n\n  has(srcMsg: i18n.Message): boolean { return this.digest(srcMsg) in this._i18nNodesByMsgId; }\n}\n\nclass I18nToHtmlVisitor implements i18n.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _srcMsg !: i18n.Message;\n  private _contextStack: {msg: i18n.Message, mapper: (name: string) => string}[] = [];\n  private _errors: I18nError[] = [];\n  // TODO(issue/24571): remove '!'.\n  private _mapper !: (name: string) => string;\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {}, private _locale: string|null,\n      private _digest: (m: i18n.Message) => string,\n      private _mapperFactory: (m: i18n.Message) => PlaceholderMapper,\n      private _missingTranslationStrategy: MissingTranslationStrategy, private _console?: Console) {\n  }\n\n  convert(srcMsg: i18n.Message): {nodes: html.Node[], errors: I18nError[]} {\n    this._contextStack.length = 0;\n    this._errors.length = 0;\n\n    // i18n to text\n    const text = this._convertToText(srcMsg);\n\n    // text to html\n    const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n    const html = new HtmlParser().parse(text, url, true);\n\n    return {\n      nodes: html.rootNodes,\n      errors: [...this._errors, ...html.errors],\n    };\n  }\n\n  visitText(text: i18n.Text, context?: any): string {\n    // `convert()` uses an `HtmlParser` to return `html.Node`s\n    // we should then make sure that any special characters are escaped\n    return escapeXml(text.value);\n  }\n\n  visitContainer(container: i18n.Container, context?: any): any {\n    return container.children.map(n => n.visit(this)).join('');\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): any {\n    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n\n    // TODO(vicb): Once all format switch to using expression placeholders\n    // we should throw when the placeholder is not in the source message\n    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n        this._srcMsg.placeholders[icu.expression] :\n        icu.expression;\n\n    return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): string {\n    const phName = this._mapper(ph.name);\n    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n      return this._srcMsg.placeholders[phName];\n    }\n\n    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n      return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n    }\n\n    this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n    return '';\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): string {\n    const tag = `${ph.tag}`;\n    const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n    if (ph.isVoid) {\n      return `<${tag} ${attrs}/>`;\n    }\n    const children = ph.children.map((c: i18n.Node) => c.visit(this)).join('');\n    return `<${tag} ${attrs}>${children}</${tag}>`;\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): string {\n    // An ICU placeholder references the source message to be serialized\n    return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n  }\n\n  /**\n   * Convert a source message to a translated text string:\n   * - text nodes are replaced with their translation,\n   * - placeholders are replaced with their content,\n   * - ICU nodes are converted to ICU expressions.\n   */\n  private _convertToText(srcMsg: i18n.Message): string {\n    const id = this._digest(srcMsg);\n    const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n    let nodes: i18n.Node[];\n\n    this._contextStack.push({msg: this._srcMsg, mapper: this._mapper});\n    this._srcMsg = srcMsg;\n\n    if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n      // When there is a translation use its nodes as the source\n      // And create a mapper to convert serialized placeholder names to internal names\n      nodes = this._i18nNodesByMsgId[id];\n      this._mapper = (name: string) => mapper ? mapper.toInternalName(name) ! : name;\n    } else {\n      // When no translation has been found\n      // - report an error / a warning / nothing,\n      // - use the nodes from the original message\n      // - placeholders are already internal and need no mapper\n      if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n      } else if (\n          this._console &&\n          this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n      }\n      nodes = srcMsg.nodes;\n      this._mapper = (name: string) => name;\n    }\n    const text = nodes.map(node => node.visit(this)).join('');\n    const context = this._contextStack.pop() !;\n    this._srcMsg = context.msg;\n    this._mapper = context.mapper;\n    return text;\n  }\n\n  private _addError(el: i18n.Node, msg: string) {\n    this._errors.push(new I18nError(el.sourceSpan, msg));\n  }\n}\n"],"sourceRoot":""}