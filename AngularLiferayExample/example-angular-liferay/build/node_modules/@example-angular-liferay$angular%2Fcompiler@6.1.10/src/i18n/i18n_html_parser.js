Liferay.Loader.define("@example-angular-liferay$angular/compiler@6.1.10/src/i18n/i18n_html_parser", ['module', 'exports', 'require', '@example-angular-liferay$angular/compiler/src/core', '@example-angular-liferay$angular/compiler/src/ml_parser/interpolation_config', '@example-angular-liferay$angular/compiler/src/ml_parser/parser', '@example-angular-liferay$angular/compiler/src/i18n/digest', '@example-angular-liferay$angular/compiler/src/i18n/extractor_merger', '@example-angular-liferay$angular/compiler/src/i18n/serializers/xliff', '@example-angular-liferay$angular/compiler/src/i18n/serializers/xliff2', '@example-angular-liferay$angular/compiler/src/i18n/serializers/xmb', '@example-angular-liferay$angular/compiler/src/i18n/serializers/xtb', '@example-angular-liferay$angular/compiler/src/i18n/translation_bundle'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
            define("@angular/compiler/src/i18n/i18n_html_parser", ["require", "exports", "@angular/compiler/src/core", "@angular/compiler/src/ml_parser/interpolation_config", "@angular/compiler/src/ml_parser/parser", "@angular/compiler/src/i18n/digest", "@angular/compiler/src/i18n/extractor_merger", "@angular/compiler/src/i18n/serializers/xliff", "@angular/compiler/src/i18n/serializers/xliff2", "@angular/compiler/src/i18n/serializers/xmb", "@angular/compiler/src/i18n/serializers/xtb", "@angular/compiler/src/i18n/translation_bundle"], factory);
        }
    })(function (require, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var core_1 = require("@example-angular-liferay$angular/compiler/src/core");
        var interpolation_config_1 = require("@example-angular-liferay$angular/compiler/src/ml_parser/interpolation_config");
        var parser_1 = require("@example-angular-liferay$angular/compiler/src/ml_parser/parser");
        var digest_1 = require("@example-angular-liferay$angular/compiler/src/i18n/digest");
        var extractor_merger_1 = require("@example-angular-liferay$angular/compiler/src/i18n/extractor_merger");
        var xliff_1 = require("@example-angular-liferay$angular/compiler/src/i18n/serializers/xliff");
        var xliff2_1 = require("@example-angular-liferay$angular/compiler/src/i18n/serializers/xliff2");
        var xmb_1 = require("@example-angular-liferay$angular/compiler/src/i18n/serializers/xmb");
        var xtb_1 = require("@example-angular-liferay$angular/compiler/src/i18n/serializers/xtb");
        var translation_bundle_1 = require("@example-angular-liferay$angular/compiler/src/i18n/translation_bundle");
        var I18NHtmlParser = /** @class */function () {
            function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {
                if (missingTranslation === void 0) {
                    missingTranslation = core_1.MissingTranslationStrategy.Warning;
                }
                this._htmlParser = _htmlParser;
                if (translations) {
                    var serializer = createSerializer(translationsFormat);
                    this._translationBundle = translation_bundle_1.TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
                } else {
                    this._translationBundle = new translation_bundle_1.TranslationBundle({}, null, digest_1.digest, undefined, missingTranslation, console);
                }
            }
            I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
                if (parseExpansionForms === void 0) {
                    parseExpansionForms = false;
                }
                if (interpolationConfig === void 0) {
                    interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
                }
                var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
                if (parseResult.errors.length) {
                    return new parser_1.ParseTreeResult(parseResult.rootNodes, parseResult.errors);
                }
                return extractor_merger_1.mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
            };
            return I18NHtmlParser;
        }();
        exports.I18NHtmlParser = I18NHtmlParser;
        function createSerializer(format) {
            format = (format || 'xlf').toLowerCase();
            switch (format) {
                case 'xmb':
                    return new xmb_1.Xmb();
                case 'xtb':
                    return new xtb_1.Xtb();
                case 'xliff2':
                case 'xlf2':
                    return new xliff2_1.Xliff2();
                case 'xliff':
                case 'xlf':
                default:
                    return new xliff_1.Xliff();
            }
        }
    });
});
//# sourceMappingURL=i18n_html_parser.js.map