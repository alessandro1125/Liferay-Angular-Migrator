{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/message_bundle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAYA,YAAA,qBAAA,QAAA,qEAAA,CAAA;AACA,YAAA,OAAA,QAAA,6DAAA,CAAA;AAIA;;;AAGA,YAAA,gBAAA,aAAA,YAAA;AAGE,qBAAA,aAAA,CACY,WADZ,EAC6C,aAD7C,EAEY,cAFZ,EAE6D,OAF7D,EAEwF;AAA3B,oBAAA,YAAA,KAAA,CAAA,EAAA;AAAA,8BAAA,IAAA;AAA2B;AAD5E,qBAAA,WAAA,GAAA,WAAA;AAAiC,qBAAA,aAAA,GAAA,aAAA;AACjC,qBAAA,cAAA,GAAA,cAAA;AAAiD,qBAAA,OAAA,GAAA,OAAA;AAJrD,qBAAA,SAAA,GAA4B,EAA5B;AAIoF;AAE5F,0BAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,IAAnB,EAAiC,GAAjC,EAA8C,mBAA9C,EAAsF;;AAEpF,oBAAM,mBAAmB,KAAK,WAAL,CAAiB,KAAjB,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,mBAAxC,CAAzB;AAEA,oBAAI,iBAAiB,MAAjB,CAAwB,MAA5B,EAAoC;AAClC,2BAAO,iBAAiB,MAAxB;AACD;AAED,oBAAM,mBAAmB,mBAAA,eAAA,CACrB,iBAAiB,SADI,EACO,mBADP,EAC4B,KAAK,aADjC,EACgD,KAAK,cADrD,CAAzB;AAGA,oBAAI,iBAAiB,MAAjB,CAAwB,MAA5B,EAAoC;AAClC,2BAAO,iBAAiB,MAAxB;AACD;AAED,iBAAA,KAAA,KAAK,SAAL,EAAe,IAAf,CAAmB,KAAnB,CAAmB,EAAnB,EAAmB,QAAA,QAAA,CAAI,iBAAiB,QAArB,CAAnB;AACA,uBAAO,EAAP;AACD,aAjBD;AAmBA;AACA;AACA,0BAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AAAgC,uBAAO,KAAK,SAAZ;AAAwB,aAAxD;AAEA,0BAAA,SAAA,CAAA,KAAA,GAAA,UAAM,UAAN,EAA8B,aAA9B,EAAsE;AACpE,oBAAM,WAAyC,EAA/C;AACA,oBAAM,gBAAgB,IAAI,mBAAJ,EAAtB;AAEA;AACA,qBAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,OAAA,EAAO;;AAC5B,wBAAM,KAAK,WAAW,MAAX,CAAkB,OAAlB,CAAX;AACA,wBAAI,CAAC,SAAS,cAAT,CAAwB,EAAxB,CAAL,EAAkC;AAChC,iCAAS,EAAT,IAAe,OAAf;AACD,qBAFD,MAEO;AACL,yBAAA,KAAA,SAAS,EAAT,EAAa,OAAb,EAAqB,IAArB,CAAyB,KAAzB,CAAyB,EAAzB,EAAyB,QAAA,QAAA,CAAI,QAAQ,OAAZ,CAAzB;AACD;AACF,iBAPD;AASA;AACA,oBAAM,UAAU,OAAO,IAAP,CAAY,QAAZ,EAAsB,GAAtB,CAA0B,UAAA,EAAA,EAAE;AAC1C,wBAAM,SAAS,WAAW,gBAAX,CAA4B,SAAS,EAAT,CAA5B,CAAf;AACA,wBAAM,MAAM,SAAS,EAAT,CAAZ;AACA,wBAAM,QAAQ,SAAS,cAAc,OAAd,CAAsB,IAAI,KAA1B,EAAiC,MAAjC,CAAT,GAAoD,IAAI,KAAtE;AACA,wBAAI,qBAAqB,IAAI,KAAK,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,IAAI,OAApC,EAA6C,IAAI,WAAjD,EAA8D,EAA9D,CAAzB;AACA,uCAAmB,OAAnB,GAA6B,IAAI,OAAjC;AACA,wBAAI,aAAJ,EAAmB;AACjB,2CAAmB,OAAnB,CAA2B,OAA3B,CACI,UAAC,MAAD,EAAyB;AAAK,mCAAA,OAAO,QAAP,GAAkB,cAAc,OAAhC,QAAkB,CAAlB;AAAgD,yBADlF;AAED;AACD,2BAAO,kBAAP;AACD,iBAXe,CAAhB;AAaA,uBAAO,WAAW,KAAX,CAAiB,OAAjB,EAA0B,KAAK,OAA/B,CAAP;AACD,aA7BD;AA8BF,mBAAA,aAAA;AAAC,SA5DD,EAAA;AAAa,gBAAA,aAAA,GAAA,aAAA;AA8Db;AACA,YAAA,sBAAA,aAAA,UAAA,MAAA,EAAA;AAAkC,oBAAA,SAAA,CAAA,mBAAA,EAAA,MAAA;AAAlC,qBAAA,mBAAA,GAAA;;AAoBC;AAnBC,gCAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,KAAR,EAA4B,MAA5B,EAAqD;AAArD,oBAAA,QAAA,IAAA;AACE,uBAAO,SAAS,MAAM,GAAN,CAAU,UAAA,CAAA,EAAC;AAAI,2BAAA,EAAE,KAAF,CAAQ,KAAR,EAAA,MAAA,CAAA;AAAqB,iBAApC,CAAT,GAAiD,KAAxD;AACD,aAFD;AAIA,gCAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,EAApB,EAA6C,MAA7C,EAAsE;AAAtE,oBAAA,QAAA,IAAA;AACE,oBAAM,YAAY,OAAO,YAAP,CAAoB,GAAG,SAAvB,CAAlB;AACA,oBAAM,YAAY,GAAG,SAAH,GAAe,OAAO,YAAP,CAAoB,GAAG,SAAvB,CAAf,GAAqD,GAAG,SAA1E;AACA,oBAAM,WAAW,GAAG,QAAH,CAAY,GAAZ,CAAgB,UAAA,CAAA,EAAC;AAAI,2BAAA,EAAE,KAAF,CAAQ,KAAR,EAAA,MAAA,CAAA;AAAqB,iBAA1C,CAAjB;AACA,uBAAO,IAAI,KAAK,cAAT,CACH,GAAG,GADA,EACK,GAAG,KADR,EACe,SADf,EAC0B,SAD1B,EACqC,QADrC,EAC+C,GAAG,MADlD,EAC0D,GAAG,UAD7D,CAAP;AAED,aAND;AAQA,gCAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,EAAjB,EAAuC,MAAvC,EAAgE;AAC9D,uBAAO,IAAI,KAAK,WAAT,CAAqB,GAAG,KAAxB,EAA+B,OAAO,YAAP,CAAoB,GAAG,IAAvB,CAA/B,EAA+D,GAAG,UAAlE,CAAP;AACD,aAFD;AAIA,gCAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,EAApB,EAA6C,MAA7C,EAAsE;AACpE,uBAAO,IAAI,KAAK,cAAT,CAAwB,GAAG,KAA3B,EAAkC,OAAO,YAAP,CAAoB,GAAG,IAAvB,CAAlC,EAAkE,GAAG,UAArE,CAAP;AACD,aAFD;AAGF,mBAAA,mBAAA;AAAC,SApBD,CAAkC,KAAK,YAAvC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseError} from '../parse_util';\n\nimport {extractMessages} from './extractor_merger';\nimport * as i18n from './i18n_ast';\nimport {PlaceholderMapper, Serializer} from './serializers/serializer';\n\n\n/**\n * A container for message extracted from the templates.\n */\nexport class MessageBundle {\n  private _messages: i18n.Message[] = [];\n\n  constructor(\n      private _htmlParser: HtmlParser, private _implicitTags: string[],\n      private _implicitAttrs: {[k: string]: string[]}, private _locale: string|null = null) {}\n\n  updateFromTemplate(html: string, url: string, interpolationConfig: InterpolationConfig):\n      ParseError[] {\n    const htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n\n    const i18nParserResult = extractMessages(\n        htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n    if (i18nParserResult.errors.length) {\n      return i18nParserResult.errors;\n    }\n\n    this._messages.push(...i18nParserResult.messages);\n    return [];\n  }\n\n  // Return the message in the internal format\n  // The public (serialized) format might be different, see the `write` method.\n  getMessages(): i18n.Message[] { return this._messages; }\n\n  write(serializer: Serializer, filterSources?: (path: string) => string): string {\n    const messages: {[id: string]: i18n.Message} = {};\n    const mapperVisitor = new MapPlaceholderNames();\n\n    // Deduplicate messages based on their ID\n    this._messages.forEach(message => {\n      const id = serializer.digest(message);\n      if (!messages.hasOwnProperty(id)) {\n        messages[id] = message;\n      } else {\n        messages[id].sources.push(...message.sources);\n      }\n    });\n\n    // Transform placeholder names using the serializer mapping\n    const msgList = Object.keys(messages).map(id => {\n      const mapper = serializer.createNameMapper(messages[id]);\n      const src = messages[id];\n      const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n      let transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n      transformedMessage.sources = src.sources;\n      if (filterSources) {\n        transformedMessage.sources.forEach(\n            (source: i18n.MessageSpan) => source.filePath = filterSources(source.filePath));\n      }\n      return transformedMessage;\n    });\n\n    return serializer.write(msgList, this._locale);\n  }\n}\n\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends i18n.CloneVisitor {\n  convert(nodes: i18n.Node[], mapper: PlaceholderMapper): i18n.Node[] {\n    return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, mapper: PlaceholderMapper): i18n.TagPlaceholder {\n    const startName = mapper.toPublicName(ph.startName) !;\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) ! : ph.closeName;\n    const children = ph.children.map(n => n.visit(this, mapper));\n    return new i18n.TagPlaceholder(\n        ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, mapper: PlaceholderMapper): i18n.Placeholder {\n    return new i18n.Placeholder(ph.value, mapper.toPublicName(ph.name) !, ph.sourceSpan);\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, mapper: PlaceholderMapper): i18n.IcuPlaceholder {\n    return new i18n.IcuPlaceholder(ph.value, mapper.toPublicName(ph.name) !, ph.sourceSpan);\n  }\n}\n"],"sourceRoot":""}