{"version":3,"sources":["../../../../../../packages/compiler/src/parse_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as chars from './chars';\nimport {CompileIdentifierMetadata, identifierModuleUrl, identifierName} from './compile_metadata';\nimport {error} from './util';\n\nexport class ParseLocation {\n  constructor(\n      public file: ParseSourceFile, public offset: number, public line: number,\n      public col: number) {}\n\n  toString(): string {\n    return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;\n  }\n\n  moveBy(delta: number): ParseLocation {\n    const source = this.file.content;\n    const len = source.length;\n    let offset = this.offset;\n    let line = this.line;\n    let col = this.col;\n    while (offset > 0 && delta < 0) {\n      offset--;\n      delta++;\n      const ch = source.charCodeAt(offset);\n      if (ch == chars.$LF) {\n        line--;\n        const priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode(chars.$LF));\n        col = priorLine > 0 ? offset - priorLine : offset;\n      } else {\n        col--;\n      }\n    }\n    while (offset < len && delta > 0) {\n      const ch = source.charCodeAt(offset);\n      offset++;\n      delta--;\n      if (ch == chars.$LF) {\n        line++;\n        col = 0;\n      } else {\n        col++;\n      }\n    }\n    return new ParseLocation(this.file, offset, line, col);\n  }\n\n  // Return the source around the location\n  // Up to `maxChars` or `maxLines` on each side of the location\n  getContext(maxChars: number, maxLines: number): {before: string, after: string}|null {\n    const content = this.file.content;\n    let startOffset = this.offset;\n\n    if (startOffset != null) {\n      if (startOffset > content.length - 1) {\n        startOffset = content.length - 1;\n      }\n      let endOffset = startOffset;\n      let ctxChars = 0;\n      let ctxLines = 0;\n\n      while (ctxChars < maxChars && startOffset > 0) {\n        startOffset--;\n        ctxChars++;\n        if (content[startOffset] == '\\n') {\n          if (++ctxLines == maxLines) {\n            break;\n          }\n        }\n      }\n\n      ctxChars = 0;\n      ctxLines = 0;\n      while (ctxChars < maxChars && endOffset < content.length - 1) {\n        endOffset++;\n        ctxChars++;\n        if (content[endOffset] == '\\n') {\n          if (++ctxLines == maxLines) {\n            break;\n          }\n        }\n      }\n\n      return {\n        before: content.substring(startOffset, this.offset),\n        after: content.substring(this.offset, endOffset + 1),\n      };\n    }\n\n    return null;\n  }\n}\n\nexport class ParseSourceFile {\n  constructor(public content: string, public url: string) {}\n}\n\nexport class ParseSourceSpan {\n  constructor(\n      public start: ParseLocation, public end: ParseLocation, public details: string|null = null) {}\n\n  toString(): string {\n    return this.start.file.content.substring(this.start.offset, this.end.offset);\n  }\n}\n\nexport enum ParseErrorLevel {\n  WARNING,\n  ERROR,\n}\n\nexport class ParseError {\n  constructor(\n      public span: ParseSourceSpan, public msg: string,\n      public level: ParseErrorLevel = ParseErrorLevel.ERROR) {}\n\n  contextualMessage(): string {\n    const ctx = this.span.start.getContext(100, 3);\n    return ctx ? `${this.msg} (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` :\n                 this.msg;\n  }\n\n  toString(): string {\n    const details = this.span.details ? `, ${this.span.details}` : '';\n    return `${this.contextualMessage()}: ${this.span.start}${details}`;\n  }\n}\n\nexport function typeSourceSpan(kind: string, type: CompileIdentifierMetadata): ParseSourceSpan {\n  const moduleUrl = identifierModuleUrl(type);\n  const sourceFileName = moduleUrl != null ? `in ${kind} ${identifierName(type)} in ${moduleUrl}` :\n                                             `in ${kind} ${identifierName(type)}`;\n  const sourceFile = new ParseSourceFile('', sourceFileName);\n  return new ParseSourceSpan(\n      new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n"],"sourceRoot":""}