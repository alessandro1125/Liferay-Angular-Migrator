{"version":3,"sources":["../../../../../../../packages/compiler/src/template_parser/template_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {CompileDirectiveSummary, CompileProviderMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {SecurityContext} from '../core';\nimport {AST, BindingType, BoundElementProperty, ParsedEvent, ParsedEventType, ParsedVariable} from '../expression_parser/ast';\nimport {LifecycleHooks} from '../lifecycle_reflector';\nimport {ParseSourceSpan} from '../parse_util';\n\n\n\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n  /**\n   * The source span from which this node was parsed.\n   */\n  sourceSpan: ParseSourceSpan;\n\n  /**\n   * Visit this node and possibly transform it.\n   */\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}\n\n/**\n * A segment of text within the template.\n */\nexport class TextAst implements TemplateAst {\n  constructor(\n      public value: string, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitText(this, context); }\n}\n\n/**\n * A bound expression within the text of a template.\n */\nexport class BoundTextAst implements TemplateAst {\n  constructor(\n      public value: AST, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitBoundText(this, context);\n  }\n}\n\n/**\n * A plain attribute on an element.\n */\nexport class AttrAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n}\n\nexport const enum PropertyBindingType {\n  // A normal binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}\n\nconst BoundPropertyMapping = {\n  [BindingType.Animation]: PropertyBindingType.Animation,\n  [BindingType.Attribute]: PropertyBindingType.Attribute,\n  [BindingType.Class]: PropertyBindingType.Class,\n  [BindingType.Property]: PropertyBindingType.Property,\n  [BindingType.Style]: PropertyBindingType.Style,\n};\n\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[@trigger]=\"stateExp\"`)\n */\nexport class BoundElementPropertyAst implements TemplateAst {\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public type: PropertyBindingType,\n      public securityContext: SecurityContext, public value: AST, public unit: string|null,\n      public sourceSpan: ParseSourceSpan) {\n    this.isAnimation = this.type === PropertyBindingType.Animation;\n  }\n\n  static fromBoundProperty(prop: BoundElementProperty) {\n    const type = BoundPropertyMapping[prop.type];\n    return new BoundElementPropertyAst(\n        prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElementProperty(this, context);\n  }\n}\n\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(@trigger.phase)=\"callback($event)\"`).\n */\nexport class BoundEventAst implements TemplateAst {\n  readonly fullName: string;\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public target: string|null, public phase: string|null,\n      public handler: AST, public sourceSpan: ParseSourceSpan) {\n    this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n    this.isAnimation = !!this.phase;\n  }\n\n  static calcFullName(name: string, target: string|null, phase: string|null): string {\n    if (target) {\n      return `${target}:${name}`;\n    }\n    if (phase) {\n      return `@${name}.${phase}`;\n    }\n\n    return name;\n  }\n\n  static fromParsedEvent(event: ParsedEvent) {\n    const target: string|null = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;\n    const phase: string|null =\n        event.type === ParsedEventType.Animation ? event.targetOrPhase : null;\n    return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEvent(this, context);\n  }\n}\n\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport class ReferenceAst implements TemplateAst {\n  constructor(\n      public name: string, public value: CompileTokenMetadata, public originalValue: string,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitReference(this, context);\n  }\n}\n\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport class VariableAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n\n  static fromParsedVariable(v: ParsedVariable) {\n    return new VariableAst(v.name, v.value, v.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitVariable(this, context);\n  }\n}\n\n/**\n * An element declaration in a template.\n */\nexport class ElementAst implements TemplateAst {\n  constructor(\n      public name: string, public attrs: AttrAst[], public inputs: BoundElementPropertyAst[],\n      public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public directives: DirectiveAst[], public providers: ProviderAst[],\n      public hasViewContainer: boolean, public queryMatches: QueryMatch[],\n      public children: TemplateAst[], public ngContentIndex: number|null,\n      public sourceSpan: ParseSourceSpan, public endSourceSpan: ParseSourceSpan|null) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n}\n\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nexport class EmbeddedTemplateAst implements TemplateAst {\n  constructor(\n      public attrs: AttrAst[], public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public variables: VariableAst[], public directives: DirectiveAst[],\n      public providers: ProviderAst[], public hasViewContainer: boolean,\n      public queryMatches: QueryMatch[], public children: TemplateAst[],\n      public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n}\n\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport class BoundDirectivePropertyAst implements TemplateAst {\n  constructor(\n      public directiveName: string, public templateName: string, public value: AST,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n}\n\n/**\n * A directive declared on an element.\n */\nexport class DirectiveAst implements TemplateAst {\n  constructor(\n      public directive: CompileDirectiveSummary, public inputs: BoundDirectivePropertyAst[],\n      public hostProperties: BoundElementPropertyAst[], public hostEvents: BoundEventAst[],\n      public contentQueryStartId: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirective(this, context);\n  }\n}\n\n/**\n * A provider declared on an element\n */\nexport class ProviderAst implements TemplateAst {\n  constructor(\n      public token: CompileTokenMetadata, public multiProvider: boolean, public eager: boolean,\n      public providers: CompileProviderMetadata[], public providerType: ProviderAstType,\n      public lifecycleHooks: LifecycleHooks[], public sourceSpan: ParseSourceSpan,\n      readonly isModule: boolean) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    // No visit method in the visitor for now...\n    return null;\n  }\n}\n\nexport enum ProviderAstType {\n  PublicService,\n  PrivateService,\n  Component,\n  Directive,\n  Builtin\n}\n\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport class NgContentAst implements TemplateAst {\n  constructor(\n      public index: number, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitNgContent(this, context);\n  }\n}\n\nexport interface QueryMatch {\n  queryId: number;\n  value: CompileTokenMetadata;\n}\n\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n  // Returning a truthy value from `visit()` will prevent `templateVisitAll()` from the call to\n  // the typed method and result returned will become the result included in `visitAll()`s\n  // result array.\n  visit?(ast: TemplateAst, context: any): any;\n\n  visitNgContent(ast: NgContentAst, context: any): any;\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitReference(ast: ReferenceAst, context: any): any;\n  visitVariable(ast: VariableAst, context: any): any;\n  visitEvent(ast: BoundEventAst, context: any): any;\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n  visitAttr(ast: AttrAst, context: any): any;\n  visitBoundText(ast: BoundTextAst, context: any): any;\n  visitText(ast: TextAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nexport class NullTemplateVisitor implements TemplateAstVisitor {\n  visitNgContent(ast: NgContentAst, context: any): void {}\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): void {}\n  visitElement(ast: ElementAst, context: any): void {}\n  visitReference(ast: ReferenceAst, context: any): void {}\n  visitVariable(ast: VariableAst, context: any): void {}\n  visitEvent(ast: BoundEventAst, context: any): void {}\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): void {}\n  visitAttr(ast: AttrAst, context: any): void {}\n  visitBoundText(ast: BoundTextAst, context: any): void {}\n  visitText(ast: TextAst, context: any): void {}\n  visitDirective(ast: DirectiveAst, context: any): void {}\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): void {}\n}\n\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nexport class RecursiveTemplateAstVisitor extends NullTemplateVisitor implements TemplateAstVisitor {\n  constructor() { super(); }\n\n  // Nodes with children\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.references);\n      visit(ast.variables);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitElement(ast: ElementAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.inputs);\n      visit(ast.outputs);\n      visit(ast.references);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.inputs);\n      visit(ast.hostProperties);\n      visit(ast.hostEvents);\n    });\n  }\n\n  protected visitChildren<T extends TemplateAst>(\n      context: any,\n      cb: (visit: (<V extends TemplateAst>(children: V[]|undefined) => void)) => void) {\n    let results: any[][] = [];\n    let t = this;\n    function visit<T extends TemplateAst>(children: T[] | undefined) {\n      if (children && children.length) results.push(templateVisitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\n/**\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n */\nexport function templateVisitAll(\n    visitor: TemplateAstVisitor, asts: TemplateAst[], context: any = null): any[] {\n  const result: any[] = [];\n  const visit = visitor.visit ?\n      (ast: TemplateAst) => visitor.visit !(ast, context) || ast.visit(visitor, context) :\n      (ast: TemplateAst) => ast.visit(visitor, context);\n  asts.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nexport type TemplateAstPath = AstPath<TemplateAst>;\n"],"sourceRoot":""}