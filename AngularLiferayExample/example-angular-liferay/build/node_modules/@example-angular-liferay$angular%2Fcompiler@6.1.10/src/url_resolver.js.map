{"version":3,"sources":["../../../../../../packages/compiler/src/url_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Create a {@link UrlResolver} with no package prefix.\n */\nexport function createUrlResolverWithoutPackagePrefix(): UrlResolver {\n  return new UrlResolver();\n}\n\nexport function createOfflineCompileUrlResolver(): UrlResolver {\n  return new UrlResolver('.');\n}\n\n/**\n * Used by the {@link Compiler} when resolving HTML and CSS template URLs.\n *\n * This class can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n *\n * ## Example\n *\n * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}\n *\n * @security  When compiling templates at runtime, you must\n * ensure that the entire template comes from a trusted source.\n * Attacker-controlled data introduced by a template could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nexport interface UrlResolver { resolve(baseUrl: string, url: string): string; }\n\nexport interface UrlResolverCtor { new (packagePrefix?: string|null): UrlResolver; }\n\nexport const UrlResolver: UrlResolverCtor = class UrlResolverImpl {\n  constructor(private _packagePrefix: string|null = null) {}\n\n  /**\n   * Resolves the `url` given the `baseUrl`:\n   * - when the `url` is null, the `baseUrl` is returned,\n   * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n   * `baseUrl` and `url`,\n   * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n   * returned as is (ignoring the `baseUrl`)\n   */\n  resolve(baseUrl: string, url: string): string {\n    let resolvedUrl = url;\n    if (baseUrl != null && baseUrl.length > 0) {\n      resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n    }\n    const resolvedParts = _split(resolvedUrl);\n    let prefix = this._packagePrefix;\n    if (prefix != null && resolvedParts != null &&\n        resolvedParts[_ComponentIndex.Scheme] == 'package') {\n      let path = resolvedParts[_ComponentIndex.Path];\n      prefix = prefix.replace(/\\/+$/, '');\n      path = path.replace(/^\\/+/, '');\n      return `${prefix}/${path}`;\n    }\n    return resolvedUrl;\n  }\n};\n\n/**\n * Extract the scheme of a URL.\n */\nexport function getUrlScheme(url: string): string {\n  const match = _split(url);\n  return (match && match[_ComponentIndex.Scheme]) || '';\n}\n\n// The code below is adapted from Traceur:\n// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js\n\n/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param opt_scheme The scheme such as 'http'.\n * @param opt_userInfo The user name before the '@'.\n * @param opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param opt_port The port number.\n * @param opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param opt_queryData The URI-encoded query data.\n * @param opt_fragment The URI-encoded fragment identifier.\n * @return The fully combined URI.\n */\nfunction _buildFromEncodedParts(\n    opt_scheme?: string, opt_userInfo?: string, opt_domain?: string, opt_port?: string,\n    opt_path?: string, opt_queryData?: string, opt_fragment?: string): string {\n  const out: string[] = [];\n\n  if (opt_scheme != null) {\n    out.push(opt_scheme + ':');\n  }\n\n  if (opt_domain != null) {\n    out.push('//');\n\n    if (opt_userInfo != null) {\n      out.push(opt_userInfo + '@');\n    }\n\n    out.push(opt_domain);\n\n    if (opt_port != null) {\n      out.push(':' + opt_port);\n    }\n  }\n\n  if (opt_path != null) {\n    out.push(opt_path);\n  }\n\n  if (opt_queryData != null) {\n    out.push('?' + opt_queryData);\n  }\n\n  if (opt_fragment != null) {\n    out.push('#' + opt_fragment);\n  }\n\n  return out.join('');\n}\n\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * @internal\n */\nconst _splitRe = new RegExp(\n    '^' +\n    '(?:' +\n    '([^:/?#.]+)' +  // scheme - ignore special characters\n                     // used by other URL parts such as :,\n                     // ?, /, #, and .\n    ':)?' +\n    '(?://' +\n    '(?:([^/?#]*)@)?' +                  // userInfo\n    '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' +  // domain - restrict to letters,\n                                         // digits, dashes, dots, percent\n                                         // escapes, and unicode characters.\n    '(?::([0-9]+))?' +                   // port\n    ')?' +\n    '([^?#]+)?' +        // path\n    '(?:\\\\?([^#]*))?' +  // query\n    '(?:#(.*))?' +       // fragment\n    '$');\n\n/**\n * The index of each URI component in the return value of goog.uri.utils.split.\n * @enum {number}\n */\nenum _ComponentIndex {\n  Scheme = 1,\n  UserInfo,\n  Domain,\n  Port,\n  Path,\n  QueryData,\n  Fragment\n}\n\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n * </pre>\n *\n * @param uri The URI string to examine.\n * @return Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\nfunction _split(uri: string): Array<string|any> {\n  return uri.match(_splitRe) !;\n}\n\n/**\n  * Removes dot segments in given path component, as described in\n  * RFC 3986, section 5.2.4.\n  *\n  * @param path A non-empty path component.\n  * @return Path component with removed dot segments.\n  */\nfunction _removeDotSegments(path: string): string {\n  if (path == '/') return '/';\n\n  const leadingSlash = path[0] == '/' ? '/' : '';\n  const trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n  const segments = path.split('/');\n\n  const out: string[] = [];\n  let up = 0;\n  for (let pos = 0; pos < segments.length; pos++) {\n    const segment = segments[pos];\n    switch (segment) {\n      case '':\n      case '.':\n        break;\n      case '..':\n        if (out.length > 0) {\n          out.pop();\n        } else {\n          up++;\n        }\n        break;\n      default:\n        out.push(segment);\n    }\n  }\n\n  if (leadingSlash == '') {\n    while (up-- > 0) {\n      out.unshift('..');\n    }\n\n    if (out.length === 0) out.push('.');\n  }\n\n  return leadingSlash + out.join('/') + trailingSlash;\n}\n\n/**\n * Takes an array of the parts from split and canonicalizes the path part\n * and then joins all the parts.\n */\nfunction _joinAndCanonicalizePath(parts: any[]): string {\n  let path = parts[_ComponentIndex.Path];\n  path = path == null ? '' : _removeDotSegments(path);\n  parts[_ComponentIndex.Path] = path;\n\n  return _buildFromEncodedParts(\n      parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain],\n      parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData],\n      parts[_ComponentIndex.Fragment]);\n}\n\n/**\n * Resolves a URL.\n * @param base The URL acting as the base URL.\n * @param to The URL to resolve.\n */\nfunction _resolveUrl(base: string, url: string): string {\n  const parts = _split(encodeURI(url));\n  const baseParts = _split(base);\n\n  if (parts[_ComponentIndex.Scheme] != null) {\n    return _joinAndCanonicalizePath(parts);\n  } else {\n    parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n  }\n\n  for (let i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n    if (parts[i] == null) {\n      parts[i] = baseParts[i];\n    }\n  }\n\n  if (parts[_ComponentIndex.Path][0] == '/') {\n    return _joinAndCanonicalizePath(parts);\n  }\n\n  let path = baseParts[_ComponentIndex.Path];\n  if (path == null) path = '/';\n  const index = path.lastIndexOf('/');\n  path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n  parts[_ComponentIndex.Path] = path;\n  return _joinAndCanonicalizePath(parts);\n}\n"],"sourceRoot":""}