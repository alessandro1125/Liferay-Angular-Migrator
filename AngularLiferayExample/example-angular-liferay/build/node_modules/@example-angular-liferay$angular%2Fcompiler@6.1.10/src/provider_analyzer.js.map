{"version":3,"sources":["../../../../../../packages/compiler/src/provider_analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileDirectiveSummary, CompileNgModuleMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, CompileTypeMetadata, tokenName, tokenReference} from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {Identifiers, createTokenForExternalReference} from './identifiers';\nimport {ParseError, ParseSourceSpan} from './parse_util';\nimport {AttrAst, DirectiveAst, ProviderAst, ProviderAstType, QueryMatch, ReferenceAst} from './template_parser/template_ast';\n\nexport class ProviderError extends ParseError {\n  constructor(message: string, span: ParseSourceSpan) { super(span, message); }\n}\n\nexport interface QueryWithId {\n  meta: CompileQueryMetadata;\n  queryId: number;\n}\n\nexport class ProviderViewContext {\n  /**\n   * @internal\n   */\n  viewQueries: Map<any, QueryWithId[]>;\n  /**\n   * @internal\n   */\n  viewProviders: Map<any, boolean>;\n  errors: ProviderError[] = [];\n\n  constructor(public reflector: CompileReflector, public component: CompileDirectiveMetadata) {\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new Map<any, boolean>();\n    component.viewProviders.forEach((provider) => {\n      if (this.viewProviders.get(tokenReference(provider.token)) == null) {\n        this.viewProviders.set(tokenReference(provider.token), true);\n      }\n    });\n  }\n}\n\nexport class ProviderElementContext {\n  private _contentQueries: Map<any, QueryWithId[]>;\n\n  private _transformedProviders = new Map<any, ProviderAst>();\n  private _seenProviders = new Map<any, boolean>();\n  private _allProviders: Map<any, ProviderAst>;\n  private _attrs: {[key: string]: string};\n  private _queriedTokens = new Map<any, QueryMatch[]>();\n\n  public readonly transformedHasViewContainer: boolean = false;\n\n  constructor(\n      public viewContext: ProviderViewContext, private _parent: ProviderElementContext,\n      private _isViewRoot: boolean, private _directiveAsts: DirectiveAst[], attrs: AttrAst[],\n      refs: ReferenceAst[], isTemplate: boolean, contentQueryStartId: number,\n      private _sourceSpan: ParseSourceSpan) {\n    this._attrs = {};\n    attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n    const directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n    this._allProviders =\n        _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n    this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._addQueryReadsTo(provider.token, provider.token, this._queriedTokens);\n    });\n    if (isTemplate) {\n      const templateRefId =\n          createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);\n      this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\n    }\n    refs.forEach((refAst) => {\n      let defaultQueryValue = refAst.value ||\n          createTokenForExternalReference(this.viewContext.reflector, Identifiers.ElementRef);\n      this._addQueryReadsTo({value: refAst.name}, defaultQueryValue, this._queriedTokens);\n    });\n    if (this._queriedTokens.get(\n            this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {\n      this.transformedHasViewContainer = true;\n    }\n\n    // create the providers that we know are eager first\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      const eager = provider.eager || this._queriedTokens.get(tokenReference(provider.token));\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n\n  afterElement() {\n    // collect lazy providers\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n\n  get transformProviders(): ProviderAst[] {\n    // Note: Maps keep their insertion order.\n    const lazyProviders: ProviderAst[] = [];\n    const eagerProviders: ProviderAst[] = [];\n    this._transformedProviders.forEach(provider => {\n      if (provider.eager) {\n        eagerProviders.push(provider);\n      } else {\n        lazyProviders.push(provider);\n      }\n    });\n    return lazyProviders.concat(eagerProviders);\n  }\n\n  get transformedDirectiveAsts(): DirectiveAst[] {\n    const sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\n    const sortedDirectives = this._directiveAsts.slice();\n    sortedDirectives.sort(\n        (dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n            sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n\n  get queryMatches(): QueryMatch[] {\n    const allMatches: QueryMatch[] = [];\n    this._queriedTokens.forEach((matches: QueryMatch[]) => { allMatches.push(...matches); });\n    return allMatches;\n  }\n\n  private _addQueryReadsTo(\n      token: CompileTokenMetadata, defaultValue: CompileTokenMetadata,\n      queryReadTokens: Map<any, QueryMatch[]>) {\n    this._getQueriesFor(token).forEach((query) => {\n      const queryValue = query.meta.read || defaultValue;\n      const tokenRef = tokenReference(queryValue);\n      let queryMatches = queryReadTokens.get(tokenRef);\n      if (!queryMatches) {\n        queryMatches = [];\n        queryReadTokens.set(tokenRef, queryMatches);\n      }\n      queryMatches.push({queryId: query.queryId, value: queryValue});\n    });\n  }\n\n  private _getQueriesFor(token: CompileTokenMetadata): QueryWithId[] {\n    const result: QueryWithId[] = [];\n    let currentEl: ProviderElementContext = this;\n    let distance = 0;\n    let queries: QueryWithId[]|undefined;\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(tokenReference(token));\n      if (queries) {\n        result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl._parent;\n    }\n    queries = this.viewContext.viewQueries.get(tokenReference(token));\n    if (queries) {\n      result.push(...queries);\n    }\n    return result;\n  }\n\n\n  private _getOrCreateLocalProvider(\n      requestingProviderType: ProviderAstType, token: CompileTokenMetadata,\n      eager: boolean): ProviderAst|null {\n    const resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n                               requestingProviderType === ProviderAstType.PublicService) &&\n                              resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n        ((requestingProviderType === ProviderAstType.PrivateService ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.Builtin)) {\n      return null;\n    }\n    let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this.viewContext.errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const transformedProviders = resolvedProvider.providers.map((provider) => {\n      let transformedUseValue = provider.useValue;\n      let transformedUseExisting = provider.useExisting !;\n      let transformedDeps: CompileDiDependencyMetadata[] = undefined !;\n      if (provider.useExisting != null) {\n        const existingDiDep = this._getDependency(\n            resolvedProvider.providerType, {token: provider.useExisting}, eager) !;\n        if (existingDiDep.token != null) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null !;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager) !);\n      } else if (provider.useClass) {\n        const deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager) !);\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n\n  private _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = false): CompileDiDependencyMetadata|null {\n    if (dep.isAttribute) {\n      const attrValue = this._attrs[dep.token !.value];\n      return {isValue: true, value: attrValue == null ? null : attrValue};\n    }\n\n    if (dep.token != null) {\n      // access builtints\n      if ((requestingProviderType === ProviderAstType.Directive ||\n           requestingProviderType === ProviderAstType.Component)) {\n        if (tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) ||\n            tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) ||\n            tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(\n                    Identifiers.ChangeDetectorRef) ||\n            tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n          return dep;\n        }\n        if (tokenReference(dep.token) ===\n            this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n          (this as{transformedHasViewContainer: boolean}).transformedHasViewContainer = true;\n        }\n      }\n      // access the injector\n      if (tokenReference(dep.token) ===\n          this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {\n        return dep;\n      }\n      // access providers\n      if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {\n        return dep;\n      }\n    }\n    return null;\n  }\n\n  private _getDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = false): CompileDiDependencyMetadata|null {\n    let currElement: ProviderElementContext = this;\n    let currEager: boolean = eager;\n    let result: CompileDiDependencyMetadata|null = null;\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n    if (dep.isSelf) {\n      if (!result && dep.isOptional) {\n        result = {isValue: true, value: null};\n      }\n    } else {\n      // check parent elements\n      while (!result && currElement._parent) {\n        const prevElement = currElement;\n        currElement = currElement._parent;\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      }\n      // check @Host restriction\n      if (!result) {\n        if (!dep.isHost || this.viewContext.component.isHost ||\n            this.viewContext.component.type.reference === tokenReference(dep.token !) ||\n            this.viewContext.viewProviders.get(tokenReference(dep.token !)) != null) {\n          result = dep;\n        } else {\n          result = dep.isOptional ? {isValue: true, value: null} : null;\n        }\n      }\n    }\n    if (!result) {\n      this.viewContext.errors.push(\n          new ProviderError(`No provider for ${tokenName(dep.token!)}`, this._sourceSpan));\n    }\n    return result;\n  }\n}\n\n\nexport class NgModuleProviderAnalyzer {\n  private _transformedProviders = new Map<any, ProviderAst>();\n  private _seenProviders = new Map<any, boolean>();\n  private _allProviders: Map<any, ProviderAst>;\n  private _errors: ProviderError[] = [];\n\n  constructor(\n      private reflector: CompileReflector, ngModule: CompileNgModuleMetadata,\n      extraProviders: CompileProviderMetadata[], sourceSpan: ParseSourceSpan) {\n    this._allProviders = new Map<any, ProviderAst>();\n    ngModule.transitiveModule.modules.forEach((ngModuleType: CompileTypeMetadata) => {\n      const ngModuleProvider = {token: {identifier: ngModuleType}, useClass: ngModuleType};\n      _resolveProviders(\n          [ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors,\n          this._allProviders, /* isModule */ true);\n    });\n    _resolveProviders(\n        ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders),\n        ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders,\n        /* isModule */ false);\n  }\n\n  parse(): ProviderAst[] {\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.token, provider.eager);\n    });\n    if (this._errors.length > 0) {\n      const errorString = this._errors.join('\\n');\n      throw new Error(`Provider parse errors:\\n${errorString}`);\n    }\n    // Note: Maps keep their insertion order.\n    const lazyProviders: ProviderAst[] = [];\n    const eagerProviders: ProviderAst[] = [];\n    this._transformedProviders.forEach(provider => {\n      if (provider.eager) {\n        eagerProviders.push(provider);\n      } else {\n        lazyProviders.push(provider);\n      }\n    });\n    return lazyProviders.concat(eagerProviders);\n  }\n\n  private _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst|null {\n    const resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider) {\n      return null;\n    }\n    let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this._errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`,\n          resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const transformedProviders = resolvedProvider.providers.map((provider) => {\n      let transformedUseValue = provider.useValue;\n      let transformedUseExisting = provider.useExisting !;\n      let transformedDeps: CompileDiDependencyMetadata[] = undefined !;\n      if (provider.useExisting != null) {\n        const existingDiDep =\n            this._getDependency({token: provider.useExisting}, eager, resolvedProvider.sourceSpan);\n        if (existingDiDep.token != null) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null !;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      } else if (provider.useClass) {\n        const deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n\n  private _getDependency(\n      dep: CompileDiDependencyMetadata, eager: boolean = false,\n      requestorSourceSpan: ParseSourceSpan): CompileDiDependencyMetadata {\n    let foundLocal = false;\n    if (!dep.isSkipSelf && dep.token != null) {\n      // access the injector\n      if (tokenReference(dep.token) ===\n              this.reflector.resolveExternalReference(Identifiers.Injector) ||\n          tokenReference(dep.token) ===\n              this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) {\n        foundLocal = true;\n        // access providers\n      } else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {\n        foundLocal = true;\n      }\n    }\n    return dep;\n  }\n}\n\nfunction _transformProvider(\n    provider: CompileProviderMetadata,\n    {useExisting, useValue, deps}:\n        {useExisting: CompileTokenMetadata, useValue: any, deps: CompileDiDependencyMetadata[]}) {\n  return {\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  };\n}\n\nfunction _transformProviderAst(\n    provider: ProviderAst,\n    {eager, providers}: {eager: boolean, providers: CompileProviderMetadata[]}): ProviderAst {\n  return new ProviderAst(\n      provider.token, provider.multiProvider, provider.eager || eager, providers,\n      provider.providerType, provider.lifecycleHooks, provider.sourceSpan, provider.isModule);\n}\n\nfunction _resolveProvidersFromDirectives(\n    directives: CompileDirectiveSummary[], sourceSpan: ParseSourceSpan,\n    targetErrors: ParseError[]): Map<any, ProviderAst> {\n  const providersByToken = new Map<any, ProviderAst>();\n  directives.forEach((directive) => {\n    const dirProvider:\n        CompileProviderMetadata = {token: {identifier: directive.type}, useClass: directive.type};\n    _resolveProviders(\n        [dirProvider],\n        directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true,\n        sourceSpan, targetErrors, providersByToken, /* isModule */ false);\n  });\n\n  // Note: directives need to be able to overwrite providers of a component!\n  const directivesWithComponentFirst =\n      directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach((directive) => {\n    _resolveProviders(\n        directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors,\n        providersByToken, /* isModule */ false);\n    _resolveProviders(\n        directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors,\n        providersByToken, /* isModule */ false);\n  });\n  return providersByToken;\n}\n\nfunction _resolveProviders(\n    providers: CompileProviderMetadata[], providerType: ProviderAstType, eager: boolean,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProvidersByToken: Map<any, ProviderAst>, isModule: boolean) {\n  providers.forEach((provider) => {\n    let resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n    if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {\n      targetErrors.push(new ProviderError(\n          `Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`,\n          sourceSpan));\n    }\n    if (!resolvedProvider) {\n      const lifecycleHooks = provider.token.identifier &&\n              (<CompileTypeMetadata>provider.token.identifier).lifecycleHooks ?\n          (<CompileTypeMetadata>provider.token.identifier).lifecycleHooks :\n          [];\n      const isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);\n      resolvedProvider = new ProviderAst(\n          provider.token, !!provider.multi, eager || isUseValue, [provider], providerType,\n          lifecycleHooks, sourceSpan, isModule);\n      targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        resolvedProvider.providers.length = 0;\n      }\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n\n\nfunction _getViewQueries(component: CompileDirectiveMetadata): Map<any, QueryWithId[]> {\n  // Note: queries start with id 1 so we can use the number in a Bloom filter!\n  let viewQueryId = 1;\n  const viewQueries = new Map<any, QueryWithId[]>();\n  if (component.viewQueries) {\n    component.viewQueries.forEach(\n        (query) => _addQueryToTokenMap(viewQueries, {meta: query, queryId: viewQueryId++}));\n  }\n  return viewQueries;\n}\n\nfunction _getContentQueries(\n    contentQueryStartId: number, directives: CompileDirectiveSummary[]): Map<any, QueryWithId[]> {\n  let contentQueryId = contentQueryStartId;\n  const contentQueries = new Map<any, QueryWithId[]>();\n  directives.forEach((directive, directiveIndex) => {\n    if (directive.queries) {\n      directive.queries.forEach(\n          (query) => _addQueryToTokenMap(contentQueries, {meta: query, queryId: contentQueryId++}));\n    }\n  });\n  return contentQueries;\n}\n\nfunction _addQueryToTokenMap(map: Map<any, QueryWithId[]>, query: QueryWithId) {\n  query.meta.selectors.forEach((token: CompileTokenMetadata) => {\n    let entry = map.get(tokenReference(token));\n    if (!entry) {\n      entry = [];\n      map.set(tokenReference(token), entry);\n    }\n    entry.push(query);\n  });\n}\n"],"sourceRoot":""}