{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/static_symbol.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAQA;;;;;AAKA,YAAA,eAAA,aAAA,YAAA;AACE,qBAAA,YAAA,CAAmB,QAAnB,EAA4C,IAA5C,EAAiE,OAAjE,EAAkF;AAA/D,qBAAA,QAAA,GAAA,QAAA;AAAyB,qBAAA,IAAA,GAAA,IAAA;AAAqB,qBAAA,OAAA,GAAA,OAAA;AAAqB;AAEtF,yBAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,oBAAI,KAAK,OAAL,CAAa,MAAjB,EAAyB;AACvB,0BAAM,IAAI,KAAJ,CACF,6DAA2D,KAAK,SAAL,CAAe,IAAf,CAA3D,GAA+E,GAD7E,CAAN;AAED;AACF,aALD;AAMF,mBAAA,YAAA;AAAC,SATD,EAAA;AAAa,gBAAA,YAAA,GAAA,YAAA;AAWb;;;;AAIA,YAAA,oBAAA,aAAA,YAAA;AAAA,qBAAA,iBAAA,GAAA;AACU,qBAAA,KAAA,GAAQ,IAAI,GAAJ,EAAR;AAaT;AAXC,8BAAA,SAAA,CAAA,GAAA,GAAA,UAAI,eAAJ,EAA6B,IAA7B,EAA2C,OAA3C,EAA6D;AAC3D,0BAAU,WAAW,EAArB;AACA,oBAAM,eAAe,QAAQ,MAAR,GAAiB,MAAK,QAAQ,IAAR,CAAa,GAAb,CAAtB,GAA4C,EAAjE;AACA,oBAAM,MAAM,OAAI,eAAJ,GAAmB,KAAnB,GAAwB,IAAxB,GAA+B,YAA3C;AACA,oBAAI,SAAS,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,CAAb;AACA,oBAAI,CAAC,MAAL,EAAa;AACX,6BAAS,IAAI,YAAJ,CAAiB,eAAjB,EAAkC,IAAlC,EAAwC,OAAxC,CAAT;AACA,yBAAK,KAAL,CAAW,GAAX,CAAe,GAAf,EAAoB,MAApB;AACD;AACD,uBAAO,MAAP;AACD,aAVD;AAWF,mBAAA,iBAAA;AAAC,SAdD,EAAA;AAAa,gBAAA,iBAAA,GAAA,iBAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nexport class StaticSymbol {\n  constructor(public filePath: string, public name: string, public members: string[]) {}\n\n  assertNoMembers() {\n    if (this.members.length) {\n      throw new Error(\n          `Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);\n    }\n  }\n}\n\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nexport class StaticSymbolCache {\n  private cache = new Map<string, StaticSymbol>();\n\n  get(declarationFile: string, name: string, members?: string[]): StaticSymbol {\n    members = members || [];\n    const memberSuffix = members.length ? `.${ members.join('.')}` : '';\n    const key = `\"${declarationFile}\".${name}${memberSuffix}`;\n    let result = this.cache.get(key);\n    if (!result) {\n      result = new StaticSymbol(declarationFile, name, members);\n      this.cache.set(key, result);\n    }\n    return result;\n  }\n}"],"sourceRoot":""}