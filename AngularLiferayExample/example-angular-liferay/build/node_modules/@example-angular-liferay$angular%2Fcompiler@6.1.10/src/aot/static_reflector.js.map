{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/static_reflector.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileSummaryKind} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {MetadataFactory, createAttribute, createComponent, createContentChild, createContentChildren, createDirective, createHost, createHostBinding, createHostListener, createInject, createInjectable, createInput, createNgModule, createOptional, createOutput, createPipe, createSelf, createSkipSelf, createViewChild, createViewChildren} from '../core';\nimport * as o from '../output/output_ast';\nimport {SummaryResolver} from '../summary_resolver';\nimport {syntaxError} from '../util';\n\nimport {FormattedMessageChain, formattedError} from './formatted_error';\nimport {StaticSymbol} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\n\nconst ANGULAR_CORE = '@angular/core';\nconst ANGULAR_ROUTER = '@angular/router';\n\nconst HIDDEN_KEY = /^\\$.*\\$$/;\n\nconst IGNORE = {\n  __symbolic: 'ignore'\n};\n\nconst USE_VALUE = 'useValue';\nconst PROVIDE = 'provide';\nconst REFERENCE_SET = new Set([USE_VALUE, 'useFactory', 'data', 'id', 'loadChildren']);\nconst TYPEGUARD_POSTFIX = 'TypeGuard';\nconst USE_IF = 'UseIf';\n\nfunction shouldIgnore(value: any): boolean {\n  return value && value.__symbolic == 'ignore';\n}\n\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nexport class StaticReflector implements CompileReflector {\n  private annotationCache = new Map<StaticSymbol, any[]>();\n  private shallowAnnotationCache = new Map<StaticSymbol, any[]>();\n  private propertyCache = new Map<StaticSymbol, {[key: string]: any[]}>();\n  private parameterCache = new Map<StaticSymbol, any[]>();\n  private methodCache = new Map<StaticSymbol, {[key: string]: boolean}>();\n  private staticCache = new Map<StaticSymbol, string[]>();\n  private conversionMap = new Map<StaticSymbol, (context: StaticSymbol, args: any[]) => any>();\n  private resolvedExternalReferences = new Map<string, StaticSymbol>();\n  // TODO(issue/24571): remove '!'.\n  private injectionToken !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  private opaqueToken !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  ROUTES !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  private ANALYZE_FOR_ENTRY_COMPONENTS !: StaticSymbol;\n  private annotationForParentClassWithSummaryKind =\n      new Map<CompileSummaryKind, MetadataFactory<any>[]>();\n\n  constructor(\n      private summaryResolver: SummaryResolver<StaticSymbol>,\n      private symbolResolver: StaticSymbolResolver,\n      knownMetadataClasses: {name: string, filePath: string, ctor: any}[] = [],\n      knownMetadataFunctions: {name: string, filePath: string, fn: any}[] = [],\n      private errorRecorder?: (error: any, fileName?: string) => void) {\n    this.initializeConversionMap();\n    knownMetadataClasses.forEach(\n        (kc) => this._registerDecoratorOrConstructor(\n            this.getStaticSymbol(kc.filePath, kc.name), kc.ctor));\n    knownMetadataFunctions.forEach(\n        (kf) => this._registerFunction(this.getStaticSymbol(kf.filePath, kf.name), kf.fn));\n    this.annotationForParentClassWithSummaryKind.set(\n        CompileSummaryKind.Directive, [createDirective, createComponent]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\n    this.annotationForParentClassWithSummaryKind.set(\n        CompileSummaryKind.Injectable,\n        [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\n  }\n\n  componentModuleUrl(typeOrFunc: StaticSymbol): string {\n    const staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n    return this.symbolResolver.getResourcePath(staticSymbol);\n  }\n\n  resolveExternalReference(ref: o.ExternalReference, containingFile?: string): StaticSymbol {\n    let key: string|undefined = undefined;\n    if (!containingFile) {\n      key = `${ref.moduleName}:${ref.name}`;\n      const declarationSymbol = this.resolvedExternalReferences.get(key);\n      if (declarationSymbol) return declarationSymbol;\n    }\n    const refSymbol =\n        this.symbolResolver.getSymbolByModule(ref.moduleName !, ref.name !, containingFile);\n    const declarationSymbol = this.findSymbolDeclaration(refSymbol);\n    if (!containingFile) {\n      this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, ref.moduleName !);\n      this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\n    }\n    if (key) {\n      this.resolvedExternalReferences.set(key, declarationSymbol);\n    }\n    return declarationSymbol;\n  }\n\n  findDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol {\n    return this.findSymbolDeclaration(\n        this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n  }\n\n  tryFindDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol {\n    return this.symbolResolver.ignoreErrorsFor(\n        () => this.findDeclaration(moduleUrl, name, containingFile));\n  }\n\n  findSymbolDeclaration(symbol: StaticSymbol): StaticSymbol {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n    if (resolvedSymbol) {\n      let resolvedMetadata = resolvedSymbol.metadata;\n      if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\n        resolvedMetadata = resolvedMetadata.symbol;\n      }\n      if (resolvedMetadata instanceof StaticSymbol) {\n        return this.findSymbolDeclaration(resolvedSymbol.metadata);\n      }\n    }\n    return symbol;\n  }\n\n  public tryAnnotations(type: StaticSymbol): any[] {\n    const originalRecorder = this.errorRecorder;\n    this.errorRecorder = (error: any, fileName: string) => {};\n    try {\n      return this.annotations(type);\n    } finally {\n      this.errorRecorder = originalRecorder;\n    }\n  }\n\n  public annotations(type: StaticSymbol): any[] {\n    return this._annotations(\n        type, (type: StaticSymbol, decorators: any) => this.simplify(type, decorators),\n        this.annotationCache);\n  }\n\n  public shallowAnnotations(type: StaticSymbol): any[] {\n    return this._annotations(\n        type, (type: StaticSymbol, decorators: any) => this.simplify(type, decorators, true),\n        this.shallowAnnotationCache);\n  }\n\n  private _annotations(\n      type: StaticSymbol, simplify: (type: StaticSymbol, decorators: any) => any,\n      annotationCache: Map<StaticSymbol, any[]>): any[] {\n    let annotations = annotationCache.get(type);\n    if (!annotations) {\n      annotations = [];\n      const classMetadata = this.getTypeMetadata(type);\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentAnnotations = this.annotations(parentType);\n        annotations.push(...parentAnnotations);\n      }\n      let ownAnnotations: any[] = [];\n      if (classMetadata['decorators']) {\n        ownAnnotations = simplify(type, classMetadata['decorators']);\n        if (ownAnnotations) {\n          annotations.push(...ownAnnotations);\n        }\n      }\n      if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&\n          this.summaryResolver.isLibraryFile(parentType.filePath)) {\n        const summary = this.summaryResolver.resolveSummary(parentType);\n        if (summary && summary.type) {\n          const requiredAnnotationTypes =\n              this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind !) !;\n          const typeHasRequiredAnnotation = requiredAnnotationTypes.some(\n              (requiredType) => ownAnnotations.some(ann => requiredType.isTypeOf(ann)));\n          if (!typeHasRequiredAnnotation) {\n            this.reportError(\n                formatMetadataError(\n                    metadataError(\n                        `Class ${type.name} in ${type.filePath} extends from a ${CompileSummaryKind[summary.type.summaryKind!]} in another compilation unit without duplicating the decorator`,\n                        /* summary */ undefined,\n                        `Please add a ${requiredAnnotationTypes.map((type) => type.ngMetadataName).join(' or ')} decorator to the class`),\n                    type),\n                type);\n          }\n        }\n      }\n      annotationCache.set(type, annotations.filter(ann => !!ann));\n    }\n    return annotations;\n  }\n\n  public propMetadata(type: StaticSymbol): {[key: string]: any[]} {\n    let propMetadata = this.propertyCache.get(type);\n    if (!propMetadata) {\n      const classMetadata = this.getTypeMetadata(type);\n      propMetadata = {};\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentPropMetadata = this.propMetadata(parentType);\n        Object.keys(parentPropMetadata).forEach((parentProp) => {\n          propMetadata ![parentProp] = parentPropMetadata[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach((propName) => {\n        const propData = members[propName];\n        const prop = (<any[]>propData)\n                         .find(a => a['__symbolic'] == 'property' || a['__symbolic'] == 'method');\n        const decorators: any[] = [];\n        if (propMetadata ![propName]) {\n          decorators.push(...propMetadata ![propName]);\n        }\n        propMetadata ![propName] = decorators;\n        if (prop && prop['decorators']) {\n          decorators.push(...this.simplify(type, prop['decorators']));\n        }\n      });\n      this.propertyCache.set(type, propMetadata);\n    }\n    return propMetadata;\n  }\n\n  public parameters(type: StaticSymbol): any[] {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(`parameters received ${JSON.stringify(type)} which is not a StaticSymbol`),\n          type);\n      return [];\n    }\n    try {\n      let parameters = this.parameterCache.get(type);\n      if (!parameters) {\n        const classMetadata = this.getTypeMetadata(type);\n        const parentType = this.findParentType(type, classMetadata);\n        const members = classMetadata ? classMetadata['members'] : null;\n        const ctorData = members ? members['__ctor__'] : null;\n        if (ctorData) {\n          const ctor = (<any[]>ctorData).find(a => a['__symbolic'] == 'constructor');\n          const rawParameterTypes = <any[]>ctor['parameters'] || [];\n          const parameterDecorators = <any[]>this.simplify(type, ctor['parameterDecorators'] || []);\n          parameters = [];\n          rawParameterTypes.forEach((rawParamType, index) => {\n            const nestedResult: any[] = [];\n            const paramType = this.trySimplify(type, rawParamType);\n            if (paramType) nestedResult.push(paramType);\n            const decorators = parameterDecorators ? parameterDecorators[index] : null;\n            if (decorators) {\n              nestedResult.push(...decorators);\n            }\n            parameters !.push(nestedResult);\n          });\n        } else if (parentType) {\n          parameters = this.parameters(parentType);\n        }\n        if (!parameters) {\n          parameters = [];\n        }\n        this.parameterCache.set(type, parameters);\n      }\n      return parameters;\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  private _methodNames(type: any): {[key: string]: boolean} {\n    let methodNames = this.methodCache.get(type);\n    if (!methodNames) {\n      const classMetadata = this.getTypeMetadata(type);\n      methodNames = {};\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentMethodNames = this._methodNames(parentType);\n        Object.keys(parentMethodNames).forEach((parentProp) => {\n          methodNames ![parentProp] = parentMethodNames[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach((propName) => {\n        const propData = members[propName];\n        const isMethod = (<any[]>propData).some(a => a['__symbolic'] == 'method');\n        methodNames ![propName] = methodNames ![propName] || isMethod;\n      });\n      this.methodCache.set(type, methodNames);\n    }\n    return methodNames;\n  }\n\n  private _staticMembers(type: StaticSymbol): string[] {\n    let staticMembers = this.staticCache.get(type);\n    if (!staticMembers) {\n      const classMetadata = this.getTypeMetadata(type);\n      const staticMemberData = classMetadata['statics'] || {};\n      staticMembers = Object.keys(staticMemberData);\n      this.staticCache.set(type, staticMembers);\n    }\n    return staticMembers;\n  }\n\n\n  private findParentType(type: StaticSymbol, classMetadata: any): StaticSymbol|undefined {\n    const parentType = this.trySimplify(type, classMetadata['extends']);\n    if (parentType instanceof StaticSymbol) {\n      return parentType;\n    }\n  }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(\n              `hasLifecycleHook received ${JSON.stringify(type)} which is not a StaticSymbol`),\n          type);\n    }\n    try {\n      return !!this._methodNames(type)[lcProperty];\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  guards(type: any): {[key: string]: StaticSymbol} {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(`guards received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n      return {};\n    }\n    const staticMembers = this._staticMembers(type);\n    const result: {[key: string]: StaticSymbol} = {};\n    for (let name of staticMembers) {\n      if (name.endsWith(TYPEGUARD_POSTFIX)) {\n        let property = name.substr(0, name.length - TYPEGUARD_POSTFIX.length);\n        let value: any;\n        if (property.endsWith(USE_IF)) {\n          property = name.substr(0, property.length - USE_IF.length);\n          value = USE_IF;\n        } else {\n          value = this.getStaticSymbol(type.filePath, type.name, [name]);\n        }\n        result[property] = value;\n      }\n    }\n    return result;\n  }\n\n  private _registerDecoratorOrConstructor(type: StaticSymbol, ctor: any): void {\n    this.conversionMap.set(type, (context: StaticSymbol, args: any[]) => new ctor(...args));\n  }\n\n  private _registerFunction(type: StaticSymbol, fn: any): void {\n    this.conversionMap.set(type, (context: StaticSymbol, args: any[]) => fn.apply(undefined, args));\n  }\n\n  private initializeConversionMap(): void {\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\n    this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n    this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n    this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\n    this.ANALYZE_FOR_ENTRY_COMPONENTS =\n        this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule);\n\n    // Note: Some metadata classes can be used directly with Provider.deps.\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n  }\n\n  /**\n   * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n   * All types passed to the StaticResolver should be pseudo-types returned by this method.\n   *\n   * @param declarationFile the absolute path of the file where the symbol is declared\n   * @param name the name of the type.\n   */\n  getStaticSymbol(declarationFile: string, name: string, members?: string[]): StaticSymbol {\n    return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n  }\n\n  /**\n   * Simplify but discard any errors\n   */\n  private trySimplify(context: StaticSymbol, value: any): any {\n    const originalRecorder = this.errorRecorder;\n    this.errorRecorder = (error: any, fileName: string) => {};\n    const result = this.simplify(context, value);\n    this.errorRecorder = originalRecorder;\n    return result;\n  }\n\n  /** @internal */\n  public simplify(context: StaticSymbol, value: any, lazy: boolean = false): any {\n    const self = this;\n    let scope = BindingScope.empty;\n    const calling = new Map<StaticSymbol, boolean>();\n    const rootContext = context;\n\n    function simplifyInContext(\n        context: StaticSymbol, value: any, depth: number, references: number): any {\n      function resolveReferenceValue(staticSymbol: StaticSymbol): any {\n        const resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n        return resolvedSymbol ? resolvedSymbol.metadata : null;\n      }\n\n      function simplifyEagerly(value: any): any {\n        return simplifyInContext(context, value, depth, 0);\n      }\n\n      function simplifyLazily(value: any): any {\n        return simplifyInContext(context, value, depth, references + 1);\n      }\n\n      function simplifyNested(nestedContext: StaticSymbol, value: any): any {\n        if (nestedContext === context) {\n          // If the context hasn't changed let the exception propagate unmodified.\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        }\n        try {\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        } catch (e) {\n          if (isMetadataError(e)) {\n            // Propagate the message text up but add a message to the chain that explains how we got\n            // here.\n            // e.chain implies e.symbol\n            const summaryMsg = e.chain ? 'references \\'' + e.symbol !.name + '\\'' : errorSummary(e);\n            const summary = `'${nestedContext.name}' ${summaryMsg}`;\n            const chain = {message: summary, position: e.position, next: e.chain};\n            // TODO(chuckj): retrieve the position information indirectly from the collectors node\n            // map if the metadata is from a .ts file.\n            self.error(\n                {\n                  message: e.message,\n                  advise: e.advise,\n                  context: e.context, chain,\n                  symbol: nestedContext\n                },\n                context);\n          } else {\n            // It is probably an internal error.\n            throw e;\n          }\n        }\n      }\n\n      function simplifyCall(\n          functionSymbol: StaticSymbol, targetFunction: any, args: any[], targetExpression: any) {\n        if (targetFunction && targetFunction['__symbolic'] == 'function') {\n          if (calling.get(functionSymbol)) {\n            self.error(\n                {\n                  message: 'Recursion is not supported',\n                  summary: `called '${functionSymbol.name}' recursively`,\n                  value: targetFunction\n                },\n                functionSymbol);\n          }\n          try {\n            const value = targetFunction['value'];\n            if (value && (depth != 0 || value.__symbolic != 'error')) {\n              const parameters: string[] = targetFunction['parameters'];\n              const defaults: any[] = targetFunction.defaults;\n              args = args.map(arg => simplifyNested(context, arg))\n                         .map(arg => shouldIgnore(arg) ? undefined : arg);\n              if (defaults && defaults.length > args.length) {\n                args.push(...defaults.slice(args.length).map((value: any) => simplify(value)));\n              }\n              calling.set(functionSymbol, true);\n              const functionScope = BindingScope.build();\n              for (let i = 0; i < parameters.length; i++) {\n                functionScope.define(parameters[i], args[i]);\n              }\n              const oldScope = scope;\n              let result: any;\n              try {\n                scope = functionScope.done();\n                result = simplifyNested(functionSymbol, value);\n              } finally {\n                scope = oldScope;\n              }\n              return result;\n            }\n          } finally {\n            calling.delete(functionSymbol);\n          }\n        }\n\n        if (depth === 0) {\n          // If depth is 0 we are evaluating the top level expression that is describing element\n          // decorator. In this case, it is a decorator we don't understand, such as a custom\n          // non-angular decorator, and we should just ignore it.\n          return IGNORE;\n        }\n        let position: Position|undefined = undefined;\n        if (targetExpression && targetExpression.__symbolic == 'resolved') {\n          const line = targetExpression.line;\n          const character = targetExpression.character;\n          const fileName = targetExpression.fileName;\n          if (fileName != null && line != null && character != null) {\n            position = {fileName, line, column: character};\n          }\n        }\n        self.error(\n            {\n              message: FUNCTION_CALL_NOT_SUPPORTED,\n              context: functionSymbol,\n              value: targetFunction, position\n            },\n            context);\n      }\n\n      function simplify(expression: any): any {\n        if (isPrimitive(expression)) {\n          return expression;\n        }\n        if (expression instanceof Array) {\n          const result: any[] = [];\n          for (const item of (<any>expression)) {\n            // Check for a spread expression\n            if (item && item.__symbolic === 'spread') {\n              // We call with references as 0 because we require the actual value and cannot\n              // tolerate a reference here.\n              const spreadArray = simplifyEagerly(item.expression);\n              if (Array.isArray(spreadArray)) {\n                for (const spreadItem of spreadArray) {\n                  result.push(spreadItem);\n                }\n                continue;\n              }\n            }\n            const value = simplify(item);\n            if (shouldIgnore(value)) {\n              continue;\n            }\n            result.push(value);\n          }\n          return result;\n        }\n        if (expression instanceof StaticSymbol) {\n          // Stop simplification at builtin symbols or if we are in a reference context and\n          // the symbol doesn't have members.\n          if (expression === self.injectionToken || self.conversionMap.has(expression) ||\n              (references > 0 && !expression.members.length)) {\n            return expression;\n          } else {\n            const staticSymbol = expression;\n            const declarationValue = resolveReferenceValue(staticSymbol);\n            if (declarationValue != null) {\n              return simplifyNested(staticSymbol, declarationValue);\n            } else {\n              return staticSymbol;\n            }\n          }\n        }\n        if (expression) {\n          if (expression['__symbolic']) {\n            let staticSymbol: StaticSymbol;\n            switch (expression['__symbolic']) {\n              case 'binop':\n                let left = simplify(expression['left']);\n                if (shouldIgnore(left)) return left;\n                let right = simplify(expression['right']);\n                if (shouldIgnore(right)) return right;\n                switch (expression['operator']) {\n                  case '&&':\n                    return left && right;\n                  case '||':\n                    return left || right;\n                  case '|':\n                    return left | right;\n                  case '^':\n                    return left ^ right;\n                  case '&':\n                    return left & right;\n                  case '==':\n                    return left == right;\n                  case '!=':\n                    return left != right;\n                  case '===':\n                    return left === right;\n                  case '!==':\n                    return left !== right;\n                  case '<':\n                    return left < right;\n                  case '>':\n                    return left > right;\n                  case '<=':\n                    return left <= right;\n                  case '>=':\n                    return left >= right;\n                  case '<<':\n                    return left << right;\n                  case '>>':\n                    return left >> right;\n                  case '+':\n                    return left + right;\n                  case '-':\n                    return left - right;\n                  case '*':\n                    return left * right;\n                  case '/':\n                    return left / right;\n                  case '%':\n                    return left % right;\n                }\n                return null;\n              case 'if':\n                let condition = simplify(expression['condition']);\n                return condition ? simplify(expression['thenExpression']) :\n                                   simplify(expression['elseExpression']);\n              case 'pre':\n                let operand = simplify(expression['operand']);\n                if (shouldIgnore(operand)) return operand;\n                switch (expression['operator']) {\n                  case '+':\n                    return operand;\n                  case '-':\n                    return -operand;\n                  case '!':\n                    return !operand;\n                  case '~':\n                    return ~operand;\n                }\n                return null;\n              case 'index':\n                let indexTarget = simplifyEagerly(expression['expression']);\n                let index = simplifyEagerly(expression['index']);\n                if (indexTarget && isPrimitive(index)) return indexTarget[index];\n                return null;\n              case 'select':\n                const member = expression['member'];\n                let selectContext = context;\n                let selectTarget = simplify(expression['expression']);\n                if (selectTarget instanceof StaticSymbol) {\n                  const members = selectTarget.members.concat(member);\n                  selectContext =\n                      self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                  const declarationValue = resolveReferenceValue(selectContext);\n                  if (declarationValue != null) {\n                    return simplifyNested(selectContext, declarationValue);\n                  } else {\n                    return selectContext;\n                  }\n                }\n                if (selectTarget && isPrimitive(member))\n                  return simplifyNested(selectContext, selectTarget[member]);\n                return null;\n              case 'reference':\n                // Note: This only has to deal with variable references, as symbol references have\n                // been converted into 'resolved'\n                // in the StaticSymbolResolver.\n                const name: string = expression['name'];\n                const localValue = scope.resolve(name);\n                if (localValue != BindingScope.missing) {\n                  return localValue;\n                }\n                break;\n              case 'resolved':\n                try {\n                  return simplify(expression.symbol);\n                } catch (e) {\n                  // If an error is reported evaluating the symbol record the position of the\n                  // reference in the error so it can\n                  // be reported in the error message generated from the exception.\n                  if (isMetadataError(e) && expression.fileName != null &&\n                      expression.line != null && expression.character != null) {\n                    e.position = {\n                      fileName: expression.fileName,\n                      line: expression.line,\n                      column: expression.character\n                    };\n                  }\n                  throw e;\n                }\n              case 'class':\n                return context;\n              case 'function':\n                return context;\n              case 'new':\n              case 'call':\n                // Determine if the function is a built-in conversion\n                staticSymbol = simplifyInContext(\n                    context, expression['expression'], depth + 1, /* references */ 0);\n                if (staticSymbol instanceof StaticSymbol) {\n                  if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                    // if somebody calls new InjectionToken, don't create an InjectionToken,\n                    // but rather return the symbol to which the InjectionToken is assigned to.\n\n                    // OpaqueToken is supported too as it is required by the language service to\n                    // support v4 and prior versions of Angular.\n                    return context;\n                  }\n                  const argExpressions: any[] = expression['arguments'] || [];\n                  let converter = self.conversionMap.get(staticSymbol);\n                  if (converter) {\n                    const args = argExpressions.map(arg => simplifyNested(context, arg))\n                                     .map(arg => shouldIgnore(arg) ? undefined : arg);\n                    return converter(context, args);\n                  } else {\n                    // Determine if the function is one we can simplify.\n                    const targetFunction = resolveReferenceValue(staticSymbol);\n                    return simplifyCall(\n                        staticSymbol, targetFunction, argExpressions, expression['expression']);\n                  }\n                }\n                return IGNORE;\n              case 'error':\n                let message = expression.message;\n                if (expression['line'] != null) {\n                  self.error(\n                      {\n                        message,\n                        context: expression.context,\n                        value: expression,\n                        position: {\n                          fileName: expression['fileName'],\n                          line: expression['line'],\n                          column: expression['character']\n                        }\n                      },\n                      context);\n                } else {\n                  self.error({message, context: expression.context}, context);\n                }\n                return IGNORE;\n              case 'ignore':\n                return expression;\n            }\n            return null;\n          }\n          return mapStringMap(expression, (value, name) => {\n            if (REFERENCE_SET.has(name)) {\n              if (name === USE_VALUE && PROVIDE in expression) {\n                // If this is a provider expression, check for special tokens that need the value\n                // during analysis.\n                const provide = simplify(expression.provide);\n                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\n                  return simplify(value);\n                }\n              }\n              return simplifyLazily(value);\n            }\n            return simplify(value);\n          });\n        }\n        return IGNORE;\n      }\n\n      return simplify(value);\n    }\n\n    let result: any;\n    try {\n      result = simplifyInContext(context, value, 0, lazy ? 1 : 0);\n    } catch (e) {\n      if (this.errorRecorder) {\n        this.reportError(e, context);\n      } else {\n        throw formatMetadataError(e, context);\n      }\n    }\n    if (shouldIgnore(result)) {\n      return undefined;\n    }\n    return result;\n  }\n\n  private getTypeMetadata(type: StaticSymbol): {[key: string]: any} {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n    return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\n                                                       {__symbolic: 'class'};\n  }\n\n  private reportError(error: Error, context: StaticSymbol, path?: string) {\n    if (this.errorRecorder) {\n      this.errorRecorder(\n          formatMetadataError(error, context), (context && context.filePath) || path);\n    } else {\n      throw error;\n    }\n  }\n\n  private error(\n      {message, summary, advise, position, context, value, symbol, chain}: {\n        message: string,\n        summary?: string,\n        advise?: string,\n        position?: Position,\n        context?: any,\n        value?: any,\n        symbol?: StaticSymbol,\n        chain?: MetadataMessageChain\n      },\n      reportingContext: StaticSymbol) {\n    this.reportError(\n        metadataError(message, summary, advise, position, symbol, context, chain),\n        reportingContext);\n  }\n}\n\ninterface Position {\n  fileName: string;\n  line: number;\n  column: number;\n}\n\ninterface MetadataMessageChain {\n  message: string;\n  summary?: string;\n  position?: Position;\n  context?: any;\n  symbol?: StaticSymbol;\n  next?: MetadataMessageChain;\n}\n\ntype MetadataError = Error & {\n  position?: Position;\n  advise?: string;\n  summary?: string;\n  context?: any;\n  symbol?: StaticSymbol;\n  chain?: MetadataMessageChain;\n};\n\nconst METADATA_ERROR = 'ngMetadataError';\n\nfunction metadataError(\n    message: string, summary?: string, advise?: string, position?: Position, symbol?: StaticSymbol,\n    context?: any, chain?: MetadataMessageChain): MetadataError {\n  const error = syntaxError(message) as MetadataError;\n  (error as any)[METADATA_ERROR] = true;\n  if (advise) error.advise = advise;\n  if (position) error.position = position;\n  if (summary) error.summary = summary;\n  if (context) error.context = context;\n  if (chain) error.chain = chain;\n  if (symbol) error.symbol = symbol;\n  return error;\n}\n\nfunction isMetadataError(error: Error): error is MetadataError {\n  return !!(error as any)[METADATA_ERROR];\n}\n\nconst REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\nconst VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\nconst DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\nconst COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\nconst FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\nconst REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\nconst LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\n\nfunction expandedMessage(message: string, context: any): string {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `References to a non-exported class are not supported in decorators but ${context.className} was referenced.`;\n      }\n      break;\n    case VARIABLE_NOT_INITIALIZED:\n      return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\n    case COULD_NOT_RESOLVE_TYPE:\n      if (context && context.typeName) {\n        return `Could not resolve type ${context.typeName}`;\n      }\n      break;\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (context && context.name) {\n        return `Function calls are not supported in decorators but '${context.name}' was called`;\n      }\n      return 'Function calls are not supported in decorators';\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Reference to a local (non-exported) symbols are not supported in decorators but '${context.name}' was referenced`;\n      }\n      break;\n    case LAMBDA_NOT_SUPPORTED:\n      return `Function expressions are not supported in decorators`;\n  }\n  return message;\n}\n\nfunction messageAdvise(message: string, context: any): string|undefined {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `Consider exporting '${context.className}'`;\n      }\n      break;\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Consider simplifying to avoid destructuring';\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Consider exporting '${context.name}'`;\n      }\n      break;\n    case LAMBDA_NOT_SUPPORTED:\n      return `Consider changing the function expression into an exported function`;\n  }\n  return undefined;\n}\n\nfunction errorSummary(error: MetadataError): string {\n  if (error.summary) {\n    return error.summary;\n  }\n  switch (error.message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (error.context && error.context.className) {\n        return `references non-exported class ${error.context.className}`;\n      }\n      break;\n    case VARIABLE_NOT_INITIALIZED:\n      return 'is not initialized';\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'is a destructured variable';\n    case COULD_NOT_RESOLVE_TYPE:\n      return 'could not be resolved';\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (error.context && error.context.name) {\n        return `calls '${error.context.name}'`;\n      }\n      return `calls a function`;\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (error.context && error.context.name) {\n        return `references local variable ${error.context.name}`;\n      }\n      return `references a local variable`;\n  }\n  return 'contains the error';\n}\n\nfunction mapStringMap(input: {[key: string]: any}, transform: (value: any, key: string) => any):\n    {[key: string]: any} {\n  if (!input) return {};\n  const result: {[key: string]: any} = {};\n  Object.keys(input).forEach((key) => {\n    const value = transform(input[key], key);\n    if (!shouldIgnore(value)) {\n      if (HIDDEN_KEY.test(key)) {\n        Object.defineProperty(result, key, {enumerable: false, configurable: true, value: value});\n      } else {\n        result[key] = value;\n      }\n    }\n  });\n  return result;\n}\n\nfunction isPrimitive(o: any): boolean {\n  return o === null || (typeof o !== 'function' && typeof o !== 'object');\n}\n\ninterface BindingScopeBuilder {\n  define(name: string, value: any): BindingScopeBuilder;\n  done(): BindingScope;\n}\n\nabstract class BindingScope {\n  abstract resolve(name: string): any;\n  public static missing = {};\n  public static empty: BindingScope = {resolve: name => BindingScope.missing};\n\n  public static build(): BindingScopeBuilder {\n    const current = new Map<string, any>();\n    return {\n      define: function(name, value) {\n        current.set(name, value);\n        return this;\n      },\n      done: function() {\n        return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;\n      }\n    };\n  }\n}\n\nclass PopulatedScope extends BindingScope {\n  constructor(private bindings: Map<string, any>) { super(); }\n\n  resolve(name: string): any {\n    return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;\n  }\n}\n\nfunction formatMetadataMessageChain(\n    chain: MetadataMessageChain, advise: string | undefined): FormattedMessageChain {\n  const expanded = expandedMessage(chain.message, chain.context);\n  const nesting = chain.symbol ? ` in '${chain.symbol.name}'` : '';\n  const message = `${expanded}${nesting}`;\n  const position = chain.position;\n  const next: FormattedMessageChain|undefined = chain.next ?\n      formatMetadataMessageChain(chain.next, advise) :\n      advise ? {message: advise} : undefined;\n  return {message, position, next};\n}\n\nfunction formatMetadataError(e: Error, context: StaticSymbol): Error {\n  if (isMetadataError(e)) {\n    // Produce a formatted version of the and leaving enough information in the original error\n    // to recover the formatting information to eventually produce a diagnostic error message.\n    const position = e.position;\n    const chain: MetadataMessageChain = {\n      message: `Error during template compile of '${context.name}'`,\n      position: position,\n      next: {message: e.message, next: e.chain, context: e.context, symbol: e.symbol}\n    };\n    const advise = e.advise || messageAdvise(e.message, e.context);\n    return formattedError(formatMetadataMessageChain(chain, advise));\n  }\n  return e;\n}\n"],"sourceRoot":""}