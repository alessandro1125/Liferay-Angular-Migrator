{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/summary_serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileDirectiveMetadata, CompileDirectiveSummary, CompileNgModuleMetadata, CompileNgModuleSummary, CompilePipeMetadata, CompileProviderMetadata, CompileSummaryKind, CompileTypeMetadata, CompileTypeSummary} from '../compile_metadata';\nimport * as o from '../output/output_ast';\nimport {Summary, SummaryResolver} from '../summary_resolver';\nimport {OutputContext, ValueTransformer, ValueVisitor, visitValue} from '../util';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {ResolvedStaticSymbol, StaticSymbolResolver, unwrapResolvedMetadata} from './static_symbol_resolver';\nimport {isLoweredSymbol, ngfactoryFilePath, summaryForJitFileName, summaryForJitName} from './util';\n\nexport function serializeSummaries(\n    srcFileName: string, forJitCtx: OutputContext | null,\n    summaryResolver: SummaryResolver<StaticSymbol>, symbolResolver: StaticSymbolResolver,\n    symbols: ResolvedStaticSymbol[], types: {\n      summary: CompileTypeSummary,\n      metadata: CompileNgModuleMetadata | CompileDirectiveMetadata | CompilePipeMetadata |\n          CompileTypeMetadata\n    }[]): {json: string, exportAs: {symbol: StaticSymbol, exportAs: string}[]} {\n  const toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver, srcFileName);\n\n  // for symbols, we use everything except for the class metadata itself\n  // (we keep the statics though), as the class metadata is contained in the\n  // CompileTypeSummary.\n  symbols.forEach(\n      (resolvedSymbol) => toJsonSerializer.addSummary(\n          {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata}));\n\n  // Add type summaries.\n  types.forEach(({summary, metadata}) => {\n    toJsonSerializer.addSummary(\n        {symbol: summary.type.reference, metadata: undefined, type: summary});\n  });\n  const {json, exportAs} = toJsonSerializer.serialize();\n  if (forJitCtx) {\n    const forJitSerializer = new ForJitSerializer(forJitCtx, symbolResolver, summaryResolver);\n    types.forEach(({summary, metadata}) => { forJitSerializer.addSourceType(summary, metadata); });\n    toJsonSerializer.unprocessedSymbolSummariesBySymbol.forEach((summary) => {\n      if (summaryResolver.isLibraryFile(summary.symbol.filePath) && summary.type) {\n        forJitSerializer.addLibType(summary.type);\n      }\n    });\n    forJitSerializer.serialize(exportAs);\n  }\n  return {json, exportAs};\n}\n\nexport function deserializeSummaries(\n    symbolCache: StaticSymbolCache, summaryResolver: SummaryResolver<StaticSymbol>,\n    libraryFileName: string, json: string): {\n  moduleName: string | null,\n  summaries: Summary<StaticSymbol>[],\n  importAs: {symbol: StaticSymbol, importAs: StaticSymbol}[]\n} {\n  const deserializer = new FromJsonDeserializer(symbolCache, summaryResolver);\n  return deserializer.deserialize(libraryFileName, json);\n}\n\nexport function createForJitStub(outputCtx: OutputContext, reference: StaticSymbol) {\n  return createSummaryForJitFunction(outputCtx, reference, o.NULL_EXPR);\n}\n\nfunction createSummaryForJitFunction(\n    outputCtx: OutputContext, reference: StaticSymbol, value: o.Expression) {\n  const fnName = summaryForJitName(reference.name);\n  outputCtx.statements.push(\n      o.fn([], [new o.ReturnStatement(value)], new o.ArrayType(o.DYNAMIC_TYPE)).toDeclStmt(fnName, [\n        o.StmtModifier.Final, o.StmtModifier.Exported\n      ]));\n}\n\nconst enum SerializationFlags {\n  None = 0,\n  ResolveValue = 1,\n}\n\nclass ToJsonSerializer extends ValueTransformer {\n  // Note: This only contains symbols without members.\n  private symbols: StaticSymbol[] = [];\n  private indexBySymbol = new Map<StaticSymbol, number>();\n  private reexportedBy = new Map<StaticSymbol, StaticSymbol>();\n  // This now contains a `__symbol: number` in the place of\n  // StaticSymbols, but otherwise has the same shape as the original objects.\n  private processedSummaryBySymbol = new Map<StaticSymbol, any>();\n  private processedSummaries: any[] = [];\n  private moduleName: string|null;\n\n  unprocessedSymbolSummariesBySymbol = new Map<StaticSymbol, Summary<StaticSymbol>>();\n\n  constructor(\n      private symbolResolver: StaticSymbolResolver,\n      private summaryResolver: SummaryResolver<StaticSymbol>, private srcFileName: string) {\n    super();\n    this.moduleName = symbolResolver.getKnownModuleName(srcFileName);\n  }\n\n  addSummary(summary: Summary<StaticSymbol>) {\n    let unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);\n    let processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n    if (!unprocessedSummary) {\n      unprocessedSummary = {symbol: summary.symbol, metadata: undefined};\n      this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);\n      processedSummary = {symbol: this.processValue(summary.symbol, SerializationFlags.None)};\n      this.processedSummaries.push(processedSummary);\n      this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n    }\n    if (!unprocessedSummary.metadata && summary.metadata) {\n      let metadata = summary.metadata || {};\n      if (metadata.__symbolic === 'class') {\n        // For classes, we keep everything except their class decorators.\n        // We need to keep e.g. the ctor args, method names, method decorators\n        // so that the class can be extended in another compilation unit.\n        // We don't keep the class decorators as\n        // 1) they refer to data\n        //   that should not cause a rebuild of downstream compilation units\n        //   (e.g. inline templates of @Component, or @NgModule.declarations)\n        // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.\n        const clone: {[key: string]: any} = {};\n        Object.keys(metadata).forEach((propName) => {\n          if (propName !== 'decorators') {\n            clone[propName] = metadata[propName];\n          }\n        });\n        metadata = clone;\n      } else if (isCall(metadata)) {\n        if (!isFunctionCall(metadata) && !isMethodCallOnVariable(metadata)) {\n          // Don't store complex calls as we won't be able to simplify them anyways later on.\n          metadata = {\n            __symbolic: 'error',\n            message: 'Complex function calls are not supported.',\n          };\n        }\n      }\n      // Note: We need to keep storing ctor calls for e.g.\n      // `export const x = new InjectionToken(...)`\n      unprocessedSummary.metadata = metadata;\n      processedSummary.metadata = this.processValue(metadata, SerializationFlags.ResolveValue);\n      if (metadata instanceof StaticSymbol &&\n          this.summaryResolver.isLibraryFile(metadata.filePath)) {\n        const declarationSymbol = this.symbols[this.indexBySymbol.get(metadata) !];\n        if (!isLoweredSymbol(declarationSymbol.name)) {\n          // Note: symbols that were introduced during codegen in the user file can have a reexport\n          // if a user used `export *`. However, we can't rely on this as tsickle will change\n          // `export *` into named exports, using only the information from the typechecker.\n          // As we introduce the new symbols after typecheck, Tsickle does not know about them,\n          // and omits them when expanding `export *`.\n          // So we have to keep reexporting these symbols manually via .ngfactory files.\n          this.reexportedBy.set(declarationSymbol, summary.symbol);\n        }\n      }\n    }\n    if (!unprocessedSummary.type && summary.type) {\n      unprocessedSummary.type = summary.type;\n      // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n      // as the type summaries already contain the transitive data that they require\n      // (in a minimal way).\n      processedSummary.type = this.processValue(summary.type, SerializationFlags.None);\n      // except for reexported directives / pipes, so we need to store\n      // their summaries explicitly.\n      if (summary.type.summaryKind === CompileSummaryKind.NgModule) {\n        const ngModuleSummary = <CompileNgModuleSummary>summary.type;\n        ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach((id) => {\n          const symbol: StaticSymbol = id.reference;\n          if (this.summaryResolver.isLibraryFile(symbol.filePath) &&\n              !this.unprocessedSymbolSummariesBySymbol.has(symbol)) {\n            const summary = this.summaryResolver.resolveSummary(symbol);\n            if (summary) {\n              this.addSummary(summary);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  serialize(): {json: string, exportAs: {symbol: StaticSymbol, exportAs: string}[]} {\n    const exportAs: {symbol: StaticSymbol, exportAs: string}[] = [];\n    const json = JSON.stringify({\n      moduleName: this.moduleName,\n      summaries: this.processedSummaries,\n      symbols: this.symbols.map((symbol, index) => {\n        symbol.assertNoMembers();\n        let importAs: string|number = undefined !;\n        if (this.summaryResolver.isLibraryFile(symbol.filePath)) {\n          const reexportSymbol = this.reexportedBy.get(symbol);\n          if (reexportSymbol) {\n            importAs = this.indexBySymbol.get(reexportSymbol) !;\n          } else {\n            const summary = this.unprocessedSymbolSummariesBySymbol.get(symbol);\n            if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {\n              importAs = `${symbol.name}_${index}`;\n              exportAs.push({symbol, exportAs: importAs});\n            }\n          }\n        }\n        return {\n          __symbol: index,\n          name: symbol.name,\n          filePath: this.summaryResolver.toSummaryFileName(symbol.filePath, this.srcFileName),\n          importAs: importAs\n        };\n      })\n    });\n    return {json, exportAs};\n  }\n\n  private processValue(value: any, flags: SerializationFlags): any {\n    return visitValue(value, this, flags);\n  }\n\n  visitOther(value: any, context: any): any {\n    if (value instanceof StaticSymbol) {\n      let baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n      const index = this.visitStaticSymbol(baseSymbol, context);\n      return {__symbol: index, members: value.members};\n    }\n  }\n\n  /**\n   * Strip line and character numbers from ngsummaries.\n   * Emitting them causes white spaces changes to retrigger upstream\n   * recompilations in bazel.\n   * TODO: find out a way to have line and character numbers in errors without\n   * excessive recompilation in bazel.\n   */\n  visitStringMap(map: {[key: string]: any}, context: any): any {\n    if (map['__symbolic'] === 'resolved') {\n      return visitValue(map.symbol, this, context);\n    }\n    if (map['__symbolic'] === 'error') {\n      delete map['line'];\n      delete map['character'];\n    }\n    return super.visitStringMap(map, context);\n  }\n\n  /**\n   * Returns null if the options.resolveValue is true, and the summary for the symbol\n   * resolved to a type or could not be resolved.\n   */\n  private visitStaticSymbol(baseSymbol: StaticSymbol, flags: SerializationFlags): number {\n    let index: number|undefined|null = this.indexBySymbol.get(baseSymbol);\n    let summary: Summary<StaticSymbol>|null = null;\n    if (flags & SerializationFlags.ResolveValue &&\n        this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {\n      if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {\n        // the summary for this symbol was already added\n        // -> nothing to do.\n        return index !;\n      }\n      summary = this.loadSummary(baseSymbol);\n      if (summary && summary.metadata instanceof StaticSymbol) {\n        // The summary is a reexport\n        index = this.visitStaticSymbol(summary.metadata, flags);\n        // reset the summary as it is just a reexport, so we don't want to store it.\n        summary = null;\n      }\n    } else if (index != null) {\n      // Note: == on purpose to compare with undefined!\n      // No summary and the symbol is already added -> nothing to do.\n      return index;\n    }\n    // Note: == on purpose to compare with undefined!\n    if (index == null) {\n      index = this.symbols.length;\n      this.symbols.push(baseSymbol);\n    }\n    this.indexBySymbol.set(baseSymbol, index);\n    if (summary) {\n      this.addSummary(summary);\n    }\n    return index;\n  }\n\n  private loadSummary(symbol: StaticSymbol): Summary<StaticSymbol>|null {\n    let summary = this.summaryResolver.resolveSummary(symbol);\n    if (!summary) {\n      // some symbols might originate from a plain typescript library\n      // that just exported .d.ts and .metadata.json files, i.e. where no summary\n      // files were created.\n      const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n      if (resolvedSymbol) {\n        summary = {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata};\n      }\n    }\n    return summary;\n  }\n}\n\nclass ForJitSerializer {\n  private data: Array<{\n    summary: CompileTypeSummary,\n    metadata: CompileNgModuleMetadata|CompileDirectiveMetadata|CompilePipeMetadata|\n    CompileTypeMetadata|null,\n    isLibrary: boolean\n  }> = [];\n\n  constructor(\n      private outputCtx: OutputContext, private symbolResolver: StaticSymbolResolver,\n      private summaryResolver: SummaryResolver<StaticSymbol>) {}\n\n  addSourceType(\n      summary: CompileTypeSummary, metadata: CompileNgModuleMetadata|CompileDirectiveMetadata|\n      CompilePipeMetadata|CompileTypeMetadata) {\n    this.data.push({summary, metadata, isLibrary: false});\n  }\n\n  addLibType(summary: CompileTypeSummary) {\n    this.data.push({summary, metadata: null, isLibrary: true});\n  }\n\n  serialize(exportAsArr: {symbol: StaticSymbol, exportAs: string}[]): void {\n    const exportAsBySymbol = new Map<StaticSymbol, string>();\n    for (const {symbol, exportAs} of exportAsArr) {\n      exportAsBySymbol.set(symbol, exportAs);\n    }\n    const ngModuleSymbols = new Set<StaticSymbol>();\n\n    for (const {summary, metadata, isLibrary} of this.data) {\n      if (summary.summaryKind === CompileSummaryKind.NgModule) {\n        // collect the symbols that refer to NgModule classes.\n        // Note: we can't just rely on `summary.type.summaryKind` to determine this as\n        // we don't add the summaries of all referenced symbols when we serialize type summaries.\n        // See serializeSummaries for details.\n        ngModuleSymbols.add(summary.type.reference);\n        const modSummary = <CompileNgModuleSummary>summary;\n        for (const mod of modSummary.modules) {\n          ngModuleSymbols.add(mod.reference);\n        }\n      }\n      if (!isLibrary) {\n        const fnName = summaryForJitName(summary.type.reference.name);\n        createSummaryForJitFunction(\n            this.outputCtx, summary.type.reference,\n            this.serializeSummaryWithDeps(summary, metadata !));\n      }\n    }\n\n    ngModuleSymbols.forEach((ngModuleSymbol) => {\n      if (this.summaryResolver.isLibraryFile(ngModuleSymbol.filePath)) {\n        let exportAs = exportAsBySymbol.get(ngModuleSymbol) || ngModuleSymbol.name;\n        const jitExportAsName = summaryForJitName(exportAs);\n        this.outputCtx.statements.push(o.variable(jitExportAsName)\n                                           .set(this.serializeSummaryRef(ngModuleSymbol))\n                                           .toDeclStmt(null, [o.StmtModifier.Exported]));\n      }\n    });\n  }\n\n  private serializeSummaryWithDeps(\n      summary: CompileTypeSummary, metadata: CompileNgModuleMetadata|CompileDirectiveMetadata|\n      CompilePipeMetadata|CompileTypeMetadata): o.Expression {\n    const expressions: o.Expression[] = [this.serializeSummary(summary)];\n    let providers: CompileProviderMetadata[] = [];\n    if (metadata instanceof CompileNgModuleMetadata) {\n      expressions.push(...\n                       // For directives / pipes, we only add the declared ones,\n                       // and rely on transitively importing NgModules to get the transitive\n                       // summaries.\n                       metadata.declaredDirectives.concat(metadata.declaredPipes)\n                           .map(type => type.reference)\n                           // For modules,\n                           // we also add the summaries for modules\n                           // from libraries.\n                           // This is ok as we produce reexports for all transitive modules.\n                           .concat(metadata.transitiveModule.modules.map(type => type.reference)\n                                       .filter(ref => ref !== metadata.type.reference))\n                           .map((ref) => this.serializeSummaryRef(ref)));\n      // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,\n      // and we already have transitive modules.\n      providers = metadata.providers;\n    } else if (summary.summaryKind === CompileSummaryKind.Directive) {\n      const dirSummary = <CompileDirectiveSummary>summary;\n      providers = dirSummary.providers.concat(dirSummary.viewProviders);\n    }\n    // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for\n    // declaredDirectives / declaredPipes), as we allow\n    // providers without ctor arguments to skip the `@Injectable` decorator,\n    // i.e. we didn't generate .ngsummary.ts files for these.\n    expressions.push(\n        ...providers.filter(provider => !!provider.useClass).map(provider => this.serializeSummary({\n          summaryKind: CompileSummaryKind.Injectable, type: provider.useClass\n        } as CompileTypeSummary)));\n    return o.literalArr(expressions);\n  }\n\n  private serializeSummaryRef(typeSymbol: StaticSymbol): o.Expression {\n    const jitImportedSymbol = this.symbolResolver.getStaticSymbol(\n        summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));\n    return this.outputCtx.importExpr(jitImportedSymbol);\n  }\n\n  private serializeSummary(data: {[key: string]: any}): o.Expression {\n    const outputCtx = this.outputCtx;\n\n    class Transformer implements ValueVisitor {\n      visitArray(arr: any[], context: any): any {\n        return o.literalArr(arr.map(entry => visitValue(entry, this, context)));\n      }\n      visitStringMap(map: {[key: string]: any}, context: any): any {\n        return new o.LiteralMapExpr(Object.keys(map).map(\n            (key) => new o.LiteralMapEntry(key, visitValue(map[key], this, context), false)));\n      }\n      visitPrimitive(value: any, context: any): any { return o.literal(value); }\n      visitOther(value: any, context: any): any {\n        if (value instanceof StaticSymbol) {\n          return outputCtx.importExpr(value);\n        } else {\n          throw new Error(`Illegal State: Encountered value ${value}`);\n        }\n      }\n    }\n\n    return visitValue(data, new Transformer(), null);\n  }\n}\n\nclass FromJsonDeserializer extends ValueTransformer {\n  // TODO(issue/24571): remove '!'.\n  private symbols !: StaticSymbol[];\n\n  constructor(\n      private symbolCache: StaticSymbolCache,\n      private summaryResolver: SummaryResolver<StaticSymbol>) {\n    super();\n  }\n\n  deserialize(libraryFileName: string, json: string): {\n    moduleName: string | null,\n    summaries: Summary<StaticSymbol>[],\n    importAs: {symbol: StaticSymbol, importAs: StaticSymbol}[]\n  } {\n    const data: {moduleName: string | null, summaries: any[], symbols: any[]} = JSON.parse(json);\n    const allImportAs: {symbol: StaticSymbol, importAs: StaticSymbol}[] = [];\n    this.symbols = data.symbols.map(\n        (serializedSymbol) => this.symbolCache.get(\n            this.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName),\n            serializedSymbol.name));\n    data.symbols.forEach((serializedSymbol, index) => {\n      const symbol = this.symbols[index];\n      const importAs = serializedSymbol.importAs;\n      if (typeof importAs === 'number') {\n        allImportAs.push({symbol, importAs: this.symbols[importAs]});\n      } else if (typeof importAs === 'string') {\n        allImportAs.push(\n            {symbol, importAs: this.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs)});\n      }\n    });\n    const summaries = visitValue(data.summaries, this, null) as Summary<StaticSymbol>[];\n    return {moduleName: data.moduleName, summaries, importAs: allImportAs};\n  }\n\n  visitStringMap(map: {[key: string]: any}, context: any): any {\n    if ('__symbol' in map) {\n      const baseSymbol = this.symbols[map['__symbol']];\n      const members = map['members'];\n      return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\n                              baseSymbol;\n    } else {\n      return super.visitStringMap(map, context);\n    }\n  }\n}\n\nfunction isCall(metadata: any): boolean {\n  return metadata && metadata.__symbolic === 'call';\n}\n\nfunction isFunctionCall(metadata: any): boolean {\n  return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;\n}\n\nfunction isMethodCallOnVariable(metadata: any): boolean {\n  return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' &&\n      unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;\n}\n"],"sourceRoot":""}