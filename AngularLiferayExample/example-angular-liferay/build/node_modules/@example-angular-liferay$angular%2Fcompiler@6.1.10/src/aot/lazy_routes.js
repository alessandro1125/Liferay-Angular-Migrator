Liferay.Loader.define("@example-angular-liferay$angular/compiler@6.1.10/src/aot/lazy_routes", ['module', 'exports', 'require', 'example-angular-liferay$tslib', '@example-angular-liferay$angular/compiler/src/compile_metadata'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
            define("@angular/compiler/src/aot/lazy_routes", ["require", "exports", "tslib", "@angular/compiler/src/compile_metadata"], factory);
        }
    })(function (require, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var tslib_1 = require("example-angular-liferay$tslib");
        var compile_metadata_1 = require("@example-angular-liferay$angular/compiler/src/compile_metadata");
        function listLazyRoutes(moduleMeta, reflector) {
            var e_1, _a, e_2, _b;
            var allLazyRoutes = [];
            try {
                for (var _c = tslib_1.__values(moduleMeta.transitiveModule.providers), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = _d.value,
                        provider = _e.provider,
                        module = _e.module;
                    if (compile_metadata_1.tokenReference(provider.token) === reflector.ROUTES) {
                        var loadChildren = _collectLoadChildren(provider.useValue);
                        try {
                            for (var loadChildren_1 = tslib_1.__values(loadChildren), loadChildren_1_1 = loadChildren_1.next(); !loadChildren_1_1.done; loadChildren_1_1 = loadChildren_1.next()) {
                                var route = loadChildren_1_1.value;
                                allLazyRoutes.push(parseLazyRoute(route, reflector, module.reference));
                            }
                        } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        } finally {
                            try {
                                if (loadChildren_1_1 && !loadChildren_1_1.done && (_b = loadChildren_1.return)) _b.call(loadChildren_1);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                    }
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
            return allLazyRoutes;
        }
        exports.listLazyRoutes = listLazyRoutes;
        function _collectLoadChildren(routes, target) {
            if (target === void 0) {
                target = [];
            }
            var e_3, _a;
            if (typeof routes === 'string') {
                target.push(routes);
            } else if (Array.isArray(routes)) {
                try {
                    for (var routes_1 = tslib_1.__values(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {
                        var route = routes_1_1.value;
                        _collectLoadChildren(route, target);
                    }
                } catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                } finally {
                    try {
                        if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
            } else if (routes.loadChildren) {
                _collectLoadChildren(routes.loadChildren, target);
            } else if (routes.children) {
                _collectLoadChildren(routes.children, target);
            }
            return target;
        }
        function parseLazyRoute(route, reflector, module) {
            var _a = tslib_1.__read(route.split('#'), 2),
                routePath = _a[0],
                routeName = _a[1];
            var referencedModule = reflector.resolveExternalReference({
                moduleName: routePath,
                name: routeName
            }, module ? module.filePath : undefined);
            return { route: route, module: module || referencedModule, referencedModule: referencedModule };
        }
        exports.parseLazyRoute = parseLazyRoute;
    });
});
//# sourceMappingURL=lazy_routes.js.map