{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileIdentifierMetadata, CompileInjectableMetadata, CompileNgModuleMetadata, CompilePipeMetadata, CompilePipeSummary, CompileProviderMetadata, CompileShallowModuleMetadata, CompileStylesheetMetadata, CompileTypeMetadata, CompileTypeSummary, componentFactoryName, flatten, identifierName, templateSourceUrl} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {ConstantPool} from '../constant_pool';\nimport {ViewEncapsulation} from '../core';\nimport {MessageBundle} from '../i18n/message_bundle';\nimport {Identifiers, createTokenForExternalReference} from '../identifiers';\nimport {InjectableCompiler} from '../injectable_compiler';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport * as html from '../ml_parser/ast';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {removeWhitespaces} from '../ml_parser/html_whitespaces';\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {OutputEmitter} from '../output/abstract_emitter';\nimport * as o from '../output/output_ast';\nimport {ParseError} from '../parse_util';\nimport {compileNgModuleFromRender2 as compileR3Module} from '../render3/r3_module_compiler';\nimport {compilePipeFromRender2 as compileR3Pipe} from '../render3/r3_pipe_compiler';\nimport {htmlAstToRender3Ast} from '../render3/r3_template_transform';\nimport {compileComponentFromRender2 as compileR3Component, compileDirectiveFromRender2 as compileR3Directive} from '../render3/view/compiler';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {CompiledStylesheet, StyleCompiler} from '../style_compiler';\nimport {SummaryResolver} from '../summary_resolver';\nimport {BindingParser} from '../template_parser/binding_parser';\nimport {TemplateAst} from '../template_parser/template_ast';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {OutputContext, ValueVisitor, error, syntaxError, visitValue} from '../util';\nimport {TypeCheckCompiler} from '../view_compiler/type_check_compiler';\nimport {ViewCompileResult, ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {AotCompilerHost} from './compiler_host';\nimport {AotCompilerOptions} from './compiler_options';\nimport {GeneratedFile} from './generated_file';\nimport {LazyRoute, listLazyRoutes, parseLazyRoute} from './lazy_routes';\nimport {PartialModule} from './partial_module';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbol} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\nimport {createForJitStub, serializeSummaries} from './summary_serializer';\nimport {ngfactoryFilePath, normalizeGenFileSuffix, splitTypescriptSuffix, summaryFileName, summaryForJitFileName} from './util';\n\nconst enum StubEmitFlags { Basic = 1 << 0, TypeCheck = 1 << 1, All = TypeCheck | Basic }\n\nexport class AotCompiler {\n  private _templateAstCache =\n      new Map<StaticSymbol, {template: TemplateAst[], pipes: CompilePipeSummary[]}>();\n  private _analyzedFiles = new Map<string, NgAnalyzedFile>();\n  private _analyzedFilesForInjectables = new Map<string, NgAnalyzedFileWithInjectables>();\n\n  constructor(\n      private _config: CompilerConfig, private _options: AotCompilerOptions,\n      private _host: AotCompilerHost, readonly reflector: StaticReflector,\n      private _metadataResolver: CompileMetadataResolver, private _templateParser: TemplateParser,\n      private _styleCompiler: StyleCompiler, private _viewCompiler: ViewCompiler,\n      private _typeCheckCompiler: TypeCheckCompiler, private _ngModuleCompiler: NgModuleCompiler,\n      private _injectableCompiler: InjectableCompiler, private _outputEmitter: OutputEmitter,\n      private _summaryResolver: SummaryResolver<StaticSymbol>,\n      private _symbolResolver: StaticSymbolResolver) {}\n\n  clearCache() { this._metadataResolver.clearCache(); }\n\n  analyzeModulesSync(rootFiles: string[]): NgAnalyzedModules {\n    const analyzeResult = analyzeAndValidateNgModules(\n        rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n    analyzeResult.ngModules.forEach(\n        ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n            ngModule.type.reference, true));\n    return analyzeResult;\n  }\n\n  analyzeModulesAsync(rootFiles: string[]): Promise<NgAnalyzedModules> {\n    const analyzeResult = analyzeAndValidateNgModules(\n        rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n    return Promise\n        .all(analyzeResult.ngModules.map(\n            ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, false)))\n        .then(() => analyzeResult);\n  }\n\n  private _analyzeFile(fileName: string): NgAnalyzedFile {\n    let analyzedFile = this._analyzedFiles.get(fileName);\n    if (!analyzedFile) {\n      analyzedFile =\n          analyzeFile(this._host, this._symbolResolver, this._metadataResolver, fileName);\n      this._analyzedFiles.set(fileName, analyzedFile);\n    }\n    return analyzedFile;\n  }\n\n  private _analyzeFileForInjectables(fileName: string): NgAnalyzedFileWithInjectables {\n    let analyzedFile = this._analyzedFilesForInjectables.get(fileName);\n    if (!analyzedFile) {\n      analyzedFile = analyzeFileForInjectables(\n          this._host, this._symbolResolver, this._metadataResolver, fileName);\n      this._analyzedFilesForInjectables.set(fileName, analyzedFile);\n    }\n    return analyzedFile;\n  }\n\n  findGeneratedFileNames(fileName: string): string[] {\n    const genFileNames: string[] = [];\n    const file = this._analyzeFile(fileName);\n    // Make sure we create a .ngfactory if we have a injectable/directive/pipe/NgModule\n    // or a reference to a non source file.\n    // Note: This is overestimating the required .ngfactory files as the real calculation is harder.\n    // Only do this for StubEmitFlags.Basic, as adding a type check block\n    // does not change this file (as we generate type check blocks based on NgModules).\n    if (this._options.allowEmptyCodegenFiles || file.directives.length || file.pipes.length ||\n        file.injectables.length || file.ngModules.length || file.exportsNonSourceFiles) {\n      genFileNames.push(ngfactoryFilePath(file.fileName, true));\n      if (this._options.enableSummariesForJit) {\n        genFileNames.push(summaryForJitFileName(file.fileName, true));\n      }\n    }\n    const fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(file.fileName, true)[1]);\n    file.directives.forEach((dirSymbol) => {\n      const compMeta =\n          this._metadataResolver.getNonNormalizedDirectiveMetadata(dirSymbol) !.metadata;\n      if (!compMeta.isComponent) {\n        return;\n      }\n      // Note: compMeta is a component and therefore template is non null.\n      compMeta.template !.styleUrls.forEach((styleUrl) => {\n        const normalizedUrl = this._host.resourceNameToFileName(styleUrl, file.fileName);\n        if (!normalizedUrl) {\n          throw syntaxError(`Couldn't resolve resource ${styleUrl} relative to ${file.fileName}`);\n        }\n        const needsShim = (compMeta.template !.encapsulation ||\n                           this._config.defaultEncapsulation) === ViewEncapsulation.Emulated;\n        genFileNames.push(_stylesModuleUrl(normalizedUrl, needsShim, fileSuffix));\n        if (this._options.allowEmptyCodegenFiles) {\n          genFileNames.push(_stylesModuleUrl(normalizedUrl, !needsShim, fileSuffix));\n        }\n      });\n    });\n    return genFileNames;\n  }\n\n  emitBasicStub(genFileName: string, originalFileName?: string): GeneratedFile {\n    const outputCtx = this._createOutputContext(genFileName);\n    if (genFileName.endsWith('.ngfactory.ts')) {\n      if (!originalFileName) {\n        throw new Error(\n            `Assertion error: require the original file for .ngfactory.ts stubs. File: ${genFileName}`);\n      }\n      const originalFile = this._analyzeFile(originalFileName);\n      this._createNgFactoryStub(outputCtx, originalFile, StubEmitFlags.Basic);\n    } else if (genFileName.endsWith('.ngsummary.ts')) {\n      if (this._options.enableSummariesForJit) {\n        if (!originalFileName) {\n          throw new Error(\n              `Assertion error: require the original file for .ngsummary.ts stubs. File: ${genFileName}`);\n        }\n        const originalFile = this._analyzeFile(originalFileName);\n        _createEmptyStub(outputCtx);\n        originalFile.ngModules.forEach(ngModule => {\n          // create exports that user code can reference\n          createForJitStub(outputCtx, ngModule.type.reference);\n        });\n      }\n    } else if (genFileName.endsWith('.ngstyle.ts')) {\n      _createEmptyStub(outputCtx);\n    }\n    // Note: for the stubs, we don't need a property srcFileUrl,\n    // as later on in emitAllImpls we will create the proper GeneratedFiles with the\n    // correct srcFileUrl.\n    // This is good as e.g. for .ngstyle.ts files we can't derive\n    // the url of components based on the genFileUrl.\n    return this._codegenSourceModule('unknown', outputCtx);\n  }\n\n  emitTypeCheckStub(genFileName: string, originalFileName: string): GeneratedFile|null {\n    const originalFile = this._analyzeFile(originalFileName);\n    const outputCtx = this._createOutputContext(genFileName);\n    if (genFileName.endsWith('.ngfactory.ts')) {\n      this._createNgFactoryStub(outputCtx, originalFile, StubEmitFlags.TypeCheck);\n    }\n    return outputCtx.statements.length > 0 ?\n        this._codegenSourceModule(originalFile.fileName, outputCtx) :\n        null;\n  }\n\n  loadFilesAsync(fileNames: string[], tsFiles: string[]): Promise<\n      {analyzedModules: NgAnalyzedModules, analyzedInjectables: NgAnalyzedFileWithInjectables[]}> {\n    const files = fileNames.map(fileName => this._analyzeFile(fileName));\n    const loadingPromises: Promise<NgAnalyzedModules>[] = [];\n    files.forEach(\n        file => file.ngModules.forEach(\n            ngModule =>\n                loadingPromises.push(this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                    ngModule.type.reference, false))));\n    const analyzedInjectables = tsFiles.map(tsFile => this._analyzeFileForInjectables(tsFile));\n    return Promise.all(loadingPromises).then(_ => ({\n                                               analyzedModules: mergeAndValidateNgFiles(files),\n                                               analyzedInjectables: analyzedInjectables,\n                                             }));\n  }\n\n  loadFilesSync(fileNames: string[], tsFiles: string[]):\n      {analyzedModules: NgAnalyzedModules, analyzedInjectables: NgAnalyzedFileWithInjectables[]} {\n    const files = fileNames.map(fileName => this._analyzeFile(fileName));\n    files.forEach(\n        file => file.ngModules.forEach(\n            ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, true)));\n    const analyzedInjectables = tsFiles.map(tsFile => this._analyzeFileForInjectables(tsFile));\n    return {\n      analyzedModules: mergeAndValidateNgFiles(files),\n      analyzedInjectables: analyzedInjectables,\n    };\n  }\n\n  private _createNgFactoryStub(\n      outputCtx: OutputContext, file: NgAnalyzedFile, emitFlags: StubEmitFlags) {\n    let componentId = 0;\n    file.ngModules.forEach((ngModuleMeta, ngModuleIndex) => {\n      // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\n      // so we don't change the .ngfactory file too much when adding the type-check block.\n\n      // create exports that user code can reference\n      this._ngModuleCompiler.createStub(outputCtx, ngModuleMeta.type.reference);\n\n      // add references to the symbols from the metadata.\n      // These can be used by the type check block for components,\n      // and they also cause TypeScript to include these files into the program too,\n      // which will make them part of the analyzedFiles.\n      const externalReferences: StaticSymbol[] = [\n        // Add references that are available from all the modules and imports.\n        ...ngModuleMeta.transitiveModule.directives.map(d => d.reference),\n        ...ngModuleMeta.transitiveModule.pipes.map(d => d.reference),\n        ...ngModuleMeta.importedModules.map(m => m.type.reference),\n        ...ngModuleMeta.exportedModules.map(m => m.type.reference),\n\n        // Add references that might be inserted by the template compiler.\n        ...this._externalIdentifierReferences([Identifiers.TemplateRef, Identifiers.ElementRef]),\n      ];\n\n      const externalReferenceVars = new Map<any, string>();\n      externalReferences.forEach((ref, typeIndex) => {\n        externalReferenceVars.set(ref, `_decl${ngModuleIndex}_${typeIndex}`);\n      });\n      externalReferenceVars.forEach((varName, reference) => {\n        outputCtx.statements.push(\n            o.variable(varName)\n                .set(o.NULL_EXPR.cast(o.DYNAMIC_TYPE))\n                .toDeclStmt(o.expressionType(outputCtx.importExpr(\n                    reference, /* typeParams */ null, /* useSummaries */ false))));\n      });\n\n      if (emitFlags & StubEmitFlags.TypeCheck) {\n        // add the type-check block for all components of the NgModule\n        ngModuleMeta.declaredDirectives.forEach((dirId) => {\n          const compMeta = this._metadataResolver.getDirectiveMetadata(dirId.reference);\n          if (!compMeta.isComponent) {\n            return;\n          }\n          componentId++;\n          this._createTypeCheckBlock(\n              outputCtx, `${compMeta.type.reference.name}_Host_${componentId}`, ngModuleMeta,\n              this._metadataResolver.getHostComponentMetadata(compMeta), [compMeta.type],\n              externalReferenceVars);\n          this._createTypeCheckBlock(\n              outputCtx, `${compMeta.type.reference.name}_${componentId}`, ngModuleMeta, compMeta,\n              ngModuleMeta.transitiveModule.directives, externalReferenceVars);\n        });\n      }\n    });\n\n    if (outputCtx.statements.length === 0) {\n      _createEmptyStub(outputCtx);\n    }\n  }\n\n  private _externalIdentifierReferences(references: o.ExternalReference[]): StaticSymbol[] {\n    const result: StaticSymbol[] = [];\n    for (let reference of references) {\n      const token = createTokenForExternalReference(this.reflector, reference);\n      if (token.identifier) {\n        result.push(token.identifier.reference);\n      }\n    }\n    return result;\n  }\n\n  private _createTypeCheckBlock(\n      ctx: OutputContext, componentId: string, moduleMeta: CompileNgModuleMetadata,\n      compMeta: CompileDirectiveMetadata, directives: CompileIdentifierMetadata[],\n      externalReferenceVars: Map<any, string>) {\n    const {template: parsedTemplate, pipes: usedPipes} =\n        this._parseTemplate(compMeta, moduleMeta, directives);\n    ctx.statements.push(...this._typeCheckCompiler.compileComponent(\n        componentId, compMeta, parsedTemplate, usedPipes, externalReferenceVars, ctx));\n  }\n\n  emitMessageBundle(analyzeResult: NgAnalyzedModules, locale: string|null): MessageBundle {\n    const errors: ParseError[] = [];\n    const htmlParser = new HtmlParser();\n\n    // TODO(vicb): implicit tags & attributes\n    const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n\n    analyzeResult.files.forEach(file => {\n      const compMetas: CompileDirectiveMetadata[] = [];\n      file.directives.forEach(directiveType => {\n        const dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);\n        if (dirMeta && dirMeta.isComponent) {\n          compMetas.push(dirMeta);\n        }\n      });\n      compMetas.forEach(compMeta => {\n        const html = compMeta.template !.template !;\n        // Template URL points to either an HTML or TS file depending on whether\n        // the file is used with `templateUrl:` or `template:`, respectively.\n        const templateUrl = compMeta.template !.templateUrl !;\n        const interpolationConfig =\n            InterpolationConfig.fromArray(compMeta.template !.interpolation);\n        errors.push(...messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig) !);\n      });\n    });\n\n    if (errors.length) {\n      throw new Error(errors.map(e => e.toString()).join('\\n'));\n    }\n\n    return messageBundle;\n  }\n\n  emitAllPartialModules(\n      {ngModuleByPipeOrDirective, files}: NgAnalyzedModules,\n      r3Files: NgAnalyzedFileWithInjectables[]): PartialModule[] {\n    const contextMap = new Map<string, OutputContext>();\n\n    const getContext = (fileName: string): OutputContext => {\n      if (!contextMap.has(fileName)) {\n        contextMap.set(fileName, this._createOutputContext(fileName));\n      }\n      return contextMap.get(fileName) !;\n    };\n\n    files.forEach(\n        file => this._compilePartialModule(\n            file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules,\n            file.injectables, getContext(file.fileName)));\n    r3Files.forEach(\n        file => this._compileShallowModules(\n            file.fileName, file.shallowModules, getContext(file.fileName)));\n\n    return Array.from(contextMap.values())\n        .map(context => ({\n               fileName: context.genFilePath,\n               statements: [...context.constantPool.statements, ...context.statements],\n             }));\n  }\n\n  private _compileShallowModules(\n      fileName: string, shallowModules: CompileShallowModuleMetadata[],\n      context: OutputContext): void {\n    shallowModules.forEach(module => compileR3Module(context, module, this._injectableCompiler));\n  }\n\n  private _compilePartialModule(\n      fileName: string, ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>,\n      directives: StaticSymbol[], pipes: StaticSymbol[], ngModules: CompileNgModuleMetadata[],\n      injectables: CompileInjectableMetadata[], context: OutputContext): void {\n    const errors: ParseError[] = [];\n\n    const schemaRegistry = new DomElementSchemaRegistry();\n    const hostBindingParser = new BindingParser(\n        this._templateParser.expressionParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [],\n        errors);\n\n    // Process all components and directives\n    directives.forEach(directiveType => {\n      const directiveMetadata = this._metadataResolver.getDirectiveMetadata(directiveType);\n      if (directiveMetadata.isComponent) {\n        const module = ngModuleByPipeOrDirective.get(directiveType) !;\n        module ||\n            error(\n                `Cannot determine the module for component '${identifierName(directiveMetadata.type)}'`);\n\n        let htmlAst = directiveMetadata.template !.htmlAst !;\n        const preserveWhitespaces = directiveMetadata !.template !.preserveWhitespaces;\n\n        if (!preserveWhitespaces) {\n          htmlAst = removeWhitespaces(htmlAst);\n        }\n        const render3Ast = htmlAstToRender3Ast(htmlAst.rootNodes, hostBindingParser);\n\n        // Map of StaticType by directive selectors\n        const directiveTypeBySel = new Map<string, any>();\n\n        const directives = module.transitiveModule.directives.map(\n            dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n\n        directives.forEach(directive => {\n          if (directive.selector) {\n            directiveTypeBySel.set(directive.selector, directive.type.reference);\n          }\n        });\n\n        // Map of StaticType by pipe names\n        const pipeTypeByName = new Map<string, any>();\n\n        const pipes = module.transitiveModule.pipes.map(\n            pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n\n        pipes.forEach(pipe => { pipeTypeByName.set(pipe.name, pipe.type.reference); });\n\n        compileR3Component(\n            context, directiveMetadata, render3Ast, this.reflector, hostBindingParser,\n            directiveTypeBySel, pipeTypeByName);\n      } else {\n        compileR3Directive(context, directiveMetadata, this.reflector, hostBindingParser);\n      }\n    });\n\n    pipes.forEach(pipeType => {\n      const pipeMetadata = this._metadataResolver.getPipeMetadata(pipeType);\n      if (pipeMetadata) {\n        compileR3Pipe(context, pipeMetadata, this.reflector);\n      }\n    });\n\n    injectables.forEach(injectable => this._injectableCompiler.compile(injectable, context));\n  }\n\n  emitAllPartialModules2(files: NgAnalyzedFileWithInjectables[]): PartialModule[] {\n    // Using reduce like this is a select many pattern (where map is a select pattern)\n    return files.reduce<PartialModule[]>((r, file) => {\n      r.push(...this._emitPartialModule2(file.fileName, file.injectables));\n      return r;\n    }, []);\n  }\n\n  private _emitPartialModule2(fileName: string, injectables: CompileInjectableMetadata[]):\n      PartialModule[] {\n    const context = this._createOutputContext(fileName);\n\n    injectables.forEach(injectable => this._injectableCompiler.compile(injectable, context));\n\n    if (context.statements && context.statements.length > 0) {\n      return [{fileName, statements: [...context.constantPool.statements, ...context.statements]}];\n    }\n    return [];\n  }\n\n  emitAllImpls(analyzeResult: NgAnalyzedModules): GeneratedFile[] {\n    const {ngModuleByPipeOrDirective, files} = analyzeResult;\n    const sourceModules = files.map(\n        file => this._compileImplFile(\n            file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules,\n            file.injectables));\n    return flatten(sourceModules);\n  }\n\n  private _compileImplFile(\n      srcFileUrl: string, ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>,\n      directives: StaticSymbol[], pipes: StaticSymbol[], ngModules: CompileNgModuleMetadata[],\n      injectables: CompileInjectableMetadata[]): GeneratedFile[] {\n    const fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(srcFileUrl, true)[1]);\n    const generatedFiles: GeneratedFile[] = [];\n\n    const outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\n\n    generatedFiles.push(\n        ...this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx));\n\n    // compile all ng modules\n    ngModules.forEach((ngModuleMeta) => this._compileModule(outputCtx, ngModuleMeta));\n\n    // compile components\n    directives.forEach((dirType) => {\n      const compMeta = this._metadataResolver.getDirectiveMetadata(<any>dirType);\n      if (!compMeta.isComponent) {\n        return;\n      }\n      const ngModule = ngModuleByPipeOrDirective.get(dirType);\n      if (!ngModule) {\n        throw new Error(\n            `Internal Error: cannot determine the module for component ${identifierName(compMeta.type)}!`);\n      }\n\n      // compile styles\n      const componentStylesheet = this._styleCompiler.compileComponent(outputCtx, compMeta);\n      // Note: compMeta is a component and therefore template is non null.\n      compMeta.template !.externalStylesheets.forEach((stylesheetMeta) => {\n        // Note: fill non shim and shim style files as they might\n        // be shared by component with and without ViewEncapsulation.\n        const shim = this._styleCompiler.needsStyleShim(compMeta);\n        generatedFiles.push(\n            this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, shim, fileSuffix));\n        if (this._options.allowEmptyCodegenFiles) {\n          generatedFiles.push(\n              this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, !shim, fileSuffix));\n        }\n      });\n\n      // compile components\n      const compViewVars = this._compileComponent(\n          outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet,\n          fileSuffix);\n      this._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);\n    });\n    if (outputCtx.statements.length > 0 || this._options.allowEmptyCodegenFiles) {\n      const srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);\n      generatedFiles.unshift(srcModule);\n    }\n    return generatedFiles;\n  }\n\n  private _createSummary(\n      srcFileName: string, directives: StaticSymbol[], pipes: StaticSymbol[],\n      ngModules: CompileNgModuleMetadata[], injectables: CompileInjectableMetadata[],\n      ngFactoryCtx: OutputContext): GeneratedFile[] {\n    const symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileName)\n                                .map(symbol => this._symbolResolver.resolveSymbol(symbol));\n    const typeData: {\n      summary: CompileTypeSummary,\n      metadata: CompileNgModuleMetadata | CompileDirectiveMetadata | CompilePipeMetadata |\n          CompileTypeMetadata\n    }[] =\n        [\n          ...ngModules.map(\n              meta => ({\n                summary: this._metadataResolver.getNgModuleSummary(meta.type.reference) !,\n                metadata: this._metadataResolver.getNgModuleMetadata(meta.type.reference) !\n              })),\n          ...directives.map(ref => ({\n                              summary: this._metadataResolver.getDirectiveSummary(ref) !,\n                              metadata: this._metadataResolver.getDirectiveMetadata(ref) !\n                            })),\n          ...pipes.map(ref => ({\n                         summary: this._metadataResolver.getPipeSummary(ref) !,\n                         metadata: this._metadataResolver.getPipeMetadata(ref) !\n                       })),\n          ...injectables.map(\n              ref => ({\n                summary: this._metadataResolver.getInjectableSummary(ref.symbol) !,\n                metadata: this._metadataResolver.getInjectableSummary(ref.symbol) !.type\n              }))\n        ];\n    const forJitOutputCtx = this._options.enableSummariesForJit ?\n        this._createOutputContext(summaryForJitFileName(srcFileName, true)) :\n        null;\n    const {json, exportAs} = serializeSummaries(\n        srcFileName, forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries,\n        typeData);\n    exportAs.forEach((entry) => {\n      ngFactoryCtx.statements.push(\n          o.variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [\n            o.StmtModifier.Exported\n          ]));\n    });\n    const summaryJson = new GeneratedFile(srcFileName, summaryFileName(srcFileName), json);\n    const result = [summaryJson];\n    if (forJitOutputCtx) {\n      result.push(this._codegenSourceModule(srcFileName, forJitOutputCtx));\n    }\n    return result;\n  }\n\n  private _compileModule(outputCtx: OutputContext, ngModule: CompileNgModuleMetadata): void {\n    const providers: CompileProviderMetadata[] = [];\n\n    if (this._options.locale) {\n      const normalizedLocale = this._options.locale.replace(/_/g, '-');\n      providers.push({\n        token: createTokenForExternalReference(this.reflector, Identifiers.LOCALE_ID),\n        useValue: normalizedLocale,\n      });\n    }\n\n    if (this._options.i18nFormat) {\n      providers.push({\n        token: createTokenForExternalReference(this.reflector, Identifiers.TRANSLATIONS_FORMAT),\n        useValue: this._options.i18nFormat\n      });\n    }\n\n    this._ngModuleCompiler.compile(outputCtx, ngModule, providers);\n  }\n\n  private _compileComponentFactory(\n      outputCtx: OutputContext, compMeta: CompileDirectiveMetadata,\n      ngModule: CompileNgModuleMetadata, fileSuffix: string): void {\n    const hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta);\n    const hostViewFactoryVar =\n        this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix)\n            .viewClassVar;\n    const compFactoryVar = componentFactoryName(compMeta.type.reference);\n    const inputsExprs: o.LiteralMapEntry[] = [];\n    for (let propName in compMeta.inputs) {\n      const templateName = compMeta.inputs[propName];\n      // Don't quote so that the key gets minified...\n      inputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n    }\n    const outputsExprs: o.LiteralMapEntry[] = [];\n    for (let propName in compMeta.outputs) {\n      const templateName = compMeta.outputs[propName];\n      // Don't quote so that the key gets minified...\n      outputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n    }\n\n    outputCtx.statements.push(\n        o.variable(compFactoryVar)\n            .set(o.importExpr(Identifiers.createComponentFactory).callFn([\n              o.literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference),\n              o.variable(hostViewFactoryVar), new o.LiteralMapExpr(inputsExprs),\n              new o.LiteralMapExpr(outputsExprs),\n              o.literalArr(\n                  compMeta.template !.ngContentSelectors.map(selector => o.literal(selector)))\n            ]))\n            .toDeclStmt(\n                o.importType(\n                    Identifiers.ComponentFactory,\n                    [o.expressionType(outputCtx.importExpr(compMeta.type.reference)) !],\n                    [o.TypeModifier.Const]),\n                [o.StmtModifier.Final, o.StmtModifier.Exported]));\n  }\n\n  private _compileComponent(\n      outputCtx: OutputContext, compMeta: CompileDirectiveMetadata,\n      ngModule: CompileNgModuleMetadata, directiveIdentifiers: CompileIdentifierMetadata[],\n      componentStyles: CompiledStylesheet|null, fileSuffix: string): ViewCompileResult {\n    const {template: parsedTemplate, pipes: usedPipes} =\n        this._parseTemplate(compMeta, ngModule, directiveIdentifiers);\n    const stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);\n    const viewResult = this._viewCompiler.compileComponent(\n        outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);\n    if (componentStyles) {\n      _resolveStyleStatements(\n          this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta),\n          fileSuffix);\n    }\n    return viewResult;\n  }\n\n  private _parseTemplate(\n      compMeta: CompileDirectiveMetadata, ngModule: CompileNgModuleMetadata,\n      directiveIdentifiers: CompileIdentifierMetadata[]):\n      {template: TemplateAst[], pipes: CompilePipeSummary[]} {\n    if (this._templateAstCache.has(compMeta.type.reference)) {\n      return this._templateAstCache.get(compMeta.type.reference) !;\n    }\n    const preserveWhitespaces = compMeta !.template !.preserveWhitespaces;\n    const directives =\n        directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n    const pipes = ngModule.transitiveModule.pipes.map(\n        pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n    const result = this._templateParser.parse(\n        compMeta, compMeta.template !.htmlAst !, directives, pipes, ngModule.schemas,\n        templateSourceUrl(ngModule.type, compMeta, compMeta.template !), preserveWhitespaces);\n    this._templateAstCache.set(compMeta.type.reference, result);\n    return result;\n  }\n\n  private _createOutputContext(genFilePath: string): OutputContext {\n    const importExpr =\n        (symbol: StaticSymbol, typeParams: o.Type[] | null = null,\n         useSummaries: boolean = true) => {\n          if (!(symbol instanceof StaticSymbol)) {\n            throw new Error(`Internal error: unknown identifier ${JSON.stringify(symbol)}`);\n          }\n          const arity = this._symbolResolver.getTypeArity(symbol) || 0;\n          const {filePath, name, members} =\n              this._symbolResolver.getImportAs(symbol, useSummaries) || symbol;\n          const importModule = this._fileNameToModuleName(filePath, genFilePath);\n\n          // It should be good enough to compare filePath to genFilePath and if they are equal\n          // there is a self reference. However, ngfactory files generate to .ts but their\n          // symbols have .d.ts so a simple compare is insufficient. They should be canonical\n          // and is tracked by #17705.\n          const selfReference = this._fileNameToModuleName(genFilePath, genFilePath);\n          const moduleName = importModule === selfReference ? null : importModule;\n\n          // If we are in a type expression that refers to a generic type then supply\n          // the required type parameters. If there were not enough type parameters\n          // supplied, supply any as the type. Outside a type expression the reference\n          // should not supply type parameters and be treated as a simple value reference\n          // to the constructor function itself.\n          const suppliedTypeParams = typeParams || [];\n          const missingTypeParamsCount = arity - suppliedTypeParams.length;\n          const allTypeParams =\n              suppliedTypeParams.concat(new Array(missingTypeParamsCount).fill(o.DYNAMIC_TYPE));\n          return members.reduce(\n              (expr, memberName) => expr.prop(memberName),\n              <o.Expression>o.importExpr(\n                  new o.ExternalReference(moduleName, name, null), allTypeParams));\n        };\n\n    return {statements: [], genFilePath, importExpr, constantPool: new ConstantPool()};\n  }\n\n  private _fileNameToModuleName(importedFilePath: string, containingFilePath: string): string {\n    return this._summaryResolver.getKnownModuleName(importedFilePath) ||\n        this._symbolResolver.getKnownModuleName(importedFilePath) ||\n        this._host.fileNameToModuleName(importedFilePath, containingFilePath);\n  }\n\n  private _codegenStyles(\n      srcFileUrl: string, compMeta: CompileDirectiveMetadata,\n      stylesheetMetadata: CompileStylesheetMetadata, isShimmed: boolean,\n      fileSuffix: string): GeneratedFile {\n    const outputCtx = this._createOutputContext(\n        _stylesModuleUrl(stylesheetMetadata.moduleUrl !, isShimmed, fileSuffix));\n    const compiledStylesheet =\n        this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata, isShimmed);\n    _resolveStyleStatements(this._symbolResolver, compiledStylesheet, isShimmed, fileSuffix);\n    return this._codegenSourceModule(srcFileUrl, outputCtx);\n  }\n\n  private _codegenSourceModule(srcFileUrl: string, ctx: OutputContext): GeneratedFile {\n    return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);\n  }\n\n  listLazyRoutes(entryRoute?: string, analyzedModules?: NgAnalyzedModules): LazyRoute[] {\n    const self = this;\n    if (entryRoute) {\n      const symbol = parseLazyRoute(entryRoute, this.reflector).referencedModule;\n      return visitLazyRoute(symbol);\n    } else if (analyzedModules) {\n      const allLazyRoutes: LazyRoute[] = [];\n      for (const ngModule of analyzedModules.ngModules) {\n        const lazyRoutes = listLazyRoutes(ngModule, this.reflector);\n        for (const lazyRoute of lazyRoutes) {\n          allLazyRoutes.push(lazyRoute);\n        }\n      }\n      return allLazyRoutes;\n    } else {\n      throw new Error(`Either route or analyzedModules has to be specified!`);\n    }\n\n    function visitLazyRoute(\n        symbol: StaticSymbol, seenRoutes = new Set<StaticSymbol>(),\n        allLazyRoutes: LazyRoute[] = []): LazyRoute[] {\n      // Support pointing to default exports, but stop recursing there,\n      // as the StaticReflector does not yet support default exports.\n      if (seenRoutes.has(symbol) || !symbol.name) {\n        return allLazyRoutes;\n      }\n      seenRoutes.add(symbol);\n      const lazyRoutes = listLazyRoutes(\n          self._metadataResolver.getNgModuleMetadata(symbol, true) !, self.reflector);\n      for (const lazyRoute of lazyRoutes) {\n        allLazyRoutes.push(lazyRoute);\n        visitLazyRoute(lazyRoute.referencedModule, seenRoutes, allLazyRoutes);\n      }\n      return allLazyRoutes;\n    }\n  }\n}\n\nfunction _createEmptyStub(outputCtx: OutputContext) {\n  // Note: We need to produce at least one import statement so that\n  // TypeScript knows that the file is an es6 module. Otherwise our generated\n  // exports / imports won't be emitted properly by TypeScript.\n  outputCtx.statements.push(o.importExpr(Identifiers.ComponentFactory).toStmt());\n}\n\n\nfunction _resolveStyleStatements(\n    symbolResolver: StaticSymbolResolver, compileResult: CompiledStylesheet, needsShim: boolean,\n    fileSuffix: string): void {\n  compileResult.dependencies.forEach((dep) => {\n    dep.setValue(symbolResolver.getStaticSymbol(\n        _stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));\n  });\n}\n\nfunction _stylesModuleUrl(stylesheetUrl: string, shim: boolean, suffix: string): string {\n  return `${stylesheetUrl}${shim ? '.shim' : ''}.ngstyle${suffix}`;\n}\n\nexport interface NgAnalyzedModules {\n  ngModules: CompileNgModuleMetadata[];\n  ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>;\n  files: NgAnalyzedFile[];\n  symbolsMissingModule?: StaticSymbol[];\n}\n\nexport interface NgAnalyzedFileWithInjectables {\n  fileName: string;\n  injectables: CompileInjectableMetadata[];\n  shallowModules: CompileShallowModuleMetadata[];\n}\n\nexport interface NgAnalyzedFile {\n  fileName: string;\n  directives: StaticSymbol[];\n  pipes: StaticSymbol[];\n  ngModules: CompileNgModuleMetadata[];\n  injectables: CompileInjectableMetadata[];\n  exportsNonSourceFiles: boolean;\n}\n\nexport interface NgAnalyzeModulesHost { isSourceFile(filePath: string): boolean; }\n\nexport function analyzeNgModules(\n    fileNames: string[], host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver,\n    metadataResolver: CompileMetadataResolver): NgAnalyzedModules {\n  const files = _analyzeFilesIncludingNonProgramFiles(\n      fileNames, host, staticSymbolResolver, metadataResolver);\n  return mergeAnalyzedFiles(files);\n}\n\nexport function analyzeAndValidateNgModules(\n    fileNames: string[], host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver,\n    metadataResolver: CompileMetadataResolver): NgAnalyzedModules {\n  return validateAnalyzedModules(\n      analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver));\n}\n\nfunction validateAnalyzedModules(analyzedModules: NgAnalyzedModules): NgAnalyzedModules {\n  if (analyzedModules.symbolsMissingModule && analyzedModules.symbolsMissingModule.length) {\n    const messages = analyzedModules.symbolsMissingModule.map(\n        s =>\n            `Cannot determine the module for class ${s.name} in ${s.filePath}! Add ${s.name} to the NgModule to fix it.`);\n    throw syntaxError(messages.join('\\n'));\n  }\n  return analyzedModules;\n}\n\n// Analyzes all of the program files,\n// including files that are not part of the program\n// but are referenced by an NgModule.\nfunction _analyzeFilesIncludingNonProgramFiles(\n    fileNames: string[], host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver,\n    metadataResolver: CompileMetadataResolver): NgAnalyzedFile[] {\n  const seenFiles = new Set<string>();\n  const files: NgAnalyzedFile[] = [];\n\n  const visitFile = (fileName: string) => {\n    if (seenFiles.has(fileName) || !host.isSourceFile(fileName)) {\n      return false;\n    }\n    seenFiles.add(fileName);\n    const analyzedFile = analyzeFile(host, staticSymbolResolver, metadataResolver, fileName);\n    files.push(analyzedFile);\n    analyzedFile.ngModules.forEach(ngModule => {\n      ngModule.transitiveModule.modules.forEach(modMeta => visitFile(modMeta.reference.filePath));\n    });\n  };\n  fileNames.forEach((fileName) => visitFile(fileName));\n  return files;\n}\n\nexport function analyzeFile(\n    host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver,\n    metadataResolver: CompileMetadataResolver, fileName: string): NgAnalyzedFile {\n  const directives: StaticSymbol[] = [];\n  const pipes: StaticSymbol[] = [];\n  const injectables: CompileInjectableMetadata[] = [];\n  const ngModules: CompileNgModuleMetadata[] = [];\n  const hasDecorators = staticSymbolResolver.hasDecorators(fileName);\n  let exportsNonSourceFiles = false;\n  // Don't analyze .d.ts files that have no decorators as a shortcut\n  // to speed up the analysis. This prevents us from\n  // resolving the references in these files.\n  // Note: exportsNonSourceFiles is only needed when compiling with summaries,\n  // which is not the case when .d.ts files are treated as input files.\n  if (!fileName.endsWith('.d.ts') || hasDecorators) {\n    staticSymbolResolver.getSymbolsOf(fileName).forEach((symbol) => {\n      const resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n      const symbolMeta = resolvedSymbol.metadata;\n      if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n        return;\n      }\n      let isNgSymbol = false;\n      if (symbolMeta.__symbolic === 'class') {\n        if (metadataResolver.isDirective(symbol)) {\n          isNgSymbol = true;\n          directives.push(symbol);\n        } else if (metadataResolver.isPipe(symbol)) {\n          isNgSymbol = true;\n          pipes.push(symbol);\n        } else if (metadataResolver.isNgModule(symbol)) {\n          const ngModule = metadataResolver.getNgModuleMetadata(symbol, false);\n          if (ngModule) {\n            isNgSymbol = true;\n            ngModules.push(ngModule);\n          }\n        } else if (metadataResolver.isInjectable(symbol)) {\n          isNgSymbol = true;\n          const injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n          if (injectable) {\n            injectables.push(injectable);\n          }\n        }\n      }\n      if (!isNgSymbol) {\n        exportsNonSourceFiles =\n            exportsNonSourceFiles || isValueExportingNonSourceFile(host, symbolMeta);\n      }\n    });\n  }\n  return {\n      fileName, directives, pipes, ngModules, injectables, exportsNonSourceFiles,\n  };\n}\n\nexport function analyzeFileForInjectables(\n    host: NgAnalyzeModulesHost, staticSymbolResolver: StaticSymbolResolver,\n    metadataResolver: CompileMetadataResolver, fileName: string): NgAnalyzedFileWithInjectables {\n  const injectables: CompileInjectableMetadata[] = [];\n  const shallowModules: CompileShallowModuleMetadata[] = [];\n  if (staticSymbolResolver.hasDecorators(fileName)) {\n    staticSymbolResolver.getSymbolsOf(fileName).forEach((symbol) => {\n      const resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n      const symbolMeta = resolvedSymbol.metadata;\n      if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n        return;\n      }\n      if (symbolMeta.__symbolic === 'class') {\n        if (metadataResolver.isInjectable(symbol)) {\n          const injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n          if (injectable) {\n            injectables.push(injectable);\n          }\n        } else if (metadataResolver.isNgModule(symbol)) {\n          const module = metadataResolver.getShallowModuleMetadata(symbol);\n          if (module) {\n            shallowModules.push(module);\n          }\n        }\n      }\n    });\n  }\n  return {fileName, injectables, shallowModules};\n}\n\nfunction isValueExportingNonSourceFile(host: NgAnalyzeModulesHost, metadata: any): boolean {\n  let exportsNonSourceFiles = false;\n\n  class Visitor implements ValueVisitor {\n    visitArray(arr: any[], context: any): any { arr.forEach(v => visitValue(v, this, context)); }\n    visitStringMap(map: {[key: string]: any}, context: any): any {\n      Object.keys(map).forEach((key) => visitValue(map[key], this, context));\n    }\n    visitPrimitive(value: any, context: any): any {}\n    visitOther(value: any, context: any): any {\n      if (value instanceof StaticSymbol && !host.isSourceFile(value.filePath)) {\n        exportsNonSourceFiles = true;\n      }\n    }\n  }\n\n  visitValue(metadata, new Visitor(), null);\n  return exportsNonSourceFiles;\n}\n\nexport function mergeAnalyzedFiles(analyzedFiles: NgAnalyzedFile[]): NgAnalyzedModules {\n  const allNgModules: CompileNgModuleMetadata[] = [];\n  const ngModuleByPipeOrDirective = new Map<StaticSymbol, CompileNgModuleMetadata>();\n  const allPipesAndDirectives = new Set<StaticSymbol>();\n\n  analyzedFiles.forEach(af => {\n    af.ngModules.forEach(ngModule => {\n      allNgModules.push(ngModule);\n      ngModule.declaredDirectives.forEach(\n          d => ngModuleByPipeOrDirective.set(d.reference, ngModule));\n      ngModule.declaredPipes.forEach(p => ngModuleByPipeOrDirective.set(p.reference, ngModule));\n    });\n    af.directives.forEach(d => allPipesAndDirectives.add(d));\n    af.pipes.forEach(p => allPipesAndDirectives.add(p));\n  });\n\n  const symbolsMissingModule: StaticSymbol[] = [];\n  allPipesAndDirectives.forEach(ref => {\n    if (!ngModuleByPipeOrDirective.has(ref)) {\n      symbolsMissingModule.push(ref);\n    }\n  });\n  return {\n    ngModules: allNgModules,\n    ngModuleByPipeOrDirective,\n    symbolsMissingModule,\n    files: analyzedFiles\n  };\n}\n\nfunction mergeAndValidateNgFiles(files: NgAnalyzedFile[]): NgAnalyzedModules {\n  return validateAnalyzedModules(mergeAnalyzedFiles(files));\n}\n"],"sourceRoot":""}