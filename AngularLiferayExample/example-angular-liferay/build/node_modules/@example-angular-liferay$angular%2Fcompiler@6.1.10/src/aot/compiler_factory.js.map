{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig} from '../config';\nimport {MissingTranslationStrategy, ViewEncapsulation} from '../core';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {Lexer} from '../expression_parser/lexer';\nimport {Parser} from '../expression_parser/parser';\nimport {I18NHtmlParser} from '../i18n/i18n_html_parser';\nimport {InjectableCompiler} from '../injectable_compiler';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {TypeScriptEmitter} from '../output/ts_emitter';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {StyleCompiler} from '../style_compiler';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {UrlResolver} from '../url_resolver';\nimport {syntaxError} from '../util';\nimport {TypeCheckCompiler} from '../view_compiler/type_check_compiler';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {AotCompiler} from './compiler';\nimport {AotCompilerHost} from './compiler_host';\nimport {AotCompilerOptions} from './compiler_options';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\nimport {AotSummaryResolver} from './summary_resolver';\n\nexport function createAotUrlResolver(host: {\n  resourceNameToFileName(resourceName: string, containingFileName: string): string | null;\n}): UrlResolver {\n  return {\n    resolve: (basePath: string, url: string) => {\n      const filePath = host.resourceNameToFileName(url, basePath);\n      if (!filePath) {\n        throw syntaxError(`Couldn't resolve resource ${url} from ${basePath}`);\n      }\n      return filePath;\n    }\n  };\n}\n\n/**\n * Creates a new AotCompiler based on options and a host.\n */\nexport function createAotCompiler(\n    compilerHost: AotCompilerHost, options: AotCompilerOptions,\n    errorCollector?: (error: any, type?: any) =>\n        void): {compiler: AotCompiler, reflector: StaticReflector} {\n  let translations: string = options.translations || '';\n\n  const urlResolver = createAotUrlResolver(compilerHost);\n  const symbolCache = new StaticSymbolCache();\n  const summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n  const symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n  const staticReflector =\n      new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n  let htmlParser: I18NHtmlParser;\n  if (!!options.enableIvy) {\n    // Ivy handles i18n at the compiler level so we must use a regular parser\n    htmlParser = new HtmlParser() as I18NHtmlParser;\n  } else {\n    htmlParser = new I18NHtmlParser(\n        new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n  }\n  const config = new CompilerConfig({\n    defaultEncapsulation: ViewEncapsulation.Emulated,\n    useJit: false,\n    missingTranslation: options.missingTranslation,\n    preserveWhitespaces: options.preserveWhitespaces,\n    strictInjectionParameters: options.strictInjectionParameters,\n  });\n  const normalizer = new DirectiveNormalizer(\n      {get: (url: string) => compilerHost.loadResource(url)}, urlResolver, htmlParser, config);\n  const expressionParser = new Parser(new Lexer());\n  const elementSchemaRegistry = new DomElementSchemaRegistry();\n  const tmplParser = new TemplateParser(\n      config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n  const resolver = new CompileMetadataResolver(\n      config, htmlParser, new NgModuleResolver(staticReflector),\n      new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver,\n      elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\n  // TODO(vicb): do not pass options.i18nFormat here\n  const viewCompiler = new ViewCompiler(staticReflector);\n  const typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n  const compiler = new AotCompiler(\n      config, options, compilerHost, staticReflector, resolver, tmplParser,\n      new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler,\n      new NgModuleCompiler(staticReflector),\n      new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(),\n      summaryResolver, symbolResolver);\n  return {compiler, reflector: staticReflector};\n}\n"],"sourceRoot":""}