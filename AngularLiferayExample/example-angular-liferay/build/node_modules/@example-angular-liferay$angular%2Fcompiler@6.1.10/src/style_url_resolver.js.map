{"version":3,"sources":["../../../../../../packages/compiler/src/style_url_resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAaA,YAAA,mBAAA,aAAA,YAAA;AACE,qBAAA,gBAAA,CAAmB,KAAnB,EAAyC,SAAzC,EAA4D;AAAzC,qBAAA,KAAA,GAAA,KAAA;AAAsB,qBAAA,SAAA,GAAA,SAAA;AAAuB;AAClE,mBAAA,gBAAA;AAAC,SAFD,EAAA;AAAa,gBAAA,gBAAA,GAAA,gBAAA;AAIb,iBAAA,oBAAA,CAAqC,GAArC,EAAgD;AAC9C,gBAAI,OAAO,IAAP,IAAe,IAAI,MAAJ,KAAe,CAA9B,IAAmC,IAAI,CAAJ,KAAU,GAAjD,EAAsD,OAAO,KAAP;AACtD,gBAAM,cAAc,IAAI,KAAJ,CAAU,sBAAV,CAApB;AACA,mBAAO,gBAAgB,IAAhB,IAAwB,YAAY,CAAZ,KAAkB,SAA1C,IAAuD,YAAY,CAAZ,KAAkB,OAAhF;AACD;AAJD,gBAAA,oBAAA,GAAA,oBAAA;AAMA;;;;AAIA,iBAAA,gBAAA,CACI,QADJ,EAC2B,OAD3B,EAC4C,OAD5C,EAC2D;AACzD,gBAAM,YAAsB,EAA5B;AAEA,gBAAM,kBAAkB,QAAQ,OAAR,CAAgB,6BAAhB,EAA+C,EAA/C,EACK,OADL,CACa,iBADb,EACgC,YAAA;AAAC,oBAAA,IAAA,EAAA;qBAAA,IAAA,KAAA,C,EAAA,KAAA,UAAA,M,EAAA,I,EAAc;AAAd,sBAAA,EAAA,IAAA,UAAA,EAAA,CAAA;;AAC3B,oBAAM,MAAM,EAAE,CAAF,KAAQ,EAAE,CAAF,CAApB;AACA,oBAAI,CAAC,qBAAqB,GAArB,CAAL,EAAgC;AAC9B;AACA;AACA,2BAAO,EAAE,CAAF,CAAP;AACD;AACD,0BAAU,IAAV,CAAe,SAAS,OAAT,CAAiB,OAAjB,EAA0B,GAA1B,CAAf;AACA,uBAAO,EAAP;AACD,aAVL,CAAxB;AAWA,mBAAO,IAAI,gBAAJ,CAAqB,eAArB,EAAsC,SAAtC,CAAP;AACD;AAhBD,gBAAA,gBAAA,GAAA,gBAAA;AAkBA,YAAM,oBAAoB,iEAA1B;AACA,YAAM,gCAAgC,0DAAtC;AACA,YAAM,yBAAyB,cAA/B","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Some of the code comes from WebComponents.JS\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js\n\nimport {UrlResolver} from './url_resolver';\n\nexport class StyleWithImports {\n  constructor(public style: string, public styleUrls: string[]) {}\n}\n\nexport function isStyleUrlResolvable(url: string): boolean {\n  if (url == null || url.length === 0 || url[0] == '/') return false;\n  const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n  return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\n\n/**\n * Rewrites stylesheets by resolving and removing the @import urls that\n * are either relative or don't have a `package:` scheme\n */\nexport function extractStyleUrls(\n    resolver: UrlResolver, baseUrl: string, cssText: string): StyleWithImports {\n  const foundUrls: string[] = [];\n\n  const modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '')\n                              .replace(CSS_IMPORT_REGEXP, (...m: string[]) => {\n                                const url = m[1] || m[2];\n                                if (!isStyleUrlResolvable(url)) {\n                                  // Do not attempt to resolve non-package absolute URLs with URI\n                                  // scheme\n                                  return m[0];\n                                }\n                                foundUrls.push(resolver.resolve(baseUrl, url));\n                                return '';\n                              });\n  return new StyleWithImports(modifiedCssText, foundUrls);\n}\n\nconst CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\nconst CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n"],"sourceRoot":""}