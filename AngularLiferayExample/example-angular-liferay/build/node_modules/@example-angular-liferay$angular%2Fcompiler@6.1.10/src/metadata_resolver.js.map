{"version":3,"sources":["../../../../../../packages/compiler/src/metadata_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol, StaticSymbolCache} from './aot/static_symbol';\nimport {ngfactoryFilePath} from './aot/util';\nimport {assertArrayOfStrings, assertInterpolationSymbols} from './assertions';\nimport * as cpl from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {CompilerConfig} from './config';\nimport {ChangeDetectionStrategy, Component, Directive, Injectable, ModuleWithProviders, Provider, Query, SchemaMetadata, Type, ViewEncapsulation, createAttribute, createComponent, createHost, createInject, createInjectable, createInjectionToken, createNgModule, createOptional, createSelf, createSkipSelf} from './core';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {DirectiveResolver, findLast} from './directive_resolver';\nimport {Identifiers} from './identifiers';\nimport {getAllLifecycleHooks} from './lifecycle_reflector';\nimport {HtmlParser} from './ml_parser/html_parser';\nimport {NgModuleResolver} from './ng_module_resolver';\nimport {PipeResolver} from './pipe_resolver';\nimport {ElementSchemaRegistry} from './schema/element_schema_registry';\nimport {CssSelector} from './selector';\nimport {SummaryResolver} from './summary_resolver';\nimport {Console, SyncAsync, ValueTransformer, isPromise, noUndefined, resolveForwardRef, stringify, syntaxError, visitValue} from './util';\n\nexport type ErrorCollector = (error: any, type?: any) => void;\n\nexport const ERROR_COMPONENT_TYPE = 'ngComponentType';\n\n// Design notes:\n// - don't lazily create metadata:\n//   For some metadata, we need to do async work sometimes,\n//   so the user has to kick off this loading.\n//   But we want to report errors even when the async work is\n//   not required to check that the user would have been able\n//   to wait correctly.\nexport class CompileMetadataResolver {\n  private _nonNormalizedDirectiveCache =\n      new Map<Type, {annotation: Directive, metadata: cpl.CompileDirectiveMetadata}>();\n  private _directiveCache = new Map<Type, cpl.CompileDirectiveMetadata>();\n  private _summaryCache = new Map<Type, cpl.CompileTypeSummary|null>();\n  private _pipeCache = new Map<Type, cpl.CompilePipeMetadata>();\n  private _ngModuleCache = new Map<Type, cpl.CompileNgModuleMetadata>();\n  private _ngModuleOfTypes = new Map<Type, Type>();\n  private _shallowModuleCache = new Map<Type, cpl.CompileShallowModuleMetadata>();\n\n  constructor(\n      private _config: CompilerConfig, private _htmlParser: HtmlParser,\n      private _ngModuleResolver: NgModuleResolver, private _directiveResolver: DirectiveResolver,\n      private _pipeResolver: PipeResolver, private _summaryResolver: SummaryResolver<any>,\n      private _schemaRegistry: ElementSchemaRegistry,\n      private _directiveNormalizer: DirectiveNormalizer, private _console: Console,\n      private _staticSymbolCache: StaticSymbolCache, private _reflector: CompileReflector,\n      private _errorCollector?: ErrorCollector) {}\n\n  getReflector(): CompileReflector { return this._reflector; }\n\n  clearCacheFor(type: Type) {\n    const dirMeta = this._directiveCache.get(type);\n    this._directiveCache.delete(type);\n    this._nonNormalizedDirectiveCache.delete(type);\n    this._summaryCache.delete(type);\n    this._pipeCache.delete(type);\n    this._ngModuleOfTypes.delete(type);\n    // Clear all of the NgModule as they contain transitive information!\n    this._ngModuleCache.clear();\n    if (dirMeta) {\n      this._directiveNormalizer.clearCacheFor(dirMeta);\n    }\n  }\n\n  clearCache(): void {\n    this._directiveCache.clear();\n    this._nonNormalizedDirectiveCache.clear();\n    this._summaryCache.clear();\n    this._pipeCache.clear();\n    this._ngModuleCache.clear();\n    this._ngModuleOfTypes.clear();\n    this._directiveNormalizer.clearCache();\n  }\n\n  private _createProxyClass(baseType: any, name: string): cpl.ProxyClass {\n    let delegate: any = null;\n    const proxyClass: cpl.ProxyClass = <any>function() {\n      if (!delegate) {\n        throw new Error(\n            `Illegal state: Class ${name} for type ${stringify(baseType)} is not compiled yet!`);\n      }\n      return delegate.apply(this, arguments);\n    };\n    proxyClass.setDelegate = (d) => {\n      delegate = d;\n      (<any>proxyClass).prototype = d.prototype;\n    };\n    // Make stringify work correctly\n    (<any>proxyClass).overriddenName = name;\n    return proxyClass;\n  }\n\n  private getGeneratedClass(dirType: any, name: string): StaticSymbol|cpl.ProxyClass {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\n    } else {\n      return this._createProxyClass(dirType, name);\n    }\n  }\n\n  private getComponentViewClass(dirType: any): StaticSymbol|cpl.ProxyClass {\n    return this.getGeneratedClass(dirType, cpl.viewClassName(dirType, 0));\n  }\n\n  getHostComponentViewClass(dirType: any): StaticSymbol|cpl.ProxyClass {\n    return this.getGeneratedClass(dirType, cpl.hostViewClassName(dirType));\n  }\n\n  getHostComponentType(dirType: any): StaticSymbol|Type {\n    const name = `${cpl.identifierName({reference: dirType})}_Host`;\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(dirType.filePath, name);\n    } else {\n      const HostClass = <any>function HostClass() {};\n      HostClass.overriddenName = name;\n\n      return HostClass;\n    }\n  }\n\n  private getRendererType(dirType: any): StaticSymbol|object {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(\n          ngfactoryFilePath(dirType.filePath), cpl.rendererTypeName(dirType));\n    } else {\n      // returning an object as proxy,\n      // that we fill later during runtime compilation.\n      return <any>{};\n    }\n  }\n\n  private getComponentFactory(\n      selector: string, dirType: any, inputs: {[key: string]: string}|null,\n      outputs: {[key: string]: string}): StaticSymbol|object {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(\n          ngfactoryFilePath(dirType.filePath), cpl.componentFactoryName(dirType));\n    } else {\n      const hostView = this.getHostComponentViewClass(dirType);\n      // Note: ngContentSelectors will be filled later once the template is\n      // loaded.\n      const createComponentFactory =\n          this._reflector.resolveExternalReference(Identifiers.createComponentFactory);\n      return createComponentFactory(selector, dirType, <any>hostView, inputs, outputs, []);\n    }\n  }\n\n  private initComponentFactory(factory: StaticSymbol|object, ngContentSelectors: string[]) {\n    if (!(factory instanceof StaticSymbol)) {\n      (factory as any).ngContentSelectors.push(...ngContentSelectors);\n    }\n  }\n\n  private _loadSummary(type: any, kind: cpl.CompileSummaryKind): cpl.CompileTypeSummary|null {\n    let typeSummary = this._summaryCache.get(type);\n    if (!typeSummary) {\n      const summary = this._summaryResolver.resolveSummary(type);\n      typeSummary = summary ? summary.type : null;\n      this._summaryCache.set(type, typeSummary || null);\n    }\n    return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n  }\n\n  getHostComponentMetadata(\n      compMeta: cpl.CompileDirectiveMetadata,\n      hostViewType?: StaticSymbol|cpl.ProxyClass): cpl.CompileDirectiveMetadata {\n    const hostType = this.getHostComponentType(compMeta.type.reference);\n    if (!hostViewType) {\n      hostViewType = this.getHostComponentViewClass(hostType);\n    }\n    // Note: ! is ok here as this method should only be called with normalized directive\n    // metadata, which always fills in the selector.\n    const template = CssSelector.parse(compMeta.selector !)[0].getMatchingElementTemplate();\n    const templateUrl = '';\n    const htmlAst = this._htmlParser.parse(template, templateUrl);\n    return cpl.CompileDirectiveMetadata.create({\n      isHost: true,\n      type: {reference: hostType, diDeps: [], lifecycleHooks: []},\n      template: new cpl.CompileTemplateMetadata({\n        encapsulation: ViewEncapsulation.None,\n        template,\n        templateUrl,\n        htmlAst,\n        styles: [],\n        styleUrls: [],\n        ngContentSelectors: [],\n        animations: [],\n        isInline: true,\n        externalStylesheets: [],\n        interpolation: null,\n        preserveWhitespaces: false,\n      }),\n      exportAs: null,\n      changeDetection: ChangeDetectionStrategy.Default,\n      inputs: [],\n      outputs: [],\n      host: {},\n      isComponent: true,\n      selector: '*',\n      providers: [],\n      viewProviders: [],\n      queries: [],\n      guards: {},\n      viewQueries: [],\n      componentViewType: hostViewType,\n      rendererType:\n          {id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {}} as object,\n      entryComponents: [],\n      componentFactory: null\n    });\n  }\n\n  loadDirectiveMetadata(ngModuleType: any, directiveType: any, isSync: boolean): SyncAsync<null> {\n    if (this._directiveCache.has(directiveType)) {\n      return null;\n    }\n    directiveType = resolveForwardRef(directiveType);\n    const {annotation, metadata} = this.getNonNormalizedDirectiveMetadata(directiveType) !;\n\n    const createDirectiveMetadata = (templateMetadata: cpl.CompileTemplateMetadata | null) => {\n      const normalizedDirMeta = new cpl.CompileDirectiveMetadata({\n        isHost: false,\n        type: metadata.type,\n        isComponent: metadata.isComponent,\n        selector: metadata.selector,\n        exportAs: metadata.exportAs,\n        changeDetection: metadata.changeDetection,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        hostListeners: metadata.hostListeners,\n        hostProperties: metadata.hostProperties,\n        hostAttributes: metadata.hostAttributes,\n        providers: metadata.providers,\n        viewProviders: metadata.viewProviders,\n        queries: metadata.queries,\n        guards: metadata.guards,\n        viewQueries: metadata.viewQueries,\n        entryComponents: metadata.entryComponents,\n        componentViewType: metadata.componentViewType,\n        rendererType: metadata.rendererType,\n        componentFactory: metadata.componentFactory,\n        template: templateMetadata\n      });\n      if (templateMetadata) {\n        this.initComponentFactory(metadata.componentFactory !, templateMetadata.ngContentSelectors);\n      }\n      this._directiveCache.set(directiveType, normalizedDirMeta);\n      this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n      return null;\n    };\n\n    if (metadata.isComponent) {\n      const template = metadata.template !;\n      const templateMeta = this._directiveNormalizer.normalizeTemplate({\n        ngModuleType,\n        componentType: directiveType,\n        moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n        encapsulation: template.encapsulation,\n        template: template.template,\n        templateUrl: template.templateUrl,\n        styles: template.styles,\n        styleUrls: template.styleUrls,\n        animations: template.animations,\n        interpolation: template.interpolation,\n        preserveWhitespaces: template.preserveWhitespaces\n      });\n      if (isPromise(templateMeta) && isSync) {\n        this._reportError(componentStillLoadingError(directiveType), directiveType);\n        return null;\n      }\n      return SyncAsync.then(templateMeta, createDirectiveMetadata);\n    } else {\n      // directive\n      createDirectiveMetadata(null);\n      return null;\n    }\n  }\n\n  getNonNormalizedDirectiveMetadata(directiveType: any):\n      {annotation: Directive, metadata: cpl.CompileDirectiveMetadata}|null {\n    directiveType = resolveForwardRef(directiveType);\n    if (!directiveType) {\n      return null;\n    }\n    let cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n    const dirMeta = this._directiveResolver.resolve(directiveType, false);\n    if (!dirMeta) {\n      return null;\n    }\n    let nonNormalizedTemplateMetadata: cpl.CompileTemplateMetadata = undefined !;\n\n    if (createComponent.isTypeOf(dirMeta)) {\n      // component\n      const compMeta = dirMeta as Component;\n      assertArrayOfStrings('styles', compMeta.styles);\n      assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n      assertInterpolationSymbols('interpolation', compMeta.interpolation);\n\n      const animations = compMeta.animations;\n\n      nonNormalizedTemplateMetadata = new cpl.CompileTemplateMetadata({\n        encapsulation: noUndefined(compMeta.encapsulation),\n        template: noUndefined(compMeta.template),\n        templateUrl: noUndefined(compMeta.templateUrl),\n        htmlAst: null,\n        styles: compMeta.styles || [],\n        styleUrls: compMeta.styleUrls || [],\n        animations: animations || [],\n        interpolation: noUndefined(compMeta.interpolation),\n        isInline: !!compMeta.template,\n        externalStylesheets: [],\n        ngContentSelectors: [],\n        preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces),\n      });\n    }\n\n    let changeDetectionStrategy: ChangeDetectionStrategy = null !;\n    let viewProviders: cpl.CompileProviderMetadata[] = [];\n    let entryComponentMetadata: cpl.CompileEntryComponentMetadata[] = [];\n    let selector = dirMeta.selector;\n\n    if (createComponent.isTypeOf(dirMeta)) {\n      // Component\n      const compMeta = dirMeta as Component;\n      changeDetectionStrategy = compMeta.changeDetection !;\n      if (compMeta.viewProviders) {\n        viewProviders = this._getProvidersMetadata(\n            compMeta.viewProviders, entryComponentMetadata,\n            `viewProviders for \"${stringifyType(directiveType)}\"`, [], directiveType);\n      }\n      if (compMeta.entryComponents) {\n        entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)\n                                     .map((type) => this._getEntryComponentMetadata(type) !)\n                                     .concat(entryComponentMetadata);\n      }\n      if (!selector) {\n        selector = this._schemaRegistry.getDefaultComponentElementName();\n      }\n    } else {\n      // Directive\n      if (!selector) {\n        this._reportError(\n            syntaxError(\n                `Directive ${stringifyType(directiveType)} has no selector, please add it!`),\n            directiveType);\n        selector = 'error';\n      }\n    }\n\n    let providers: cpl.CompileProviderMetadata[] = [];\n    if (dirMeta.providers != null) {\n      providers = this._getProvidersMetadata(\n          dirMeta.providers, entryComponentMetadata,\n          `providers for \"${stringifyType(directiveType)}\"`, [], directiveType);\n    }\n    let queries: cpl.CompileQueryMetadata[] = [];\n    let viewQueries: cpl.CompileQueryMetadata[] = [];\n    if (dirMeta.queries != null) {\n      queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n      viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n    }\n\n    const metadata = cpl.CompileDirectiveMetadata.create({\n      isHost: false,\n      selector: selector,\n      exportAs: noUndefined(dirMeta.exportAs),\n      isComponent: !!nonNormalizedTemplateMetadata,\n      type: this._getTypeMetadata(directiveType),\n      template: nonNormalizedTemplateMetadata,\n      changeDetection: changeDetectionStrategy,\n      inputs: dirMeta.inputs || [],\n      outputs: dirMeta.outputs || [],\n      host: dirMeta.host || {},\n      providers: providers || [],\n      viewProviders: viewProviders || [],\n      queries: queries || [],\n      guards: dirMeta.guards || {},\n      viewQueries: viewQueries || [],\n      entryComponents: entryComponentMetadata,\n      componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\n                                                         null,\n      rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n      componentFactory: null\n    });\n    if (nonNormalizedTemplateMetadata) {\n      metadata.componentFactory =\n          this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n    }\n    cacheEntry = {metadata, annotation: dirMeta};\n    this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n    return cacheEntry;\n  }\n\n  /**\n   * Gets the metadata for the given directive.\n   * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n   */\n  getDirectiveMetadata(directiveType: any): cpl.CompileDirectiveMetadata {\n    const dirMeta = this._directiveCache.get(directiveType) !;\n    if (!dirMeta) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ${stringifyType(directiveType)}.`),\n          directiveType);\n    }\n    return dirMeta;\n  }\n\n  getDirectiveSummary(dirType: any): cpl.CompileDirectiveSummary {\n    const dirSummary =\n        <cpl.CompileDirectiveSummary>this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n    if (!dirSummary) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: Could not load the summary for directive ${stringifyType(dirType)}.`),\n          dirType);\n    }\n    return dirSummary;\n  }\n\n  isDirective(type: any) {\n    return !!this._loadSummary(type, cpl.CompileSummaryKind.Directive) ||\n        this._directiveResolver.isDirective(type);\n  }\n\n  isPipe(type: any) {\n    return !!this._loadSummary(type, cpl.CompileSummaryKind.Pipe) ||\n        this._pipeResolver.isPipe(type);\n  }\n\n  isNgModule(type: any) {\n    return !!this._loadSummary(type, cpl.CompileSummaryKind.NgModule) ||\n        this._ngModuleResolver.isNgModule(type);\n  }\n\n  getNgModuleSummary(moduleType: any, alreadyCollecting: Set<any>|null = null):\n      cpl.CompileNgModuleSummary|null {\n    let moduleSummary: cpl.CompileNgModuleSummary|null =\n        <cpl.CompileNgModuleSummary>this._loadSummary(moduleType, cpl.CompileSummaryKind.NgModule);\n    if (!moduleSummary) {\n      const moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n      moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n      if (moduleSummary) {\n        this._summaryCache.set(moduleType, moduleSummary);\n      }\n    }\n    return moduleSummary;\n  }\n\n  /**\n   * Loads the declared directives and pipes of an NgModule.\n   */\n  loadNgModuleDirectiveAndPipeMetadata(moduleType: any, isSync: boolean, throwIfNotFound = true):\n      Promise<any> {\n    const ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n    const loading: Promise<any>[] = [];\n    if (ngModule) {\n      ngModule.declaredDirectives.forEach((id) => {\n        const promise = this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n        if (promise) {\n          loading.push(promise);\n        }\n      });\n      ngModule.declaredPipes.forEach((id) => this._loadPipeMetadata(id.reference));\n    }\n    return Promise.all(loading);\n  }\n\n  getShallowModuleMetadata(moduleType: any): cpl.CompileShallowModuleMetadata|null {\n    let compileMeta = this._shallowModuleCache.get(moduleType);\n    if (compileMeta) {\n      return compileMeta;\n    }\n\n    const ngModuleMeta =\n        findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);\n\n    compileMeta = {\n      type: this._getTypeMetadata(moduleType),\n      rawExports: ngModuleMeta.exports,\n      rawImports: ngModuleMeta.imports,\n      rawProviders: ngModuleMeta.providers,\n    };\n\n    this._shallowModuleCache.set(moduleType, compileMeta);\n    return compileMeta;\n  }\n\n  getNgModuleMetadata(\n      moduleType: any, throwIfNotFound = true,\n      alreadyCollecting: Set<any>|null = null): cpl.CompileNgModuleMetadata|null {\n    moduleType = resolveForwardRef(moduleType);\n    let compileMeta = this._ngModuleCache.get(moduleType);\n    if (compileMeta) {\n      return compileMeta;\n    }\n    const meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n    if (!meta) {\n      return null;\n    }\n    const declaredDirectives: cpl.CompileIdentifierMetadata[] = [];\n    const exportedNonModuleIdentifiers: cpl.CompileIdentifierMetadata[] = [];\n    const declaredPipes: cpl.CompileIdentifierMetadata[] = [];\n    const importedModules: cpl.CompileNgModuleSummary[] = [];\n    const exportedModules: cpl.CompileNgModuleSummary[] = [];\n    const providers: cpl.CompileProviderMetadata[] = [];\n    const entryComponents: cpl.CompileEntryComponentMetadata[] = [];\n    const bootstrapComponents: cpl.CompileIdentifierMetadata[] = [];\n    const schemas: SchemaMetadata[] = [];\n\n    if (meta.imports) {\n      flattenAndDedupeArray(meta.imports).forEach((importedType) => {\n        let importedModuleType: Type = undefined !;\n        if (isValidType(importedType)) {\n          importedModuleType = importedType;\n        } else if (importedType && importedType.ngModule) {\n          const moduleWithProviders: ModuleWithProviders = importedType;\n          importedModuleType = moduleWithProviders.ngModule;\n          if (moduleWithProviders.providers) {\n            providers.push(...this._getProvidersMetadata(\n                moduleWithProviders.providers, entryComponents,\n                `provider for the NgModule '${stringifyType(importedModuleType)}'`, [],\n                importedType));\n          }\n        }\n\n        if (importedModuleType) {\n          if (this._checkSelfImport(moduleType, importedModuleType)) return;\n          if (!alreadyCollecting) alreadyCollecting = new Set();\n          if (alreadyCollecting.has(importedModuleType)) {\n            this._reportError(\n                syntaxError(\n                    `${this._getTypeDescriptor(importedModuleType)} '${stringifyType(importedType)}' is imported recursively by the module '${stringifyType(moduleType)}'.`),\n                moduleType);\n            return;\n          }\n          alreadyCollecting.add(importedModuleType);\n          const importedModuleSummary =\n              this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n          alreadyCollecting.delete(importedModuleType);\n          if (!importedModuleSummary) {\n            this._reportError(\n                syntaxError(\n                    `Unexpected ${this._getTypeDescriptor(importedType)} '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'. Please add a @NgModule annotation.`),\n                moduleType);\n            return;\n          }\n          importedModules.push(importedModuleSummary);\n        } else {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n      });\n    }\n\n    if (meta.exports) {\n      flattenAndDedupeArray(meta.exports).forEach((exportedType) => {\n        if (!isValidType(exportedType)) {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(exportedType)}' exported by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        if (!alreadyCollecting) alreadyCollecting = new Set();\n        if (alreadyCollecting.has(exportedType)) {\n          this._reportError(\n              syntaxError(\n                  `${this._getTypeDescriptor(exportedType)} '${stringify(exportedType)}' is exported recursively by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        alreadyCollecting.add(exportedType);\n        const exportedModuleSummary = this.getNgModuleSummary(exportedType, alreadyCollecting);\n        alreadyCollecting.delete(exportedType);\n        if (exportedModuleSummary) {\n          exportedModules.push(exportedModuleSummary);\n        } else {\n          exportedNonModuleIdentifiers.push(this._getIdentifierMetadata(exportedType));\n        }\n      });\n    }\n\n    // Note: This will be modified later, so we rely on\n    // getting a new instance every time!\n    const transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n    if (meta.declarations) {\n      flattenAndDedupeArray(meta.declarations).forEach((declaredType) => {\n        if (!isValidType(declaredType)) {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        const declaredIdentifier = this._getIdentifierMetadata(declaredType);\n        if (this.isDirective(declaredType)) {\n          transitiveModule.addDirective(declaredIdentifier);\n          declaredDirectives.push(declaredIdentifier);\n          this._addTypeToModule(declaredType, moduleType);\n        } else if (this.isPipe(declaredType)) {\n          transitiveModule.addPipe(declaredIdentifier);\n          transitiveModule.pipes.push(declaredIdentifier);\n          declaredPipes.push(declaredIdentifier);\n          this._addTypeToModule(declaredType, moduleType);\n        } else {\n          this._reportError(\n              syntaxError(\n                  `Unexpected ${this._getTypeDescriptor(declaredType)} '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`),\n              moduleType);\n          return;\n        }\n      });\n    }\n\n    const exportedDirectives: cpl.CompileIdentifierMetadata[] = [];\n    const exportedPipes: cpl.CompileIdentifierMetadata[] = [];\n    exportedNonModuleIdentifiers.forEach((exportedId) => {\n      if (transitiveModule.directivesSet.has(exportedId.reference)) {\n        exportedDirectives.push(exportedId);\n        transitiveModule.addExportedDirective(exportedId);\n      } else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n        exportedPipes.push(exportedId);\n        transitiveModule.addExportedPipe(exportedId);\n      } else {\n        this._reportError(\n            syntaxError(\n                `Can't export ${this._getTypeDescriptor(exportedId.reference)} ${stringifyType(exportedId.reference)} from ${stringifyType(moduleType)} as it was neither declared nor imported!`),\n            moduleType);\n        return;\n      }\n    });\n\n    // The providers of the module have to go last\n    // so that they overwrite any other provider we already added.\n    if (meta.providers) {\n      providers.push(...this._getProvidersMetadata(\n          meta.providers, entryComponents,\n          `provider for the NgModule '${stringifyType(moduleType)}'`, [], moduleType));\n    }\n\n    if (meta.entryComponents) {\n      entryComponents.push(...flattenAndDedupeArray(meta.entryComponents)\n                               .map(type => this._getEntryComponentMetadata(type) !));\n    }\n\n    if (meta.bootstrap) {\n      flattenAndDedupeArray(meta.bootstrap).forEach(type => {\n        if (!isValidType(type)) {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(type)}' used in the bootstrap property of module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        bootstrapComponents.push(this._getIdentifierMetadata(type));\n      });\n    }\n\n    entryComponents.push(\n        ...bootstrapComponents.map(type => this._getEntryComponentMetadata(type.reference) !));\n\n    if (meta.schemas) {\n      schemas.push(...flattenAndDedupeArray(meta.schemas));\n    }\n\n    compileMeta = new cpl.CompileNgModuleMetadata({\n      type: this._getTypeMetadata(moduleType),\n      providers,\n      entryComponents,\n      bootstrapComponents,\n      schemas,\n      declaredDirectives,\n      exportedDirectives,\n      declaredPipes,\n      exportedPipes,\n      importedModules,\n      exportedModules,\n      transitiveModule,\n      id: meta.id || null,\n    });\n\n    entryComponents.forEach((id) => transitiveModule.addEntryComponent(id));\n    providers.forEach((provider) => transitiveModule.addProvider(provider, compileMeta !.type));\n    transitiveModule.addModule(compileMeta.type);\n    this._ngModuleCache.set(moduleType, compileMeta);\n    return compileMeta;\n  }\n\n  private _checkSelfImport(moduleType: Type, importedModuleType: Type): boolean {\n    if (moduleType === importedModuleType) {\n      this._reportError(\n          syntaxError(`'${stringifyType(moduleType)}' module can't import itself`), moduleType);\n      return true;\n    }\n    return false;\n  }\n\n  private _getTypeDescriptor(type: Type): string {\n    if (isValidType(type)) {\n      if (this.isDirective(type)) {\n        return 'directive';\n      }\n\n      if (this.isPipe(type)) {\n        return 'pipe';\n      }\n\n      if (this.isNgModule(type)) {\n        return 'module';\n      }\n    }\n\n    if ((type as any).provide) {\n      return 'provider';\n    }\n\n    return 'value';\n  }\n\n\n  private _addTypeToModule(type: Type, moduleType: Type) {\n    const oldModule = this._ngModuleOfTypes.get(type);\n    if (oldModule && oldModule !== moduleType) {\n      this._reportError(\n          syntaxError(\n              `Type ${stringifyType(type)} is part of the declarations of 2 modules: ${stringifyType(oldModule)} and ${stringifyType(moduleType)}! ` +\n              `Please consider moving ${stringifyType(type)} to a higher module that imports ${stringifyType(oldModule)} and ${stringifyType(moduleType)}. ` +\n              `You can also create a new NgModule that exports and includes ${stringifyType(type)} then import that NgModule in ${stringifyType(oldModule)} and ${stringifyType(moduleType)}.`),\n          moduleType);\n      return;\n    }\n    this._ngModuleOfTypes.set(type, moduleType);\n  }\n\n  private _getTransitiveNgModuleMetadata(\n      importedModules: cpl.CompileNgModuleSummary[],\n      exportedModules: cpl.CompileNgModuleSummary[]): cpl.TransitiveCompileNgModuleMetadata {\n    // collect `providers` / `entryComponents` from all imported and all exported modules\n    const result = new cpl.TransitiveCompileNgModuleMetadata();\n    const modulesByToken = new Map<any, Set<any>>();\n    importedModules.concat(exportedModules).forEach((modSummary) => {\n      modSummary.modules.forEach((mod) => result.addModule(mod));\n      modSummary.entryComponents.forEach((comp) => result.addEntryComponent(comp));\n      const addedTokens = new Set<any>();\n      modSummary.providers.forEach((entry) => {\n        const tokenRef = cpl.tokenReference(entry.provider.token);\n        let prevModules = modulesByToken.get(tokenRef);\n        if (!prevModules) {\n          prevModules = new Set<any>();\n          modulesByToken.set(tokenRef, prevModules);\n        }\n        const moduleRef = entry.module.reference;\n        // Note: the providers of one module may still contain multiple providers\n        // per token (e.g. for multi providers), and we need to preserve these.\n        if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n          prevModules.add(moduleRef);\n          addedTokens.add(tokenRef);\n          result.addProvider(entry.provider, entry.module);\n        }\n      });\n    });\n    exportedModules.forEach((modSummary) => {\n      modSummary.exportedDirectives.forEach((id) => result.addExportedDirective(id));\n      modSummary.exportedPipes.forEach((id) => result.addExportedPipe(id));\n    });\n    importedModules.forEach((modSummary) => {\n      modSummary.exportedDirectives.forEach((id) => result.addDirective(id));\n      modSummary.exportedPipes.forEach((id) => result.addPipe(id));\n    });\n    return result;\n  }\n\n  private _getIdentifierMetadata(type: Type): cpl.CompileIdentifierMetadata {\n    type = resolveForwardRef(type);\n    return {reference: type};\n  }\n\n  isInjectable(type: any): boolean {\n    const annotations = this._reflector.tryAnnotations(type);\n    return annotations.some(ann => createInjectable.isTypeOf(ann));\n  }\n\n  getInjectableSummary(type: any): cpl.CompileTypeSummary {\n    return {\n      summaryKind: cpl.CompileSummaryKind.Injectable,\n      type: this._getTypeMetadata(type, null, false)\n    };\n  }\n\n  getInjectableMetadata(\n      type: any, dependencies: any[]|null = null,\n      throwOnUnknownDeps: boolean = true): cpl.CompileInjectableMetadata|null {\n    const typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n    const typeMetadata = typeSummary ?\n        typeSummary.type :\n        this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n\n    const annotations: Injectable[] =\n        this._reflector.annotations(type).filter(ann => createInjectable.isTypeOf(ann));\n\n    if (annotations.length === 0) {\n      return null;\n    }\n\n    const meta = annotations[annotations.length - 1];\n    return {\n      symbol: type,\n      type: typeMetadata,\n      providedIn: meta.providedIn,\n      useValue: meta.useValue,\n      useClass: meta.useClass,\n      useExisting: meta.useExisting,\n      useFactory: meta.useFactory,\n      deps: meta.deps,\n    };\n  }\n\n  private _getTypeMetadata(type: Type, dependencies: any[]|null = null, throwOnUnknownDeps = true):\n      cpl.CompileTypeMetadata {\n    const identifier = this._getIdentifierMetadata(type);\n    return {\n      reference: identifier.reference,\n      diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n      lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference),\n    };\n  }\n\n  private _getFactoryMetadata(factory: Function, dependencies: any[]|null = null):\n      cpl.CompileFactoryMetadata {\n    factory = resolveForwardRef(factory);\n    return {reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies)};\n  }\n\n  /**\n   * Gets the metadata for the given pipe.\n   * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n   */\n  getPipeMetadata(pipeType: any): cpl.CompilePipeMetadata|null {\n    const pipeMeta = this._pipeCache.get(pipeType);\n    if (!pipeMeta) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ${stringifyType(pipeType)}.`),\n          pipeType);\n    }\n    return pipeMeta || null;\n  }\n\n  getPipeSummary(pipeType: any): cpl.CompilePipeSummary {\n    const pipeSummary =\n        <cpl.CompilePipeSummary>this._loadSummary(pipeType, cpl.CompileSummaryKind.Pipe);\n    if (!pipeSummary) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: Could not load the summary for pipe ${stringifyType(pipeType)}.`),\n          pipeType);\n    }\n    return pipeSummary;\n  }\n\n  getOrLoadPipeMetadata(pipeType: any): cpl.CompilePipeMetadata {\n    let pipeMeta = this._pipeCache.get(pipeType);\n    if (!pipeMeta) {\n      pipeMeta = this._loadPipeMetadata(pipeType);\n    }\n    return pipeMeta;\n  }\n\n  private _loadPipeMetadata(pipeType: any): cpl.CompilePipeMetadata {\n    pipeType = resolveForwardRef(pipeType);\n    const pipeAnnotation = this._pipeResolver.resolve(pipeType) !;\n\n    const pipeMeta = new cpl.CompilePipeMetadata({\n      type: this._getTypeMetadata(pipeType),\n      name: pipeAnnotation.name,\n      pure: !!pipeAnnotation.pure\n    });\n    this._pipeCache.set(pipeType, pipeMeta);\n    this._summaryCache.set(pipeType, pipeMeta.toSummary());\n    return pipeMeta;\n  }\n\n  private _getDependenciesMetadata(\n      typeOrFunc: Type|Function, dependencies: any[]|null,\n      throwOnUnknownDeps = true): cpl.CompileDiDependencyMetadata[] {\n    let hasUnknownDeps = false;\n    const params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n\n    const dependenciesMetadata: cpl.CompileDiDependencyMetadata[] = params.map((param) => {\n      let isAttribute = false;\n      let isHost = false;\n      let isSelf = false;\n      let isSkipSelf = false;\n      let isOptional = false;\n      let token: any = null;\n      if (Array.isArray(param)) {\n        param.forEach((paramEntry) => {\n          if (createHost.isTypeOf(paramEntry)) {\n            isHost = true;\n          } else if (createSelf.isTypeOf(paramEntry)) {\n            isSelf = true;\n          } else if (createSkipSelf.isTypeOf(paramEntry)) {\n            isSkipSelf = true;\n          } else if (createOptional.isTypeOf(paramEntry)) {\n            isOptional = true;\n          } else if (createAttribute.isTypeOf(paramEntry)) {\n            isAttribute = true;\n            token = paramEntry.attributeName;\n          } else if (createInject.isTypeOf(paramEntry)) {\n            token = paramEntry.token;\n          } else if (\n              createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {\n            token = paramEntry;\n          } else if (isValidType(paramEntry) && token == null) {\n            token = paramEntry;\n          }\n        });\n      } else {\n        token = param;\n      }\n      if (token == null) {\n        hasUnknownDeps = true;\n        return null !;\n      }\n\n      return {\n        isAttribute,\n        isHost,\n        isSelf,\n        isSkipSelf,\n        isOptional,\n        token: this._getTokenMetadata(token)\n      };\n\n    });\n\n    if (hasUnknownDeps) {\n      const depsTokens =\n          dependenciesMetadata.map((dep) => dep ? stringifyType(dep.token) : '?').join(', ');\n      const message =\n          `Can't resolve all parameters for ${stringifyType(typeOrFunc)}: (${depsTokens}).`;\n      if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n        this._reportError(syntaxError(message), typeOrFunc);\n      } else {\n        this._console.warn(`Warning: ${message} This will become an error in Angular v6.x`);\n      }\n    }\n\n    return dependenciesMetadata;\n  }\n\n  private _getTokenMetadata(token: any): cpl.CompileTokenMetadata {\n    token = resolveForwardRef(token);\n    let compileToken: cpl.CompileTokenMetadata;\n    if (typeof token === 'string') {\n      compileToken = {value: token};\n    } else {\n      compileToken = {identifier: {reference: token}};\n    }\n    return compileToken;\n  }\n\n  private _getProvidersMetadata(\n      providers: Provider[], targetEntryComponents: cpl.CompileEntryComponentMetadata[],\n      debugInfo?: string, compileProviders: cpl.CompileProviderMetadata[] = [],\n      type?: any): cpl.CompileProviderMetadata[] {\n    providers.forEach((provider: any, providerIdx: number) => {\n      if (Array.isArray(provider)) {\n        this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n      } else {\n        provider = resolveForwardRef(provider);\n        let providerMeta: cpl.ProviderMeta = undefined !;\n        if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n          this._validateProvider(provider);\n          providerMeta = new cpl.ProviderMeta(provider.provide, provider);\n        } else if (isValidType(provider)) {\n          providerMeta = new cpl.ProviderMeta(provider, {useClass: provider});\n        } else if (provider === void 0) {\n          this._reportError(syntaxError(\n              `Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files.`));\n          return;\n        } else {\n          const providersInfo =\n              (<string[]>providers.reduce(\n                   (soFar: string[], seenProvider: any, seenProviderIdx: number) => {\n                     if (seenProviderIdx < providerIdx) {\n                       soFar.push(`${stringifyType(seenProvider)}`);\n                     } else if (seenProviderIdx == providerIdx) {\n                       soFar.push(`?${stringifyType(seenProvider)}?`);\n                     } else if (seenProviderIdx == providerIdx + 1) {\n                       soFar.push('...');\n                     }\n                     return soFar;\n                   },\n                   []))\n                  .join(', ');\n          this._reportError(\n              syntaxError(\n                  `Invalid ${debugInfo ? debugInfo : 'provider'} - only instances of Provider and Type are allowed, got: [${providersInfo}]`),\n              type);\n          return;\n        }\n        if (providerMeta.token ===\n            this._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n          targetEntryComponents.push(...this._getEntryComponentsFromProvider(providerMeta, type));\n        } else {\n          compileProviders.push(this.getProviderMetadata(providerMeta));\n        }\n      }\n    });\n    return compileProviders;\n  }\n\n  private _validateProvider(provider: any): void {\n    if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n      this._reportError(syntaxError(\n          `Invalid provider for ${stringifyType(provider.provide)}. useClass cannot be ${provider.useClass}.\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case.`));\n    }\n  }\n\n  private _getEntryComponentsFromProvider(provider: cpl.ProviderMeta, type?: any):\n      cpl.CompileEntryComponentMetadata[] {\n    const components: cpl.CompileEntryComponentMetadata[] = [];\n    const collectedIdentifiers: cpl.CompileIdentifierMetadata[] = [];\n\n    if (provider.useFactory || provider.useExisting || provider.useClass) {\n      this._reportError(\n          syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!`), type);\n      return [];\n    }\n\n    if (!provider.multi) {\n      this._reportError(\n          syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!`),\n          type);\n      return [];\n    }\n\n    extractIdentifiers(provider.useValue, collectedIdentifiers);\n    collectedIdentifiers.forEach((identifier) => {\n      const entry = this._getEntryComponentMetadata(identifier.reference, false);\n      if (entry) {\n        components.push(entry);\n      }\n    });\n    return components;\n  }\n\n  private _getEntryComponentMetadata(dirType: any, throwIfNotFound = true):\n      cpl.CompileEntryComponentMetadata|null {\n    const dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n    if (dirMeta && dirMeta.metadata.isComponent) {\n      return {componentType: dirType, componentFactory: dirMeta.metadata.componentFactory !};\n    }\n    const dirSummary =\n        <cpl.CompileDirectiveSummary>this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n    if (dirSummary && dirSummary.isComponent) {\n      return {componentType: dirType, componentFactory: dirSummary.componentFactory !};\n    }\n    if (throwIfNotFound) {\n      throw syntaxError(`${dirType.name} cannot be used as an entry component.`);\n    }\n    return null;\n  }\n\n  private _getInjectableTypeMetadata(type: Type, dependencies: any[]|null = null):\n      cpl.CompileTypeMetadata {\n    const typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n    if (typeSummary) {\n      return typeSummary.type;\n    }\n    return this._getTypeMetadata(type, dependencies);\n  }\n\n  getProviderMetadata(provider: cpl.ProviderMeta): cpl.CompileProviderMetadata {\n    let compileDeps: cpl.CompileDiDependencyMetadata[] = undefined !;\n    let compileTypeMetadata: cpl.CompileTypeMetadata = null !;\n    let compileFactoryMetadata: cpl.CompileFactoryMetadata = null !;\n    let token: cpl.CompileTokenMetadata = this._getTokenMetadata(provider.token);\n\n    if (provider.useClass) {\n      compileTypeMetadata =\n          this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n      compileDeps = compileTypeMetadata.diDeps;\n      if (provider.token === provider.useClass) {\n        // use the compileTypeMetadata as it contains information about lifecycleHooks...\n        token = {identifier: compileTypeMetadata};\n      }\n    } else if (provider.useFactory) {\n      compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n      compileDeps = compileFactoryMetadata.diDeps;\n    }\n\n    return {\n      token: token,\n      useClass: compileTypeMetadata,\n      useValue: provider.useValue,\n      useFactory: compileFactoryMetadata,\n      useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n      deps: compileDeps,\n      multi: provider.multi\n    };\n  }\n\n  private _getQueriesMetadata(\n      queries: {[key: string]: Query}, isViewQuery: boolean,\n      directiveType: Type): cpl.CompileQueryMetadata[] {\n    const res: cpl.CompileQueryMetadata[] = [];\n\n    Object.keys(queries).forEach((propertyName: string) => {\n      const query = queries[propertyName];\n      if (query.isViewQuery === isViewQuery) {\n        res.push(this._getQueryMetadata(query, propertyName, directiveType));\n      }\n    });\n\n    return res;\n  }\n\n  private _queryVarBindings(selector: any): string[] { return selector.split(/\\s*,\\s*/); }\n\n  private _getQueryMetadata(q: Query, propertyName: string, typeOrFunc: Type|Function):\n      cpl.CompileQueryMetadata {\n    let selectors: cpl.CompileTokenMetadata[];\n    if (typeof q.selector === 'string') {\n      selectors =\n          this._queryVarBindings(q.selector).map(varName => this._getTokenMetadata(varName));\n    } else {\n      if (!q.selector) {\n        this._reportError(\n            syntaxError(\n                `Can't construct a query for the property \"${propertyName}\" of \"${stringifyType(typeOrFunc)}\" since the query selector wasn't defined.`),\n            typeOrFunc);\n        selectors = [];\n      } else {\n        selectors = [this._getTokenMetadata(q.selector)];\n      }\n    }\n\n    return {\n      selectors,\n      first: q.first,\n      descendants: q.descendants, propertyName,\n      read: q.read ? this._getTokenMetadata(q.read) : null !\n    };\n  }\n\n  private _reportError(error: any, type?: any, otherType?: any) {\n    if (this._errorCollector) {\n      this._errorCollector(error, type);\n      if (otherType) {\n        this._errorCollector(error, otherType);\n      }\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction flattenArray(tree: any[], out: Array<any> = []): Array<any> {\n  if (tree) {\n    for (let i = 0; i < tree.length; i++) {\n      const item = resolveForwardRef(tree[i]);\n      if (Array.isArray(item)) {\n        flattenArray(item, out);\n      } else {\n        out.push(item);\n      }\n    }\n  }\n  return out;\n}\n\nfunction dedupeArray(array: any[]): Array<any> {\n  if (array) {\n    return Array.from(new Set(array));\n  }\n  return [];\n}\n\nfunction flattenAndDedupeArray(tree: any[]): Array<any> {\n  return dedupeArray(flattenArray(tree));\n}\n\nfunction isValidType(value: any): boolean {\n  return (value instanceof StaticSymbol) || (value instanceof Type);\n}\n\nfunction extractIdentifiers(value: any, targetIdentifiers: cpl.CompileIdentifierMetadata[]) {\n  visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n}\n\nclass _CompileValueConverter extends ValueTransformer {\n  visitOther(value: any, targetIdentifiers: cpl.CompileIdentifierMetadata[]): any {\n    targetIdentifiers.push({reference: value});\n  }\n}\n\nfunction stringifyType(type: any): string {\n  if (type instanceof StaticSymbol) {\n    return `${type.name} in ${type.filePath}`;\n  } else {\n    return stringify(type);\n  }\n}\n\n/**\n * Indicates that a component is still being loaded in a synchronous compile.\n */\nfunction componentStillLoadingError(compType: Type) {\n  const error =\n      Error(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\n  (error as any)[ERROR_COMPONENT_TYPE] = compType;\n  return error;\n}\n"],"sourceRoot":""}