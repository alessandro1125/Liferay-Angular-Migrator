{"version":3,"sources":["../../../../../../packages/compiler/src/directive_normalizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileStylesheetMetadata, CompileTemplateMetadata, templateSourceUrl} from './compile_metadata';\nimport {CompilerConfig, preserveWhitespacesDefault} from './config';\nimport {ViewEncapsulation} from './core';\nimport * as html from './ml_parser/ast';\nimport {HtmlParser} from './ml_parser/html_parser';\nimport {InterpolationConfig} from './ml_parser/interpolation_config';\nimport {ParseTreeResult as HtmlParseTreeResult} from './ml_parser/parser';\nimport {ResourceLoader} from './resource_loader';\nimport {extractStyleUrls, isStyleUrlResolvable} from './style_url_resolver';\nimport {PreparsedElementType, preparseElement} from './template_parser/template_preparser';\nimport {UrlResolver} from './url_resolver';\nimport {SyncAsync, isDefined, stringify, syntaxError} from './util';\n\nexport interface PrenormalizedTemplateMetadata {\n  ngModuleType: any;\n  componentType: any;\n  moduleUrl: string;\n  template: string|null;\n  templateUrl: string|null;\n  styles: string[];\n  styleUrls: string[];\n  interpolation: [string, string]|null;\n  encapsulation: ViewEncapsulation|null;\n  animations: any[];\n  preserveWhitespaces: boolean|null;\n}\n\nexport class DirectiveNormalizer {\n  private _resourceLoaderCache = new Map<string, SyncAsync<string>>();\n\n  constructor(\n      private _resourceLoader: ResourceLoader, private _urlResolver: UrlResolver,\n      private _htmlParser: HtmlParser, private _config: CompilerConfig) {}\n\n  clearCache(): void { this._resourceLoaderCache.clear(); }\n\n  clearCacheFor(normalizedDirective: CompileDirectiveMetadata): void {\n    if (!normalizedDirective.isComponent) {\n      return;\n    }\n    const template = normalizedDirective.template !;\n    this._resourceLoaderCache.delete(template.templateUrl !);\n    template.externalStylesheets.forEach(\n        (stylesheet) => { this._resourceLoaderCache.delete(stylesheet.moduleUrl !); });\n  }\n\n  private _fetch(url: string): SyncAsync<string> {\n    let result = this._resourceLoaderCache.get(url);\n    if (!result) {\n      result = this._resourceLoader.get(url);\n      this._resourceLoaderCache.set(url, result);\n    }\n    return result;\n  }\n\n  normalizeTemplate(prenormData: PrenormalizedTemplateMetadata):\n      SyncAsync<CompileTemplateMetadata> {\n    if (isDefined(prenormData.template)) {\n      if (isDefined(prenormData.templateUrl)) {\n        throw syntaxError(\n            `'${stringify(prenormData.componentType)}' component cannot define both template and templateUrl`);\n      }\n      if (typeof prenormData.template !== 'string') {\n        throw syntaxError(\n            `The template specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else if (isDefined(prenormData.templateUrl)) {\n      if (typeof prenormData.templateUrl !== 'string') {\n        throw syntaxError(\n            `The templateUrl specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else {\n      throw syntaxError(\n          `No template specified for component ${stringify(prenormData.componentType)}`);\n    }\n\n    if (isDefined(prenormData.preserveWhitespaces) &&\n        typeof prenormData.preserveWhitespaces !== 'boolean') {\n      throw syntaxError(\n          `The preserveWhitespaces option for component ${stringify(prenormData.componentType)} must be a boolean`);\n    }\n\n    return SyncAsync.then(\n        this._preParseTemplate(prenormData),\n        (preparsedTemplate) => this._normalizeTemplateMetadata(prenormData, preparsedTemplate));\n  }\n\n  private _preParseTemplate(prenomData: PrenormalizedTemplateMetadata):\n      SyncAsync<PreparsedTemplate> {\n    let template: SyncAsync<string>;\n    let templateUrl: string;\n    if (prenomData.template != null) {\n      template = prenomData.template;\n      templateUrl = prenomData.moduleUrl;\n    } else {\n      templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl !);\n      template = this._fetch(templateUrl);\n    }\n    return SyncAsync.then(\n        template, (template) => this._preparseLoadedTemplate(prenomData, template, templateUrl));\n  }\n\n  private _preparseLoadedTemplate(\n      prenormData: PrenormalizedTemplateMetadata, template: string,\n      templateAbsUrl: string): PreparsedTemplate {\n    const isInline = !!prenormData.template;\n    const interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation !);\n    const rootNodesAndErrors = this._htmlParser.parse(\n        template,\n        templateSourceUrl(\n            {reference: prenormData.ngModuleType}, {type: {reference: prenormData.componentType}},\n            {isInline, templateUrl: templateAbsUrl}),\n        true, interpolationConfig);\n    if (rootNodesAndErrors.errors.length > 0) {\n      const errorString = rootNodesAndErrors.errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`);\n    }\n\n    const templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: prenormData.styles, moduleUrl: prenormData.moduleUrl}));\n\n    const visitor = new TemplatePreparseVisitor();\n    html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n    const templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl}));\n\n    const styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n\n    const inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n    const styleUrls = this\n                          ._normalizeStylesheet(new CompileStylesheetMetadata(\n                              {styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl}))\n                          .styleUrls;\n    return {\n      template,\n      templateUrl: templateAbsUrl, isInline,\n      htmlAst: rootNodesAndErrors, styles, inlineStyleUrls, styleUrls,\n      ngContentSelectors: visitor.ngContentSelectors,\n    };\n  }\n\n  private _normalizeTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata,\n      preparsedTemplate: PreparsedTemplate): SyncAsync<CompileTemplateMetadata> {\n    return SyncAsync.then(\n        this._loadMissingExternalStylesheets(\n            preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)),\n        (externalStylesheets) => this._normalizeLoadedTemplateMetadata(\n            prenormData, preparsedTemplate, externalStylesheets));\n  }\n\n  private _normalizeLoadedTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata, preparsedTemplate: PreparsedTemplate,\n      stylesheets: Map<string, CompileStylesheetMetadata>): CompileTemplateMetadata {\n    // Algorithm:\n    // - produce exactly 1 entry per original styleUrl in\n    // CompileTemplateMetadata.externalStylesheets with all styles inlined\n    // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n    // Reason: be able to determine how many stylesheets there are even without loading\n    // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n    // (as resource loading may be async)\n\n    const styles = [...preparsedTemplate.styles];\n    this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n    const styleUrls = preparsedTemplate.styleUrls;\n\n    const externalStylesheets = styleUrls.map(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl) !;\n      const styles = [...stylesheet.styles];\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n      return new CompileStylesheetMetadata({moduleUrl: styleUrl, styles: styles});\n    });\n\n    let encapsulation = prenormData.encapsulation;\n    if (encapsulation == null) {\n      encapsulation = this._config.defaultEncapsulation;\n    }\n    if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\n        styleUrls.length === 0) {\n      encapsulation = ViewEncapsulation.None;\n    }\n    return new CompileTemplateMetadata({\n      encapsulation,\n      template: preparsedTemplate.template,\n      templateUrl: preparsedTemplate.templateUrl,\n      htmlAst: preparsedTemplate.htmlAst, styles, styleUrls,\n      ngContentSelectors: preparsedTemplate.ngContentSelectors,\n      animations: prenormData.animations,\n      interpolation: prenormData.interpolation,\n      isInline: preparsedTemplate.isInline, externalStylesheets,\n      preserveWhitespaces: preserveWhitespacesDefault(\n          prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n    });\n  }\n\n  private _inlineStyles(\n      styleUrls: string[], stylesheets: Map<string, CompileStylesheetMetadata>,\n      targetStyles: string[]) {\n    styleUrls.forEach(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl) !;\n      stylesheet.styles.forEach(style => targetStyles.push(style));\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n    });\n  }\n\n  private _loadMissingExternalStylesheets(\n      styleUrls: string[],\n      loadedStylesheets:\n          Map<string, CompileStylesheetMetadata> = new Map<string, CompileStylesheetMetadata>()):\n      SyncAsync<Map<string, CompileStylesheetMetadata>> {\n    return SyncAsync.then(\n        SyncAsync.all(styleUrls.filter((styleUrl) => !loadedStylesheets.has(styleUrl))\n                          .map(\n                              styleUrl => SyncAsync.then(\n                                  this._fetch(styleUrl),\n                                  (loadedStyle) => {\n                                    const stylesheet =\n                                        this._normalizeStylesheet(new CompileStylesheetMetadata(\n                                            {styles: [loadedStyle], moduleUrl: styleUrl}));\n                                    loadedStylesheets.set(styleUrl, stylesheet);\n                                    return this._loadMissingExternalStylesheets(\n                                        stylesheet.styleUrls, loadedStylesheets);\n                                  }))),\n        (_) => loadedStylesheets);\n  }\n\n  private _normalizeStylesheet(stylesheet: CompileStylesheetMetadata): CompileStylesheetMetadata {\n    const moduleUrl = stylesheet.moduleUrl !;\n    const allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n                             .map(url => this._urlResolver.resolve(moduleUrl, url));\n\n    const allStyles = stylesheet.styles.map(style => {\n      const styleWithImports = extractStyleUrls(this._urlResolver, moduleUrl, style);\n      allStyleUrls.push(...styleWithImports.styleUrls);\n      return styleWithImports.style;\n    });\n\n    return new CompileStylesheetMetadata(\n        {styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl});\n  }\n}\n\ninterface PreparsedTemplate {\n  template: string;\n  templateUrl: string;\n  isInline: boolean;\n  htmlAst: HtmlParseTreeResult;\n  styles: string[];\n  inlineStyleUrls: string[];\n  styleUrls: string[];\n  ngContentSelectors: string[];\n}\n\nclass TemplatePreparseVisitor implements html.Visitor {\n  ngContentSelectors: string[] = [];\n  styles: string[] = [];\n  styleUrls: string[] = [];\n  ngNonBindableStackCount: number = 0;\n\n  visitElement(ast: html.Element, context: any): any {\n    const preparsedElement = preparseElement(ast);\n    switch (preparsedElement.type) {\n      case PreparsedElementType.NG_CONTENT:\n        if (this.ngNonBindableStackCount === 0) {\n          this.ngContentSelectors.push(preparsedElement.selectAttr);\n        }\n        break;\n      case PreparsedElementType.STYLE:\n        let textContent = '';\n        ast.children.forEach(child => {\n          if (child instanceof html.Text) {\n            textContent += child.value;\n          }\n        });\n        this.styles.push(textContent);\n        break;\n      case PreparsedElementType.STYLESHEET:\n        this.styleUrls.push(preparsedElement.hrefAttr);\n        break;\n      default:\n        break;\n    }\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount++;\n    }\n    html.visitAll(this, ast.children);\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount--;\n    }\n    return null;\n  }\n\n  visitExpansion(ast: html.Expansion, context: any): any { html.visitAll(this, ast.cases); }\n\n  visitExpansionCase(ast: html.ExpansionCase, context: any): any {\n    html.visitAll(this, ast.expression);\n  }\n\n  visitComment(ast: html.Comment, context: any): any { return null; }\n  visitAttribute(ast: html.Attribute, context: any): any { return null; }\n  visitText(ast: html.Text, context: any): any { return null; }\n}\n"],"sourceRoot":""}