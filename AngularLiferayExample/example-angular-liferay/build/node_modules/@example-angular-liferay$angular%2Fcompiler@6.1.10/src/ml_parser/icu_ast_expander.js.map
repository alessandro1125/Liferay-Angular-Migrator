{"version":3,"sources":["../../../../../../../packages/compiler/src/ml_parser/icu_ast_expander.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseError, ParseSourceSpan} from '../parse_util';\n\nimport * as html from './ast';\n\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\nconst PLURAL_CASES: string[] = ['zero', 'one', 'two', 'few', 'many', 'other'];\n\n/**\n * Expands special forms into elements.\n *\n * For example,\n *\n * ```\n * { messages.length, plural,\n *   =0 {zero}\n *   =1 {one}\n *   other {more than one}\n * }\n * ```\n *\n * will be expanded into\n *\n * ```\n * <ng-container [ngPlural]=\"messages.length\">\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n * </ng-container>\n * ```\n */\nexport function expandNodes(nodes: html.Node[]): ExpansionResult {\n  const expander = new _Expander();\n  return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);\n}\n\nexport class ExpansionResult {\n  constructor(public nodes: html.Node[], public expanded: boolean, public errors: ParseError[]) {}\n}\n\nexport class ExpansionError extends ParseError {\n  constructor(span: ParseSourceSpan, errorMsg: string) { super(span, errorMsg); }\n}\n\n/**\n * Expand expansion forms (plural, select) to directives\n *\n * @internal\n */\nclass _Expander implements html.Visitor {\n  isExpanded: boolean = false;\n  errors: ParseError[] = [];\n\n  visitElement(element: html.Element, context: any): any {\n    return new html.Element(\n        element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan,\n        element.startSourceSpan, element.endSourceSpan);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any { return attribute; }\n\n  visitText(text: html.Text, context: any): any { return text; }\n\n  visitComment(comment: html.Comment, context: any): any { return comment; }\n\n  visitExpansion(icu: html.Expansion, context: any): any {\n    this.isExpanded = true;\n    return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n                                  _expandDefaultForm(icu, this.errors);\n  }\n\n  visitExpansionCase(icuCase: html.ExpansionCase, context: any): any {\n    throw new Error('Should not be reached');\n  }\n}\n\n// Plural forms are expanded to `NgPlural` and `NgPluralCase`s\nfunction _expandPluralForm(ast: html.Expansion, errors: ParseError[]): html.Element {\n  const children = ast.cases.map(c => {\n    if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n      errors.push(new ExpansionError(\n          c.valueSourceSpan,\n          `Plural cases should be \"=<number>\" or one of ${PLURAL_CASES.join(\", \")}`));\n    }\n\n    const expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n\n    return new html.Element(\n        `ng-template`, [new html.Attribute('ngPluralCase', `${c.value}`, c.valueSourceSpan)],\n        expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const switchAttr = new html.Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\n  return new html.Element(\n      'ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n\n// ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitchCase`s\nfunction _expandDefaultForm(ast: html.Expansion, errors: ParseError[]): html.Element {\n  const children = ast.cases.map(c => {\n    const expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n\n    if (c.value === 'other') {\n      // other is the default case when no values match\n      return new html.Element(\n          `ng-template`, [new html.Attribute('ngSwitchDefault', '', c.valueSourceSpan)],\n          expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    }\n\n    return new html.Element(\n        `ng-template`, [new html.Attribute('ngSwitchCase', `${c.value}`, c.valueSourceSpan)],\n        expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const switchAttr = new html.Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\n  return new html.Element(\n      'ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n"],"sourceRoot":""}