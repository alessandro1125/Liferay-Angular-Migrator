{"version":3,"sources":["../../../../../../../packages/compiler/src/ml_parser/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: Visitor, context: any): any;\n}\n\nexport class Text implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitText(this, context); }\n}\n\nexport class Expansion implements Node {\n  constructor(\n      public switchValue: string, public type: string, public cases: ExpansionCase[],\n      public sourceSpan: ParseSourceSpan, public switchValueSourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitExpansion(this, context); }\n}\n\nexport class ExpansionCase implements Node {\n  constructor(\n      public value: string, public expression: Node[], public sourceSpan: ParseSourceSpan,\n      public valueSourceSpan: ParseSourceSpan, public expSourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context: any): any { return visitor.visitExpansionCase(this, context); }\n}\n\nexport class Attribute implements Node {\n  constructor(\n      public name: string, public value: string, public sourceSpan: ParseSourceSpan,\n      public valueSpan?: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitAttribute(this, context); }\n}\n\nexport class Element implements Node {\n  constructor(\n      public name: string, public attrs: Attribute[], public children: Node[],\n      public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan|null = null,\n      public endSourceSpan: ParseSourceSpan|null = null) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitElement(this, context); }\n}\n\nexport class Comment implements Node {\n  constructor(public value: string|null, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitComment(this, context); }\n}\n\nexport interface Visitor {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node, context: any): any;\n\n  visitElement(element: Element, context: any): any;\n  visitAttribute(attribute: Attribute, context: any): any;\n  visitText(text: Text, context: any): any;\n  visitComment(comment: Comment, context: any): any;\n  visitExpansion(expansion: Expansion, context: any): any;\n  visitExpansionCase(expansionCase: ExpansionCase, context: any): any;\n}\n\nexport function visitAll(visitor: Visitor, nodes: Node[], context: any = null): any[] {\n  const result: any[] = [];\n\n  const visit = visitor.visit ?\n      (ast: Node) => visitor.visit !(ast, context) || ast.visit(visitor, context) :\n      (ast: Node) => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nexport class RecursiveVisitor implements Visitor {\n  constructor() {}\n\n  visitElement(ast: Element, context: any): any {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n\n  visitAttribute(ast: Attribute, context: any): any {}\n  visitText(ast: Text, context: any): any {}\n  visitComment(ast: Comment, context: any): any {}\n\n  visitExpansion(ast: Expansion, context: any): any {\n    return this.visitChildren(context, visit => { visit(ast.cases); });\n  }\n\n  visitExpansionCase(ast: ExpansionCase, context: any): any {}\n\n  private visitChildren<T extends Node>(\n      context: any, cb: (visit: (<V extends Node>(children: V[]|undefined) => void)) => void) {\n    let results: any[][] = [];\n    let t = this;\n    function visit<T extends Node>(children: T[] | undefined) {\n      if (children) results.push(visitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\nexport type HtmlAstPath = AstPath<Node>;\n\nfunction spanOf(ast: Node) {\n  const start = ast.sourceSpan.start.offset;\n  let end = ast.sourceSpan.end.offset;\n  if (ast instanceof Element) {\n    if (ast.endSourceSpan) {\n      end = ast.endSourceSpan.end.offset;\n    } else if (ast.children && ast.children.length) {\n      end = spanOf(ast.children[ast.children.length - 1]).end;\n    }\n  }\n  return {start, end};\n}\n\nexport function findNode(nodes: Node[], position: number): HtmlAstPath {\n  const path: Node[] = [];\n\n  const visitor = new class extends RecursiveVisitor {\n    visit(ast: Node, context: any): any {\n      const span = spanOf(ast);\n      if (span.start <= position && position < span.end) {\n        path.push(ast);\n      } else {\n        // Returning a value here will result in the children being skipped.\n        return true;\n      }\n    }\n  };\n\n  visitAll(visitor, nodes);\n\n  return new AstPath<Node>(path, position);\n}"],"sourceRoot":""}