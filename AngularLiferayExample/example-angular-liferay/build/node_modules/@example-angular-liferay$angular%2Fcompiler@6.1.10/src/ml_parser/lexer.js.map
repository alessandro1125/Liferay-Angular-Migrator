{"version":3,"sources":["../../../../../../../packages/compiler/src/ml_parser/lexer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as chars from '../chars';\nimport {ParseError, ParseLocation, ParseSourceFile, ParseSourceSpan} from '../parse_util';\n\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from './interpolation_config';\nimport {NAMED_ENTITIES, TagContentType, TagDefinition} from './tags';\n\nexport enum TokenType {\n  TAG_OPEN_START,\n  TAG_OPEN_END,\n  TAG_OPEN_END_VOID,\n  TAG_CLOSE,\n  TEXT,\n  ESCAPABLE_RAW_TEXT,\n  RAW_TEXT,\n  COMMENT_START,\n  COMMENT_END,\n  CDATA_START,\n  CDATA_END,\n  ATTR_NAME,\n  ATTR_VALUE,\n  DOC_TYPE,\n  EXPANSION_FORM_START,\n  EXPANSION_CASE_VALUE,\n  EXPANSION_CASE_EXP_START,\n  EXPANSION_CASE_EXP_END,\n  EXPANSION_FORM_END,\n  EOF\n}\n\nexport class Token {\n  constructor(public type: TokenType, public parts: string[], public sourceSpan: ParseSourceSpan) {}\n}\n\nexport class TokenError extends ParseError {\n  constructor(errorMsg: string, public tokenType: TokenType, span: ParseSourceSpan) {\n    super(span, errorMsg);\n  }\n}\n\nexport class TokenizeResult {\n  constructor(public tokens: Token[], public errors: TokenError[]) {}\n}\n\nexport function tokenize(\n    source: string, url: string, getTagDefinition: (tagName: string) => TagDefinition,\n    tokenizeExpansionForms: boolean = false,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): TokenizeResult {\n  return new _Tokenizer(\n             new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms,\n             interpolationConfig)\n      .tokenize();\n}\n\nconst _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n\nfunction _unexpectedCharacterErrorMsg(charCode: number): string {\n  const char = charCode === chars.$EOF ? 'EOF' : String.fromCharCode(charCode);\n  return `Unexpected character \"${char}\"`;\n}\n\nfunction _unknownEntityErrorMsg(entitySrc: string): string {\n  return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\n\nclass _ControlFlowError {\n  constructor(public error: TokenError) {}\n}\n\n// See http://www.w3.org/TR/html51/syntax.html#writing\nclass _Tokenizer {\n  private _input: string;\n  private _length: number;\n  // Note: this is always lowercase!\n  private _peek: number = -1;\n  private _nextPeek: number = -1;\n  private _index: number = -1;\n  private _line: number = 0;\n  private _column: number = -1;\n  // TODO(issue/24571): remove '!'.\n  private _currentTokenStart !: ParseLocation;\n  // TODO(issue/24571): remove '!'.\n  private _currentTokenType !: TokenType;\n  private _expansionCaseStack: TokenType[] = [];\n  private _inInterpolation: boolean = false;\n\n  tokens: Token[] = [];\n  errors: TokenError[] = [];\n\n  /**\n   * @param _file The html source\n   * @param _getTagDefinition\n   * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\n   * @param _interpolationConfig\n   */\n  constructor(\n      private _file: ParseSourceFile, private _getTagDefinition: (tagName: string) => TagDefinition,\n      private _tokenizeIcu: boolean,\n      private _interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    this._input = _file.content;\n    this._length = _file.content.length;\n    this._advance();\n  }\n\n  private _processCarriageReturns(content: string): string {\n    // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n    // In order to keep the original position in the source, we can not\n    // pre-process it.\n    // Instead CRs are processed right before instantiating the tokens.\n    return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n  }\n\n  tokenize(): TokenizeResult {\n    while (this._peek !== chars.$EOF) {\n      const start = this._getLocation();\n      try {\n        if (this._attemptCharCode(chars.$LT)) {\n          if (this._attemptCharCode(chars.$BANG)) {\n            if (this._attemptCharCode(chars.$LBRACKET)) {\n              this._consumeCdata(start);\n            } else if (this._attemptCharCode(chars.$MINUS)) {\n              this._consumeComment(start);\n            } else {\n              this._consumeDocType(start);\n            }\n          } else if (this._attemptCharCode(chars.$SLASH)) {\n            this._consumeTagClose(start);\n          } else {\n            this._consumeTagOpen(start);\n          }\n        } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n          this._consumeText();\n        }\n      } catch (e) {\n        if (e instanceof _ControlFlowError) {\n          this.errors.push(e.error);\n        } else {\n          throw e;\n        }\n      }\n    }\n    this._beginToken(TokenType.EOF);\n    this._endToken([]);\n    return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n  }\n\n  /**\n   * @returns whether an ICU token has been created\n   * @internal\n   */\n  private _tokenizeExpansionForm(): boolean {\n    if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n      this._consumeExpansionFormStart();\n      return true;\n    }\n\n    if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\n      this._consumeExpansionCaseStart();\n      return true;\n    }\n\n    if (this._peek === chars.$RBRACE) {\n      if (this._isInExpansionCase()) {\n        this._consumeExpansionCaseEnd();\n        return true;\n      }\n\n      if (this._isInExpansionForm()) {\n        this._consumeExpansionFormEnd();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _getLocation(): ParseLocation {\n    return new ParseLocation(this._file, this._index, this._line, this._column);\n  }\n\n  private _getSpan(\n      start: ParseLocation = this._getLocation(),\n      end: ParseLocation = this._getLocation()): ParseSourceSpan {\n    return new ParseSourceSpan(start, end);\n  }\n\n  private _beginToken(type: TokenType, start: ParseLocation = this._getLocation()) {\n    this._currentTokenStart = start;\n    this._currentTokenType = type;\n  }\n\n  private _endToken(parts: string[], end: ParseLocation = this._getLocation()): Token {\n    const token =\n        new Token(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n    this.tokens.push(token);\n    this._currentTokenStart = null !;\n    this._currentTokenType = null !;\n    return token;\n  }\n\n  private _createError(msg: string, span: ParseSourceSpan): _ControlFlowError {\n    if (this._isInExpansionForm()) {\n      msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\n    }\n    const error = new TokenError(msg, this._currentTokenType, span);\n    this._currentTokenStart = null !;\n    this._currentTokenType = null !;\n    return new _ControlFlowError(error);\n  }\n\n  private _advance() {\n    if (this._index >= this._length) {\n      throw this._createError(_unexpectedCharacterErrorMsg(chars.$EOF), this._getSpan());\n    }\n    if (this._peek === chars.$LF) {\n      this._line++;\n      this._column = 0;\n    } else if (this._peek !== chars.$LF && this._peek !== chars.$CR) {\n      this._column++;\n    }\n    this._index++;\n    this._peek = this._index >= this._length ? chars.$EOF : this._input.charCodeAt(this._index);\n    this._nextPeek =\n        this._index + 1 >= this._length ? chars.$EOF : this._input.charCodeAt(this._index + 1);\n  }\n\n  private _attemptCharCode(charCode: number): boolean {\n    if (this._peek === charCode) {\n      this._advance();\n      return true;\n    }\n    return false;\n  }\n\n  private _attemptCharCodeCaseInsensitive(charCode: number): boolean {\n    if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n      this._advance();\n      return true;\n    }\n    return false;\n  }\n\n  private _requireCharCode(charCode: number) {\n    const location = this._getLocation();\n    if (!this._attemptCharCode(charCode)) {\n      throw this._createError(\n          _unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n    }\n  }\n\n  private _attemptStr(chars: string): boolean {\n    const len = chars.length;\n    if (this._index + len > this._length) {\n      return false;\n    }\n    const initialPosition = this._savePosition();\n    for (let i = 0; i < len; i++) {\n      if (!this._attemptCharCode(chars.charCodeAt(i))) {\n        // If attempting to parse the string fails, we want to reset the parser\n        // to where it was before the attempt\n        this._restorePosition(initialPosition);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private _attemptStrCaseInsensitive(chars: string): boolean {\n    for (let i = 0; i < chars.length; i++) {\n      if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private _requireStr(chars: string) {\n    const location = this._getLocation();\n    if (!this._attemptStr(chars)) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n    }\n  }\n\n  private _attemptCharCodeUntilFn(predicate: (code: number) => boolean) {\n    while (!predicate(this._peek)) {\n      this._advance();\n    }\n  }\n\n  private _requireCharCodeUntilFn(predicate: (code: number) => boolean, len: number) {\n    const start = this._getLocation();\n    this._attemptCharCodeUntilFn(predicate);\n    if (this._index - start.offset < len) {\n      throw this._createError(\n          _unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n    }\n  }\n\n  private _attemptUntilChar(char: number) {\n    while (this._peek !== char) {\n      this._advance();\n    }\n  }\n\n  private _readChar(decodeEntities: boolean): string {\n    if (decodeEntities && this._peek === chars.$AMPERSAND) {\n      return this._decodeEntity();\n    } else {\n      const index = this._index;\n      this._advance();\n      return this._input[index];\n    }\n  }\n\n  private _decodeEntity(): string {\n    const start = this._getLocation();\n    this._advance();\n    if (this._attemptCharCode(chars.$HASH)) {\n      const isHex = this._attemptCharCode(chars.$x) || this._attemptCharCode(chars.$X);\n      const numberStart = this._getLocation().offset;\n      this._attemptCharCodeUntilFn(isDigitEntityEnd);\n      if (this._peek != chars.$SEMICOLON) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n      }\n      this._advance();\n      const strNum = this._input.substring(numberStart, this._index - 1);\n      try {\n        const charCode = parseInt(strNum, isHex ? 16 : 10);\n        return String.fromCharCode(charCode);\n      } catch (e) {\n        const entity = this._input.substring(start.offset + 1, this._index - 1);\n        throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\n      }\n    } else {\n      const startPosition = this._savePosition();\n      this._attemptCharCodeUntilFn(isNamedEntityEnd);\n      if (this._peek != chars.$SEMICOLON) {\n        this._restorePosition(startPosition);\n        return '&';\n      }\n      this._advance();\n      const name = this._input.substring(start.offset + 1, this._index - 1);\n      const char = NAMED_ENTITIES[name];\n      if (!char) {\n        throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));\n      }\n      return char;\n    }\n  }\n\n  private _consumeRawText(\n      decodeEntities: boolean, firstCharOfEnd: number, attemptEndRest: () => boolean): Token {\n    let tagCloseStart: ParseLocation;\n    const textStart = this._getLocation();\n    this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);\n    const parts: string[] = [];\n    while (true) {\n      tagCloseStart = this._getLocation();\n      if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n        break;\n      }\n      if (this._index > tagCloseStart.offset) {\n        // add the characters consumed by the previous if statement to the output\n        parts.push(this._input.substring(tagCloseStart.offset, this._index));\n      }\n      while (this._peek !== firstCharOfEnd) {\n        parts.push(this._readChar(decodeEntities));\n      }\n    }\n    return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\n  }\n\n  private _consumeComment(start: ParseLocation) {\n    this._beginToken(TokenType.COMMENT_START, start);\n    this._requireCharCode(chars.$MINUS);\n    this._endToken([]);\n    const textToken = this._consumeRawText(false, chars.$MINUS, () => this._attemptStr('->'));\n    this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);\n    this._endToken([]);\n  }\n\n  private _consumeCdata(start: ParseLocation) {\n    this._beginToken(TokenType.CDATA_START, start);\n    this._requireStr('CDATA[');\n    this._endToken([]);\n    const textToken = this._consumeRawText(false, chars.$RBRACKET, () => this._attemptStr(']>'));\n    this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);\n    this._endToken([]);\n  }\n\n  private _consumeDocType(start: ParseLocation) {\n    this._beginToken(TokenType.DOC_TYPE, start);\n    this._attemptUntilChar(chars.$GT);\n    this._advance();\n    this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n  }\n\n  private _consumePrefixAndName(): string[] {\n    const nameOrPrefixStart = this._index;\n    let prefix: string = null !;\n    while (this._peek !== chars.$COLON && !isPrefixEnd(this._peek)) {\n      this._advance();\n    }\n    let nameStart: number;\n    if (this._peek === chars.$COLON) {\n      this._advance();\n      prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n      nameStart = this._index;\n    } else {\n      nameStart = nameOrPrefixStart;\n    }\n    this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n    const name = this._input.substring(nameStart, this._index);\n    return [prefix, name];\n  }\n\n  private _consumeTagOpen(start: ParseLocation) {\n    const savedPos = this._savePosition();\n    let tagName: string;\n    let lowercaseTagName: string;\n    try {\n      if (!chars.isAsciiLetter(this._peek)) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n      }\n      const nameStart = this._index;\n      this._consumeTagOpenStart(start);\n      tagName = this._input.substring(nameStart, this._index);\n      lowercaseTagName = tagName.toLowerCase();\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      while (this._peek !== chars.$SLASH && this._peek !== chars.$GT) {\n        this._consumeAttributeName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        if (this._attemptCharCode(chars.$EQ)) {\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._consumeAttributeValue();\n        }\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n      }\n      this._consumeTagOpenEnd();\n    } catch (e) {\n      if (e instanceof _ControlFlowError) {\n        // When the start tag is invalid, assume we want a \"<\"\n        this._restorePosition(savedPos);\n        // Back to back text tokens are merged at the end\n        this._beginToken(TokenType.TEXT, start);\n        this._endToken(['<']);\n        return;\n      }\n\n      throw e;\n    }\n\n    const contentTokenType = this._getTagDefinition(tagName).contentType;\n\n    if (contentTokenType === TagContentType.RAW_TEXT) {\n      this._consumeRawTextWithTagClose(lowercaseTagName, false);\n    } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n      this._consumeRawTextWithTagClose(lowercaseTagName, true);\n    }\n  }\n\n  private _consumeRawTextWithTagClose(lowercaseTagName: string, decodeEntities: boolean) {\n    const textToken = this._consumeRawText(decodeEntities, chars.$LT, () => {\n      if (!this._attemptCharCode(chars.$SLASH)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      if (!this._attemptStrCaseInsensitive(lowercaseTagName)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      return this._attemptCharCode(chars.$GT);\n    });\n    this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);\n    this._endToken([null !, lowercaseTagName]);\n  }\n\n  private _consumeTagOpenStart(start: ParseLocation) {\n    this._beginToken(TokenType.TAG_OPEN_START, start);\n    const parts = this._consumePrefixAndName();\n    this._endToken(parts);\n  }\n\n  private _consumeAttributeName() {\n    this._beginToken(TokenType.ATTR_NAME);\n    const prefixAndName = this._consumePrefixAndName();\n    this._endToken(prefixAndName);\n  }\n\n  private _consumeAttributeValue() {\n    this._beginToken(TokenType.ATTR_VALUE);\n    let value: string;\n    if (this._peek === chars.$SQ || this._peek === chars.$DQ) {\n      const quoteChar = this._peek;\n      this._advance();\n      const parts: string[] = [];\n      while (this._peek !== quoteChar) {\n        parts.push(this._readChar(true));\n      }\n      value = parts.join('');\n      this._advance();\n    } else {\n      const valueStart = this._index;\n      this._requireCharCodeUntilFn(isNameEnd, 1);\n      value = this._input.substring(valueStart, this._index);\n    }\n    this._endToken([this._processCarriageReturns(value)]);\n  }\n\n  private _consumeTagOpenEnd() {\n    const tokenType =\n        this._attemptCharCode(chars.$SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;\n    this._beginToken(tokenType);\n    this._requireCharCode(chars.$GT);\n    this._endToken([]);\n  }\n\n  private _consumeTagClose(start: ParseLocation) {\n    this._beginToken(TokenType.TAG_CLOSE, start);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    const prefixAndName = this._consumePrefixAndName();\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._requireCharCode(chars.$GT);\n    this._endToken(prefixAndName);\n  }\n\n  private _consumeExpansionFormStart() {\n    this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());\n    this._requireCharCode(chars.$LBRACE);\n    this._endToken([]);\n\n    this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);\n\n    this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n    const condition = this._readUntil(chars.$COMMA);\n    this._endToken([condition], this._getLocation());\n    this._requireCharCode(chars.$COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n    const type = this._readUntil(chars.$COMMA);\n    this._endToken([type], this._getLocation());\n    this._requireCharCode(chars.$COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n  }\n\n  private _consumeExpansionCaseStart() {\n    this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());\n    const value = this._readUntil(chars.$LBRACE).trim();\n    this._endToken([value], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());\n    this._requireCharCode(chars.$LBRACE);\n    this._endToken([], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);\n  }\n\n  private _consumeExpansionCaseEnd() {\n    this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());\n    this._requireCharCode(chars.$RBRACE);\n    this._endToken([], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.pop();\n  }\n\n  private _consumeExpansionFormEnd() {\n    this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());\n    this._requireCharCode(chars.$RBRACE);\n    this._endToken([]);\n\n    this._expansionCaseStack.pop();\n  }\n\n  private _consumeText() {\n    const start = this._getLocation();\n    this._beginToken(TokenType.TEXT, start);\n    const parts: string[] = [];\n\n    do {\n      if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n        parts.push(this._interpolationConfig.start);\n        this._inInterpolation = true;\n      } else if (\n          this._interpolationConfig && this._inInterpolation &&\n          this._attemptStr(this._interpolationConfig.end)) {\n        parts.push(this._interpolationConfig.end);\n        this._inInterpolation = false;\n      } else {\n        parts.push(this._readChar(true));\n      }\n    } while (!this._isTextEnd());\n\n    this._endToken([this._processCarriageReturns(parts.join(''))]);\n  }\n\n  private _isTextEnd(): boolean {\n    if (this._peek === chars.$LT || this._peek === chars.$EOF) {\n      return true;\n    }\n\n    if (this._tokenizeIcu && !this._inInterpolation) {\n      if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n        // start of an expansion form\n        return true;\n      }\n\n      if (this._peek === chars.$RBRACE && this._isInExpansionCase()) {\n        // end of and expansion case\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _savePosition(): [number, number, number, number, number] {\n    return [this._peek, this._index, this._column, this._line, this.tokens.length];\n  }\n\n  private _readUntil(char: number): string {\n    const start = this._index;\n    this._attemptUntilChar(char);\n    return this._input.substring(start, this._index);\n  }\n\n  private _restorePosition(position: [number, number, number, number, number]): void {\n    this._peek = position[0];\n    this._index = position[1];\n    this._column = position[2];\n    this._line = position[3];\n    const nbTokens = position[4];\n    if (nbTokens < this.tokens.length) {\n      // remove any extra tokens\n      this.tokens = this.tokens.slice(0, nbTokens);\n    }\n  }\n\n  private _isInExpansionCase(): boolean {\n    return this._expansionCaseStack.length > 0 &&\n        this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n        TokenType.EXPANSION_CASE_EXP_START;\n  }\n\n  private _isInExpansionForm(): boolean {\n    return this._expansionCaseStack.length > 0 &&\n        this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n        TokenType.EXPANSION_FORM_START;\n  }\n}\n\nfunction isNotWhitespace(code: number): boolean {\n  return !chars.isWhitespace(code) || code === chars.$EOF;\n}\n\nfunction isNameEnd(code: number): boolean {\n  return chars.isWhitespace(code) || code === chars.$GT || code === chars.$SLASH ||\n      code === chars.$SQ || code === chars.$DQ || code === chars.$EQ;\n}\n\nfunction isPrefixEnd(code: number): boolean {\n  return (code < chars.$a || chars.$z < code) && (code < chars.$A || chars.$Z < code) &&\n      (code < chars.$0 || code > chars.$9);\n}\n\nfunction isDigitEntityEnd(code: number): boolean {\n  return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiHexDigit(code);\n}\n\nfunction isNamedEntityEnd(code: number): boolean {\n  return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiLetter(code);\n}\n\nfunction isExpansionFormStart(\n    input: string, offset: number, interpolationConfig: InterpolationConfig): boolean {\n  const isInterpolationStart =\n      interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;\n\n  return input.charCodeAt(offset) == chars.$LBRACE && !isInterpolationStart;\n}\n\nfunction isExpansionCaseStart(peek: number): boolean {\n  return peek === chars.$EQ || chars.isAsciiLetter(peek) || chars.isDigit(peek);\n}\n\nfunction compareCharCodeCaseInsensitive(code1: number, code2: number): boolean {\n  return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n}\n\nfunction toUpperCaseCharCode(code: number): number {\n  return code >= chars.$a && code <= chars.$z ? code - chars.$a + chars.$A : code;\n}\n\nfunction mergeTextTokens(srcTokens: Token[]): Token[] {\n  const dstTokens: Token[] = [];\n  let lastDstToken: Token|undefined = undefined;\n  for (let i = 0; i < srcTokens.length; i++) {\n    const token = srcTokens[i];\n    if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {\n      lastDstToken.parts[0] += token.parts[0];\n      lastDstToken.sourceSpan.end = token.sourceSpan.end;\n    } else {\n      lastDstToken = token;\n      dstTokens.push(lastDstToken);\n    }\n  }\n\n  return dstTokens;\n}\n"],"sourceRoot":""}