{"version":3,"sources":["../../../../../../../packages/compiler/testing/src/directive_resolver_mock.ts"],"names":[],"mappings":";;;;;;AAOA,WAA0B,iBAA1B,QAAwD,mBAAxD;;;;;AAMA,SAAM,MAAA,qBAAA,SAAqC,iBAArC,CAAsD;;;;AAG1D,gBAAY,SAAZ,EAAuC;AAAI,YAAM,SAAN;yBAFrB,IAAI,GAAJ,E;AAEwC;;;;;;AAK9D,YAAQ,IAAR,EAAyB,kBAAkB,IAA3C,EAA+C;AAC7C,aAAO,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,KAA8B,MAAM,OAAN,CAAc,IAAd,EAAoB,eAApB,CAArC;AACD;;;;;;;AAKD,iBAAa,IAAb,EAA8B,QAA9B,EAAsD;AACpD,WAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,EAA2B,QAA3B;AACD;AAjByD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileReflector, DirectiveResolver, core} from '@angular/compiler';\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<core.Type, core.Directive>();\n\n  constructor(reflector: CompileReflector) { super(reflector); }\n\n  resolve(type: core.Type): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: true): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: boolean): core.Directive|null;\n  resolve(type: core.Type, throwIfNotFound = true): core.Directive|null {\n    return this._directives.get(type) || super.resolve(type, throwIfNotFound);\n  }\n\n  /**\n   * Overrides the {@link core.Directive} for a directive.\n   */\n  setDirective(type: core.Type, metadata: core.Directive): void {\n    this._directives.set(type, metadata);\n  }\n}\n"],"sourceRoot":""}