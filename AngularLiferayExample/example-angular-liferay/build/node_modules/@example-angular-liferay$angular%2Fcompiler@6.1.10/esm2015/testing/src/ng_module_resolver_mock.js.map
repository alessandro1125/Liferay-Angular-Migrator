{"version":3,"sources":["../../../../../../../packages/compiler/testing/src/ng_module_resolver_mock.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,WAA0B,gBAA1B,QAAuD,mBAAvD;AAEA,SAAM,MAAA,oBAAA,SAAoC,gBAApC,CAAoD;;;;AAGxD,gBAAY,SAAZ,EAAuC;AAAI,YAAM,SAAN;wBAFtB,IAAI,GAAJ,E;AAEyC;;;;;;;AAK9D,gBAAY,IAAZ,EAA6B,QAA7B,EAAoD;AAClD,WAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,QAA1B;AACD;;;;;;;;;;AAQD,YAAQ,IAAR,EAAyB,kBAAkB,IAA3C,EAA+C;AAC7C,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,KAAyB,gBAAI,MAAM,OAAN,CAAc,IAAd,EAAoB,eAApB,CAApC;AACD;AApBuD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, NgModuleResolver, core} from '@angular/compiler';\n\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<core.Type, core.NgModule>();\n\n  constructor(reflector: CompileReflector) { super(reflector); }\n\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n  setNgModule(type: core.Type, metadata: core.NgModule): void {\n    this._ngModules.set(type, metadata);\n  }\n\n  /**\n   * Returns the {@link NgModule} for a module:\n   * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.NgModule {\n    return this._ngModules.get(type) || super.resolve(type, throwIfNotFound) !;\n  }\n}\n"],"sourceRoot":""}