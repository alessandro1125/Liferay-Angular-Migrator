{"version":3,"sources":["../../../../../../../packages/compiler/testing/src/schema_registry_mock.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,aAA+B,IAA/B,QAA0C,mBAA1C;AAEA,WAAM,MAAA,kBAAA,CAAA;;;;;;;;AACJ,oBACW,kBADX,EAEW,eAFX,EAGW,gBAHX,EAG8D,iBAH9D,EAIW,iBAJX,EAIW;AAHA,iBAAA,kBAAA,GAAA,kBAAA;AACA,iBAAA,eAAA,GAAA,eAAA;AACA,iBAAA,gBAAA,GAAA,gBAAA;AAAmD,iBAAA,iBAAA,GAAA,iBAAA;AACnD,iBAAA,iBAAA,GAAA,iBAAA;AAAoC;;;;;;;AAE/C,oBAAY,OAAZ,EAA6B,QAA7B,EAA+C,OAA/C,EAA6E;;AAC3E,kBAAM,QAAQ,KAAK,kBAAL,CAAwB,QAAxB,CAAd;AACA,mBAAO,UAAU,KAAK,CAAf,GAAmB,IAAnB,GAA0B,KAAjC;AACD;;;;;;AAED,mBAAW,OAAX,EAA4B,WAA5B,EAA8D;;AAC5D,kBAAM,QAAQ,KAAK,gBAAL,CAAsB,QAAQ,WAAR,EAAtB,CAAd;AACA,mBAAO,UAAU,KAAK,CAAf,GAAmB,IAAnB,GAA0B,KAAjC;AACD;;;;AAED,+BAAoB;AAAe,mBAAO,OAAO,IAAP,CAAY,KAAK,gBAAjB,CAAP;AAA4C;;;;;;;AAE/E,wBAAgB,QAAhB,EAAkC,QAAlC,EAAoD,WAApD,EAAwE;AACtE,mBAAO,KAAK,eAAL,CAAqB,IAA5B;AACD;;;;;AAED,0BAAkB,QAAlB,EAAkC;AAAY,mBAAO,KAAK,eAAL,CAAqB,QAArB,KAAkC,QAAzC;AAAoD;;;;AAElG,yCAA8B;AAAa,mBAAO,cAAP;AAAwB;;;;;AAEnE,yBAAiB,IAAjB,EAA6B;AAC3B,gBAAI,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,IAA/B,IAAuC,CAAC,CAA5C,EAA+C;AAC7C,uBAAO,EAAC,OAAO,IAAR,EAAc,KAAK,wBAAwB,IAAI,sCAA/C,EAAP;AACD,aAFD,MAEO;AACL,uBAAO,EAAC,OAAO,KAAR,EAAP;AACD;AACF;;;;;AAED,0BAAkB,IAAlB,EAA8B;AAC5B,gBAAI,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,IAA/B,IAAuC,CAAC,CAA5C,EAA+C;AAC7C,uBAAO;AACL,2BAAO,IADF;AAEL,yBAAK,yBAAyB,IAAI;AAF7B,iBAAP;AAID,aALD,MAKO;AACL,uBAAO,EAAC,OAAO,KAAR,EAAP;AACD;AACF;;;;;AAED,wCAAgC,QAAhC,EAAgD;AAAY,mBAAO,QAAP;AAAkB;;;;;;;AAC9E,qCAA6B,aAA7B,EAAoD,gBAApD,EAA8E,GAA9E,EAAgG;AAE9F,mBAAO,EAAC,OAAK,gBAAE,IAAR,EAAgB,OAAO,IAAI,QAAJ,EAAvB,EAAP;AACD;AAlDG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry, core} from '@angular/compiler';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: core.SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: core.SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] { return Object.keys(this.existingElements); }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): core.SecurityContext {\n    return core.SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string { return propName; }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null !, value: val.toString()};\n  }\n}\n"],"sourceRoot":""}