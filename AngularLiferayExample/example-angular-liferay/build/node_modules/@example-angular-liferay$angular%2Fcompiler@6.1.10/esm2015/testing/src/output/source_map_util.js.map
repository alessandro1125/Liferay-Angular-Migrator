{"version":3,"sources":["../../../../../../../../packages/compiler/testing/src/output/source_map_util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AASA,QAAM,MAAM,QAAQ,mCAAR,CAAZ;;AACA,QAAM,oBAAoB,QAAQ,oCAAR,EAAsB,iBAAhD;;;;;;;;;;;;;;;;AAQA,SAAM,SAAA,mBAAA,CACF,SADE,EAEF,WAFE,EAEuD;;AAC3D,UAAM,MAAM,IAAI,iBAAJ,CAAsB,SAAtB,CAAZ;AAGA,UAAM,EAAC,IAAD,EAAO,MAAP,EAAe,MAAf,KAAyB,IAAI,mBAAJ,CAAwB,WAAxB,CAA/B;AACA,WAAO,EAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAP;AACD;;;;;AAED,SAAM,SAAA,gBAAA,CAA2B,MAA3B,EAAyC;;AAC7C,QAAI,MAAM,OAAO,WAAP,CAAmB,OAAnB,CAAV;AACA,QAAI,OAAO,CAAC,CAAZ,EAAe,OAAO,IAAP;;AACf,UAAM,YAAY,OAAO,KAAP,CAAa,GAAb,EAAkB,IAAlB,EAAlB;;AACA,UAAM,QAAQ,UAAU,KAAV,CAAgB,gDAAhB,EAAkE,CAAlE,CAAd;AACA,WAAO,QAAQ,KAAK,KAAL,CAAW,gBAAgB,KAAhB,CAAX,CAAR,GAA6C,IAApD;AACD;;;;;AAED,WAAA,eAAA,CAAyB,CAAzB,EAAkC;AAChC,WAAO,IAAI,WAAJ,CAAgB,CAAhB,EAAmB,MAAnB,CAA0B,CAAC,CAAD,EAAY,CAAZ,KAA0B,IAAI,OAAO,YAAP,CAAoB,CAApB,CAAxD,EAAgF,EAAhF,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SourceMap} from '@angular/compiler';\nconst b64 = require('base64-js');\nconst SourceMapConsumer = require('source-map').SourceMapConsumer;\n\nexport interface SourceLocation {\n  line: number;\n  column: number;\n  source: string;\n}\n\nexport function originalPositionFor(\n    sourceMap: SourceMap,\n    genPosition: {line: number | null, column: number | null}): SourceLocation {\n  const smc = new SourceMapConsumer(sourceMap);\n  // Note: We don't return the original object as it also contains a `name` property\n  // which is always null and we don't want to include that in our assertions...\n  const {line, column, source} = smc.originalPositionFor(genPosition);\n  return {line, column, source};\n}\n\nexport function extractSourceMap(source: string): SourceMap|null {\n  let idx = source.lastIndexOf('\\n//#');\n  if (idx == -1) return null;\n  const smComment = source.slice(idx).trim();\n  const smB64 = smComment.split('sourceMappingURL=data:application/json;base64,')[1];\n  return smB64 ? JSON.parse(decodeB64String(smB64)) : null;\n}\n\nfunction decodeB64String(s: string): string {\n  return b64.toByteArray(s).reduce((s: string, c: number) => s + String.fromCharCode(c), '');\n}\n"],"sourceRoot":""}