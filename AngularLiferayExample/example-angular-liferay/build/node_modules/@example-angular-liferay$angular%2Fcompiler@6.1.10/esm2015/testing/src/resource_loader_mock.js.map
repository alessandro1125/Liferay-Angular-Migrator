{"version":3,"sources":["../../../../../../../packages/compiler/testing/src/resource_loader_mock.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\n\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport class MockResourceLoader extends ResourceLoader {\n  private _expectations: _Expectation[] = [];\n  private _definitions = new Map<string, string>();\n  private _requests: _PendingRequest[] = [];\n\n  get(url: string): Promise<string> {\n    const request = new _PendingRequest(url);\n    this._requests.push(request);\n    return request.getPromise();\n  }\n\n  hasPendingRequests() { return !!this._requests.length; }\n\n  /**\n   * Add an expectation for the given URL. Incoming requests will be checked against\n   * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n   * can be used to check if any expectations have not yet been met.\n   *\n   * The response given will be returned if the expectation matches.\n   */\n  expect(url: string, response: string) {\n    const expectation = new _Expectation(url, response);\n    this._expectations.push(expectation);\n  }\n\n  /**\n   * Add a definition for the given URL to return the given response. Unlike expectations,\n   * definitions have no order and will satisfy any matching request at any time. Also\n   * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n   * to return an error.\n   */\n  when(url: string, response: string) { this._definitions.set(url, response); }\n\n  /**\n   * Process pending requests and verify there are no outstanding expectations. Also fails\n   * if no requests are pending.\n   */\n  flush() {\n    if (this._requests.length === 0) {\n      throw new Error('No pending requests to flush');\n    }\n\n    do {\n      this._processRequest(this._requests.shift() !);\n    } while (this._requests.length > 0);\n\n    this.verifyNoOutstandingExpectations();\n  }\n\n  /**\n   * Throw an exception if any expectations have not been satisfied.\n   */\n  verifyNoOutstandingExpectations() {\n    if (this._expectations.length === 0) return;\n\n    const urls: string[] = [];\n    for (let i = 0; i < this._expectations.length; i++) {\n      const expectation = this._expectations[i];\n      urls.push(expectation.url);\n    }\n\n    throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\n  }\n\n  private _processRequest(request: _PendingRequest) {\n    const url = request.url;\n\n    if (this._expectations.length > 0) {\n      const expectation = this._expectations[0];\n      if (expectation.url == url) {\n        remove(this._expectations, expectation);\n        request.complete(expectation.response);\n        return;\n      }\n    }\n\n    if (this._definitions.has(url)) {\n      const response = this._definitions.get(url);\n      request.complete(response == null ? null : response);\n      return;\n    }\n\n    throw new Error(`Unexpected request ${url}`);\n  }\n}\n\nclass _PendingRequest {\n  // TODO(issue/24571): remove '!'.\n  resolve !: (result: string) => void;\n  // TODO(issue/24571): remove '!'.\n  reject !: (error: any) => void;\n  promise: Promise<string>;\n\n  constructor(public url: string) {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  complete(response: string|null) {\n    if (response == null) {\n      this.reject(`Failed to load ${this.url}`);\n    } else {\n      this.resolve(response);\n    }\n  }\n\n  getPromise(): Promise<string> { return this.promise; }\n}\n\nclass _Expectation {\n  url: string;\n  response: string;\n  constructor(url: string, response: string) {\n    this.url = url;\n    this.response = response;\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n"],"sourceRoot":""}