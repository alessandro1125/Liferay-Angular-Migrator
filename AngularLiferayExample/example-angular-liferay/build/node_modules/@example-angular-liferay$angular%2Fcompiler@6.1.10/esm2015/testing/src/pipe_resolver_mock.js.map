{"version":3,"sources":["../../../../../../../packages/compiler/testing/src/pipe_resolver_mock.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,WAA0B,YAA1B,QAAmD,mBAAnD;AAEA,SAAM,MAAA,gBAAA,SAAgC,YAAhC,CAA4C;;;;AAGhD,gBAAY,QAAZ,EAAsC;AAAI,YAAM,QAAN;oBAFzB,IAAI,GAAJ,E;AAE2C;;;;;;;AAK5D,YAAQ,IAAR,EAAyB,QAAzB,EAA4C;AAAU,WAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,EAAsB,QAAtB;AAAkC;;;;;;;;;;AAQxF,YAAQ,IAAR,EAAyB,kBAAkB,IAA3C,EAA+C;;AAC7C,UAAI,WAAW,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAf;AACA,UAAI,CAAC,QAAL,EAAe;AACb,mBAAQ,gBAAG,MAAM,OAAN,CAAc,IAAd,EAAoB,eAApB,CAAX;AACD;AACD,aAAO,QAAP;AACD;AAtB+C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, PipeResolver, core} from '@angular/compiler';\n\nexport class MockPipeResolver extends PipeResolver {\n  private _pipes = new Map<core.Type, core.Pipe>();\n\n  constructor(refector: CompileReflector) { super(refector); }\n\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n  setPipe(type: core.Type, metadata: core.Pipe): void { this._pipes.set(type, metadata); }\n\n  /**\n   * Returns the {@link Pipe} for a pipe:\n   * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n   * default\n   * `PipeResolver`, see `setPipe`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.Pipe {\n    let metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound) !;\n    }\n    return metadata;\n  }\n}\n"],"sourceRoot":""}