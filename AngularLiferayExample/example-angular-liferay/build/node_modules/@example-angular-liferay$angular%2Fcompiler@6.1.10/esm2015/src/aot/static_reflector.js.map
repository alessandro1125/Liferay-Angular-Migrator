{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/static_reflector.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileSummaryKind} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {MetadataFactory, createAttribute, createComponent, createContentChild, createContentChildren, createDirective, createHost, createHostBinding, createHostListener, createInject, createInjectable, createInput, createNgModule, createOptional, createOutput, createPipe, createSelf, createSkipSelf, createViewChild, createViewChildren} from '../core';\nimport * as o from '../output/output_ast';\nimport {SummaryResolver} from '../summary_resolver';\nimport {syntaxError} from '../util';\n\nimport {FormattedMessageChain, formattedError} from './formatted_error';\nimport {StaticSymbol} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\n\nconst ANGULAR_CORE = '@angular/core';\nconst ANGULAR_ROUTER = '@angular/router';\n\nconst HIDDEN_KEY = /^\\$.*\\$$/;\n\nconst IGNORE = {\n  __symbolic: 'ignore'\n};\n\nconst USE_VALUE = 'useValue';\nconst PROVIDE = 'provide';\nconst REFERENCE_SET = new Set([USE_VALUE, 'useFactory', 'data', 'id', 'loadChildren']);\nconst TYPEGUARD_POSTFIX = 'TypeGuard';\nconst USE_IF = 'UseIf';\n\nfunction shouldIgnore(value: any): boolean {\n  return value && value.__symbolic == 'ignore';\n}\n\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nexport class StaticReflector implements CompileReflector {\n  private annotationCache = new Map<StaticSymbol, any[]>();\n  private shallowAnnotationCache = new Map<StaticSymbol, any[]>();\n  private propertyCache = new Map<StaticSymbol, {[key: string]: any[]}>();\n  private parameterCache = new Map<StaticSymbol, any[]>();\n  private methodCache = new Map<StaticSymbol, {[key: string]: boolean}>();\n  private staticCache = new Map<StaticSymbol, string[]>();\n  private conversionMap = new Map<StaticSymbol, (context: StaticSymbol, args: any[]) => any>();\n  private resolvedExternalReferences = new Map<string, StaticSymbol>();\n  // TODO(issue/24571): remove '!'.\n  private injectionToken !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  private opaqueToken !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  ROUTES !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  private ANALYZE_FOR_ENTRY_COMPONENTS !: StaticSymbol;\n  private annotationForParentClassWithSummaryKind =\n      new Map<CompileSummaryKind, MetadataFactory<any>[]>();\n\n  constructor(\n      private summaryResolver: SummaryResolver<StaticSymbol>,\n      private symbolResolver: StaticSymbolResolver,\n      knownMetadataClasses: {name: string, filePath: string, ctor: any}[] = [],\n      knownMetadataFunctions: {name: string, filePath: string, fn: any}[] = [],\n      private errorRecorder?: (error: any, fileName?: string) => void) {\n    this.initializeConversionMap();\n    knownMetadataClasses.forEach(\n        (kc) => this._registerDecoratorOrConstructor(\n            this.getStaticSymbol(kc.filePath, kc.name), kc.ctor));\n    knownMetadataFunctions.forEach(\n        (kf) => this._registerFunction(this.getStaticSymbol(kf.filePath, kf.name), kf.fn));\n    this.annotationForParentClassWithSummaryKind.set(\n        CompileSummaryKind.Directive, [createDirective, createComponent]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\n    this.annotationForParentClassWithSummaryKind.set(\n        CompileSummaryKind.Injectable,\n        [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\n  }\n\n  componentModuleUrl(typeOrFunc: StaticSymbol): string {\n    const staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n    return this.symbolResolver.getResourcePath(staticSymbol);\n  }\n\n  resolveExternalReference(ref: o.ExternalReference, containingFile?: string): StaticSymbol {\n    let key: string|undefined = undefined;\n    if (!containingFile) {\n      key = `${ref.moduleName}:${ref.name}`;\n      const declarationSymbol = this.resolvedExternalReferences.get(key);\n      if (declarationSymbol) return declarationSymbol;\n    }\n    const refSymbol =\n        this.symbolResolver.getSymbolByModule(ref.moduleName !, ref.name !, containingFile);\n    const declarationSymbol = this.findSymbolDeclaration(refSymbol);\n    if (!containingFile) {\n      this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, ref.moduleName !);\n      this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\n    }\n    if (key) {\n      this.resolvedExternalReferences.set(key, declarationSymbol);\n    }\n    return declarationSymbol;\n  }\n\n  findDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol {\n    return this.findSymbolDeclaration(\n        this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n  }\n\n  tryFindDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol {\n    return this.symbolResolver.ignoreErrorsFor(\n        () => this.findDeclaration(moduleUrl, name, containingFile));\n  }\n\n  findSymbolDeclaration(symbol: StaticSymbol): StaticSymbol {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n    if (resolvedSymbol) {\n      let resolvedMetadata = resolvedSymbol.metadata;\n      if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\n        resolvedMetadata = resolvedMetadata.symbol;\n      }\n      if (resolvedMetadata instanceof StaticSymbol) {\n        return this.findSymbolDeclaration(resolvedSymbol.metadata);\n      }\n    }\n    return symbol;\n  }\n\n  public tryAnnotations(type: StaticSymbol): any[] {\n    const originalRecorder = this.errorRecorder;\n    this.errorRecorder = (error: any, fileName: string) => {};\n    try {\n      return this.annotations(type);\n    } finally {\n      this.errorRecorder = originalRecorder;\n    }\n  }\n\n  public annotations(type: StaticSymbol): any[] {\n    return this._annotations(\n        type, (type: StaticSymbol, decorators: any) => this.simplify(type, decorators),\n        this.annotationCache);\n  }\n\n  public shallowAnnotations(type: StaticSymbol): any[] {\n    return this._annotations(\n        type, (type: StaticSymbol, decorators: any) => this.simplify(type, decorators, true),\n        this.shallowAnnotationCache);\n  }\n\n  private _annotations(\n      type: StaticSymbol, simplify: (type: StaticSymbol, decorators: any) => any,\n      annotationCache: Map<StaticSymbol, any[]>): any[] {\n    let annotations = annotationCache.get(type);\n    if (!annotations) {\n      annotations = [];\n      const classMetadata = this.getTypeMetadata(type);\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentAnnotations = this.annotations(parentType);\n        annotations.push(...parentAnnotations);\n      }\n      let ownAnnotations: any[] = [];\n      if (classMetadata['decorators']) {\n        ownAnnotations = simplify(type, classMetadata['decorators']);\n        if (ownAnnotations) {\n          annotations.push(...ownAnnotations);\n        }\n      }\n      if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&\n          this.summaryResolver.isLibraryFile(parentType.filePath)) {\n        const summary = this.summaryResolver.resolveSummary(parentType);\n        if (summary && summary.type) {\n          const requiredAnnotationTypes =\n              this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind !) !;\n          const typeHasRequiredAnnotation = requiredAnnotationTypes.some(\n              (requiredType) => ownAnnotations.some(ann => requiredType.isTypeOf(ann)));\n          if (!typeHasRequiredAnnotation) {\n            this.reportError(\n                formatMetadataError(\n                    metadataError(\n                        `Class ${type.name} in ${type.filePath} extends from a ${CompileSummaryKind[summary.type.summaryKind!]} in another compilation unit without duplicating the decorator`,\n                        /* summary */ undefined,\n                        `Please add a ${requiredAnnotationTypes.map((type) => type.ngMetadataName).join(' or ')} decorator to the class`),\n                    type),\n                type);\n          }\n        }\n      }\n      annotationCache.set(type, annotations.filter(ann => !!ann));\n    }\n    return annotations;\n  }\n\n  public propMetadata(type: StaticSymbol): {[key: string]: any[]} {\n    let propMetadata = this.propertyCache.get(type);\n    if (!propMetadata) {\n      const classMetadata = this.getTypeMetadata(type);\n      propMetadata = {};\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentPropMetadata = this.propMetadata(parentType);\n        Object.keys(parentPropMetadata).forEach((parentProp) => {\n          propMetadata ![parentProp] = parentPropMetadata[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach((propName) => {\n        const propData = members[propName];\n        const prop = (<any[]>propData)\n                         .find(a => a['__symbolic'] == 'property' || a['__symbolic'] == 'method');\n        const decorators: any[] = [];\n        if (propMetadata ![propName]) {\n          decorators.push(...propMetadata ![propName]);\n        }\n        propMetadata ![propName] = decorators;\n        if (prop && prop['decorators']) {\n          decorators.push(...this.simplify(type, prop['decorators']));\n        }\n      });\n      this.propertyCache.set(type, propMetadata);\n    }\n    return propMetadata;\n  }\n\n  public parameters(type: StaticSymbol): any[] {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(`parameters received ${JSON.stringify(type)} which is not a StaticSymbol`),\n          type);\n      return [];\n    }\n    try {\n      let parameters = this.parameterCache.get(type);\n      if (!parameters) {\n        const classMetadata = this.getTypeMetadata(type);\n        const parentType = this.findParentType(type, classMetadata);\n        const members = classMetadata ? classMetadata['members'] : null;\n        const ctorData = members ? members['__ctor__'] : null;\n        if (ctorData) {\n          const ctor = (<any[]>ctorData).find(a => a['__symbolic'] == 'constructor');\n          const rawParameterTypes = <any[]>ctor['parameters'] || [];\n          const parameterDecorators = <any[]>this.simplify(type, ctor['parameterDecorators'] || []);\n          parameters = [];\n          rawParameterTypes.forEach((rawParamType, index) => {\n            const nestedResult: any[] = [];\n            const paramType = this.trySimplify(type, rawParamType);\n            if (paramType) nestedResult.push(paramType);\n            const decorators = parameterDecorators ? parameterDecorators[index] : null;\n            if (decorators) {\n              nestedResult.push(...decorators);\n            }\n            parameters !.push(nestedResult);\n          });\n        } else if (parentType) {\n          parameters = this.parameters(parentType);\n        }\n        if (!parameters) {\n          parameters = [];\n        }\n        this.parameterCache.set(type, parameters);\n      }\n      return parameters;\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  private _methodNames(type: any): {[key: string]: boolean} {\n    let methodNames = this.methodCache.get(type);\n    if (!methodNames) {\n      const classMetadata = this.getTypeMetadata(type);\n      methodNames = {};\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentMethodNames = this._methodNames(parentType);\n        Object.keys(parentMethodNames).forEach((parentProp) => {\n          methodNames ![parentProp] = parentMethodNames[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach((propName) => {\n        const propData = members[propName];\n        const isMethod = (<any[]>propData).some(a => a['__symbolic'] == 'method');\n        methodNames ![propName] = methodNames ![propName] || isMethod;\n      });\n      this.methodCache.set(type, methodNames);\n    }\n    return methodNames;\n  }\n\n  private _staticMembers(type: StaticSymbol): string[] {\n    let staticMembers = this.staticCache.get(type);\n    if (!staticMembers) {\n      const classMetadata = this.getTypeMetadata(type);\n      const staticMemberData = classMetadata['statics'] || {};\n      staticMembers = Object.keys(staticMemberData);\n      this.staticCache.set(type, staticMembers);\n    }\n    return staticMembers;\n  }\n\n\n  private findParentType(type: StaticSymbol, classMetadata: any): StaticSymbol|undefined {\n    const parentType = this.trySimplify(type, classMetadata['extends']);\n    if (parentType instanceof StaticSymbol) {\n      return parentType;\n    }\n  }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(\n              `hasLifecycleHook received ${JSON.stringify(type)} which is not a StaticSymbol`),\n          type);\n    }\n    try {\n      return !!this._methodNames(type)[lcProperty];\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  guards(type: any): {[key: string]: StaticSymbol} {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(`guards received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n      return {};\n    }\n    const staticMembers = this._staticMembers(type);\n    const result: {[key: string]: StaticSymbol} = {};\n    for (let name of staticMembers) {\n      if (name.endsWith(TYPEGUARD_POSTFIX)) {\n        let property = name.substr(0, name.length - TYPEGUARD_POSTFIX.length);\n        let value: any;\n        if (property.endsWith(USE_IF)) {\n          property = name.substr(0, property.length - USE_IF.length);\n          value = USE_IF;\n        } else {\n          value = this.getStaticSymbol(type.filePath, type.name, [name]);\n        }\n        result[property] = value;\n      }\n    }\n    return result;\n  }\n\n  private _registerDecoratorOrConstructor(type: StaticSymbol, ctor: any): void {\n    this.conversionMap.set(type, (context: StaticSymbol, args: any[]) => new ctor(...args));\n  }\n\n  private _registerFunction(type: StaticSymbol, fn: any): void {\n    this.conversionMap.set(type, (context: StaticSymbol, args: any[]) => fn.apply(undefined, args));\n  }\n\n  private initializeConversionMap(): void {\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\n    this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n    this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n    this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\n    this.ANALYZE_FOR_ENTRY_COMPONENTS =\n        this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule);\n\n    // Note: Some metadata classes can be used directly with Provider.deps.\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n  }\n\n  /**\n   * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n   * All types passed to the StaticResolver should be pseudo-types returned by this method.\n   *\n   * @param declarationFile the absolute path of the file where the symbol is declared\n   * @param name the name of the type.\n   */\n  getStaticSymbol(declarationFile: string, name: string, members?: string[]): StaticSymbol {\n    return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n  }\n\n  /**\n   * Simplify but discard any errors\n   */\n  private trySimplify(context: StaticSymbol, value: any): any {\n    const originalRecorder = this.errorRecorder;\n    this.errorRecorder = (error: any, fileName: string) => {};\n    const result = this.simplify(context, value);\n    this.errorRecorder = originalRecorder;\n    return result;\n  }\n\n  /** @internal */\n  public simplify(context: StaticSymbol, value: any, lazy: boolean = false): any {\n    const self = this;\n    let scope = BindingScope.empty;\n    const calling = new Map<StaticSymbol, boolean>();\n    const rootContext = context;\n\n    function simplifyInContext(\n        context: StaticSymbol, value: any, depth: number, references: number): any {\n      function resolveReferenceValue(staticSymbol: StaticSymbol): any {\n        const resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n        return resolvedSymbol ? resolvedSymbol.metadata : null;\n      }\n\n      function simplifyEagerly(value: any): any {\n        return simplifyInContext(context, value, depth, 0);\n      }\n\n      function simplifyLazily(value: any): any {\n        return simplifyInContext(context, value, depth, references + 1);\n      }\n\n      function simplifyNested(nestedContext: StaticSymbol, value: any): any {\n        if (nestedContext === context) {\n          // If the context hasn't changed let the exception propagate unmodified.\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        }\n        try {\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        } catch (e) {\n          if (isMetadataError(e)) {\n            // Propagate the message text up but add a message to the chain that explains how we got\n            // here.\n            // e.chain implies e.symbol\n            const summaryMsg = e.chain ? 'references \\'' + e.symbol !.name + '\\'' : errorSummary(e);\n            const summary = `'${nestedContext.name}' ${summaryMsg}`;\n            const chain = {message: summary, position: e.position, next: e.chain};\n            // TODO(chuckj): retrieve the position information indirectly from the collectors node\n            // map if the metadata is from a .ts file.\n            self.error(\n                {\n                  message: e.message,\n                  advise: e.advise,\n                  context: e.context, chain,\n                  symbol: nestedContext\n                },\n                context);\n          } else {\n            // It is probably an internal error.\n            throw e;\n          }\n        }\n      }\n\n      function simplifyCall(\n          functionSymbol: StaticSymbol, targetFunction: any, args: any[], targetExpression: any) {\n        if (targetFunction && targetFunction['__symbolic'] == 'function') {\n          if (calling.get(functionSymbol)) {\n            self.error(\n                {\n                  message: 'Recursion is not supported',\n                  summary: `called '${functionSymbol.name}' recursively`,\n                  value: targetFunction\n                },\n                functionSymbol);\n          }\n          try {\n            const value = targetFunction['value'];\n            if (value && (depth != 0 || value.__symbolic != 'error')) {\n              const parameters: string[] = targetFunction['parameters'];\n              const defaults: any[] = targetFunction.defaults;\n              args = args.map(arg => simplifyNested(context, arg))\n                         .map(arg => shouldIgnore(arg) ? undefined : arg);\n              if (defaults && defaults.length > args.length) {\n                args.push(...defaults.slice(args.length).map((value: any) => simplify(value)));\n              }\n              calling.set(functionSymbol, true);\n              const functionScope = BindingScope.build();\n              for (let i = 0; i < parameters.length; i++) {\n                functionScope.define(parameters[i], args[i]);\n              }\n              const oldScope = scope;\n              let result: any;\n              try {\n                scope = functionScope.done();\n                result = simplifyNested(functionSymbol, value);\n              } finally {\n                scope = oldScope;\n              }\n              return result;\n            }\n          } finally {\n            calling.delete(functionSymbol);\n          }\n        }\n\n        if (depth === 0) {\n          // If depth is 0 we are evaluating the top level expression that is describing element\n          // decorator. In this case, it is a decorator we don't understand, such as a custom\n          // non-angular decorator, and we should just ignore it.\n          return IGNORE;\n        }\n        let position: Position|undefined = undefined;\n        if (targetExpression && targetExpression.__symbolic == 'resolved') {\n          const line = targetExpression.line;\n          const character = targetExpression.character;\n          const fileName = targetExpression.fileName;\n          if (fileName != null && line != null && character != null) {\n            position = {fileName, line, column: character};\n          }\n        }\n        self.error(\n            {\n              message: FUNCTION_CALL_NOT_SUPPORTED,\n              context: functionSymbol,\n              value: targetFunction, position\n            },\n            context);\n      }\n\n      function simplify(expression: any): any {\n        if (isPrimitive(expression)) {\n          return expression;\n        }\n        if (expression instanceof Array) {\n          const result: any[] = [];\n          for (const item of (<any>expression)) {\n            // Check for a spread expression\n            if (item && item.__symbolic === 'spread') {\n              // We call with references as 0 because we require the actual value and cannot\n              // tolerate a reference here.\n              const spreadArray = simplifyEagerly(item.expression);\n              if (Array.isArray(spreadArray)) {\n                for (const spreadItem of spreadArray) {\n                  result.push(spreadItem);\n                }\n                continue;\n              }\n            }\n            const value = simplify(item);\n            if (shouldIgnore(value)) {\n              continue;\n            }\n            result.push(value);\n          }\n          return result;\n        }\n        if (expression instanceof StaticSymbol) {\n          // Stop simplification at builtin symbols or if we are in a reference context and\n          // the symbol doesn't have members.\n          if (expression === self.injectionToken || self.conversionMap.has(expression) ||\n              (references > 0 && !expression.members.length)) {\n            return expression;\n          } else {\n            const staticSymbol = expression;\n            const declarationValue = resolveReferenceValue(staticSymbol);\n            if (declarationValue != null) {\n              return simplifyNested(staticSymbol, declarationValue);\n            } else {\n              return staticSymbol;\n            }\n          }\n        }\n        if (expression) {\n          if (expression['__symbolic']) {\n            let staticSymbol: StaticSymbol;\n            switch (expression['__symbolic']) {\n              case 'binop':\n                let left = simplify(expression['left']);\n                if (shouldIgnore(left)) return left;\n                let right = simplify(expression['right']);\n                if (shouldIgnore(right)) return right;\n                switch (expression['operator']) {\n                  case '&&':\n                    return left && right;\n                  case '||':\n                    return left || right;\n                  case '|':\n                    return left | right;\n                  case '^':\n                    return left ^ right;\n                  case '&':\n                    return left & right;\n                  case '==':\n                    return left == right;\n                  case '!=':\n                    return left != right;\n                  case '===':\n                    return left === right;\n                  case '!==':\n                    return left !== right;\n                  case '<':\n                    return left < right;\n                  case '>':\n                    return left > right;\n                  case '<=':\n                    return left <= right;\n                  case '>=':\n                    return left >= right;\n                  case '<<':\n                    return left << right;\n                  case '>>':\n                    return left >> right;\n                  case '+':\n                    return left + right;\n                  case '-':\n                    return left - right;\n                  case '*':\n                    return left * right;\n                  case '/':\n                    return left / right;\n                  case '%':\n                    return left % right;\n                }\n                return null;\n              case 'if':\n                let condition = simplify(expression['condition']);\n                return condition ? simplify(expression['thenExpression']) :\n                                   simplify(expression['elseExpression']);\n              case 'pre':\n                let operand = simplify(expression['operand']);\n                if (shouldIgnore(operand)) return operand;\n                switch (expression['operator']) {\n                  case '+':\n                    return operand;\n                  case '-':\n                    return -operand;\n                  case '!':\n                    return !operand;\n                  case '~':\n                    return ~operand;\n                }\n                return null;\n              case 'index':\n                let indexTarget = simplifyEagerly(expression['expression']);\n                let index = simplifyEagerly(expression['index']);\n                if (indexTarget && isPrimitive(index)) return indexTarget[index];\n                return null;\n              case 'select':\n                const member = expression['member'];\n                let selectContext = context;\n                let selectTarget = simplify(expression['expression']);\n                if (selectTarget instanceof StaticSymbol) {\n                  const members = selectTarget.members.concat(member);\n                  selectContext =\n                      self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                  const declarationValue = resolveReferenceValue(selectContext);\n                  if (declarationValue != null) {\n                    return simplifyNested(selectContext, declarationValue);\n                  } else {\n                    return selectContext;\n                  }\n                }\n                if (selectTarget && isPrimitive(member))\n                  return simplifyNested(selectContext, selectTarget[member]);\n                return null;\n              case 'reference':\n                // Note: This only has to deal with variable references, as symbol references have\n                // been converted into 'resolved'\n                // in the StaticSymbolResolver.\n                const name: string = expression['name'];\n                const localValue = scope.resolve(name);\n                if (localValue != BindingScope.missing) {\n                  return localValue;\n                }\n                break;\n              case 'resolved':\n                try {\n                  return simplify(expression.symbol);\n                } catch (e) {\n                  // If an error is reported evaluating the symbol record the position of the\n                  // reference in the error so it can\n                  // be reported in the error message generated from the exception.\n                  if (isMetadataError(e) && expression.fileName != null &&\n                      expression.line != null && expression.character != null) {\n                    e.position = {\n                      fileName: expression.fileName,\n                      line: expression.line,\n                      column: expression.character\n                    };\n                  }\n                  throw e;\n                }\n              case 'class':\n                return context;\n              case 'function':\n                return context;\n              case 'new':\n              case 'call':\n                // Determine if the function is a built-in conversion\n                staticSymbol = simplifyInContext(\n                    context, expression['expression'], depth + 1, /* references */ 0);\n                if (staticSymbol instanceof StaticSymbol) {\n                  if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                    // if somebody calls new InjectionToken, don't create an InjectionToken,\n                    // but rather return the symbol to which the InjectionToken is assigned to.\n\n                    // OpaqueToken is supported too as it is required by the language service to\n                    // support v4 and prior versions of Angular.\n                    return context;\n                  }\n                  const argExpressions: any[] = expression['arguments'] || [];\n                  let converter = self.conversionMap.get(staticSymbol);\n                  if (converter) {\n                    const args = argExpressions.map(arg => simplifyNested(context, arg))\n                                     .map(arg => shouldIgnore(arg) ? undefined : arg);\n                    return converter(context, args);\n                  } else {\n                    // Determine if the function is one we can simplify.\n                    const targetFunction = resolveReferenceValue(staticSymbol);\n                    return simplifyCall(\n                        staticSymbol, targetFunction, argExpressions, expression['expression']);\n                  }\n                }\n                return IGNORE;\n              case 'error':\n                let message = expression.message;\n                if (expression['line'] != null) {\n                  self.error(\n                      {\n                        message,\n                        context: expression.context,\n                        value: expression,\n                        position: {\n                          fileName: expression['fileName'],\n                          line: expression['line'],\n                          column: expression['character']\n                        }\n                      },\n                      context);\n                } else {\n                  self.error({message, context: expression.context}, context);\n                }\n                return IGNORE;\n              case 'ignore':\n                return expression;\n            }\n            return null;\n          }\n          return mapStringMap(expression, (value, name) => {\n            if (REFERENCE_SET.has(name)) {\n              if (name === USE_VALUE && PROVIDE in expression) {\n                // If this is a provider expression, check for special tokens that need the value\n                // during analysis.\n                const provide = simplify(expression.provide);\n                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\n                  return simplify(value);\n                }\n              }\n              return simplifyLazily(value);\n            }\n            return simplify(value);\n          });\n        }\n        return IGNORE;\n      }\n\n      return simplify(value);\n    }\n\n    let result: any;\n    try {\n      result = simplifyInContext(context, value, 0, lazy ? 1 : 0);\n    } catch (e) {\n      if (this.errorRecorder) {\n        this.reportError(e, context);\n      } else {\n        throw formatMetadataError(e, context);\n      }\n    }\n    if (shouldIgnore(result)) {\n      return undefined;\n    }\n    return result;\n  }\n\n  private getTypeMetadata(type: StaticSymbol): {[key: string]: any} {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n    return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\n                                                       {__symbolic: 'class'};\n  }\n\n  private reportError(error: Error, context: StaticSymbol, path?: string) {\n    if (this.errorRecorder) {\n      this.errorRecorder(\n          formatMetadataError(error, context), (context && context.filePath) || path);\n    } else {\n      throw error;\n    }\n  }\n\n  private error(\n      {message, summary, advise, position, context, value, symbol, chain}: {\n        message: string,\n        summary?: string,\n        advise?: string,\n        position?: Position,\n        context?: any,\n        value?: any,\n        symbol?: StaticSymbol,\n        chain?: MetadataMessageChain\n      },\n      reportingContext: StaticSymbol) {\n    this.reportError(\n        metadataError(message, summary, advise, position, symbol, context, chain),\n        reportingContext);\n  }\n}\n\ninterface Position {\n  fileName: string;\n  line: number;\n  column: number;\n}\n\ninterface MetadataMessageChain {\n  message: string;\n  summary?: string;\n  position?: Position;\n  context?: any;\n  symbol?: StaticSymbol;\n  next?: MetadataMessageChain;\n}\n\ntype MetadataError = Error & {\n  position?: Position;\n  advise?: string;\n  summary?: string;\n  context?: any;\n  symbol?: StaticSymbol;\n  chain?: MetadataMessageChain;\n};\n\nconst METADATA_ERROR = 'ngMetadataError';\n\nfunction metadataError(\n    message: string, summary?: string, advise?: string, position?: Position, symbol?: StaticSymbol,\n    context?: any, chain?: MetadataMessageChain): MetadataError {\n  const error = syntaxError(message) as MetadataError;\n  (error as any)[METADATA_ERROR] = true;\n  if (advise) error.advise = advise;\n  if (position) error.position = position;\n  if (summary) error.summary = summary;\n  if (context) error.context = context;\n  if (chain) error.chain = chain;\n  if (symbol) error.symbol = symbol;\n  return error;\n}\n\nfunction isMetadataError(error: Error): error is MetadataError {\n  return !!(error as any)[METADATA_ERROR];\n}\n\nconst REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\nconst VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\nconst DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\nconst COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\nconst FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\nconst REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\nconst LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\n\nfunction expandedMessage(message: string, context: any): string {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `References to a non-exported class are not supported in decorators but ${context.className} was referenced.`;\n      }\n      break;\n    case VARIABLE_NOT_INITIALIZED:\n      return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\n    case COULD_NOT_RESOLVE_TYPE:\n      if (context && context.typeName) {\n        return `Could not resolve type ${context.typeName}`;\n      }\n      break;\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (context && context.name) {\n        return `Function calls are not supported in decorators but '${context.name}' was called`;\n      }\n      return 'Function calls are not supported in decorators';\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Reference to a local (non-exported) symbols are not supported in decorators but '${context.name}' was referenced`;\n      }\n      break;\n    case LAMBDA_NOT_SUPPORTED:\n      return `Function expressions are not supported in decorators`;\n  }\n  return message;\n}\n\nfunction messageAdvise(message: string, context: any): string|undefined {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `Consider exporting '${context.className}'`;\n      }\n      break;\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Consider simplifying to avoid destructuring';\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Consider exporting '${context.name}'`;\n      }\n      break;\n    case LAMBDA_NOT_SUPPORTED:\n      return `Consider changing the function expression into an exported function`;\n  }\n  return undefined;\n}\n\nfunction errorSummary(error: MetadataError): string {\n  if (error.summary) {\n    return error.summary;\n  }\n  switch (error.message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (error.context && error.context.className) {\n        return `references non-exported class ${error.context.className}`;\n      }\n      break;\n    case VARIABLE_NOT_INITIALIZED:\n      return 'is not initialized';\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'is a destructured variable';\n    case COULD_NOT_RESOLVE_TYPE:\n      return 'could not be resolved';\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (error.context && error.context.name) {\n        return `calls '${error.context.name}'`;\n      }\n      return `calls a function`;\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (error.context && error.context.name) {\n        return `references local variable ${error.context.name}`;\n      }\n      return `references a local variable`;\n  }\n  return 'contains the error';\n}\n\nfunction mapStringMap(input: {[key: string]: any}, transform: (value: any, key: string) => any):\n    {[key: string]: any} {\n  if (!input) return {};\n  const result: {[key: string]: any} = {};\n  Object.keys(input).forEach((key) => {\n    const value = transform(input[key], key);\n    if (!shouldIgnore(value)) {\n      if (HIDDEN_KEY.test(key)) {\n        Object.defineProperty(result, key, {enumerable: false, configurable: true, value: value});\n      } else {\n        result[key] = value;\n      }\n    }\n  });\n  return result;\n}\n\nfunction isPrimitive(o: any): boolean {\n  return o === null || (typeof o !== 'function' && typeof o !== 'object');\n}\n\ninterface BindingScopeBuilder {\n  define(name: string, value: any): BindingScopeBuilder;\n  done(): BindingScope;\n}\n\nabstract class BindingScope {\n  abstract resolve(name: string): any;\n  public static missing = {};\n  public static empty: BindingScope = {resolve: name => BindingScope.missing};\n\n  public static build(): BindingScopeBuilder {\n    const current = new Map<string, any>();\n    return {\n      define: function(name, value) {\n        current.set(name, value);\n        return this;\n      },\n      done: function() {\n        return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;\n      }\n    };\n  }\n}\n\nclass PopulatedScope extends BindingScope {\n  constructor(private bindings: Map<string, any>) { super(); }\n\n  resolve(name: string): any {\n    return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;\n  }\n}\n\nfunction formatMetadataMessageChain(\n    chain: MetadataMessageChain, advise: string | undefined): FormattedMessageChain {\n  const expanded = expandedMessage(chain.message, chain.context);\n  const nesting = chain.symbol ? ` in '${chain.symbol.name}'` : '';\n  const message = `${expanded}${nesting}`;\n  const position = chain.position;\n  const next: FormattedMessageChain|undefined = chain.next ?\n      formatMetadataMessageChain(chain.next, advise) :\n      advise ? {message: advise} : undefined;\n  return {message, position, next};\n}\n\nfunction formatMetadataError(e: Error, context: StaticSymbol): Error {\n  if (isMetadataError(e)) {\n    // Produce a formatted version of the and leaving enough information in the original error\n    // to recover the formatting information to eventually produce a diagnostic error message.\n    const position = e.position;\n    const chain: MetadataMessageChain = {\n      message: `Error during template compile of '${context.name}'`,\n      position: position,\n      next: {message: e.message, next: e.chain, context: e.context, symbol: e.symbol}\n    };\n    const advise = e.advise || messageAdvise(e.message, e.context);\n    return formattedError(formatMetadataMessageChain(chain, advise));\n  }\n  return e;\n}\n"],"sourceRoot":""}