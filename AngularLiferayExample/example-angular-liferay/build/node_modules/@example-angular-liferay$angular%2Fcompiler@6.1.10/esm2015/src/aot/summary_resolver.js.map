{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/summary_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Summary, SummaryResolver} from '../summary_resolver';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {deserializeSummaries} from './summary_serializer';\nimport {stripGeneratedFileSuffix, summaryFileName} from './util';\n\nexport interface AotSummaryResolverHost {\n  /**\n   * Loads an NgModule/Directive/Pipe summary file\n   */\n  loadSummary(filePath: string): string|null;\n\n  /**\n   * Returns whether a file is a source file or not.\n   */\n  isSourceFile(sourceFilePath: string): boolean;\n  /**\n   * Converts a file name into a representation that should be stored in a summary file.\n   * This has to include changing the suffix as well.\n   * E.g.\n   * `some_file.ts` -> `some_file.d.ts`\n   *\n   * @param referringSrcFileName the soure file that refers to fileName\n   */\n  toSummaryFileName(fileName: string, referringSrcFileName: string): string;\n\n  /**\n   * Converts a fileName that was processed by `toSummaryFileName` back into a real fileName\n   * given the fileName of the library that is referrig to it.\n   */\n  fromSummaryFileName(fileName: string, referringLibFileName: string): string;\n}\n\nexport class AotSummaryResolver implements SummaryResolver<StaticSymbol> {\n  // Note: this will only contain StaticSymbols without members!\n  private summaryCache = new Map<StaticSymbol, Summary<StaticSymbol>>();\n  private loadedFilePaths = new Map<string, boolean>();\n  // Note: this will only contain StaticSymbols without members!\n  private importAs = new Map<StaticSymbol, StaticSymbol>();\n  private knownFileNameToModuleNames = new Map<string, string>();\n\n  constructor(private host: AotSummaryResolverHost, private staticSymbolCache: StaticSymbolCache) {}\n\n  isLibraryFile(filePath: string): boolean {\n    // Note: We need to strip the .ngfactory. file path,\n    // so this method also works for generated files\n    // (for which host.isSourceFile will always return false).\n    return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));\n  }\n\n  toSummaryFileName(filePath: string, referringSrcFileName: string) {\n    return this.host.toSummaryFileName(filePath, referringSrcFileName);\n  }\n\n  fromSummaryFileName(fileName: string, referringLibFileName: string) {\n    return this.host.fromSummaryFileName(fileName, referringLibFileName);\n  }\n\n  resolveSummary(staticSymbol: StaticSymbol): Summary<StaticSymbol>|null {\n    const rootSymbol = staticSymbol.members.length ?\n        this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) :\n        staticSymbol;\n    let summary = this.summaryCache.get(rootSymbol);\n    if (!summary) {\n      this._loadSummaryFile(staticSymbol.filePath);\n      summary = this.summaryCache.get(staticSymbol) !;\n    }\n    return (rootSymbol === staticSymbol && summary) || null;\n  }\n\n  getSymbolsOf(filePath: string): StaticSymbol[]|null {\n    if (this._loadSummaryFile(filePath)) {\n      return Array.from(this.summaryCache.keys()).filter((symbol) => symbol.filePath === filePath);\n    }\n    return null;\n  }\n\n  getImportAs(staticSymbol: StaticSymbol): StaticSymbol {\n    staticSymbol.assertNoMembers();\n    return this.importAs.get(staticSymbol) !;\n  }\n\n  /**\n   * Converts a file path to a module name that can be used as an `import`.\n   */\n  getKnownModuleName(importedFilePath: string): string|null {\n    return this.knownFileNameToModuleNames.get(importedFilePath) || null;\n  }\n\n  addSummary(summary: Summary<StaticSymbol>) { this.summaryCache.set(summary.symbol, summary); }\n\n  private _loadSummaryFile(filePath: string): boolean {\n    let hasSummary = this.loadedFilePaths.get(filePath);\n    if (hasSummary != null) {\n      return hasSummary;\n    }\n    let json: string|null = null;\n    if (this.isLibraryFile(filePath)) {\n      const summaryFilePath = summaryFileName(filePath);\n      try {\n        json = this.host.loadSummary(summaryFilePath);\n      } catch (e) {\n        console.error(`Error loading summary file ${summaryFilePath}`);\n        throw e;\n      }\n    }\n    hasSummary = json != null;\n    this.loadedFilePaths.set(filePath, hasSummary);\n    if (json) {\n      const {moduleName, summaries, importAs} =\n          deserializeSummaries(this.staticSymbolCache, this, filePath, json);\n      summaries.forEach((summary) => this.summaryCache.set(summary.symbol, summary));\n      if (moduleName) {\n        this.knownFileNameToModuleNames.set(filePath, moduleName);\n      }\n      importAs.forEach((importAs) => { this.importAs.set(importAs.symbol, importAs.importAs); });\n    }\n    return hasSummary;\n  }\n}\n"],"sourceRoot":""}