{"version":3,"sources":["../../../../../../../packages/compiler/src/view_compiler/view_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompilePipeSummary, rendererTypeName, tokenReference, viewClassName} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {BindingForm, BuiltinConverter, EventHandlerVars, LocalResolver, convertActionBinding, convertPropertyBinding, convertPropertyBindingBuiltins} from '../compiler_util/expression_converter';\nimport {ArgumentType, BindingFlags, ChangeDetectionStrategy, NodeFlags, QueryBindingType, QueryValueType, ViewFlags} from '../core';\nimport {AST, ASTWithSource, Interpolation} from '../expression_parser/ast';\nimport {Identifiers} from '../identifiers';\nimport {LifecycleHooks} from '../lifecycle_reflector';\nimport {isNgContainer} from '../ml_parser/tags';\nimport * as o from '../output/output_ast';\nimport {convertValueToOutputAst} from '../output/value_util';\nimport {ParseSourceSpan} from '../parse_util';\nimport {AttrAst, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, DirectiveAst, ElementAst, EmbeddedTemplateAst, NgContentAst, PropertyBindingType, ProviderAst, QueryMatch, ReferenceAst, TemplateAst, TemplateAstVisitor, TextAst, VariableAst, templateVisitAll} from '../template_parser/template_ast';\nimport {OutputContext} from '../util';\n\nimport {componentFactoryResolverProviderDef, depDef, lifecycleHookToNodeFlag, providerDef} from './provider_compiler';\n\nconst CLASS_ATTR = 'class';\nconst STYLE_ATTR = 'style';\nconst IMPLICIT_TEMPLATE_VAR = '\\$implicit';\n\nexport class ViewCompileResult {\n  constructor(public viewClassVar: string, public rendererTypeVar: string) {}\n}\n\nexport class ViewCompiler {\n  constructor(private _reflector: CompileReflector) {}\n\n  compileComponent(\n      outputCtx: OutputContext, component: CompileDirectiveMetadata, template: TemplateAst[],\n      styles: o.Expression, usedPipes: CompilePipeSummary[]): ViewCompileResult {\n    let embeddedViewCount = 0;\n    const staticQueryIds = findStaticQueryIds(template);\n\n    let renderComponentVarName: string = undefined !;\n    if (!component.isHost) {\n      const template = component.template !;\n      const customRenderData: o.LiteralMapEntry[] = [];\n      if (template.animations && template.animations.length) {\n        customRenderData.push(new o.LiteralMapEntry(\n            'animation', convertValueToOutputAst(outputCtx, template.animations), true));\n      }\n\n      const renderComponentVar = o.variable(rendererTypeName(component.type.reference));\n      renderComponentVarName = renderComponentVar.name !;\n      outputCtx.statements.push(\n          renderComponentVar\n              .set(o.importExpr(Identifiers.createRendererType2).callFn([new o.LiteralMapExpr([\n                new o.LiteralMapEntry('encapsulation', o.literal(template.encapsulation), false),\n                new o.LiteralMapEntry('styles', styles, false),\n                new o.LiteralMapEntry('data', new o.LiteralMapExpr(customRenderData), false)\n              ])]))\n              .toDeclStmt(\n                  o.importType(Identifiers.RendererType2),\n                  [o.StmtModifier.Final, o.StmtModifier.Exported]));\n    }\n\n    const viewBuilderFactory = (parent: ViewBuilder | null): ViewBuilder => {\n      const embeddedViewIndex = embeddedViewCount++;\n      return new ViewBuilder(\n          this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes,\n          staticQueryIds, viewBuilderFactory);\n    };\n\n    const visitor = viewBuilderFactory(null);\n    visitor.visitAll([], template);\n\n    outputCtx.statements.push(...visitor.build());\n\n    return new ViewCompileResult(visitor.viewName, renderComponentVarName);\n  }\n}\n\ninterface ViewBuilderFactory {\n  (parent: ViewBuilder): ViewBuilder;\n}\n\ninterface UpdateExpression {\n  context: o.Expression;\n  nodeIndex: number;\n  bindingIndex: number;\n  sourceSpan: ParseSourceSpan;\n  value: AST;\n}\n\nconst LOG_VAR = o.variable('_l');\nconst VIEW_VAR = o.variable('_v');\nconst CHECK_VAR = o.variable('_ck');\nconst COMP_VAR = o.variable('_co');\nconst EVENT_NAME_VAR = o.variable('en');\nconst ALLOW_DEFAULT_VAR = o.variable(`ad`);\n\nclass ViewBuilder implements TemplateAstVisitor, LocalResolver {\n  private compType: o.Type;\n  private nodes: (() => {\n    sourceSpan: ParseSourceSpan | null,\n    nodeDef: o.Expression,\n    nodeFlags: NodeFlags, updateDirectives?: UpdateExpression[], updateRenderer?: UpdateExpression[]\n  })[] = [];\n  private purePipeNodeIndices: {[pipeName: string]: number} = Object.create(null);\n  // Need Object.create so that we don't have builtin values...\n  private refNodeIndices: {[refName: string]: number} = Object.create(null);\n  private variables: VariableAst[] = [];\n  private children: ViewBuilder[] = [];\n\n  public readonly viewName: string;\n\n  constructor(\n      private reflector: CompileReflector, private outputCtx: OutputContext,\n      private parent: ViewBuilder|null, private component: CompileDirectiveMetadata,\n      private embeddedViewIndex: number, private usedPipes: CompilePipeSummary[],\n      private staticQueryIds: Map<TemplateAst, StaticAndDynamicQueryIds>,\n      private viewBuilderFactory: ViewBuilderFactory) {\n    // TODO(tbosch): The old view compiler used to use an `any` type\n    // for the context in any embedded view. We keep this behaivor for now\n    // to be able to introduce the new view compiler without too many errors.\n    this.compType = this.embeddedViewIndex > 0 ?\n        o.DYNAMIC_TYPE :\n        o.expressionType(outputCtx.importExpr(this.component.type.reference)) !;\n    this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);\n  }\n\n  visitAll(variables: VariableAst[], astNodes: TemplateAst[]) {\n    this.variables = variables;\n    // create the pipes for the pure pipes immediately, so that we know their indices.\n    if (!this.parent) {\n      this.usedPipes.forEach((pipe) => {\n        if (pipe.pure) {\n          this.purePipeNodeIndices[pipe.name] = this._createPipe(null, pipe);\n        }\n      });\n    }\n\n    if (!this.parent) {\n      const queryIds = staticViewQueryIds(this.staticQueryIds);\n      this.component.viewQueries.forEach((query, queryIndex) => {\n        // Note: queries start with id 1 so we can use the number in a Bloom filter!\n        const queryId = queryIndex + 1;\n        const bindingType = query.first ? QueryBindingType.First : QueryBindingType.All;\n        const flags =\n            NodeFlags.TypeViewQuery | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\n        this.nodes.push(() => ({\n                          sourceSpan: null,\n                          nodeFlags: flags,\n                          nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                            o.literal(flags), o.literal(queryId),\n                            new o.LiteralMapExpr([new o.LiteralMapEntry(\n                                query.propertyName, o.literal(bindingType), false)])\n                          ])\n                        }));\n      });\n    }\n    templateVisitAll(this, astNodes);\n    if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {\n      // if the view is an embedded view, then we need to add an additional root node in some cases\n      this.nodes.push(() => ({\n                        sourceSpan: null,\n                        nodeFlags: NodeFlags.TypeElement,\n                        nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n                          o.literal(NodeFlags.None), o.NULL_EXPR, o.NULL_EXPR, o.literal(0)\n                        ])\n                      }));\n    }\n  }\n\n  build(targetStatements: o.Statement[] = []): o.Statement[] {\n    this.children.forEach((child) => child.build(targetStatements));\n\n    const {updateRendererStmts, updateDirectivesStmts, nodeDefExprs} =\n        this._createNodeExpressions();\n\n    const updateRendererFn = this._createUpdateFn(updateRendererStmts);\n    const updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);\n\n\n    let viewFlags = ViewFlags.None;\n    if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {\n      viewFlags |= ViewFlags.OnPush;\n    }\n    const viewFactory = new o.DeclareFunctionStmt(\n        this.viewName, [new o.FnParam(LOG_VAR.name !)],\n        [new o.ReturnStatement(o.importExpr(Identifiers.viewDef).callFn([\n          o.literal(viewFlags),\n          o.literalArr(nodeDefExprs),\n          updateDirectivesFn,\n          updateRendererFn,\n        ]))],\n        o.importType(Identifiers.ViewDefinition),\n        this.embeddedViewIndex === 0 ? [o.StmtModifier.Exported] : []);\n\n    targetStatements.push(viewFactory);\n    return targetStatements;\n  }\n\n  private _createUpdateFn(updateStmts: o.Statement[]): o.Expression {\n    let updateFn: o.Expression;\n    if (updateStmts.length > 0) {\n      const preStmts: o.Statement[] = [];\n      if (!this.component.isHost && o.findReadVarNames(updateStmts).has(COMP_VAR.name !)) {\n        preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n      }\n      updateFn = o.fn(\n          [\n            new o.FnParam(CHECK_VAR.name !, o.INFERRED_TYPE),\n            new o.FnParam(VIEW_VAR.name !, o.INFERRED_TYPE)\n          ],\n          [...preStmts, ...updateStmts], o.INFERRED_TYPE);\n    } else {\n      updateFn = o.NULL_EXPR;\n    }\n    return updateFn;\n  }\n\n  visitNgContent(ast: NgContentAst, context: any): any {\n    // ngContentDef(ngContentIndex: number, index: number): NodeDef;\n    this.nodes.push(() => ({\n                      sourceSpan: ast.sourceSpan,\n                      nodeFlags: NodeFlags.TypeNgContent,\n                      nodeDef: o.importExpr(Identifiers.ngContentDef).callFn([\n                        o.literal(ast.ngContentIndex), o.literal(ast.index)\n                      ])\n                    }));\n  }\n\n  visitText(ast: TextAst, context: any): any {\n    // Static text nodes have no check function\n    const checkIndex = -1;\n    this.nodes.push(() => ({\n                      sourceSpan: ast.sourceSpan,\n                      nodeFlags: NodeFlags.TypeText,\n                      nodeDef: o.importExpr(Identifiers.textDef).callFn([\n                        o.literal(checkIndex),\n                        o.literal(ast.ngContentIndex),\n                        o.literalArr([o.literal(ast.value)]),\n                      ])\n                    }));\n  }\n\n  visitBoundText(ast: BoundTextAst, context: any): any {\n    const nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array\n    this.nodes.push(null !);\n\n    const astWithSource = <ASTWithSource>ast.value;\n    const inter = <Interpolation>astWithSource.ast;\n\n    const updateRendererExpressions = inter.expressions.map(\n        (expr, bindingIndex) => this._preprocessUpdateExpression(\n            {nodeIndex, bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr}));\n\n    // Check index is the same as the node index during compilation\n    // They might only differ at runtime\n    const checkIndex = nodeIndex;\n\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: NodeFlags.TypeText,\n      nodeDef: o.importExpr(Identifiers.textDef).callFn([\n        o.literal(checkIndex),\n        o.literal(ast.ngContentIndex),\n        o.literalArr(inter.strings.map(s => o.literal(s))),\n      ]),\n      updateRenderer: updateRendererExpressions\n    });\n  }\n\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    const nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array\n    this.nodes.push(null !);\n\n    const {flags, queryMatchesExpr, hostEvents} = this._visitElementOrTemplate(nodeIndex, ast);\n\n    const childVisitor = this.viewBuilderFactory(this);\n    this.children.push(childVisitor);\n    childVisitor.visitAll(ast.variables, ast.children);\n\n    const childCount = this.nodes.length - nodeIndex - 1;\n\n    // anchorDef(\n    //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\n    //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\n    //   ViewDefinitionFactory): NodeDef;\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: NodeFlags.TypeElement | flags,\n      nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n        o.literal(flags),\n        queryMatchesExpr,\n        o.literal(ast.ngContentIndex),\n        o.literal(childCount),\n        this._createElementHandleEventFn(nodeIndex, hostEvents),\n        o.variable(childVisitor.viewName),\n      ])\n    });\n  }\n\n  visitElement(ast: ElementAst, context: any): any {\n    const nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array so we can add children\n    this.nodes.push(null !);\n\n    // Using a null element name creates an anchor.\n    const elName: string|null = isNgContainer(ast.name) ? null : ast.name;\n\n    const {flags, usedEvents, queryMatchesExpr, hostBindings: dirHostBindings, hostEvents} =\n        this._visitElementOrTemplate(nodeIndex, ast);\n\n    let inputDefs: o.Expression[] = [];\n    let updateRendererExpressions: UpdateExpression[] = [];\n    let outputDefs: o.Expression[] = [];\n    if (elName) {\n      const hostBindings: any[] = ast.inputs\n                                      .map((inputAst) => ({\n                                             context: COMP_VAR as o.Expression,\n                                             inputAst,\n                                             dirAst: null as any,\n                                           }))\n                                      .concat(dirHostBindings);\n      if (hostBindings.length) {\n        updateRendererExpressions =\n            hostBindings.map((hostBinding, bindingIndex) => this._preprocessUpdateExpression({\n              context: hostBinding.context,\n              nodeIndex,\n              bindingIndex,\n              sourceSpan: hostBinding.inputAst.sourceSpan,\n              value: hostBinding.inputAst.value\n            }));\n        inputDefs = hostBindings.map(\n            hostBinding => elementBindingDef(hostBinding.inputAst, hostBinding.dirAst));\n      }\n      outputDefs = usedEvents.map(\n          ([target, eventName]) => o.literalArr([o.literal(target), o.literal(eventName)]));\n    }\n\n    templateVisitAll(this, ast.children);\n\n    const childCount = this.nodes.length - nodeIndex - 1;\n\n    const compAst = ast.directives.find(dirAst => dirAst.directive.isComponent);\n    let compRendererType = o.NULL_EXPR as o.Expression;\n    let compView = o.NULL_EXPR as o.Expression;\n    if (compAst) {\n      compView = this.outputCtx.importExpr(compAst.directive.componentViewType);\n      compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);\n    }\n\n    // Check index is the same as the node index during compilation\n    // They might only differ at runtime\n    const checkIndex = nodeIndex;\n\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: NodeFlags.TypeElement | flags,\n      nodeDef: o.importExpr(Identifiers.elementDef).callFn([\n        o.literal(checkIndex),\n        o.literal(flags),\n        queryMatchesExpr,\n        o.literal(ast.ngContentIndex),\n        o.literal(childCount),\n        o.literal(elName),\n        elName ? fixedAttrsDef(ast) : o.NULL_EXPR,\n        inputDefs.length ? o.literalArr(inputDefs) : o.NULL_EXPR,\n        outputDefs.length ? o.literalArr(outputDefs) : o.NULL_EXPR,\n        this._createElementHandleEventFn(nodeIndex, hostEvents),\n        compView,\n        compRendererType,\n      ]),\n      updateRenderer: updateRendererExpressions\n    });\n  }\n\n  private _visitElementOrTemplate(nodeIndex: number, ast: {\n    hasViewContainer: boolean,\n    outputs: BoundEventAst[],\n    directives: DirectiveAst[],\n    providers: ProviderAst[],\n    references: ReferenceAst[],\n    queryMatches: QueryMatch[]\n  }): {\n    flags: NodeFlags,\n    usedEvents: [string | null, string][],\n    queryMatchesExpr: o.Expression,\n    hostBindings:\n        {context: o.Expression, inputAst: BoundElementPropertyAst, dirAst: DirectiveAst}[],\n    hostEvents: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[],\n  } {\n    let flags = NodeFlags.None;\n    if (ast.hasViewContainer) {\n      flags |= NodeFlags.EmbeddedViews;\n    }\n    const usedEvents = new Map<string, [string | null, string]>();\n    ast.outputs.forEach((event) => {\n      const {name, target} = elementEventNameAndTarget(event, null);\n      usedEvents.set(elementEventFullName(target, name), [target, name]);\n    });\n    ast.directives.forEach((dirAst) => {\n      dirAst.hostEvents.forEach((event) => {\n        const {name, target} = elementEventNameAndTarget(event, dirAst);\n        usedEvents.set(elementEventFullName(target, name), [target, name]);\n      });\n    });\n    const hostBindings:\n        {context: o.Expression, inputAst: BoundElementPropertyAst, dirAst: DirectiveAst}[] = [];\n    const hostEvents: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[] = [];\n    this._visitComponentFactoryResolverProvider(ast.directives);\n\n    ast.providers.forEach((providerAst, providerIndex) => {\n      let dirAst: DirectiveAst = undefined !;\n      let dirIndex: number = undefined !;\n      ast.directives.forEach((localDirAst, i) => {\n        if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\n          dirAst = localDirAst;\n          dirIndex = i;\n        }\n      });\n      if (dirAst) {\n        const {hostBindings: dirHostBindings, hostEvents: dirHostEvents} = this._visitDirective(\n            providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents,\n            this.staticQueryIds.get(<any>ast) !);\n        hostBindings.push(...dirHostBindings);\n        hostEvents.push(...dirHostEvents);\n      } else {\n        this._visitProvider(providerAst, ast.queryMatches);\n      }\n    });\n\n    let queryMatchExprs: o.Expression[] = [];\n    ast.queryMatches.forEach((match) => {\n      let valueType: QueryValueType = undefined !;\n      if (tokenReference(match.value) ===\n          this.reflector.resolveExternalReference(Identifiers.ElementRef)) {\n        valueType = QueryValueType.ElementRef;\n      } else if (\n          tokenReference(match.value) ===\n          this.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n        valueType = QueryValueType.ViewContainerRef;\n      } else if (\n          tokenReference(match.value) ===\n          this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n        valueType = QueryValueType.TemplateRef;\n      }\n      if (valueType != null) {\n        queryMatchExprs.push(o.literalArr([o.literal(match.queryId), o.literal(valueType)]));\n      }\n    });\n    ast.references.forEach((ref) => {\n      let valueType: QueryValueType = undefined !;\n      if (!ref.value) {\n        valueType = QueryValueType.RenderElement;\n      } else if (\n          tokenReference(ref.value) ===\n          this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n        valueType = QueryValueType.TemplateRef;\n      }\n      if (valueType != null) {\n        this.refNodeIndices[ref.name] = nodeIndex;\n        queryMatchExprs.push(o.literalArr([o.literal(ref.name), o.literal(valueType)]));\n      }\n    });\n    ast.outputs.forEach((outputAst) => {\n      hostEvents.push({context: COMP_VAR, eventAst: outputAst, dirAst: null !});\n    });\n\n    return {\n      flags,\n      usedEvents: Array.from(usedEvents.values()),\n      queryMatchesExpr: queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n      hostBindings,\n      hostEvents: hostEvents\n    };\n  }\n\n  private _visitDirective(\n      providerAst: ProviderAst, dirAst: DirectiveAst, directiveIndex: number,\n      elementNodeIndex: number, refs: ReferenceAst[], queryMatches: QueryMatch[],\n      usedEvents: Map<string, any>, queryIds: StaticAndDynamicQueryIds): {\n    hostBindings:\n        {context: o.Expression, inputAst: BoundElementPropertyAst, dirAst: DirectiveAst}[],\n    hostEvents: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[]\n  } {\n    const nodeIndex = this.nodes.length;\n    // reserve the space in the nodeDefs array so we can add children\n    this.nodes.push(null !);\n\n    dirAst.directive.queries.forEach((query, queryIndex) => {\n      const queryId = dirAst.contentQueryStartId + queryIndex;\n      const flags =\n          NodeFlags.TypeContentQuery | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\n      const bindingType = query.first ? QueryBindingType.First : QueryBindingType.All;\n      this.nodes.push(() => ({\n                        sourceSpan: dirAst.sourceSpan,\n                        nodeFlags: flags,\n                        nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                          o.literal(flags), o.literal(queryId),\n                          new o.LiteralMapExpr([new o.LiteralMapEntry(\n                              query.propertyName, o.literal(bindingType), false)])\n                        ]),\n                      }));\n    });\n\n    // Note: the operation below might also create new nodeDefs,\n    // but we don't want them to be a child of a directive,\n    // as they might be a provider/pipe on their own.\n    // I.e. we only allow queries as children of directives nodes.\n    const childCount = this.nodes.length - nodeIndex - 1;\n\n    let {flags, queryMatchExprs, providerExpr, depsExpr} =\n        this._visitProviderOrDirective(providerAst, queryMatches);\n\n    refs.forEach((ref) => {\n      if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\n        this.refNodeIndices[ref.name] = nodeIndex;\n        queryMatchExprs.push(\n            o.literalArr([o.literal(ref.name), o.literal(QueryValueType.Provider)]));\n      }\n    });\n\n    if (dirAst.directive.isComponent) {\n      flags |= NodeFlags.Component;\n    }\n\n    const inputDefs = dirAst.inputs.map((inputAst, inputIndex) => {\n      const mapValue = o.literalArr([o.literal(inputIndex), o.literal(inputAst.directiveName)]);\n      // Note: it's important to not quote the key so that we can capture renames by minifiers!\n      return new o.LiteralMapEntry(inputAst.directiveName, mapValue, false);\n    });\n\n    const outputDefs: o.LiteralMapEntry[] = [];\n    const dirMeta = dirAst.directive;\n    Object.keys(dirMeta.outputs).forEach((propName) => {\n      const eventName = dirMeta.outputs[propName];\n      if (usedEvents.has(eventName)) {\n        // Note: it's important to not quote the key so that we can capture renames by minifiers!\n        outputDefs.push(new o.LiteralMapEntry(propName, o.literal(eventName), false));\n      }\n    });\n    let updateDirectiveExpressions: UpdateExpression[] = [];\n    if (dirAst.inputs.length || (flags & (NodeFlags.DoCheck | NodeFlags.OnInit)) > 0) {\n      updateDirectiveExpressions =\n          dirAst.inputs.map((input, bindingIndex) => this._preprocessUpdateExpression({\n            nodeIndex,\n            bindingIndex,\n            sourceSpan: input.sourceSpan,\n            context: COMP_VAR,\n            value: input.value\n          }));\n    }\n\n    const dirContextExpr =\n        o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n    const hostBindings = dirAst.hostProperties.map((inputAst) => ({\n                                                     context: dirContextExpr,\n                                                     dirAst,\n                                                     inputAst,\n                                                   }));\n    const hostEvents = dirAst.hostEvents.map((hostEventAst) => ({\n                                               context: dirContextExpr,\n                                               eventAst: hostEventAst, dirAst,\n                                             }));\n\n    // Check index is the same as the node index during compilation\n    // They might only differ at runtime\n    const checkIndex = nodeIndex;\n\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: dirAst.sourceSpan,\n      nodeFlags: NodeFlags.TypeDirective | flags,\n      nodeDef: o.importExpr(Identifiers.directiveDef).callFn([\n        o.literal(checkIndex),\n        o.literal(flags),\n        queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n        o.literal(childCount),\n        providerExpr,\n        depsExpr,\n        inputDefs.length ? new o.LiteralMapExpr(inputDefs) : o.NULL_EXPR,\n        outputDefs.length ? new o.LiteralMapExpr(outputDefs) : o.NULL_EXPR,\n      ]),\n      updateDirectives: updateDirectiveExpressions,\n      directive: dirAst.directive.type,\n    });\n\n    return {hostBindings, hostEvents};\n  }\n\n  private _visitProvider(providerAst: ProviderAst, queryMatches: QueryMatch[]): void {\n    this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));\n  }\n\n  private _visitComponentFactoryResolverProvider(directives: DirectiveAst[]) {\n    const componentDirMeta = directives.find(dirAst => dirAst.directive.isComponent);\n    if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\n      const {providerExpr, depsExpr, flags, tokenExpr} = componentFactoryResolverProviderDef(\n          this.reflector, this.outputCtx, NodeFlags.PrivateProvider,\n          componentDirMeta.directive.entryComponents);\n      this._addProviderNode({\n        providerExpr,\n        depsExpr,\n        flags,\n        tokenExpr,\n        queryMatchExprs: [],\n        sourceSpan: componentDirMeta.sourceSpan\n      });\n    }\n  }\n\n  private _addProviderNode(data: {\n    flags: NodeFlags,\n    queryMatchExprs: o.Expression[],\n    providerExpr: o.Expression,\n    depsExpr: o.Expression,\n    tokenExpr: o.Expression,\n    sourceSpan: ParseSourceSpan\n  }) {\n    const nodeIndex = this.nodes.length;\n    // providerDef(\n    //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,\n    //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n    this.nodes.push(\n        () => ({\n          sourceSpan: data.sourceSpan,\n          nodeFlags: data.flags,\n          nodeDef: o.importExpr(Identifiers.providerDef).callFn([\n            o.literal(data.flags),\n            data.queryMatchExprs.length ? o.literalArr(data.queryMatchExprs) : o.NULL_EXPR,\n            data.tokenExpr, data.providerExpr, data.depsExpr\n          ])\n        }));\n  }\n\n  private _visitProviderOrDirective(providerAst: ProviderAst, queryMatches: QueryMatch[]): {\n    flags: NodeFlags,\n    tokenExpr: o.Expression,\n    sourceSpan: ParseSourceSpan,\n    queryMatchExprs: o.Expression[],\n    providerExpr: o.Expression,\n    depsExpr: o.Expression\n  } {\n    let flags = NodeFlags.None;\n    let queryMatchExprs: o.Expression[] = [];\n\n    queryMatches.forEach((match) => {\n      if (tokenReference(match.value) === tokenReference(providerAst.token)) {\n        queryMatchExprs.push(\n            o.literalArr([o.literal(match.queryId), o.literal(QueryValueType.Provider)]));\n      }\n    });\n    const {providerExpr, depsExpr, flags: providerFlags, tokenExpr} =\n        providerDef(this.outputCtx, providerAst);\n    return {\n      flags: flags | providerFlags,\n      queryMatchExprs,\n      providerExpr,\n      depsExpr,\n      tokenExpr,\n      sourceSpan: providerAst.sourceSpan\n    };\n  }\n\n  getLocal(name: string): o.Expression|null {\n    if (name == EventHandlerVars.event.name) {\n      return EventHandlerVars.event;\n    }\n    let currViewExpr: o.Expression = VIEW_VAR;\n    for (let currBuilder: ViewBuilder|null = this; currBuilder; currBuilder = currBuilder.parent,\n                          currViewExpr = currViewExpr.prop('parent').cast(o.DYNAMIC_TYPE)) {\n      // check references\n      const refNodeIndex = currBuilder.refNodeIndices[name];\n      if (refNodeIndex != null) {\n        return o.importExpr(Identifiers.nodeValue).callFn([currViewExpr, o.literal(refNodeIndex)]);\n      }\n\n      // check variables\n      const varAst = currBuilder.variables.find((varAst) => varAst.name === name);\n      if (varAst) {\n        const varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;\n        return currViewExpr.prop('context').prop(varValue);\n      }\n    }\n    return null;\n  }\n\n  private _createLiteralArrayConverter(sourceSpan: ParseSourceSpan, argCount: number):\n      BuiltinConverter {\n    if (argCount === 0) {\n      const valueExpr = o.importExpr(Identifiers.EMPTY_ARRAY);\n      return () => valueExpr;\n    }\n\n    const checkIndex = this.nodes.length;\n\n    this.nodes.push(() => ({\n                      sourceSpan,\n                      nodeFlags: NodeFlags.TypePureArray,\n                      nodeDef: o.importExpr(Identifiers.pureArrayDef).callFn([\n                        o.literal(checkIndex),\n                        o.literal(argCount),\n                      ])\n                    }));\n\n    return (args: o.Expression[]) => callCheckStmt(checkIndex, args);\n  }\n\n  private _createLiteralMapConverter(\n      sourceSpan: ParseSourceSpan, keys: {key: string, quoted: boolean}[]): BuiltinConverter {\n    if (keys.length === 0) {\n      const valueExpr = o.importExpr(Identifiers.EMPTY_MAP);\n      return () => valueExpr;\n    }\n\n    const map = o.literalMap(keys.map((e, i) => ({...e, value: o.literal(i)})));\n    const checkIndex = this.nodes.length;\n    this.nodes.push(() => ({\n                      sourceSpan,\n                      nodeFlags: NodeFlags.TypePureObject,\n                      nodeDef: o.importExpr(Identifiers.pureObjectDef).callFn([\n                        o.literal(checkIndex),\n                        map,\n                      ])\n                    }));\n\n    return (args: o.Expression[]) => callCheckStmt(checkIndex, args);\n  }\n\n  private _createPipeConverter(expression: UpdateExpression, name: string, argCount: number):\n      BuiltinConverter {\n    const pipe = this.usedPipes.find((pipeSummary) => pipeSummary.name === name) !;\n    if (pipe.pure) {\n      const checkIndex = this.nodes.length;\n      this.nodes.push(() => ({\n                        sourceSpan: expression.sourceSpan,\n                        nodeFlags: NodeFlags.TypePurePipe,\n                        nodeDef: o.importExpr(Identifiers.purePipeDef).callFn([\n                          o.literal(checkIndex),\n                          o.literal(argCount),\n                        ])\n                      }));\n\n      // find underlying pipe in the component view\n      let compViewExpr: o.Expression = VIEW_VAR;\n      let compBuilder: ViewBuilder = this;\n      while (compBuilder.parent) {\n        compBuilder = compBuilder.parent;\n        compViewExpr = compViewExpr.prop('parent').cast(o.DYNAMIC_TYPE);\n      }\n      const pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\n      const pipeValueExpr: o.Expression =\n          o.importExpr(Identifiers.nodeValue).callFn([compViewExpr, o.literal(pipeNodeIndex)]);\n\n      return (args: o.Expression[]) => callUnwrapValue(\n                 expression.nodeIndex, expression.bindingIndex,\n                 callCheckStmt(checkIndex, [pipeValueExpr].concat(args)));\n    } else {\n      const nodeIndex = this._createPipe(expression.sourceSpan, pipe);\n      const nodeValueExpr =\n          o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n\n      return (args: o.Expression[]) => callUnwrapValue(\n                 expression.nodeIndex, expression.bindingIndex,\n                 nodeValueExpr.callMethod('transform', args));\n    }\n  }\n\n  private _createPipe(sourceSpan: ParseSourceSpan|null, pipe: CompilePipeSummary): number {\n    const nodeIndex = this.nodes.length;\n    let flags = NodeFlags.None;\n    pipe.type.lifecycleHooks.forEach((lifecycleHook) => {\n      // for pipes, we only support ngOnDestroy\n      if (lifecycleHook === LifecycleHooks.OnDestroy) {\n        flags |= lifecycleHookToNodeFlag(lifecycleHook);\n      }\n    });\n\n    const depExprs = pipe.type.diDeps.map((diDep) => depDef(this.outputCtx, diDep));\n    // function pipeDef(\n    //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\n    this.nodes.push(\n        () => ({\n          sourceSpan,\n          nodeFlags: NodeFlags.TypePipe,\n          nodeDef: o.importExpr(Identifiers.pipeDef).callFn([\n            o.literal(flags), this.outputCtx.importExpr(pipe.type.reference), o.literalArr(depExprs)\n          ])\n        }));\n    return nodeIndex;\n  }\n\n  /**\n   * For the AST in `UpdateExpression.value`:\n   * - create nodes for pipes, literal arrays and, literal maps,\n   * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\n   *\n   * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\n   */\n  private _preprocessUpdateExpression(expression: UpdateExpression): UpdateExpression {\n    return {\n      nodeIndex: expression.nodeIndex,\n      bindingIndex: expression.bindingIndex,\n      sourceSpan: expression.sourceSpan,\n      context: expression.context,\n      value: convertPropertyBindingBuiltins(\n          {\n            createLiteralArrayConverter: (argCount: number) => this._createLiteralArrayConverter(\n                                             expression.sourceSpan, argCount),\n            createLiteralMapConverter:\n                (keys: {key: string, quoted: boolean}[]) =>\n                    this._createLiteralMapConverter(expression.sourceSpan, keys),\n            createPipeConverter: (name: string, argCount: number) =>\n                                     this._createPipeConverter(expression, name, argCount)\n          },\n          expression.value)\n    };\n  }\n\n  private _createNodeExpressions(): {\n    updateRendererStmts: o.Statement[],\n    updateDirectivesStmts: o.Statement[],\n    nodeDefExprs: o.Expression[]\n  } {\n    const self = this;\n    let updateBindingCount = 0;\n    const updateRendererStmts: o.Statement[] = [];\n    const updateDirectivesStmts: o.Statement[] = [];\n    const nodeDefExprs = this.nodes.map((factory, nodeIndex) => {\n      const {nodeDef, nodeFlags, updateDirectives, updateRenderer, sourceSpan} = factory();\n      if (updateRenderer) {\n        updateRendererStmts.push(\n            ...createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));\n      }\n      if (updateDirectives) {\n        updateDirectivesStmts.push(...createUpdateStatements(\n            nodeIndex, sourceSpan, updateDirectives,\n            (nodeFlags & (NodeFlags.DoCheck | NodeFlags.OnInit)) > 0));\n      }\n      // We use a comma expression to call the log function before\n      // the nodeDef function, but still use the result of the nodeDef function\n      // as the value.\n      // Note: We only add the logger to elements / text nodes,\n      // so we don't generate too much code.\n      const logWithNodeDef = nodeFlags & NodeFlags.CatRenderNode ?\n          new o.CommaExpr([LOG_VAR.callFn([]).callFn([]), nodeDef]) :\n          nodeDef;\n      return o.applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);\n    });\n    return {updateRendererStmts, updateDirectivesStmts, nodeDefExprs};\n\n    function createUpdateStatements(\n        nodeIndex: number, sourceSpan: ParseSourceSpan | null, expressions: UpdateExpression[],\n        allowEmptyExprs: boolean): o.Statement[] {\n      const updateStmts: o.Statement[] = [];\n      const exprs = expressions.map(({sourceSpan, context, value}) => {\n        const bindingId = `${updateBindingCount++}`;\n        const nameResolver = context === COMP_VAR ? self : null;\n        const {stmts, currValExpr} =\n            convertPropertyBinding(nameResolver, context, value, bindingId, BindingForm.General);\n        updateStmts.push(...stmts.map(\n            (stmt: o.Statement) => o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n        return o.applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);\n      });\n      if (expressions.length || allowEmptyExprs) {\n        updateStmts.push(o.applySourceSpanToStatementIfNeeded(\n            callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));\n      }\n      return updateStmts;\n    }\n  }\n\n  private _createElementHandleEventFn(\n      nodeIndex: number,\n      handlers: {context: o.Expression, eventAst: BoundEventAst, dirAst: DirectiveAst}[]) {\n    const handleEventStmts: o.Statement[] = [];\n    let handleEventBindingCount = 0;\n    handlers.forEach(({context, eventAst, dirAst}) => {\n      const bindingId = `${handleEventBindingCount++}`;\n      const nameResolver = context === COMP_VAR ? this : null;\n      const {stmts, allowDefault} =\n          convertActionBinding(nameResolver, context, eventAst.handler, bindingId);\n      const trueStmts = stmts;\n      if (allowDefault) {\n        trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\n      }\n      const {target: eventTarget, name: eventName} = elementEventNameAndTarget(eventAst, dirAst);\n      const fullEventName = elementEventFullName(eventTarget, eventName);\n      handleEventStmts.push(o.applySourceSpanToStatementIfNeeded(\n          new o.IfStmt(o.literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts),\n          eventAst.sourceSpan));\n    });\n    let handleEventFn: o.Expression;\n    if (handleEventStmts.length > 0) {\n      const preStmts: o.Statement[] =\n          [ALLOW_DEFAULT_VAR.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE)];\n      if (!this.component.isHost && o.findReadVarNames(handleEventStmts).has(COMP_VAR.name !)) {\n        preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n      }\n      handleEventFn = o.fn(\n          [\n            new o.FnParam(VIEW_VAR.name !, o.INFERRED_TYPE),\n            new o.FnParam(EVENT_NAME_VAR.name !, o.INFERRED_TYPE),\n            new o.FnParam(EventHandlerVars.event.name !, o.INFERRED_TYPE)\n          ],\n          [...preStmts, ...handleEventStmts, new o.ReturnStatement(ALLOW_DEFAULT_VAR)],\n          o.INFERRED_TYPE);\n    } else {\n      handleEventFn = o.NULL_EXPR;\n    }\n    return handleEventFn;\n  }\n\n  visitDirective(ast: DirectiveAst, context: {usedEvents: Set<string>}): any {}\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any {}\n  visitReference(ast: ReferenceAst, context: any): any {}\n  visitVariable(ast: VariableAst, context: any): any {}\n  visitEvent(ast: BoundEventAst, context: any): any {}\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any {}\n  visitAttr(ast: AttrAst, context: any): any {}\n}\n\nfunction needsAdditionalRootNode(astNodes: TemplateAst[]): boolean {\n  const lastAstNode = astNodes[astNodes.length - 1];\n  if (lastAstNode instanceof EmbeddedTemplateAst) {\n    return lastAstNode.hasViewContainer;\n  }\n\n  if (lastAstNode instanceof ElementAst) {\n    if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {\n      return needsAdditionalRootNode(lastAstNode.children);\n    }\n    return lastAstNode.hasViewContainer;\n  }\n\n  return lastAstNode instanceof NgContentAst;\n}\n\n\nfunction elementBindingDef(inputAst: BoundElementPropertyAst, dirAst: DirectiveAst): o.Expression {\n  switch (inputAst.type) {\n    case PropertyBindingType.Attribute:\n      return o.literalArr([\n        o.literal(BindingFlags.TypeElementAttribute), o.literal(inputAst.name),\n        o.literal(inputAst.securityContext)\n      ]);\n    case PropertyBindingType.Property:\n      return o.literalArr([\n        o.literal(BindingFlags.TypeProperty), o.literal(inputAst.name),\n        o.literal(inputAst.securityContext)\n      ]);\n    case PropertyBindingType.Animation:\n      const bindingType = BindingFlags.TypeProperty |\n          (dirAst && dirAst.directive.isComponent ? BindingFlags.SyntheticHostProperty :\n                                                    BindingFlags.SyntheticProperty);\n      return o.literalArr([\n        o.literal(bindingType), o.literal('@' + inputAst.name), o.literal(inputAst.securityContext)\n      ]);\n    case PropertyBindingType.Class:\n      return o.literalArr(\n          [o.literal(BindingFlags.TypeElementClass), o.literal(inputAst.name), o.NULL_EXPR]);\n    case PropertyBindingType.Style:\n      return o.literalArr([\n        o.literal(BindingFlags.TypeElementStyle), o.literal(inputAst.name), o.literal(inputAst.unit)\n      ]);\n  }\n}\n\n\nfunction fixedAttrsDef(elementAst: ElementAst): o.Expression {\n  const mapResult: {[key: string]: string} = Object.create(null);\n  elementAst.attrs.forEach(attrAst => { mapResult[attrAst.name] = attrAst.value; });\n  elementAst.directives.forEach(dirAst => {\n    Object.keys(dirAst.directive.hostAttributes).forEach(name => {\n      const value = dirAst.directive.hostAttributes[name];\n      const prevValue = mapResult[name];\n      mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;\n    });\n  });\n  // Note: We need to sort to get a defined output order\n  // for tests and for caching generated artifacts...\n  return o.literalArr(Object.keys(mapResult).sort().map(\n      (attrName) => o.literalArr([o.literal(attrName), o.literal(mapResult[attrName])])));\n}\n\nfunction mergeAttributeValue(attrName: string, attrValue1: string, attrValue2: string): string {\n  if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {\n    return `${attrValue1} ${attrValue2}`;\n  } else {\n    return attrValue2;\n  }\n}\n\nfunction callCheckStmt(nodeIndex: number, exprs: o.Expression[]): o.Expression {\n  if (exprs.length > 10) {\n    return CHECK_VAR.callFn(\n        [VIEW_VAR, o.literal(nodeIndex), o.literal(ArgumentType.Dynamic), o.literalArr(exprs)]);\n  } else {\n    return CHECK_VAR.callFn(\n        [VIEW_VAR, o.literal(nodeIndex), o.literal(ArgumentType.Inline), ...exprs]);\n  }\n}\n\nfunction callUnwrapValue(nodeIndex: number, bindingIdx: number, expr: o.Expression): o.Expression {\n  return o.importExpr(Identifiers.unwrapValue).callFn([\n    VIEW_VAR, o.literal(nodeIndex), o.literal(bindingIdx), expr\n  ]);\n}\n\ninterface StaticAndDynamicQueryIds {\n  staticQueryIds: Set<number>;\n  dynamicQueryIds: Set<number>;\n}\n\n\nfunction findStaticQueryIds(\n    nodes: TemplateAst[], result = new Map<TemplateAst, StaticAndDynamicQueryIds>()):\n    Map<TemplateAst, StaticAndDynamicQueryIds> {\n  nodes.forEach((node) => {\n    const staticQueryIds = new Set<number>();\n    const dynamicQueryIds = new Set<number>();\n    let queryMatches: QueryMatch[] = undefined !;\n    if (node instanceof ElementAst) {\n      findStaticQueryIds(node.children, result);\n      node.children.forEach((child) => {\n        const childData = result.get(child) !;\n        childData.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\n        childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n      });\n      queryMatches = node.queryMatches;\n    } else if (node instanceof EmbeddedTemplateAst) {\n      findStaticQueryIds(node.children, result);\n      node.children.forEach((child) => {\n        const childData = result.get(child) !;\n        childData.staticQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n        childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n      });\n      queryMatches = node.queryMatches;\n    }\n    if (queryMatches) {\n      queryMatches.forEach((match) => staticQueryIds.add(match.queryId));\n    }\n    dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\n    result.set(node, {staticQueryIds, dynamicQueryIds});\n  });\n  return result;\n}\n\nfunction staticViewQueryIds(nodeStaticQueryIds: Map<TemplateAst, StaticAndDynamicQueryIds>):\n    StaticAndDynamicQueryIds {\n  const staticQueryIds = new Set<number>();\n  const dynamicQueryIds = new Set<number>();\n  Array.from(nodeStaticQueryIds.values()).forEach((entry) => {\n    entry.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\n    entry.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n  });\n  dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\n  return {staticQueryIds, dynamicQueryIds};\n}\n\nfunction elementEventNameAndTarget(\n    eventAst: BoundEventAst, dirAst: DirectiveAst | null): {name: string, target: string | null} {\n  if (eventAst.isAnimation) {\n    return {\n      name: `@${eventAst.name}.${eventAst.phase}`,\n      target: dirAst && dirAst.directive.isComponent ? 'component' : null\n    };\n  } else {\n    return eventAst;\n  }\n}\n\nfunction calcStaticDynamicQueryFlags(\n    queryIds: StaticAndDynamicQueryIds, queryId: number, isFirst: boolean) {\n  let flags = NodeFlags.None;\n  // Note: We only make queries static that query for a single item.\n  // This is because of backwards compatibility with the old view compiler...\n  if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {\n    flags |= NodeFlags.StaticQuery;\n  } else {\n    flags |= NodeFlags.DynamicQuery;\n  }\n  return flags;\n}\n\nexport function elementEventFullName(target: string | null, name: string): string {\n  return target ? `${target}:${name}` : name;\n}\n"],"sourceRoot":""}