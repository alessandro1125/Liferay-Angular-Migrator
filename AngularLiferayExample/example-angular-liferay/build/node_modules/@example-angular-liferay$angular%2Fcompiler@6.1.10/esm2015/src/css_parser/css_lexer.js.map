{"version":3,"sources":["../../../../../../../packages/compiler/src/css_parser/css_lexer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport * as chars from '../chars';\n\nexport enum CssTokenType {\n  EOF,\n  String,\n  Comment,\n  Identifier,\n  Number,\n  IdentifierOrNumber,\n  AtKeyword,\n  Character,\n  Whitespace,\n  Invalid\n}\n\nexport enum CssLexerMode {\n  ALL,\n  ALL_TRACK_WS,\n  SELECTOR,\n  PSEUDO_SELECTOR,\n  PSEUDO_SELECTOR_WITH_ARGUMENTS,\n  ATTRIBUTE_SELECTOR,\n  AT_RULE_QUERY,\n  MEDIA_QUERY,\n  BLOCK,\n  KEYFRAME_BLOCK,\n  STYLE_BLOCK,\n  STYLE_VALUE,\n  STYLE_VALUE_FUNCTION,\n  STYLE_CALC_FUNCTION\n}\n\nexport class LexedCssResult {\n  constructor(public error: Error|null, public token: CssToken) {}\n}\n\nexport function generateErrorMessage(\n    input: string, message: string, errorValue: string, index: number, row: number,\n    column: number): string {\n  return `${message} at column ${row}:${column} in expression [` +\n      findProblemCode(input, errorValue, index, column) + ']';\n}\n\nexport function findProblemCode(\n    input: string, errorValue: string, index: number, column: number): string {\n  let endOfProblemLine = index;\n  let current = charCode(input, index);\n  while (current > 0 && !isNewline(current)) {\n    current = charCode(input, ++endOfProblemLine);\n  }\n  const choppedString = input.substring(0, endOfProblemLine);\n  let pointerPadding = '';\n  for (let i = 0; i < column; i++) {\n    pointerPadding += ' ';\n  }\n  let pointerString = '';\n  for (let i = 0; i < errorValue.length; i++) {\n    pointerString += '^';\n  }\n  return choppedString + '\\n' + pointerPadding + pointerString + '\\n';\n}\n\nexport class CssToken {\n  numValue: number;\n  constructor(\n      public index: number, public column: number, public line: number, public type: CssTokenType,\n      public strValue: string) {\n    this.numValue = charCode(strValue, 0);\n  }\n}\n\nexport class CssLexer {\n  scan(text: string, trackComments: boolean = false): CssScanner {\n    return new CssScanner(text, trackComments);\n  }\n}\n\nexport function cssScannerError(token: CssToken, message: string): Error {\n  const error = Error('CssParseError: ' + message);\n  (error as any)[ERROR_RAW_MESSAGE] = message;\n  (error as any)[ERROR_TOKEN] = token;\n  return error;\n}\n\nconst ERROR_TOKEN = 'ngToken';\nconst ERROR_RAW_MESSAGE = 'ngRawMessage';\n\nexport function getRawMessage(error: Error): string {\n  return (error as any)[ERROR_RAW_MESSAGE];\n}\n\nexport function getToken(error: Error): CssToken {\n  return (error as any)[ERROR_TOKEN];\n}\n\nfunction _trackWhitespace(mode: CssLexerMode) {\n  switch (mode) {\n    case CssLexerMode.SELECTOR:\n    case CssLexerMode.PSEUDO_SELECTOR:\n    case CssLexerMode.ALL_TRACK_WS:\n    case CssLexerMode.STYLE_VALUE:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport class CssScanner {\n  // TODO(issue/24571): remove '!'.\n  peek !: number;\n  peekPeek: number;\n  length: number = 0;\n  index: number = -1;\n  column: number = -1;\n  line: number = 0;\n\n  /** @internal */\n  _currentMode: CssLexerMode = CssLexerMode.BLOCK;\n  /** @internal */\n  _currentError: Error|null = null;\n\n  constructor(public input: string, private _trackComments: boolean = false) {\n    this.length = this.input.length;\n    this.peekPeek = this.peekAt(0);\n    this.advance();\n  }\n\n  getMode(): CssLexerMode { return this._currentMode; }\n\n  setMode(mode: CssLexerMode) {\n    if (this._currentMode != mode) {\n      if (_trackWhitespace(this._currentMode) && !_trackWhitespace(mode)) {\n        this.consumeWhitespace();\n      }\n      this._currentMode = mode;\n    }\n  }\n\n  advance(): void {\n    if (isNewline(this.peek)) {\n      this.column = 0;\n      this.line++;\n    } else {\n      this.column++;\n    }\n\n    this.index++;\n    this.peek = this.peekPeek;\n    this.peekPeek = this.peekAt(this.index + 1);\n  }\n\n  peekAt(index: number): number {\n    return index >= this.length ? chars.$EOF : this.input.charCodeAt(index);\n  }\n\n  consumeEmptyStatements(): void {\n    this.consumeWhitespace();\n    while (this.peek == chars.$SEMICOLON) {\n      this.advance();\n      this.consumeWhitespace();\n    }\n  }\n\n  consumeWhitespace(): void {\n    while (chars.isWhitespace(this.peek) || isNewline(this.peek)) {\n      this.advance();\n      if (!this._trackComments && isCommentStart(this.peek, this.peekPeek)) {\n        this.advance();  // /\n        this.advance();  // *\n        while (!isCommentEnd(this.peek, this.peekPeek)) {\n          if (this.peek == chars.$EOF) {\n            this.error('Unterminated comment');\n          }\n          this.advance();\n        }\n        this.advance();  // *\n        this.advance();  // /\n      }\n    }\n  }\n\n  consume(type: CssTokenType, value: string|null = null): LexedCssResult {\n    const mode = this._currentMode;\n\n    this.setMode(_trackWhitespace(mode) ? CssLexerMode.ALL_TRACK_WS : CssLexerMode.ALL);\n\n    const previousIndex = this.index;\n    const previousLine = this.line;\n    const previousColumn = this.column;\n\n    let next: CssToken = undefined !;\n    const output = this.scan();\n    if (output != null) {\n      // just incase the inner scan method returned an error\n      if (output.error != null) {\n        this.setMode(mode);\n        return output;\n      }\n\n      next = output.token;\n    }\n\n    if (next == null) {\n      next = new CssToken(this.index, this.column, this.line, CssTokenType.EOF, 'end of file');\n    }\n\n    let isMatchingType: boolean = false;\n    if (type == CssTokenType.IdentifierOrNumber) {\n      // TODO (matsko): implement array traversal for lookup here\n      isMatchingType = next.type == CssTokenType.Number || next.type == CssTokenType.Identifier;\n    } else {\n      isMatchingType = next.type == type;\n    }\n\n    // before throwing the error we need to bring back the former\n    // mode so that the parser can recover...\n    this.setMode(mode);\n\n    let error: Error|null = null;\n    if (!isMatchingType || (value != null && value != next.strValue)) {\n      let errorMessage =\n          CssTokenType[next.type] + ' does not match expected ' + CssTokenType[type] + ' value';\n\n      if (value != null) {\n        errorMessage += ' (\"' + next.strValue + '\" should match \"' + value + '\")';\n      }\n\n      error = cssScannerError(\n          next, generateErrorMessage(\n                    this.input, errorMessage, next.strValue, previousIndex, previousLine,\n                    previousColumn));\n    }\n\n    return new LexedCssResult(error, next);\n  }\n\n\n  scan(): LexedCssResult|null {\n    const trackWS = _trackWhitespace(this._currentMode);\n    if (this.index == 0 && !trackWS) {  // first scan\n      this.consumeWhitespace();\n    }\n\n    const token = this._scan();\n    if (token == null) return null;\n\n    const error = this._currentError !;\n    this._currentError = null;\n\n    if (!trackWS) {\n      this.consumeWhitespace();\n    }\n    return new LexedCssResult(error, token);\n  }\n\n  /** @internal */\n  _scan(): CssToken|null {\n    let peek = this.peek;\n    let peekPeek = this.peekPeek;\n    if (peek == chars.$EOF) return null;\n\n    if (isCommentStart(peek, peekPeek)) {\n      // even if comments are not tracked we still lex the\n      // comment so we can move the pointer forward\n      const commentToken = this.scanComment();\n      if (this._trackComments) {\n        return commentToken;\n      }\n    }\n\n    if (_trackWhitespace(this._currentMode) && (chars.isWhitespace(peek) || isNewline(peek))) {\n      return this.scanWhitespace();\n    }\n\n    peek = this.peek;\n    peekPeek = this.peekPeek;\n    if (peek == chars.$EOF) return null;\n\n    if (isStringStart(peek, peekPeek)) {\n      return this.scanString();\n    }\n\n    // something like url(cool)\n    if (this._currentMode == CssLexerMode.STYLE_VALUE_FUNCTION) {\n      return this.scanCssValueFunction();\n    }\n\n    const isModifier = peek == chars.$PLUS || peek == chars.$MINUS;\n    const digitA = isModifier ? false : chars.isDigit(peek);\n    const digitB = chars.isDigit(peekPeek);\n    if (digitA || (isModifier && (peekPeek == chars.$PERIOD || digitB)) ||\n        (peek == chars.$PERIOD && digitB)) {\n      return this.scanNumber();\n    }\n\n    if (peek == chars.$AT) {\n      return this.scanAtExpression();\n    }\n\n    if (isIdentifierStart(peek, peekPeek)) {\n      return this.scanIdentifier();\n    }\n\n    if (isValidCssCharacter(peek, this._currentMode)) {\n      return this.scanCharacter();\n    }\n\n    return this.error(`Unexpected character [${String.fromCharCode(peek)}]`);\n  }\n\n  scanComment(): CssToken|null {\n    if (this.assertCondition(\n            isCommentStart(this.peek, this.peekPeek), 'Expected comment start value')) {\n      return null;\n    }\n\n    const start = this.index;\n    const startingColumn = this.column;\n    const startingLine = this.line;\n\n    this.advance();  // /\n    this.advance();  // *\n\n    while (!isCommentEnd(this.peek, this.peekPeek)) {\n      if (this.peek == chars.$EOF) {\n        this.error('Unterminated comment');\n      }\n      this.advance();\n    }\n\n    this.advance();  // *\n    this.advance();  // /\n\n    const str = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, startingLine, CssTokenType.Comment, str);\n  }\n\n  scanWhitespace(): CssToken {\n    const start = this.index;\n    const startingColumn = this.column;\n    const startingLine = this.line;\n    while (chars.isWhitespace(this.peek) && this.peek != chars.$EOF) {\n      this.advance();\n    }\n    const str = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, startingLine, CssTokenType.Whitespace, str);\n  }\n\n  scanString(): CssToken|null {\n    if (this.assertCondition(\n            isStringStart(this.peek, this.peekPeek), 'Unexpected non-string starting value')) {\n      return null;\n    }\n\n    const target = this.peek;\n    const start = this.index;\n    const startingColumn = this.column;\n    const startingLine = this.line;\n    let previous = target;\n    this.advance();\n\n    while (!isCharMatch(target, previous, this.peek)) {\n      if (this.peek == chars.$EOF || isNewline(this.peek)) {\n        this.error('Unterminated quote');\n      }\n      previous = this.peek;\n      this.advance();\n    }\n\n    if (this.assertCondition(this.peek == target, 'Unterminated quote')) {\n      return null;\n    }\n    this.advance();\n\n    const str = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, startingLine, CssTokenType.String, str);\n  }\n\n  scanNumber(): CssToken {\n    const start = this.index;\n    const startingColumn = this.column;\n    if (this.peek == chars.$PLUS || this.peek == chars.$MINUS) {\n      this.advance();\n    }\n    let periodUsed = false;\n    while (chars.isDigit(this.peek) || this.peek == chars.$PERIOD) {\n      if (this.peek == chars.$PERIOD) {\n        if (periodUsed) {\n          this.error('Unexpected use of a second period value');\n        }\n        periodUsed = true;\n      }\n      this.advance();\n    }\n    const strValue = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Number, strValue);\n  }\n\n  scanIdentifier(): CssToken|null {\n    if (this.assertCondition(\n            isIdentifierStart(this.peek, this.peekPeek), 'Expected identifier starting value')) {\n      return null;\n    }\n\n    const start = this.index;\n    const startingColumn = this.column;\n    while (isIdentifierPart(this.peek)) {\n      this.advance();\n    }\n    const strValue = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Identifier, strValue);\n  }\n\n  scanCssValueFunction(): CssToken {\n    const start = this.index;\n    const startingColumn = this.column;\n    let parenBalance = 1;\n    while (this.peek != chars.$EOF && parenBalance > 0) {\n      this.advance();\n      if (this.peek == chars.$LPAREN) {\n        parenBalance++;\n      } else if (this.peek == chars.$RPAREN) {\n        parenBalance--;\n      }\n    }\n    const strValue = this.input.substring(start, this.index);\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Identifier, strValue);\n  }\n\n  scanCharacter(): CssToken|null {\n    const start = this.index;\n    const startingColumn = this.column;\n    if (this.assertCondition(\n            isValidCssCharacter(this.peek, this._currentMode),\n            charStr(this.peek) + ' is not a valid CSS character')) {\n      return null;\n    }\n\n    const c = this.input.substring(start, start + 1);\n    this.advance();\n\n    return new CssToken(start, startingColumn, this.line, CssTokenType.Character, c);\n  }\n\n  scanAtExpression(): CssToken|null {\n    if (this.assertCondition(this.peek == chars.$AT, 'Expected @ value')) {\n      return null;\n    }\n\n    const start = this.index;\n    const startingColumn = this.column;\n    this.advance();\n    if (isIdentifierStart(this.peek, this.peekPeek)) {\n      const ident = this.scanIdentifier() !;\n      const strValue = '@' + ident.strValue;\n      return new CssToken(start, startingColumn, this.line, CssTokenType.AtKeyword, strValue);\n    } else {\n      return this.scanCharacter();\n    }\n  }\n\n  assertCondition(status: boolean, errorMessage: string): boolean {\n    if (!status) {\n      this.error(errorMessage);\n      return true;\n    }\n    return false;\n  }\n\n  error(message: string, errorTokenValue: string|null = null, doNotAdvance: boolean = false):\n      CssToken {\n    const index: number = this.index;\n    const column: number = this.column;\n    const line: number = this.line;\n    errorTokenValue = errorTokenValue || String.fromCharCode(this.peek);\n    const invalidToken = new CssToken(index, column, line, CssTokenType.Invalid, errorTokenValue);\n    const errorMessage =\n        generateErrorMessage(this.input, message, errorTokenValue, index, line, column);\n    if (!doNotAdvance) {\n      this.advance();\n    }\n    this._currentError = cssScannerError(invalidToken, errorMessage);\n    return invalidToken;\n  }\n}\n\nfunction isCharMatch(target: number, previous: number, code: number): boolean {\n  return code == target && previous != chars.$BACKSLASH;\n}\n\nfunction isCommentStart(code: number, next: number): boolean {\n  return code == chars.$SLASH && next == chars.$STAR;\n}\n\nfunction isCommentEnd(code: number, next: number): boolean {\n  return code == chars.$STAR && next == chars.$SLASH;\n}\n\nfunction isStringStart(code: number, next: number): boolean {\n  let target = code;\n  if (target == chars.$BACKSLASH) {\n    target = next;\n  }\n  return target == chars.$DQ || target == chars.$SQ;\n}\n\nfunction isIdentifierStart(code: number, next: number): boolean {\n  let target = code;\n  if (target == chars.$MINUS) {\n    target = next;\n  }\n\n  return chars.isAsciiLetter(target) || target == chars.$BACKSLASH || target == chars.$MINUS ||\n      target == chars.$_;\n}\n\nfunction isIdentifierPart(target: number): boolean {\n  return chars.isAsciiLetter(target) || target == chars.$BACKSLASH || target == chars.$MINUS ||\n      target == chars.$_ || chars.isDigit(target);\n}\n\nfunction isValidPseudoSelectorCharacter(code: number): boolean {\n  switch (code) {\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidKeyframeBlockCharacter(code: number): boolean {\n  return code == chars.$PERCENT;\n}\n\nfunction isValidAttributeSelectorCharacter(code: number): boolean {\n  // value^*|$~=something\n  switch (code) {\n    case chars.$$:\n    case chars.$PIPE:\n    case chars.$CARET:\n    case chars.$TILDA:\n    case chars.$STAR:\n    case chars.$EQ:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidSelectorCharacter(code: number): boolean {\n  // selector [ key   = value ]\n  // IDENT    C IDENT C IDENT C\n  // #id, .class, *+~>\n  // tag:PSEUDO\n  switch (code) {\n    case chars.$HASH:\n    case chars.$PERIOD:\n    case chars.$TILDA:\n    case chars.$STAR:\n    case chars.$PLUS:\n    case chars.$GT:\n    case chars.$COLON:\n    case chars.$PIPE:\n    case chars.$COMMA:\n    case chars.$LBRACKET:\n    case chars.$RBRACKET:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidStyleBlockCharacter(code: number): boolean {\n  // key:value;\n  // key:calc(something ... )\n  switch (code) {\n    case chars.$HASH:\n    case chars.$SEMICOLON:\n    case chars.$COLON:\n    case chars.$PERCENT:\n    case chars.$SLASH:\n    case chars.$BACKSLASH:\n    case chars.$BANG:\n    case chars.$PERIOD:\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidMediaQueryRuleCharacter(code: number): boolean {\n  // (min-width: 7.5em) and (orientation: landscape)\n  switch (code) {\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n    case chars.$COLON:\n    case chars.$PERCENT:\n    case chars.$PERIOD:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidAtRuleCharacter(code: number): boolean {\n  // @document url(http://www.w3.org/page?something=on#hash),\n  switch (code) {\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n    case chars.$COLON:\n    case chars.$PERCENT:\n    case chars.$PERIOD:\n    case chars.$SLASH:\n    case chars.$BACKSLASH:\n    case chars.$HASH:\n    case chars.$EQ:\n    case chars.$QUESTION:\n    case chars.$AMPERSAND:\n    case chars.$STAR:\n    case chars.$COMMA:\n    case chars.$MINUS:\n    case chars.$PLUS:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidStyleFunctionCharacter(code: number): boolean {\n  switch (code) {\n    case chars.$PERIOD:\n    case chars.$MINUS:\n    case chars.$PLUS:\n    case chars.$STAR:\n    case chars.$SLASH:\n    case chars.$LPAREN:\n    case chars.$RPAREN:\n    case chars.$COMMA:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isValidBlockCharacter(code: number): boolean {\n  // @something { }\n  // IDENT\n  return code == chars.$AT;\n}\n\nfunction isValidCssCharacter(code: number, mode: CssLexerMode): boolean {\n  switch (mode) {\n    case CssLexerMode.ALL:\n    case CssLexerMode.ALL_TRACK_WS:\n      return true;\n\n    case CssLexerMode.SELECTOR:\n      return isValidSelectorCharacter(code);\n\n    case CssLexerMode.PSEUDO_SELECTOR_WITH_ARGUMENTS:\n      return isValidPseudoSelectorCharacter(code);\n\n    case CssLexerMode.ATTRIBUTE_SELECTOR:\n      return isValidAttributeSelectorCharacter(code);\n\n    case CssLexerMode.MEDIA_QUERY:\n      return isValidMediaQueryRuleCharacter(code);\n\n    case CssLexerMode.AT_RULE_QUERY:\n      return isValidAtRuleCharacter(code);\n\n    case CssLexerMode.KEYFRAME_BLOCK:\n      return isValidKeyframeBlockCharacter(code);\n\n    case CssLexerMode.STYLE_BLOCK:\n    case CssLexerMode.STYLE_VALUE:\n      return isValidStyleBlockCharacter(code);\n\n    case CssLexerMode.STYLE_CALC_FUNCTION:\n      return isValidStyleFunctionCharacter(code);\n\n    case CssLexerMode.BLOCK:\n      return isValidBlockCharacter(code);\n\n    default:\n      return false;\n  }\n}\n\nfunction charCode(input: string, index: number): number {\n  return index >= input.length ? chars.$EOF : input.charCodeAt(index);\n}\n\nfunction charStr(code: number): string {\n  return String.fromCharCode(code);\n}\n\nexport function isNewline(code: number): boolean {\n  switch (code) {\n    case chars.$FF:\n    case chars.$CR:\n    case chars.$LF:\n    case chars.$VTAB:\n      return true;\n\n    default:\n      return false;\n  }\n}\n"],"sourceRoot":""}