{"version":3,"sources":["../../../../../../packages/compiler/src/directive_normalizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileStylesheetMetadata, CompileTemplateMetadata, templateSourceUrl} from './compile_metadata';\nimport {CompilerConfig, preserveWhitespacesDefault} from './config';\nimport {ViewEncapsulation} from './core';\nimport * as html from './ml_parser/ast';\nimport {HtmlParser} from './ml_parser/html_parser';\nimport {InterpolationConfig} from './ml_parser/interpolation_config';\nimport {ParseTreeResult as HtmlParseTreeResult} from './ml_parser/parser';\nimport {ResourceLoader} from './resource_loader';\nimport {extractStyleUrls, isStyleUrlResolvable} from './style_url_resolver';\nimport {PreparsedElementType, preparseElement} from './template_parser/template_preparser';\nimport {UrlResolver} from './url_resolver';\nimport {SyncAsync, isDefined, stringify, syntaxError} from './util';\n\nexport interface PrenormalizedTemplateMetadata {\n  ngModuleType: any;\n  componentType: any;\n  moduleUrl: string;\n  template: string|null;\n  templateUrl: string|null;\n  styles: string[];\n  styleUrls: string[];\n  interpolation: [string, string]|null;\n  encapsulation: ViewEncapsulation|null;\n  animations: any[];\n  preserveWhitespaces: boolean|null;\n}\n\nexport class DirectiveNormalizer {\n  private _resourceLoaderCache = new Map<string, SyncAsync<string>>();\n\n  constructor(\n      private _resourceLoader: ResourceLoader, private _urlResolver: UrlResolver,\n      private _htmlParser: HtmlParser, private _config: CompilerConfig) {}\n\n  clearCache(): void { this._resourceLoaderCache.clear(); }\n\n  clearCacheFor(normalizedDirective: CompileDirectiveMetadata): void {\n    if (!normalizedDirective.isComponent) {\n      return;\n    }\n    const template = normalizedDirective.template !;\n    this._resourceLoaderCache.delete(template.templateUrl !);\n    template.externalStylesheets.forEach(\n        (stylesheet) => { this._resourceLoaderCache.delete(stylesheet.moduleUrl !); });\n  }\n\n  private _fetch(url: string): SyncAsync<string> {\n    let result = this._resourceLoaderCache.get(url);\n    if (!result) {\n      result = this._resourceLoader.get(url);\n      this._resourceLoaderCache.set(url, result);\n    }\n    return result;\n  }\n\n  normalizeTemplate(prenormData: PrenormalizedTemplateMetadata):\n      SyncAsync<CompileTemplateMetadata> {\n    if (isDefined(prenormData.template)) {\n      if (isDefined(prenormData.templateUrl)) {\n        throw syntaxError(\n            `'${stringify(prenormData.componentType)}' component cannot define both template and templateUrl`);\n      }\n      if (typeof prenormData.template !== 'string') {\n        throw syntaxError(\n            `The template specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else if (isDefined(prenormData.templateUrl)) {\n      if (typeof prenormData.templateUrl !== 'string') {\n        throw syntaxError(\n            `The templateUrl specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else {\n      throw syntaxError(\n          `No template specified for component ${stringify(prenormData.componentType)}`);\n    }\n\n    if (isDefined(prenormData.preserveWhitespaces) &&\n        typeof prenormData.preserveWhitespaces !== 'boolean') {\n      throw syntaxError(\n          `The preserveWhitespaces option for component ${stringify(prenormData.componentType)} must be a boolean`);\n    }\n\n    return SyncAsync.then(\n        this._preParseTemplate(prenormData),\n        (preparsedTemplate) => this._normalizeTemplateMetadata(prenormData, preparsedTemplate));\n  }\n\n  private _preParseTemplate(prenomData: PrenormalizedTemplateMetadata):\n      SyncAsync<PreparsedTemplate> {\n    let template: SyncAsync<string>;\n    let templateUrl: string;\n    if (prenomData.template != null) {\n      template = prenomData.template;\n      templateUrl = prenomData.moduleUrl;\n    } else {\n      templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl !);\n      template = this._fetch(templateUrl);\n    }\n    return SyncAsync.then(\n        template, (template) => this._preparseLoadedTemplate(prenomData, template, templateUrl));\n  }\n\n  private _preparseLoadedTemplate(\n      prenormData: PrenormalizedTemplateMetadata, template: string,\n      templateAbsUrl: string): PreparsedTemplate {\n    const isInline = !!prenormData.template;\n    const interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation !);\n    const rootNodesAndErrors = this._htmlParser.parse(\n        template,\n        templateSourceUrl(\n            {reference: prenormData.ngModuleType}, {type: {reference: prenormData.componentType}},\n            {isInline, templateUrl: templateAbsUrl}),\n        true, interpolationConfig);\n    if (rootNodesAndErrors.errors.length > 0) {\n      const errorString = rootNodesAndErrors.errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`);\n    }\n\n    const templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: prenormData.styles, moduleUrl: prenormData.moduleUrl}));\n\n    const visitor = new TemplatePreparseVisitor();\n    html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n    const templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl}));\n\n    const styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n\n    const inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n    const styleUrls = this\n                          ._normalizeStylesheet(new CompileStylesheetMetadata(\n                              {styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl}))\n                          .styleUrls;\n    return {\n      template,\n      templateUrl: templateAbsUrl, isInline,\n      htmlAst: rootNodesAndErrors, styles, inlineStyleUrls, styleUrls,\n      ngContentSelectors: visitor.ngContentSelectors,\n    };\n  }\n\n  private _normalizeTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata,\n      preparsedTemplate: PreparsedTemplate): SyncAsync<CompileTemplateMetadata> {\n    return SyncAsync.then(\n        this._loadMissingExternalStylesheets(\n            preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)),\n        (externalStylesheets) => this._normalizeLoadedTemplateMetadata(\n            prenormData, preparsedTemplate, externalStylesheets));\n  }\n\n  private _normalizeLoadedTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata, preparsedTemplate: PreparsedTemplate,\n      stylesheets: Map<string, CompileStylesheetMetadata>): CompileTemplateMetadata {\n    // Algorithm:\n    // - produce exactly 1 entry per original styleUrl in\n    // CompileTemplateMetadata.externalStylesheets with all styles inlined\n    // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n    // Reason: be able to determine how many stylesheets there are even without loading\n    // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n    // (as resource loading may be async)\n\n    const styles = [...preparsedTemplate.styles];\n    this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n    const styleUrls = preparsedTemplate.styleUrls;\n\n    const externalStylesheets = styleUrls.map(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl) !;\n      const styles = [...stylesheet.styles];\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n      return new CompileStylesheetMetadata({moduleUrl: styleUrl, styles: styles});\n    });\n\n    let encapsulation = prenormData.encapsulation;\n    if (encapsulation == null) {\n      encapsulation = this._config.defaultEncapsulation;\n    }\n    if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\n        styleUrls.length === 0) {\n      encapsulation = ViewEncapsulation.None;\n    }\n    return new CompileTemplateMetadata({\n      encapsulation,\n      template: preparsedTemplate.template,\n      templateUrl: preparsedTemplate.templateUrl,\n      htmlAst: preparsedTemplate.htmlAst, styles, styleUrls,\n      ngContentSelectors: preparsedTemplate.ngContentSelectors,\n      animations: prenormData.animations,\n      interpolation: prenormData.interpolation,\n      isInline: preparsedTemplate.isInline, externalStylesheets,\n      preserveWhitespaces: preserveWhitespacesDefault(\n          prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n    });\n  }\n\n  private _inlineStyles(\n      styleUrls: string[], stylesheets: Map<string, CompileStylesheetMetadata>,\n      targetStyles: string[]) {\n    styleUrls.forEach(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl) !;\n      stylesheet.styles.forEach(style => targetStyles.push(style));\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n    });\n  }\n\n  private _loadMissingExternalStylesheets(\n      styleUrls: string[],\n      loadedStylesheets:\n          Map<string, CompileStylesheetMetadata> = new Map<string, CompileStylesheetMetadata>()):\n      SyncAsync<Map<string, CompileStylesheetMetadata>> {\n    return SyncAsync.then(\n        SyncAsync.all(styleUrls.filter((styleUrl) => !loadedStylesheets.has(styleUrl))\n                          .map(\n                              styleUrl => SyncAsync.then(\n                                  this._fetch(styleUrl),\n                                  (loadedStyle) => {\n                                    const stylesheet =\n                                        this._normalizeStylesheet(new CompileStylesheetMetadata(\n                                            {styles: [loadedStyle], moduleUrl: styleUrl}));\n                                    loadedStylesheets.set(styleUrl, stylesheet);\n                                    return this._loadMissingExternalStylesheets(\n                                        stylesheet.styleUrls, loadedStylesheets);\n                                  }))),\n        (_) => loadedStylesheets);\n  }\n\n  private _normalizeStylesheet(stylesheet: CompileStylesheetMetadata): CompileStylesheetMetadata {\n    const moduleUrl = stylesheet.moduleUrl !;\n    const allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n                             .map(url => this._urlResolver.resolve(moduleUrl, url));\n\n    const allStyles = stylesheet.styles.map(style => {\n      const styleWithImports = extractStyleUrls(this._urlResolver, moduleUrl, style);\n      allStyleUrls.push(...styleWithImports.styleUrls);\n      return styleWithImports.style;\n    });\n\n    return new CompileStylesheetMetadata(\n        {styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl});\n  }\n}\n\ninterface PreparsedTemplate {\n  template: string;\n  templateUrl: string;\n  isInline: boolean;\n  htmlAst: HtmlParseTreeResult;\n  styles: string[];\n  inlineStyleUrls: string[];\n  styleUrls: string[];\n  ngContentSelectors: string[];\n}\n\nclass TemplatePreparseVisitor implements html.Visitor {\n  ngContentSelectors: string[] = [];\n  styles: string[] = [];\n  styleUrls: string[] = [];\n  ngNonBindableStackCount: number = 0;\n\n  visitElement(ast: html.Element, context: any): any {\n    const preparsedElement = preparseElement(ast);\n    switch (preparsedElement.type) {\n      case PreparsedElementType.NG_CONTENT:\n        if (this.ngNonBindableStackCount === 0) {\n          this.ngContentSelectors.push(preparsedElement.selectAttr);\n        }\n        break;\n      case PreparsedElementType.STYLE:\n        let textContent = '';\n        ast.children.forEach(child => {\n          if (child instanceof html.Text) {\n            textContent += child.value;\n          }\n        });\n        this.styles.push(textContent);\n        break;\n      case PreparsedElementType.STYLESHEET:\n        this.styleUrls.push(preparsedElement.hrefAttr);\n        break;\n      default:\n        break;\n    }\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount++;\n    }\n    html.visitAll(this, ast.children);\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount--;\n    }\n    return null;\n  }\n\n  visitExpansion(ast: html.Expansion, context: any): any { html.visitAll(this, ast.cases); }\n\n  visitExpansionCase(ast: html.ExpansionCase, context: any): any {\n    html.visitAll(this, ast.expression);\n  }\n\n  visitComment(ast: html.Comment, context: any): any { return null; }\n  visitAttribute(ast: html.Attribute, context: any): any { return null; }\n  visitText(ast: html.Text, context: any): any { return null; }\n}\n"],"sourceRoot":""}