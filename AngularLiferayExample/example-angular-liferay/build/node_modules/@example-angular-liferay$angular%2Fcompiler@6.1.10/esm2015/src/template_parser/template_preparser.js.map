{"version":3,"sources":["../../../../../../../packages/compiler/src/template_parser/template_preparser.ts"],"names":[],"mappings":";;;;;;;;;AASA,aAAQ,WAAR,QAA0B,mBAA1B;AAEA,UAAM,yBAAyB,QAA/B;AACA,UAAM,eAAe,MAArB;AACA,UAAM,sBAAsB,KAA5B;AACA,UAAM,uBAAuB,MAA7B;AACA,UAAM,uBAAuB,YAA7B;AACA,UAAM,gBAAgB,OAAtB;AACA,UAAM,iBAAiB,QAAvB;AACA,UAAM,uBAAuB,eAA7B;AACA,UAAM,gBAAgB,aAAtB;AAEA,WAAM,SAAA,eAAA,CAA0B,GAA1B,EAA2C;AAC/C,YAAI,aAAqB,IAAzB;AACA,YAAI,WAAmB,IAAvB;AACA,YAAI,UAAkB,IAAtB;AACA,YAAI,cAAc,KAAlB;AACA,YAAI,YAAY,EAAhB;AACA,YAAI,KAAJ,CAAU,OAAV,CAAkB,QAAO;AACvB,kBAAM,aAAa,KAAK,IAAL,CAAU,WAAV,EAAnB;AACA,gBAAI,cAAc,sBAAlB,EAA0C;AACxC,6BAAa,KAAK,KAAlB;AACD,aAFD,MAEO,IAAI,cAAc,oBAAlB,EAAwC;AAC7C,2BAAW,KAAK,KAAhB;AACD,aAFM,MAEA,IAAI,cAAc,mBAAlB,EAAuC;AAC5C,0BAAU,KAAK,KAAf;AACD,aAFM,MAEA,IAAI,KAAK,IAAL,IAAa,oBAAjB,EAAuC;AAC5C,8BAAc,IAAd;AACD,aAFM,MAEA,IAAI,KAAK,IAAL,IAAa,aAAjB,EAAgC;AACrC,oBAAI,KAAK,KAAL,CAAW,MAAX,GAAoB,CAAxB,EAA2B;AACzB,gCAAY,KAAK,KAAjB;AACD;AACF;AACF,SAfD;AAgBA,qBAAa,yBAAyB,UAAzB,CAAb;AACA,cAAM,WAAW,IAAI,IAAJ,CAAS,WAAT,EAAjB;AACA,YAAI,OAAO,qBAAqB,KAAhC;AACA,YAAI,YAAY,QAAZ,CAAJ,EAA2B;AACzB,mBAAO,qBAAqB,UAA5B;AACD,SAFD,MAEO,IAAI,YAAY,aAAhB,EAA+B;AACpC,mBAAO,qBAAqB,KAA5B;AACD,SAFM,MAEA,IAAI,YAAY,cAAhB,EAAgC;AACrC,mBAAO,qBAAqB,MAA5B;AACD,SAFM,MAEA,IAAI,YAAY,YAAZ,IAA4B,WAAW,oBAA3C,EAAiE;AACtE,mBAAO,qBAAqB,UAA5B;AACD;AACD,eAAO,IAAI,gBAAJ,CAAqB,IAArB,EAA2B,UAA3B,EAAuC,QAAvC,EAAiD,WAAjD,EAA8D,SAA9D,CAAP;AACD;AAED,WAAA,IAAY,oBAAZ;AAAA,KAAA,UAAY,oBAAZ,EAAgC;AAC9B,6BAAA,qBAAA,YAAA,IAAA,CAAA,IAAA,YAAA;AACA,6BAAA,qBAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACA,6BAAA,qBAAA,YAAA,IAAA,CAAA,IAAA,YAAA;AACA,6BAAA,qBAAA,QAAA,IAAA,CAAA,IAAA,QAAA;AACA,6BAAA,qBAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACD,KAND,EAAY,yBAAA,uBAAoB,EAApB,CAAZ;AAQA,WAAM,MAAA,gBAAA,CAAA;AACJ,oBACW,IADX,EAC8C,UAD9C,EACyE,QADzE,EAEW,WAFX,EAEwC,SAFxC,EAEyD;AAD9C,iBAAA,IAAA,GAAA,IAAA;AAAmC,iBAAA,UAAA,GAAA,UAAA;AAA2B,iBAAA,QAAA,GAAA,QAAA;AAC9D,iBAAA,WAAA,GAAA,WAAA;AAA6B,iBAAA,SAAA,GAAA,SAAA;AAAqB;AAHzD;AAON,aAAA,wBAAA,CAAkC,UAAlC,EAAoD;AAClD,YAAI,eAAe,IAAf,IAAuB,WAAW,MAAX,KAAsB,CAAjD,EAAoD;AAClD,mBAAO,GAAP;AACD;AACD,eAAO,UAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from '../ml_parser/ast';\nimport {isNgContent} from '../ml_parser/tags';\n\nconst NG_CONTENT_SELECT_ATTR = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\n\nexport function preparseElement(ast: html.Element): PreparsedElement {\n  let selectAttr: string = null !;\n  let hrefAttr: string = null !;\n  let relAttr: string = null !;\n  let nonBindable = false;\n  let projectAs = '';\n  ast.attrs.forEach(attr => {\n    const lcAttrName = attr.name.toLowerCase();\n    if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n      selectAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n      hrefAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n      relAttr = attr.value;\n    } else if (attr.name == NG_NON_BINDABLE_ATTR) {\n      nonBindable = true;\n    } else if (attr.name == NG_PROJECT_AS) {\n      if (attr.value.length > 0) {\n        projectAs = attr.value;\n      }\n    }\n  });\n  selectAttr = normalizeNgContentSelect(selectAttr);\n  const nodeName = ast.name.toLowerCase();\n  let type = PreparsedElementType.OTHER;\n  if (isNgContent(nodeName)) {\n    type = PreparsedElementType.NG_CONTENT;\n  } else if (nodeName == STYLE_ELEMENT) {\n    type = PreparsedElementType.STYLE;\n  } else if (nodeName == SCRIPT_ELEMENT) {\n    type = PreparsedElementType.SCRIPT;\n  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n    type = PreparsedElementType.STYLESHEET;\n  }\n  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\n\nexport enum PreparsedElementType {\n  NG_CONTENT,\n  STYLE,\n  STYLESHEET,\n  SCRIPT,\n  OTHER\n}\n\nexport class PreparsedElement {\n  constructor(\n      public type: PreparsedElementType, public selectAttr: string, public hrefAttr: string,\n      public nonBindable: boolean, public projectAs: string) {}\n}\n\n\nfunction normalizeNgContentSelect(selectAttr: string): string {\n  if (selectAttr === null || selectAttr.length === 0) {\n    return '*';\n  }\n  return selectAttr;\n}\n"],"sourceRoot":""}