{"version":3,"sources":["../../../../../../../packages/compiler/src/template_parser/template_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {CompileDirectiveSummary, CompileProviderMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {SecurityContext} from '../core';\nimport {AST, BindingType, BoundElementProperty, ParsedEvent, ParsedEventType, ParsedVariable} from '../expression_parser/ast';\nimport {LifecycleHooks} from '../lifecycle_reflector';\nimport {ParseSourceSpan} from '../parse_util';\n\n\n\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n  /**\n   * The source span from which this node was parsed.\n   */\n  sourceSpan: ParseSourceSpan;\n\n  /**\n   * Visit this node and possibly transform it.\n   */\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}\n\n/**\n * A segment of text within the template.\n */\nexport class TextAst implements TemplateAst {\n  constructor(\n      public value: string, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitText(this, context); }\n}\n\n/**\n * A bound expression within the text of a template.\n */\nexport class BoundTextAst implements TemplateAst {\n  constructor(\n      public value: AST, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitBoundText(this, context);\n  }\n}\n\n/**\n * A plain attribute on an element.\n */\nexport class AttrAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n}\n\nexport const enum PropertyBindingType {\n  // A normal binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}\n\nconst BoundPropertyMapping = {\n  [BindingType.Animation]: PropertyBindingType.Animation,\n  [BindingType.Attribute]: PropertyBindingType.Attribute,\n  [BindingType.Class]: PropertyBindingType.Class,\n  [BindingType.Property]: PropertyBindingType.Property,\n  [BindingType.Style]: PropertyBindingType.Style,\n};\n\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[@trigger]=\"stateExp\"`)\n */\nexport class BoundElementPropertyAst implements TemplateAst {\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public type: PropertyBindingType,\n      public securityContext: SecurityContext, public value: AST, public unit: string|null,\n      public sourceSpan: ParseSourceSpan) {\n    this.isAnimation = this.type === PropertyBindingType.Animation;\n  }\n\n  static fromBoundProperty(prop: BoundElementProperty) {\n    const type = BoundPropertyMapping[prop.type];\n    return new BoundElementPropertyAst(\n        prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElementProperty(this, context);\n  }\n}\n\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(@trigger.phase)=\"callback($event)\"`).\n */\nexport class BoundEventAst implements TemplateAst {\n  readonly fullName: string;\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public target: string|null, public phase: string|null,\n      public handler: AST, public sourceSpan: ParseSourceSpan) {\n    this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n    this.isAnimation = !!this.phase;\n  }\n\n  static calcFullName(name: string, target: string|null, phase: string|null): string {\n    if (target) {\n      return `${target}:${name}`;\n    }\n    if (phase) {\n      return `@${name}.${phase}`;\n    }\n\n    return name;\n  }\n\n  static fromParsedEvent(event: ParsedEvent) {\n    const target: string|null = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;\n    const phase: string|null =\n        event.type === ParsedEventType.Animation ? event.targetOrPhase : null;\n    return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEvent(this, context);\n  }\n}\n\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport class ReferenceAst implements TemplateAst {\n  constructor(\n      public name: string, public value: CompileTokenMetadata, public originalValue: string,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitReference(this, context);\n  }\n}\n\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport class VariableAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n\n  static fromParsedVariable(v: ParsedVariable) {\n    return new VariableAst(v.name, v.value, v.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitVariable(this, context);\n  }\n}\n\n/**\n * An element declaration in a template.\n */\nexport class ElementAst implements TemplateAst {\n  constructor(\n      public name: string, public attrs: AttrAst[], public inputs: BoundElementPropertyAst[],\n      public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public directives: DirectiveAst[], public providers: ProviderAst[],\n      public hasViewContainer: boolean, public queryMatches: QueryMatch[],\n      public children: TemplateAst[], public ngContentIndex: number|null,\n      public sourceSpan: ParseSourceSpan, public endSourceSpan: ParseSourceSpan|null) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n}\n\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nexport class EmbeddedTemplateAst implements TemplateAst {\n  constructor(\n      public attrs: AttrAst[], public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public variables: VariableAst[], public directives: DirectiveAst[],\n      public providers: ProviderAst[], public hasViewContainer: boolean,\n      public queryMatches: QueryMatch[], public children: TemplateAst[],\n      public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n}\n\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport class BoundDirectivePropertyAst implements TemplateAst {\n  constructor(\n      public directiveName: string, public templateName: string, public value: AST,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n}\n\n/**\n * A directive declared on an element.\n */\nexport class DirectiveAst implements TemplateAst {\n  constructor(\n      public directive: CompileDirectiveSummary, public inputs: BoundDirectivePropertyAst[],\n      public hostProperties: BoundElementPropertyAst[], public hostEvents: BoundEventAst[],\n      public contentQueryStartId: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirective(this, context);\n  }\n}\n\n/**\n * A provider declared on an element\n */\nexport class ProviderAst implements TemplateAst {\n  constructor(\n      public token: CompileTokenMetadata, public multiProvider: boolean, public eager: boolean,\n      public providers: CompileProviderMetadata[], public providerType: ProviderAstType,\n      public lifecycleHooks: LifecycleHooks[], public sourceSpan: ParseSourceSpan,\n      readonly isModule: boolean) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    // No visit method in the visitor for now...\n    return null;\n  }\n}\n\nexport enum ProviderAstType {\n  PublicService,\n  PrivateService,\n  Component,\n  Directive,\n  Builtin\n}\n\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport class NgContentAst implements TemplateAst {\n  constructor(\n      public index: number, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitNgContent(this, context);\n  }\n}\n\nexport interface QueryMatch {\n  queryId: number;\n  value: CompileTokenMetadata;\n}\n\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n  // Returning a truthy value from `visit()` will prevent `templateVisitAll()` from the call to\n  // the typed method and result returned will become the result included in `visitAll()`s\n  // result array.\n  visit?(ast: TemplateAst, context: any): any;\n\n  visitNgContent(ast: NgContentAst, context: any): any;\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitReference(ast: ReferenceAst, context: any): any;\n  visitVariable(ast: VariableAst, context: any): any;\n  visitEvent(ast: BoundEventAst, context: any): any;\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n  visitAttr(ast: AttrAst, context: any): any;\n  visitBoundText(ast: BoundTextAst, context: any): any;\n  visitText(ast: TextAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nexport class NullTemplateVisitor implements TemplateAstVisitor {\n  visitNgContent(ast: NgContentAst, context: any): void {}\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): void {}\n  visitElement(ast: ElementAst, context: any): void {}\n  visitReference(ast: ReferenceAst, context: any): void {}\n  visitVariable(ast: VariableAst, context: any): void {}\n  visitEvent(ast: BoundEventAst, context: any): void {}\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): void {}\n  visitAttr(ast: AttrAst, context: any): void {}\n  visitBoundText(ast: BoundTextAst, context: any): void {}\n  visitText(ast: TextAst, context: any): void {}\n  visitDirective(ast: DirectiveAst, context: any): void {}\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): void {}\n}\n\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nexport class RecursiveTemplateAstVisitor extends NullTemplateVisitor implements TemplateAstVisitor {\n  constructor() { super(); }\n\n  // Nodes with children\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.references);\n      visit(ast.variables);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitElement(ast: ElementAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.inputs);\n      visit(ast.outputs);\n      visit(ast.references);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.inputs);\n      visit(ast.hostProperties);\n      visit(ast.hostEvents);\n    });\n  }\n\n  protected visitChildren<T extends TemplateAst>(\n      context: any,\n      cb: (visit: (<V extends TemplateAst>(children: V[]|undefined) => void)) => void) {\n    let results: any[][] = [];\n    let t = this;\n    function visit<T extends TemplateAst>(children: T[] | undefined) {\n      if (children && children.length) results.push(templateVisitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\n/**\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n */\nexport function templateVisitAll(\n    visitor: TemplateAstVisitor, asts: TemplateAst[], context: any = null): any[] {\n  const result: any[] = [];\n  const visit = visitor.visit ?\n      (ast: TemplateAst) => visitor.visit !(ast, context) || ast.visit(visitor, context) :\n      (ast: TemplateAst) => ast.visit(visitor, context);\n  asts.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nexport type TemplateAstPath = AstPath<TemplateAst>;\n"],"sourceRoot":""}