{"version":3,"sources":["../../../../../../packages/compiler/src/assertions.ts"],"names":[],"mappings":";;;;;;;;;AAQA,WAAM,SAAA,oBAAA,CAA+B,UAA/B,EAAmD,KAAnD,EAA6D;AACjE,YAAI,SAAS,IAAb,EAAmB;AACjB;AACD;AACD,YAAI,CAAC,MAAM,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,kBAAM,IAAI,KAAJ,CAAU,aAAa,UAAU,8BAAjC,CAAN;AACD;AACD,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,KAAK,CAAvC,EAA0C;AACxC,gBAAI,OAAO,MAAM,CAAN,CAAP,KAAoB,QAAxB,EAAkC;AAChC,sBAAM,IAAI,KAAJ,CAAU,aAAa,UAAU,8BAAjC,CAAN;AACD;AACF;AACF;AAED,UAAM,kCAAkC,CACtC,OADsC,EAEtC,MAFsC,EAGtC,QAHsC,EAItC,aAJsC,EAKtC,OALsC,CAAxC;AAQA,WAAM,SAAA,0BAAA,CAAqC,UAArC,EAAyD,KAAzD,EAAmE;AACvE,YAAI,SAAS,IAAT,IAAiB,EAAE,MAAM,OAAN,CAAc,KAAd,KAAwB,MAAM,MAAN,IAAgB,CAA1C,CAArB,EAAmE;AACjE,kBAAM,IAAI,KAAJ,CAAU,aAAa,UAAU,iCAAjC,CAAN;AACD,SAFD,MAEO,IAAI,SAAS,IAAb,EAAmB;AACxB,kBAAM,QAAQ,MAAM,CAAN,CAAd;AACA,kBAAM,MAAM,MAAM,CAAN,CAAZ;AACA;AACA,4CAAgC,OAAhC,CAAwC,UAAS;AAC/C,oBAAI,OAAO,IAAP,CAAY,KAAZ,KAAsB,OAAO,IAAP,CAAY,GAAZ,CAA1B,EAA4C;AAC1C,0BAAM,IAAI,KAAJ,CAAU,KAAK,KAAK,OAAO,GAAG,4CAA9B,CAAN;AACD;AACF,aAJD;AAKD;AACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function assertArrayOfStrings(identifier: string, value: any) {\n  if (value == null) {\n    return;\n  }\n  if (!Array.isArray(value)) {\n    throw new Error(`Expected '${identifier}' to be an array of strings.`);\n  }\n  for (let i = 0; i < value.length; i += 1) {\n    if (typeof value[i] !== 'string') {\n      throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n  }\n}\n\nconst INTERPOLATION_BLACKLIST_REGEXPS = [\n  /^\\s*$/,        // empty\n  /[<>]/,         // html tag\n  /^[{}]$/,       // i18n expansion\n  /&(#|[a-z])/i,  // character reference,\n  /^\\/\\//,        // comment\n];\n\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\n  if (value != null && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (value != null) {\n    const start = value[0] as string;\n    const end = value[1] as string;\n    // black list checking\n    INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\n"],"sourceRoot":""}