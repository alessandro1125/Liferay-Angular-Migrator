{"version":3,"sources":["../../../../../../../packages/compiler/src/jit/compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileIdentifierMetadata, CompileNgModuleMetadata, CompilePipeSummary, CompileProviderMetadata, CompileStylesheetMetadata, CompileTypeSummary, ProviderMeta, ProxyClass, identifierName, ngModuleJitUrl, sharedStylesheetJitUrl, templateJitUrl, templateSourceUrl} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {CompilerConfig} from '../config';\nimport {ConstantPool} from '../constant_pool';\nimport {Type} from '../core';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport * as ir from '../output/output_ast';\nimport {interpretStatements} from '../output/output_interpreter';\nimport {jitStatements} from '../output/output_jit';\nimport {CompiledStylesheet, StyleCompiler} from '../style_compiler';\nimport {SummaryResolver} from '../summary_resolver';\nimport {TemplateAst} from '../template_parser/template_ast';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {Console, OutputContext, SyncAsync, stringify} from '../util';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\n\nexport interface ModuleWithComponentFactories {\n  ngModuleFactory: object;\n  componentFactories: object[];\n}\n\n/**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * @security  When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nexport class JitCompiler {\n  private _compiledTemplateCache = new Map<Type, CompiledTemplate>();\n  private _compiledHostTemplateCache = new Map<Type, CompiledTemplate>();\n  private _compiledDirectiveWrapperCache = new Map<Type, Type>();\n  private _compiledNgModuleCache = new Map<Type, object>();\n  private _sharedStylesheetCount = 0;\n  private _addedAotSummaries = new Set<() => any[]>();\n\n  constructor(\n      private _metadataResolver: CompileMetadataResolver, private _templateParser: TemplateParser,\n      private _styleCompiler: StyleCompiler, private _viewCompiler: ViewCompiler,\n      private _ngModuleCompiler: NgModuleCompiler, private _summaryResolver: SummaryResolver<Type>,\n      private _reflector: CompileReflector, private _compilerConfig: CompilerConfig,\n      private _console: Console,\n      private getExtraNgModuleProviders: (ngModule: any) => CompileProviderMetadata[]) {}\n\n  compileModuleSync(moduleType: Type): object {\n    return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));\n  }\n\n  compileModuleAsync(moduleType: Type): Promise<object> {\n    return Promise.resolve(this._compileModuleAndComponents(moduleType, false));\n  }\n\n  compileModuleAndAllComponentsSync(moduleType: Type): ModuleWithComponentFactories {\n    return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));\n  }\n\n  compileModuleAndAllComponentsAsync(moduleType: Type): Promise<ModuleWithComponentFactories> {\n    return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));\n  }\n\n  getComponentFactory(component: Type): object {\n    const summary = this._metadataResolver.getDirectiveSummary(component);\n    return summary.componentFactory as object;\n  }\n\n  loadAotSummaries(summaries: () => any[]) {\n    this.clearCache();\n    this._addAotSummaries(summaries);\n  }\n\n  private _addAotSummaries(fn: () => any[]) {\n    if (this._addedAotSummaries.has(fn)) {\n      return;\n    }\n    this._addedAotSummaries.add(fn);\n    const summaries = fn();\n    for (let i = 0; i < summaries.length; i++) {\n      const entry = summaries[i];\n      if (typeof entry === 'function') {\n        this._addAotSummaries(entry);\n      } else {\n        const summary = entry as CompileTypeSummary;\n        this._summaryResolver.addSummary(\n            {symbol: summary.type.reference, metadata: null, type: summary});\n      }\n    }\n  }\n\n  hasAotSummary(ref: Type) { return !!this._summaryResolver.resolveSummary(ref); }\n\n  private _filterJitIdentifiers(ids: CompileIdentifierMetadata[]): any[] {\n    return ids.map(mod => mod.reference).filter((ref) => !this.hasAotSummary(ref));\n  }\n\n  private _compileModuleAndComponents(moduleType: Type, isSync: boolean): SyncAsync<object> {\n    return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\n      this._compileComponents(moduleType, null);\n      return this._compileModule(moduleType);\n    });\n  }\n\n  private _compileModuleAndAllComponents(moduleType: Type, isSync: boolean):\n      SyncAsync<ModuleWithComponentFactories> {\n    return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\n      const componentFactories: object[] = [];\n      this._compileComponents(moduleType, componentFactories);\n      return {\n        ngModuleFactory: this._compileModule(moduleType),\n        componentFactories: componentFactories\n      };\n    });\n  }\n\n  private _loadModules(mainModule: any, isSync: boolean): SyncAsync<any> {\n    const loading: Promise<any>[] = [];\n    const mainNgModule = this._metadataResolver.getNgModuleMetadata(mainModule) !;\n    // Note: for runtime compilation, we want to transitively compile all modules,\n    // so we also need to load the declared directives / pipes for all nested modules.\n    this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach((nestedNgModule) => {\n      // getNgModuleMetadata only returns null if the value passed in is not an NgModule\n      const moduleMeta = this._metadataResolver.getNgModuleMetadata(nestedNgModule) !;\n      this._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach((ref) => {\n        const promise =\n            this._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);\n        if (promise) {\n          loading.push(promise);\n        }\n      });\n      this._filterJitIdentifiers(moduleMeta.declaredPipes)\n          .forEach((ref) => this._metadataResolver.getOrLoadPipeMetadata(ref));\n    });\n    return SyncAsync.all(loading);\n  }\n\n  private _compileModule(moduleType: Type): object {\n    let ngModuleFactory = this._compiledNgModuleCache.get(moduleType) !;\n    if (!ngModuleFactory) {\n      const moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType) !;\n      // Always provide a bound Compiler\n      const extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);\n      const outputCtx = createOutputContext();\n      const compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);\n      ngModuleFactory = this._interpretOrJit(\n          ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];\n      this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);\n    }\n    return ngModuleFactory;\n  }\n\n  /**\n   * @internal\n   */\n  _compileComponents(mainModule: Type, allComponentFactories: object[]|null) {\n    const ngModule = this._metadataResolver.getNgModuleMetadata(mainModule) !;\n    const moduleByJitDirective = new Map<any, CompileNgModuleMetadata>();\n    const templates = new Set<CompiledTemplate>();\n\n    const transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);\n    transJitModules.forEach((localMod) => {\n      const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localMod) !;\n      this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach((dirRef) => {\n        moduleByJitDirective.set(dirRef, localModuleMeta);\n        const dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\n        if (dirMeta.isComponent) {\n          templates.add(this._createCompiledTemplate(dirMeta, localModuleMeta));\n          if (allComponentFactories) {\n            const template =\n                this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);\n            templates.add(template);\n            allComponentFactories.push(dirMeta.componentFactory as object);\n          }\n        }\n      });\n    });\n    transJitModules.forEach((localMod) => {\n      const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localMod) !;\n      this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach((dirRef) => {\n        const dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\n        if (dirMeta.isComponent) {\n          dirMeta.entryComponents.forEach((entryComponentType) => {\n            const moduleMeta = moduleByJitDirective.get(entryComponentType.componentType) !;\n            templates.add(\n                this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n          });\n        }\n      });\n      localModuleMeta.entryComponents.forEach((entryComponentType) => {\n        if (!this.hasAotSummary(entryComponentType.componentType)) {\n          const moduleMeta = moduleByJitDirective.get(entryComponentType.componentType) !;\n          templates.add(\n              this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n        }\n      });\n    });\n    templates.forEach((template) => this._compileTemplate(template));\n  }\n\n  clearCacheFor(type: Type) {\n    this._compiledNgModuleCache.delete(type);\n    this._metadataResolver.clearCacheFor(type);\n    this._compiledHostTemplateCache.delete(type);\n    const compiledTemplate = this._compiledTemplateCache.get(type);\n    if (compiledTemplate) {\n      this._compiledTemplateCache.delete(type);\n    }\n  }\n\n  clearCache(): void {\n    // Note: don't clear the _addedAotSummaries, as they don't change!\n    this._metadataResolver.clearCache();\n    this._compiledTemplateCache.clear();\n    this._compiledHostTemplateCache.clear();\n    this._compiledNgModuleCache.clear();\n  }\n\n  private _createCompiledHostTemplate(compType: Type, ngModule: CompileNgModuleMetadata):\n      CompiledTemplate {\n    if (!ngModule) {\n      throw new Error(\n          `Component ${stringify(compType)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n    let compiledTemplate = this._compiledHostTemplateCache.get(compType);\n    if (!compiledTemplate) {\n      const compMeta = this._metadataResolver.getDirectiveMetadata(compType);\n      assertComponent(compMeta);\n\n      const hostMeta = this._metadataResolver.getHostComponentMetadata(\n          compMeta, (compMeta.componentFactory as any).viewDefFactory);\n      compiledTemplate =\n          new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);\n      this._compiledHostTemplateCache.set(compType, compiledTemplate);\n    }\n    return compiledTemplate;\n  }\n\n  private _createCompiledTemplate(\n      compMeta: CompileDirectiveMetadata, ngModule: CompileNgModuleMetadata): CompiledTemplate {\n    let compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\n    if (!compiledTemplate) {\n      assertComponent(compMeta);\n      compiledTemplate = new CompiledTemplate(\n          false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);\n      this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\n    }\n    return compiledTemplate;\n  }\n\n  private _compileTemplate(template: CompiledTemplate) {\n    if (template.isCompiled) {\n      return;\n    }\n    const compMeta = template.compMeta;\n    const externalStylesheetsByModuleUrl = new Map<string, CompiledStylesheet>();\n    const outputContext = createOutputContext();\n    const componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta);\n    compMeta.template !.externalStylesheets.forEach((stylesheetMeta) => {\n      const compiledStylesheet =\n          this._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);\n      externalStylesheetsByModuleUrl.set(stylesheetMeta.moduleUrl !, compiledStylesheet);\n    });\n    this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);\n    const pipes = template.ngModule.transitiveModule.pipes.map(\n        pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n    const {template: parsedTemplate, pipes: usedPipes} =\n        this._parseTemplate(compMeta, template.ngModule, template.directives);\n    const compileResult = this._viewCompiler.compileComponent(\n        outputContext, compMeta, parsedTemplate, ir.variable(componentStylesheet.stylesVar),\n        usedPipes);\n    const evalResult = this._interpretOrJit(\n        templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);\n    const viewClass = evalResult[compileResult.viewClassVar];\n    const rendererType = evalResult[compileResult.rendererTypeVar];\n    template.compiled(viewClass, rendererType);\n  }\n\n  private _parseTemplate(\n      compMeta: CompileDirectiveMetadata, ngModule: CompileNgModuleMetadata,\n      directiveIdentifiers: CompileIdentifierMetadata[]):\n      {template: TemplateAst[], pipes: CompilePipeSummary[]} {\n    // Note: ! is ok here as components always have a template.\n    const preserveWhitespaces = compMeta.template !.preserveWhitespaces;\n    const directives =\n        directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n    const pipes = ngModule.transitiveModule.pipes.map(\n        pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n    return this._templateParser.parse(\n        compMeta, compMeta.template !.htmlAst !, directives, pipes, ngModule.schemas,\n        templateSourceUrl(ngModule.type, compMeta, compMeta.template !), preserveWhitespaces);\n  }\n\n  private _resolveStylesCompileResult(\n      result: CompiledStylesheet, externalStylesheetsByModuleUrl: Map<string, CompiledStylesheet>) {\n    result.dependencies.forEach((dep, i) => {\n      const nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl) !;\n      const nestedStylesArr = this._resolveAndEvalStylesCompileResult(\n          nestedCompileResult, externalStylesheetsByModuleUrl);\n      dep.setValue(nestedStylesArr);\n    });\n  }\n\n  private _resolveAndEvalStylesCompileResult(\n      result: CompiledStylesheet,\n      externalStylesheetsByModuleUrl: Map<string, CompiledStylesheet>): string[] {\n    this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n    return this._interpretOrJit(\n        sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++),\n        result.outputCtx.statements)[result.stylesVar];\n  }\n\n  private _interpretOrJit(sourceUrl: string, statements: ir.Statement[]): any {\n    if (!this._compilerConfig.useJit) {\n      return interpretStatements(statements, this._reflector);\n    } else {\n      return jitStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);\n    }\n  }\n}\n\nclass CompiledTemplate {\n  private _viewClass: Function = null !;\n  isCompiled = false;\n\n  constructor(\n      public isHost: boolean, public compType: CompileIdentifierMetadata,\n      public compMeta: CompileDirectiveMetadata, public ngModule: CompileNgModuleMetadata,\n      public directives: CompileIdentifierMetadata[]) {}\n\n  compiled(viewClass: Function, rendererType: any) {\n    this._viewClass = viewClass;\n    (<ProxyClass>this.compMeta.componentViewType).setDelegate(viewClass);\n    for (let prop in rendererType) {\n      (<any>this.compMeta.rendererType)[prop] = rendererType[prop];\n    }\n    this.isCompiled = true;\n  }\n}\n\nfunction assertComponent(meta: CompileDirectiveMetadata) {\n  if (!meta.isComponent) {\n    throw new Error(\n        `Could not compile '${identifierName(meta.type)}' because it is not a component.`);\n  }\n}\n\nfunction createOutputContext(): OutputContext {\n  const importExpr = (symbol: any) =>\n      ir.importExpr({name: identifierName(symbol), moduleName: null, runtime: symbol});\n  return {statements: [], genFilePath: '', importExpr, constantPool: new ConstantPool()};\n}\n"],"sourceRoot":""}