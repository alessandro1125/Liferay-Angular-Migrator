{"version":3,"sources":["../../../../../../packages/compiler/src/style_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileIdentifierMetadata, CompileStylesheetMetadata, identifierModuleUrl, identifierName} from './compile_metadata';\nimport {ViewEncapsulation} from './core';\nimport * as o from './output/output_ast';\nimport {ShadowCss} from './shadow_css';\nimport {UrlResolver} from './url_resolver';\nimport {OutputContext} from './util';\n\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport class StylesCompileDependency {\n  constructor(\n      public name: string, public moduleUrl: string, public setValue: (value: any) => void) {}\n}\n\nexport class CompiledStylesheet {\n  constructor(\n      public outputCtx: OutputContext, public stylesVar: string,\n      public dependencies: StylesCompileDependency[], public isShimmed: boolean,\n      public meta: CompileStylesheetMetadata) {}\n}\n\nexport class StyleCompiler {\n  private _shadowCss: ShadowCss = new ShadowCss();\n\n  constructor(private _urlResolver: UrlResolver) {}\n\n  compileComponent(outputCtx: OutputContext, comp: CompileDirectiveMetadata): CompiledStylesheet {\n    const template = comp.template !;\n    return this._compileStyles(\n        outputCtx, comp, new CompileStylesheetMetadata({\n          styles: template.styles,\n          styleUrls: template.styleUrls,\n          moduleUrl: identifierModuleUrl(comp.type)\n        }),\n        this.needsStyleShim(comp), true);\n  }\n\n  compileStyles(\n      outputCtx: OutputContext, comp: CompileDirectiveMetadata,\n      stylesheet: CompileStylesheetMetadata,\n      shim: boolean = this.needsStyleShim(comp)): CompiledStylesheet {\n    return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n  }\n\n  needsStyleShim(comp: CompileDirectiveMetadata): boolean {\n    return comp.template !.encapsulation === ViewEncapsulation.Emulated;\n  }\n\n  private _compileStyles(\n      outputCtx: OutputContext, comp: CompileDirectiveMetadata,\n      stylesheet: CompileStylesheetMetadata, shim: boolean,\n      isComponentStylesheet: boolean): CompiledStylesheet {\n    const styleExpressions: o.Expression[] =\n        stylesheet.styles.map(plainStyle => o.literal(this._shimIfNeeded(plainStyle, shim)));\n    const dependencies: StylesCompileDependency[] = [];\n    stylesheet.styleUrls.forEach((styleUrl) => {\n      const exprIndex = styleExpressions.length;\n      // Note: This placeholder will be filled later.\n      styleExpressions.push(null !);\n      dependencies.push(new StylesCompileDependency(\n          getStylesVarName(null), styleUrl,\n          (value) => styleExpressions[exprIndex] = outputCtx.importExpr(value)));\n    });\n    // styles variable contains plain strings and arrays of other styles arrays (recursive),\n    // so we set its type to dynamic.\n    const stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n    const stmt = o.variable(stylesVar)\n                     .set(o.literalArr(\n                         styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])))\n                     .toDeclStmt(null, isComponentStylesheet ? [o.StmtModifier.Final] : [\n                       o.StmtModifier.Final, o.StmtModifier.Exported\n                     ]);\n    outputCtx.statements.push(stmt);\n    return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n  }\n\n  private _shimIfNeeded(style: string, shim: boolean): string {\n    return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n  }\n}\n\nfunction getStylesVarName(component: CompileDirectiveMetadata | null): string {\n  let result = `styles`;\n  if (component) {\n    result += `_${identifierName(component.type)}`;\n  }\n  return result;\n}\n"],"sourceRoot":""}