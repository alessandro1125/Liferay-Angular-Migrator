{"version":3,"sources":["../../../../../../../../packages/compiler/src/render3/view/styling.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst enum Char {\n  OpenParen = 40,\n  CloseParen = 41,\n  Colon = 58,\n  Semicolon = 59,\n  BackSlash = 92,\n  QuoteNone = 0,  // indicating we are not inside a quote\n  QuoteDouble = 34,\n  QuoteSingle = 39,\n}\n\n\n/**\n * Parses string representation of a style and converts it into object literal.\n *\n * @param value string representation of style as used in the `style` attribute in HTML.\n *   Example: `color: red; height: auto`.\n * @returns an object literal. `{ color: 'red', height: 'auto'}`.\n */\nexport function parseStyle(value: string): {[key: string]: any} {\n  const styles: {[key: string]: any} = {};\n\n  let i = 0;\n  let parenDepth = 0;\n  let quote: Char = Char.QuoteNone;\n  let valueStart = 0;\n  let propStart = 0;\n  let currentProp: string|null = null;\n  let valueHasQuotes = false;\n  while (i < value.length) {\n    const token = value.charCodeAt(i++) as Char;\n    switch (token) {\n      case Char.OpenParen:\n        parenDepth++;\n        break;\n      case Char.CloseParen:\n        parenDepth--;\n        break;\n      case Char.QuoteSingle:\n        // valueStart needs to be there since prop values don't\n        // have quotes in CSS\n        valueHasQuotes = valueHasQuotes || valueStart > 0;\n        if (quote === Char.QuoteNone) {\n          quote = Char.QuoteSingle;\n        } else if (quote === Char.QuoteSingle && value.charCodeAt(i - 1) !== Char.BackSlash) {\n          quote = Char.QuoteNone;\n        }\n        break;\n      case Char.QuoteDouble:\n        // same logic as above\n        valueHasQuotes = valueHasQuotes || valueStart > 0;\n        if (quote === Char.QuoteNone) {\n          quote = Char.QuoteDouble;\n        } else if (quote === Char.QuoteDouble && value.charCodeAt(i - 1) !== Char.BackSlash) {\n          quote = Char.QuoteNone;\n        }\n        break;\n      case Char.Colon:\n        if (!currentProp && parenDepth === 0 && quote === Char.QuoteNone) {\n          currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n          valueStart = i;\n        }\n        break;\n      case Char.Semicolon:\n        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === Char.QuoteNone) {\n          const styleVal = value.substring(valueStart, i - 1).trim();\n          styles[currentProp] = valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal;\n          propStart = i;\n          valueStart = 0;\n          currentProp = null;\n          valueHasQuotes = false;\n        }\n        break;\n    }\n  }\n\n  if (currentProp && valueStart) {\n    const styleVal = value.substr(valueStart).trim();\n    styles[currentProp] = valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal;\n  }\n\n  return styles;\n}\n\nexport function stripUnnecessaryQuotes(value: string): string {\n  const qS = value.charCodeAt(0);\n  const qE = value.charCodeAt(value.length - 1);\n  if (qS == qE && (qS == Char.QuoteSingle || qS == Char.QuoteDouble)) {\n    const tempValue = value.substring(1, value.length - 1);\n    // special case to avoid using a multi-quoted string that was just chomped\n    // (e.g. `font-family: \"Verdana\", \"sans-serif\"`)\n    if (tempValue.indexOf('\\'') == -1 && tempValue.indexOf('\"') == -1) {\n      value = tempValue;\n    }\n  }\n  return value;\n}\n\nexport function hyphenate(value: string): string {\n  return value.replace(/[a-z][A-Z]/g, v => {\n                return v.charAt(0) + '-' + v.charAt(1);\n              }).toLowerCase();\n}\n"],"sourceRoot":""}