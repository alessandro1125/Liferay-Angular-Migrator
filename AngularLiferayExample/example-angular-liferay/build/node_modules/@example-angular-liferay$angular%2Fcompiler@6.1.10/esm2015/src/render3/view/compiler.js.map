{"version":3,"sources":["../../../../../../../../packages/compiler/src/render3/view/compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol} from '../../aot/static_symbol';\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileDirectiveSummary, CompilePipeMetadata, CompileQueryMetadata, CompileTokenMetadata, CompileTypeMetadata, flatten, identifierName, sanitizeIdentifier, tokenReference} from '../../compile_metadata';\nimport {CompileReflector} from '../../compile_reflector';\nimport {BindingForm, BuiltinFunctionCall, LocalResolver, convertActionBinding, convertPropertyBinding} from '../../compiler_util/expression_converter';\nimport {ConstantPool, DefinitionKind} from '../../constant_pool';\nimport * as core from '../../core';\nimport {AST, AstMemoryEfficientTransformer, BindingPipe, BindingType, FunctionCall, ImplicitReceiver, LiteralArray, LiteralMap, LiteralPrimitive, PropertyRead} from '../../expression_parser/ast';\nimport {Identifiers} from '../../identifiers';\nimport {LifecycleHooks} from '../../lifecycle_reflector';\nimport * as o from '../../output/output_ast';\nimport {ParseSourceSpan, typeSourceSpan} from '../../parse_util';\nimport {CssSelector, SelectorMatcher} from '../../selector';\nimport {BindingParser} from '../../template_parser/binding_parser';\nimport {OutputContext, error} from '../../util';\nimport * as t from '../r3_ast';\nimport {R3DependencyMetadata, R3ResolvedDependencyType, compileFactoryFunction, dependenciesFromGlobalMetadata} from '../r3_factory';\nimport {Identifiers as R3} from '../r3_identifiers';\nimport {Render3ParseResult} from '../r3_template_transform';\nimport {typeWithParameters} from '../util';\n\nimport {R3ComponentDef, R3ComponentMetadata, R3DirectiveDef, R3DirectiveMetadata, R3QueryMetadata} from './api';\nimport {BindingScope, TemplateDefinitionBuilder, renderFlagCheckIfStmt} from './template';\nimport {CONTEXT_NAME, DefinitionMap, ID_SEPARATOR, MEANING_SEPARATOR, RENDER_FLAGS, TEMPORARY_NAME, asLiteral, conditionallyCreateMapObjectLiteral, getQueryPredicate, temporaryAllocator, unsupported} from './util';\n\nfunction baseDirectiveFields(\n    meta: R3DirectiveMetadata, constantPool: ConstantPool,\n    bindingParser: BindingParser): DefinitionMap {\n  const definitionMap = new DefinitionMap();\n\n  // e.g. `type: MyDirective`\n  definitionMap.set('type', meta.type);\n\n  // e.g. `selectors: [['', 'someDir', '']]`\n  definitionMap.set('selectors', createDirectiveSelector(meta.selector !));\n\n\n  // e.g. `factory: () => new MyApp(injectElementRef())`\n  definitionMap.set('factory', compileFactoryFunction({\n                      name: meta.name,\n                      fnOrClass: meta.type,\n                      deps: meta.deps,\n                      useNew: true,\n                      injectFn: R3.directiveInject,\n                    }));\n\n  definitionMap.set('contentQueries', createContentQueriesFunction(meta, constantPool));\n\n  definitionMap.set('contentQueriesRefresh', createContentQueriesRefreshFunction(meta));\n\n  // e.g. `hostBindings: (dirIndex, elIndex) => { ... }\n  definitionMap.set('hostBindings', createHostBindingsFunction(meta, bindingParser));\n\n  // e.g. `attributes: ['role', 'listbox']`\n  definitionMap.set('attributes', createHostAttributesArray(meta));\n\n  // e.g 'inputs: {a: 'a'}`\n  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs));\n\n  // e.g 'outputs: {a: 'a'}`\n  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n\n  // e.g. `features: [NgOnChangesFeature]`\n  const features: o.Expression[] = [];\n\n  if (meta.usesInheritance) {\n    features.push(o.importExpr(R3.InheritDefinitionFeature));\n  }\n  if (meta.lifecycle.usesOnChanges) {\n    features.push(o.importExpr(R3.NgOnChangesFeature));\n  }\n  if (features.length) {\n    definitionMap.set('features', o.literalArr(features));\n  }\n\n  return definitionMap;\n}\n\n/**\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n */\nexport function compileDirectiveFromMetadata(\n    meta: R3DirectiveMetadata, constantPool: ConstantPool,\n    bindingParser: BindingParser): R3DirectiveDef {\n  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n  const expression = o.importExpr(R3.defineDirective).callFn([definitionMap.toLiteralMap()]);\n\n  // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n  // string literal, which must be on one line.\n  const selectorForType = (meta.selector || '').replace(/\\n/g, '');\n\n  const type = new o.ExpressionType(o.importExpr(R3.DirectiveDef, [\n    typeWithParameters(meta.type, meta.typeArgumentCount),\n    new o.ExpressionType(o.literal(selectorForType))\n  ]));\n  return {expression, type};\n}\n\n/**\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n */\nexport function compileComponentFromMetadata(\n    meta: R3ComponentMetadata, constantPool: ConstantPool,\n    bindingParser: BindingParser): R3ComponentDef {\n  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n\n  const selector = meta.selector && CssSelector.parse(meta.selector);\n  const firstSelector = selector && selector[0];\n\n  // e.g. `attr: [\"class\", \".my.app\"]`\n  // This is optional an only included if the first selector of a component specifies attributes.\n  if (firstSelector) {\n    const selectorAttributes = firstSelector.getAttrs();\n    if (selectorAttributes.length) {\n      definitionMap.set(\n          'attrs', constantPool.getConstLiteral(\n                       o.literalArr(selectorAttributes.map(\n                           value => value != null ? o.literal(value) : o.literal(undefined))),\n                       /* forceShared */ true));\n    }\n  }\n\n  // Generate the CSS matcher that recognize directive\n  let directiveMatcher: SelectorMatcher|null = null;\n\n  if (meta.directives.size) {\n    const matcher = new SelectorMatcher();\n    meta.directives.forEach((expression, selector: string) => {\n      matcher.addSelectables(CssSelector.parse(selector), expression);\n    });\n    directiveMatcher = matcher;\n  }\n\n  if (meta.viewQueries.length) {\n    definitionMap.set('viewQuery', createViewQueriesFunction(meta, constantPool));\n  }\n\n  // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n  const templateTypeName = meta.name;\n  const templateName = templateTypeName ? `${templateTypeName}_Template` : null;\n\n  const directivesUsed = new Set<o.Expression>();\n  const pipesUsed = new Set<o.Expression>();\n\n  const template = meta.template;\n  const templateFunctionExpression =\n      new TemplateDefinitionBuilder(\n          constantPool, CONTEXT_NAME, BindingScope.ROOT_SCOPE, 0, templateTypeName, templateName,\n          meta.viewQueries, directiveMatcher, directivesUsed, meta.pipes, pipesUsed,\n          R3.namespaceHTML)\n          .buildTemplateFunction(\n              template.nodes, [], template.hasNgContent, template.ngContentSelectors);\n\n  definitionMap.set('template', templateFunctionExpression);\n\n  // e.g. `directives: [MyDirective]`\n  if (directivesUsed.size) {\n    definitionMap.set('directives', o.literalArr(Array.from(directivesUsed)));\n  }\n\n  // e.g. `pipes: [MyPipe]`\n  if (pipesUsed.size) {\n    definitionMap.set('pipes', o.literalArr(Array.from(pipesUsed)));\n  }\n\n  // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n  // string literal, which must be on one line.\n  const selectorForType = (meta.selector || '').replace(/\\n/g, '');\n\n  const expression = o.importExpr(R3.defineComponent).callFn([definitionMap.toLiteralMap()]);\n  const type = new o.ExpressionType(o.importExpr(R3.ComponentDef, [\n    typeWithParameters(meta.type, meta.typeArgumentCount),\n    new o.ExpressionType(o.literal(selectorForType))\n  ]));\n\n  return {expression, type};\n}\n\n/**\n * A wrapper around `compileDirective` which depends on render2 global analysis data as its input\n * instead of the `R3DirectiveMetadata`.\n *\n * `R3DirectiveMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected\n * information.\n */\nexport function compileDirectiveFromRender2(\n    outputCtx: OutputContext, directive: CompileDirectiveMetadata, reflector: CompileReflector,\n    bindingParser: BindingParser) {\n  const name = identifierName(directive.type) !;\n  name || error(`Cannot resolver the name of ${directive.type}`);\n\n  const definitionField = outputCtx.constantPool.propertyNameOf(DefinitionKind.Directive);\n\n  const meta = directiveMetadataFromGlobalMetadata(directive, outputCtx, reflector);\n  const res = compileDirectiveFromMetadata(meta, outputCtx.constantPool, bindingParser);\n\n  // Create the partial class to be merged with the actual class.\n  outputCtx.statements.push(new o.ClassStmt(\n      name, null,\n      [new o.ClassField(definitionField, o.INFERRED_TYPE, [o.StmtModifier.Static], res.expression)],\n      [], new o.ClassMethod(null, [], []), []));\n}\n\n/**\n * A wrapper around `compileComponent` which depends on render2 global analysis data as its input\n * instead of the `R3DirectiveMetadata`.\n *\n * `R3ComponentMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected\n * information.\n */\nexport function compileComponentFromRender2(\n    outputCtx: OutputContext, component: CompileDirectiveMetadata, render3Ast: Render3ParseResult,\n    reflector: CompileReflector, bindingParser: BindingParser, directiveTypeBySel: Map<string, any>,\n    pipeTypeByName: Map<string, any>) {\n  const name = identifierName(component.type) !;\n  name || error(`Cannot resolver the name of ${component.type}`);\n\n  const definitionField = outputCtx.constantPool.propertyNameOf(DefinitionKind.Component);\n\n  const summary = component.toSummary();\n\n  // Compute the R3ComponentMetadata from the CompileDirectiveMetadata\n  const meta: R3ComponentMetadata = {\n    ...directiveMetadataFromGlobalMetadata(component, outputCtx, reflector),\n    selector: component.selector,\n    template: {\n      nodes: render3Ast.nodes,\n      hasNgContent: render3Ast.hasNgContent,\n      ngContentSelectors: render3Ast.ngContentSelectors,\n    },\n    directives: typeMapToExpressionMap(directiveTypeBySel, outputCtx),\n    pipes: typeMapToExpressionMap(pipeTypeByName, outputCtx),\n    viewQueries: queriesFromGlobalMetadata(component.viewQueries, outputCtx),\n  };\n  const res = compileComponentFromMetadata(meta, outputCtx.constantPool, bindingParser);\n\n  // Create the partial class to be merged with the actual class.\n  outputCtx.statements.push(new o.ClassStmt(\n      name, null,\n      [new o.ClassField(definitionField, o.INFERRED_TYPE, [o.StmtModifier.Static], res.expression)],\n      [], new o.ClassMethod(null, [], []), []));\n}\n\n/**\n * Compute `R3DirectiveMetadata` given `CompileDirectiveMetadata` and a `CompileReflector`.\n */\nfunction directiveMetadataFromGlobalMetadata(\n    directive: CompileDirectiveMetadata, outputCtx: OutputContext,\n    reflector: CompileReflector): R3DirectiveMetadata {\n  const summary = directive.toSummary();\n  const name = identifierName(directive.type) !;\n  name || error(`Cannot resolver the name of ${directive.type}`);\n\n  return {\n    name,\n    type: outputCtx.importExpr(directive.type.reference),\n    typeArgumentCount: 0,\n    typeSourceSpan:\n        typeSourceSpan(directive.isComponent ? 'Component' : 'Directive', directive.type),\n    selector: directive.selector,\n    deps: dependenciesFromGlobalMetadata(directive.type, outputCtx, reflector),\n    queries: queriesFromGlobalMetadata(directive.queries, outputCtx),\n    lifecycle: {\n      usesOnChanges:\n          directive.type.lifecycleHooks.some(lifecycle => lifecycle == LifecycleHooks.OnChanges),\n    },\n    host: {\n      attributes: directive.hostAttributes,\n      listeners: summary.hostListeners,\n      properties: summary.hostProperties,\n    },\n    inputs: directive.inputs,\n    outputs: directive.outputs,\n    usesInheritance: false,\n  };\n}\n\n/**\n * Convert `CompileQueryMetadata` into `R3QueryMetadata`.\n */\nfunction queriesFromGlobalMetadata(\n    queries: CompileQueryMetadata[], outputCtx: OutputContext): R3QueryMetadata[] {\n  return queries.map(query => {\n    let read: o.Expression|null = null;\n    if (query.read && query.read.identifier) {\n      read = outputCtx.importExpr(query.read.identifier.reference);\n    }\n    return {\n      propertyName: query.propertyName,\n      first: query.first,\n      predicate: selectorsFromGlobalMetadata(query.selectors, outputCtx),\n      descendants: query.descendants, read,\n    };\n  });\n}\n\n/**\n * Convert `CompileTokenMetadata` for query selectors into either an expression for a predicate\n * type, or a list of string predicates.\n */\nfunction selectorsFromGlobalMetadata(\n    selectors: CompileTokenMetadata[], outputCtx: OutputContext): o.Expression|string[] {\n  if (selectors.length > 1 || (selectors.length == 1 && selectors[0].value)) {\n    const selectorStrings = selectors.map(value => value.value as string);\n    selectorStrings.some(value => !value) &&\n        error('Found a type among the string selectors expected');\n    return outputCtx.constantPool.getConstLiteral(\n        o.literalArr(selectorStrings.map(value => o.literal(value))));\n  }\n\n  if (selectors.length == 1) {\n    const first = selectors[0];\n    if (first.identifier) {\n      return outputCtx.importExpr(first.identifier.reference);\n    }\n  }\n\n  error('Unexpected query form');\n  return o.NULL_EXPR;\n}\n\nfunction createQueryDefinition(\n    query: R3QueryMetadata, constantPool: ConstantPool, idx: number | null): o.Expression {\n  const predicate = getQueryPredicate(query, constantPool);\n\n  // e.g. r3.Q(null, somePredicate, false) or r3.Q(0, ['div'], false)\n  const parameters = [\n    o.literal(idx, o.INFERRED_TYPE),\n    predicate,\n    o.literal(query.descendants),\n  ];\n\n  if (query.read) {\n    parameters.push(query.read);\n  }\n\n  return o.importExpr(R3.query).callFn(parameters);\n}\n\n// Turn a directive selector into an R3-compatible selector for directive def\nfunction createDirectiveSelector(selector: string): o.Expression {\n  return asLiteral(core.parseSelectorToR3Selector(selector));\n}\n\nfunction createHostAttributesArray(meta: R3DirectiveMetadata): o.Expression|null {\n  const values: o.Expression[] = [];\n  const attributes = meta.host.attributes;\n  for (let key of Object.getOwnPropertyNames(attributes)) {\n    const value = attributes[key];\n    values.push(o.literal(key), o.literal(value));\n  }\n  if (values.length > 0) {\n    return o.literalArr(values);\n  }\n  return null;\n}\n\n// Return a contentQueries function or null if one is not necessary.\nfunction createContentQueriesFunction(\n    meta: R3DirectiveMetadata, constantPool: ConstantPool): o.Expression|null {\n  if (meta.queries.length) {\n    const statements: o.Statement[] = meta.queries.map((query: R3QueryMetadata) => {\n      const queryDefinition = createQueryDefinition(query, constantPool, null);\n      return o.importExpr(R3.registerContentQuery).callFn([queryDefinition]).toStmt();\n    });\n    const typeName = meta.name;\n    return o.fn(\n        [], statements, o.INFERRED_TYPE, null, typeName ? `${typeName}_ContentQueries` : null);\n  }\n\n  return null;\n}\n\n// Return a contentQueriesRefresh function or null if one is not necessary.\nfunction createContentQueriesRefreshFunction(meta: R3DirectiveMetadata): o.Expression|null {\n  if (meta.queries.length > 0) {\n    const statements: o.Statement[] = [];\n    const typeName = meta.name;\n    const parameters = [\n      new o.FnParam('dirIndex', o.NUMBER_TYPE),\n      new o.FnParam('queryStartIndex', o.NUMBER_TYPE),\n    ];\n    const directiveInstanceVar = o.variable('instance');\n    // var $tmp$: any;\n    const temporary = temporaryAllocator(statements, TEMPORARY_NAME);\n\n    // const $instance$ = $r3$.ɵd(dirIndex);\n    statements.push(\n        directiveInstanceVar.set(o.importExpr(R3.loadDirective).callFn([o.variable('dirIndex')]))\n            .toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n\n    meta.queries.forEach((query: R3QueryMetadata, idx: number) => {\n      const loadQLArg = o.variable('queryStartIndex');\n      const getQueryList = o.importExpr(R3.loadQueryList).callFn([\n        idx > 0 ? loadQLArg.plus(o.literal(idx)) : loadQLArg\n      ]);\n      const assignToTemporary = temporary().set(getQueryList);\n      const callQueryRefresh = o.importExpr(R3.queryRefresh).callFn([assignToTemporary]);\n\n      const updateDirective = directiveInstanceVar.prop(query.propertyName)\n                                  .set(query.first ? temporary().prop('first') : temporary());\n      const refreshQueryAndUpdateDirective = callQueryRefresh.and(updateDirective);\n\n      statements.push(refreshQueryAndUpdateDirective.toStmt());\n    });\n\n    return o.fn(\n        parameters, statements, o.INFERRED_TYPE, null,\n        typeName ? `${typeName}_ContentQueriesRefresh` : null);\n  }\n\n  return null;\n}\n\n// Define and update any view queries\nfunction createViewQueriesFunction(\n    meta: R3ComponentMetadata, constantPool: ConstantPool): o.Expression {\n  const createStatements: o.Statement[] = [];\n  const updateStatements: o.Statement[] = [];\n  const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n\n  for (let i = 0; i < meta.viewQueries.length; i++) {\n    const query = meta.viewQueries[i];\n\n    // creation, e.g. r3.Q(0, somePredicate, true);\n    const queryDefinition = createQueryDefinition(query, constantPool, i);\n    createStatements.push(queryDefinition.toStmt());\n\n    // update, e.g. (r3.qR(tmp = r3.ɵld(0)) && (ctx.someDir = tmp));\n    const temporary = tempAllocator();\n    const getQueryList = o.importExpr(R3.load).callFn([o.literal(i)]);\n    const refresh = o.importExpr(R3.queryRefresh).callFn([temporary.set(getQueryList)]);\n    const updateDirective = o.variable(CONTEXT_NAME)\n                                .prop(query.propertyName)\n                                .set(query.first ? temporary.prop('first') : temporary);\n    updateStatements.push(refresh.and(updateDirective).toStmt());\n  }\n\n  const viewQueryFnName = meta.name ? `${meta.name}_Query` : null;\n  return o.fn(\n      [new o.FnParam(RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(CONTEXT_NAME, null)],\n      [\n        renderFlagCheckIfStmt(core.RenderFlags.Create, createStatements),\n        renderFlagCheckIfStmt(core.RenderFlags.Update, updateStatements)\n      ],\n      o.INFERRED_TYPE, null, viewQueryFnName);\n}\n\n// Return a host binding function or null if one is not necessary.\nfunction createHostBindingsFunction(\n    meta: R3DirectiveMetadata, bindingParser: BindingParser): o.Expression|null {\n  const statements: o.Statement[] = [];\n\n  const hostBindingSourceSpan = meta.typeSourceSpan;\n\n  const directiveSummary = metadataAsSummary(meta);\n\n  // Calculate the host property bindings\n  const bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);\n  const bindingContext = o.importExpr(R3.loadDirective).callFn([o.variable('dirIndex')]);\n  if (bindings) {\n    for (const binding of bindings) {\n      const bindingExpr = convertPropertyBinding(\n          null, bindingContext, binding.expression, 'b', BindingForm.TrySimple,\n          () => error('Unexpected interpolation'));\n      statements.push(...bindingExpr.stmts);\n      statements.push(o.importExpr(R3.elementProperty)\n                          .callFn([\n                            o.variable('elIndex'),\n                            o.literal(binding.name),\n                            o.importExpr(R3.bind).callFn([bindingExpr.currValExpr]),\n                          ])\n                          .toStmt());\n    }\n  }\n\n  // Calculate host event bindings\n  const eventBindings =\n      bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);\n  if (eventBindings) {\n    for (const binding of eventBindings) {\n      const bindingExpr = convertActionBinding(\n          null, bindingContext, binding.handler, 'b', () => error('Unexpected interpolation'));\n      const bindingName = binding.name && sanitizeIdentifier(binding.name);\n      const typeName = meta.name;\n      const functionName =\n          typeName && bindingName ? `${typeName}_${bindingName}_HostBindingHandler` : null;\n      const handler = o.fn(\n          [new o.FnParam('$event', o.DYNAMIC_TYPE)],\n          [...bindingExpr.stmts, new o.ReturnStatement(bindingExpr.allowDefault)], o.INFERRED_TYPE,\n          null, functionName);\n      statements.push(\n          o.importExpr(R3.listener).callFn([o.literal(binding.name), handler]).toStmt());\n    }\n  }\n\n  if (statements.length > 0) {\n    const typeName = meta.name;\n    return o.fn(\n        [\n          new o.FnParam('dirIndex', o.NUMBER_TYPE),\n          new o.FnParam('elIndex', o.NUMBER_TYPE),\n        ],\n        statements, o.INFERRED_TYPE, null, typeName ? `${typeName}_HostBindings` : null);\n  }\n\n  return null;\n}\n\nfunction metadataAsSummary(meta: R3DirectiveMetadata): CompileDirectiveSummary {\n  // clang-format off\n  return {\n    hostAttributes: meta.host.attributes,\n    hostListeners: meta.host.listeners,\n    hostProperties: meta.host.properties,\n  } as CompileDirectiveSummary;\n  // clang-format on\n}\n\n\nfunction typeMapToExpressionMap(\n    map: Map<string, StaticSymbol>, outputCtx: OutputContext): Map<string, o.Expression> {\n  // Convert each map entry into another entry where the value is an expression importing the type.\n  const entries = Array.from(map).map(\n      ([key, type]): [string, o.Expression] => [key, outputCtx.importExpr(type)]);\n  return new Map(entries);\n}\n\nconst HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n\n// Represents the groups in the above regex.\nconst enum HostBindingGroup {\n  // group 1: \"prop\" from \"[prop]\"\n  Property = 1,\n\n  // group 2: \"event\" from \"(event)\"\n  Event = 2,\n\n  // group 3: \"@trigger\" from \"@trigger\"\n  Animation = 3,\n}\n\nexport function parseHostBindings(host: {[key: string]: string}): {\n  attributes: {[key: string]: string},\n  listeners: {[key: string]: string},\n  properties: {[key: string]: string},\n  animations: {[key: string]: string},\n} {\n  const attributes: {[key: string]: string} = {};\n  const listeners: {[key: string]: string} = {};\n  const properties: {[key: string]: string} = {};\n  const animations: {[key: string]: string} = {};\n\n  Object.keys(host).forEach(key => {\n    const value = host[key];\n    const matches = key.match(HOST_REG_EXP);\n    if (matches === null) {\n      attributes[key] = value;\n    } else if (matches[HostBindingGroup.Property] != null) {\n      properties[matches[HostBindingGroup.Property]] = value;\n    } else if (matches[HostBindingGroup.Event] != null) {\n      listeners[matches[HostBindingGroup.Event]] = value;\n    } else if (matches[HostBindingGroup.Animation] != null) {\n      animations[matches[HostBindingGroup.Animation]] = value;\n    }\n  });\n\n  return {attributes, listeners, properties, animations};\n}\n"],"sourceRoot":""}