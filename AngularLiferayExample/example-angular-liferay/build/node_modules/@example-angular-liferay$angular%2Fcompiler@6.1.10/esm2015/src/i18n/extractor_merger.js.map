{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/extractor_merger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from '../ml_parser/ast';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseTreeResult} from '../ml_parser/parser';\nimport * as i18n from './i18n_ast';\nimport {createI18nMessageFactory} from './i18n_parser';\nimport {I18nError} from './parse_util';\nimport {TranslationBundle} from './translation_bundle';\n\nconst _I18N_ATTR = 'i18n';\nconst _I18N_ATTR_PREFIX = 'i18n-';\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst MEANING_SEPARATOR = '|';\nconst ID_SEPARATOR = '@@';\nlet i18nCommentsWarned = false;\n\n/**\n * Extract translatable messages from an html AST\n */\nexport function extractMessages(\n    nodes: html.Node[], interpolationConfig: InterpolationConfig, implicitTags: string[],\n    implicitAttrs: {[k: string]: string[]}): ExtractionResult {\n  const visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.extract(nodes, interpolationConfig);\n}\n\nexport function mergeTranslations(\n    nodes: html.Node[], translations: TranslationBundle, interpolationConfig: InterpolationConfig,\n    implicitTags: string[], implicitAttrs: {[k: string]: string[]}): ParseTreeResult {\n  const visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.merge(nodes, translations, interpolationConfig);\n}\n\nexport class ExtractionResult {\n  constructor(public messages: i18n.Message[], public errors: I18nError[]) {}\n}\n\nenum _VisitorMode {\n  Extract,\n  Merge\n}\n\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\nclass _Visitor implements html.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _depth !: number;\n\n  // <el i18n>...</el>\n  // TODO(issue/24571): remove '!'.\n  private _inI18nNode !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _inImplicitNode !: boolean;\n\n  // <!--i18n-->...<!--/i18n-->\n  // TODO(issue/24571): remove '!'.\n  private _inI18nBlock !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _blockMeaningAndDesc !: string;\n  // TODO(issue/24571): remove '!'.\n  private _blockChildren !: html.Node[];\n  // TODO(issue/24571): remove '!'.\n  private _blockStartDepth !: number;\n\n  // {<icu message>}\n  // TODO(issue/24571): remove '!'.\n  private _inIcu !: boolean;\n\n  // set to void 0 when not in a section\n  private _msgCountAtSectionStart: number|undefined;\n  // TODO(issue/24571): remove '!'.\n  private _errors !: I18nError[];\n  // TODO(issue/24571): remove '!'.\n  private _mode !: _VisitorMode;\n\n  // _VisitorMode.Extract only\n  // TODO(issue/24571): remove '!'.\n  private _messages !: i18n.Message[];\n\n  // _VisitorMode.Merge only\n  // TODO(issue/24571): remove '!'.\n  private _translations !: TranslationBundle;\n  // TODO(issue/24571): remove '!'.\n  private _createI18nMessage !: (\n      msg: html.Node[], meaning: string, description: string, id: string) => i18n.Message;\n\n\n  constructor(private _implicitTags: string[], private _implicitAttrs: {[k: string]: string[]}) {}\n\n  /**\n   * Extracts the messages from the tree\n   */\n  extract(nodes: html.Node[], interpolationConfig: InterpolationConfig): ExtractionResult {\n    this._init(_VisitorMode.Extract, interpolationConfig);\n\n    nodes.forEach(node => node.visit(this, null));\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ExtractionResult(this._messages, this._errors);\n  }\n\n  /**\n   * Returns a tree where all translatable nodes are translated\n   */\n  merge(\n      nodes: html.Node[], translations: TranslationBundle,\n      interpolationConfig: InterpolationConfig): ParseTreeResult {\n    this._init(_VisitorMode.Merge, interpolationConfig);\n    this._translations = translations;\n\n    // Construct a single fake root element\n    const wrapper = new html.Element('wrapper', [], nodes, undefined !, undefined, undefined);\n\n    const translatedNode = wrapper.visit(this, null);\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ParseTreeResult(translatedNode.children, this._errors);\n  }\n\n  visitExpansionCase(icuCase: html.ExpansionCase, context: any): any {\n    // Parse cases for translatable html attributes\n    const expression = html.visitAll(this, icuCase.expression, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      return new html.ExpansionCase(\n          icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan,\n          icuCase.expSourceSpan);\n    }\n  }\n\n  visitExpansion(icu: html.Expansion, context: any): html.Expansion {\n    this._mayBeAddBlockChildren(icu);\n\n    const wasInIcu = this._inIcu;\n\n    if (!this._inIcu) {\n      // nested ICU messages should not be extracted but top-level translated as a whole\n      if (this._isInTranslatableSection) {\n        this._addMessage([icu]);\n      }\n      this._inIcu = true;\n    }\n\n    const cases = html.visitAll(this, icu.cases, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      icu = new html.Expansion(\n          icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n    }\n\n    this._inIcu = wasInIcu;\n\n    return icu;\n  }\n\n  visitComment(comment: html.Comment, context: any): any {\n    const isOpening = _isOpeningComment(comment);\n\n    if (isOpening && this._isInTranslatableSection) {\n      this._reportError(comment, 'Could not start a block inside a translatable section');\n      return;\n    }\n\n    const isClosing = _isClosingComment(comment);\n\n    if (isClosing && !this._inI18nBlock) {\n      this._reportError(comment, 'Trying to close an unopened block');\n      return;\n    }\n\n    if (!this._inI18nNode && !this._inIcu) {\n      if (!this._inI18nBlock) {\n        if (isOpening) {\n          // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n          if (!i18nCommentsWarned && <any>console && <any>console.warn) {\n            i18nCommentsWarned = true;\n            const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';\n            // TODO(ocombe): use a log service once there is a public one available\n            console.warn(\n                `I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);\n          }\n          this._inI18nBlock = true;\n          this._blockStartDepth = this._depth;\n          this._blockChildren = [];\n          this._blockMeaningAndDesc =\n              comment.value !.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n          this._openTranslatableSection(comment);\n        }\n      } else {\n        if (isClosing) {\n          if (this._depth == this._blockStartDepth) {\n            this._closeTranslatableSection(comment, this._blockChildren);\n            this._inI18nBlock = false;\n            const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc) !;\n            // merge attributes in sections\n            const nodes = this._translateMessage(comment, message);\n            return html.visitAll(this, nodes);\n          } else {\n            this._reportError(comment, 'I18N blocks should not cross element boundaries');\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  visitText(text: html.Text, context: any): html.Text {\n    if (this._isInTranslatableSection) {\n      this._mayBeAddBlockChildren(text);\n    }\n    return text;\n  }\n\n  visitElement(el: html.Element, context: any): html.Element|null {\n    this._mayBeAddBlockChildren(el);\n    this._depth++;\n    const wasInI18nNode = this._inI18nNode;\n    const wasInImplicitNode = this._inImplicitNode;\n    let childNodes: html.Node[] = [];\n    let translatedChildNodes: html.Node[] = undefined !;\n\n    // Extract:\n    // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n    // - ICU messages\n    const i18nAttr = _getI18nAttr(el);\n    const i18nMeta = i18nAttr ? i18nAttr.value : '';\n    const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu &&\n        !this._isInTranslatableSection;\n    const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n    this._inImplicitNode = wasInImplicitNode || isImplicit;\n\n    if (!this._isInTranslatableSection && !this._inIcu) {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._inI18nNode = true;\n        const message = this._addMessage(el.children, i18nMeta) !;\n        translatedChildNodes = this._translateMessage(el, message);\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        const isTranslatable = i18nAttr || isTopLevelImplicit;\n        if (isTranslatable) this._openTranslatableSection(el);\n        html.visitAll(this, el.children);\n        if (isTranslatable) this._closeTranslatableSection(el, el.children);\n      }\n    } else {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._reportError(\n            el, 'Could not mark an element as translatable inside a translatable section');\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        // Descend into child nodes for extraction\n        html.visitAll(this, el.children);\n      }\n    }\n\n    if (this._mode === _VisitorMode.Merge) {\n      const visitNodes = translatedChildNodes || el.children;\n      visitNodes.forEach(child => {\n        const visited = child.visit(this, context);\n        if (visited && !this._isInTranslatableSection) {\n          // Do not add the children from translatable sections (= i18n blocks here)\n          // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n          childNodes = childNodes.concat(visited);\n        }\n      });\n    }\n\n    this._visitAttributesOf(el);\n\n    this._depth--;\n    this._inI18nNode = wasInI18nNode;\n    this._inImplicitNode = wasInImplicitNode;\n\n    if (this._mode === _VisitorMode.Merge) {\n      const translatedAttrs = this._translateAttributes(el);\n      return new html.Element(\n          el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan,\n          el.endSourceSpan);\n    }\n    return null;\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    throw new Error('unreachable code');\n  }\n\n  private _init(mode: _VisitorMode, interpolationConfig: InterpolationConfig): void {\n    this._mode = mode;\n    this._inI18nBlock = false;\n    this._inI18nNode = false;\n    this._depth = 0;\n    this._inIcu = false;\n    this._msgCountAtSectionStart = undefined;\n    this._errors = [];\n    this._messages = [];\n    this._inImplicitNode = false;\n    this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n  }\n\n  // looks for translatable attributes\n  private _visitAttributesOf(el: html.Element): void {\n    const explicitAttrNameToValue: {[k: string]: string} = {};\n    const implicitAttrNames: string[] = this._implicitAttrs[el.name] || [];\n\n    el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX))\n        .forEach(\n            attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                attr.value);\n\n    el.attrs.forEach(attr => {\n      if (attr.name in explicitAttrNameToValue) {\n        this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n      } else if (implicitAttrNames.some(name => attr.name === name)) {\n        this._addMessage([attr]);\n      }\n    });\n  }\n\n  // add a translatable message\n  private _addMessage(ast: html.Node[], msgMeta?: string): i18n.Message|null {\n    if (ast.length == 0 ||\n        ast.length == 1 && ast[0] instanceof html.Attribute && !(<html.Attribute>ast[0]).value) {\n      // Do not create empty messages\n      return null;\n    }\n\n    const {meaning, description, id} = _parseMessageMeta(msgMeta);\n    const message = this._createI18nMessage(ast, meaning, description, id);\n    this._messages.push(message);\n    return message;\n  }\n\n  // Translates the given message given the `TranslationBundle`\n  // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n  // no-op when called in extraction mode (returns [])\n  private _translateMessage(el: html.Node, message: i18n.Message): html.Node[] {\n    if (message && this._mode === _VisitorMode.Merge) {\n      const nodes = this._translations.get(message);\n\n      if (nodes) {\n        return nodes;\n      }\n\n      this._reportError(\n          el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\n    }\n\n    return [];\n  }\n\n  // translate the attributes of an element and remove i18n specific attributes\n  private _translateAttributes(el: html.Element): html.Attribute[] {\n    const attributes = el.attrs;\n    const i18nParsedMessageMeta:\n        {[name: string]: {meaning: string, description: string, id: string}} = {};\n\n    attributes.forEach(attr => {\n      if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n            _parseMessageMeta(attr.value);\n      }\n    });\n\n    const translatedAttributes: html.Attribute[] = [];\n\n    attributes.forEach((attr) => {\n      if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        // strip i18n specific attributes\n        return;\n      }\n\n      if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n        const {meaning, description, id} = i18nParsedMessageMeta[attr.name];\n        const message: i18n.Message = this._createI18nMessage([attr], meaning, description, id);\n        const nodes = this._translations.get(message);\n        if (nodes) {\n          if (nodes.length == 0) {\n            translatedAttributes.push(new html.Attribute(attr.name, '', attr.sourceSpan));\n          } else if (nodes[0] instanceof html.Text) {\n            const value = (nodes[0] as html.Text).value;\n            translatedAttributes.push(new html.Attribute(attr.name, value, attr.sourceSpan));\n          } else {\n            this._reportError(\n                el,\n                `Unexpected translation for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n          }\n        } else {\n          this._reportError(\n              el,\n              `Translation unavailable for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n        }\n      } else {\n        translatedAttributes.push(attr);\n      }\n    });\n\n    return translatedAttributes;\n  }\n\n\n  /**\n   * Add the node as a child of the block when:\n   * - we are in a block,\n   * - we are not inside a ICU message (those are handled separately),\n   * - the node is a \"direct child\" of the block\n   */\n  private _mayBeAddBlockChildren(node: html.Node): void {\n    if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n      this._blockChildren.push(node);\n    }\n  }\n\n  /**\n   * Marks the start of a section, see `_closeTranslatableSection`\n   */\n  private _openTranslatableSection(node: html.Node): void {\n    if (this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section start');\n    } else {\n      this._msgCountAtSectionStart = this._messages.length;\n    }\n  }\n\n  /**\n   * A translatable section could be:\n   * - the content of translatable element,\n   * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n   */\n  private get _isInTranslatableSection(): boolean {\n    return this._msgCountAtSectionStart !== void 0;\n  }\n\n  /**\n   * Terminates a section.\n   *\n   * If a section has only one significant children (comments not significant) then we should not\n   * keep the message from this children:\n   *\n   * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n   * - one for the <p> content with meaning and description,\n   * - another one for the ICU message.\n   *\n   * In this case the last message is discarded as it contains less information (the AST is\n   * otherwise identical).\n   *\n   * Note that we should still keep messages extracted from attributes inside the section (ie in the\n   * ICU message here)\n   */\n  private _closeTranslatableSection(node: html.Node, directChildren: html.Node[]): void {\n    if (!this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section end');\n      return;\n    }\n\n    const startIndex = this._msgCountAtSectionStart;\n    const significantChildren: number = directChildren.reduce(\n        (count: number, node: html.Node): number => count + (node instanceof html.Comment ? 0 : 1),\n        0);\n\n    if (significantChildren == 1) {\n      for (let i = this._messages.length - 1; i >= startIndex !; i--) {\n        const ast = this._messages[i].nodes;\n        if (!(ast.length == 1 && ast[0] instanceof i18n.Text)) {\n          this._messages.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    this._msgCountAtSectionStart = undefined;\n  }\n\n  private _reportError(node: html.Node, msg: string): void {\n    this._errors.push(new I18nError(node.sourceSpan !, msg));\n  }\n}\n\nfunction _isOpeningComment(n: html.Node): boolean {\n  return !!(n instanceof html.Comment && n.value && n.value.startsWith('i18n'));\n}\n\nfunction _isClosingComment(n: html.Node): boolean {\n  return !!(n instanceof html.Comment && n.value && n.value === '/i18n');\n}\n\nfunction _getI18nAttr(p: html.Element): html.Attribute|null {\n  return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\n\nfunction _parseMessageMeta(i18n?: string): {meaning: string, description: string, id: string} {\n  if (!i18n) return {meaning: '', description: '', id: ''};\n\n  const idIndex = i18n.indexOf(ID_SEPARATOR);\n  const descIndex = i18n.indexOf(MEANING_SEPARATOR);\n  const [meaningAndDesc, id] =\n      (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n  const [meaning, description] = (descIndex > -1) ?\n      [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n      ['', meaningAndDesc];\n\n  return {meaning, description, id};\n}\n"],"sourceRoot":""}