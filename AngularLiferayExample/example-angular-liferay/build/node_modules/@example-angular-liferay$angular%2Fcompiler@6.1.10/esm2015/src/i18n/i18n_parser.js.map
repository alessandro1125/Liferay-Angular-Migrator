{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/i18n_parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Lexer as ExpressionLexer} from '../expression_parser/lexer';\nimport {Parser as ExpressionParser} from '../expression_parser/parser';\nimport * as html from '../ml_parser/ast';\nimport {getHtmlTagDefinition} from '../ml_parser/html_tags';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseSourceSpan} from '../parse_util';\n\nimport * as i18n from './i18n_ast';\nimport {PlaceholderRegistry} from './serializers/placeholder';\n\nconst _expParser = new ExpressionParser(new ExpressionLexer());\n\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n */\nexport function createI18nMessageFactory(interpolationConfig: InterpolationConfig): (\n    nodes: html.Node[], meaning: string, description: string, id: string) => i18n.Message {\n  const visitor = new _I18nVisitor(_expParser, interpolationConfig);\n\n  return (nodes: html.Node[], meaning: string, description: string, id: string) =>\n             visitor.toI18nMessage(nodes, meaning, description, id);\n}\n\nclass _I18nVisitor implements html.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _isIcu !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _icuDepth !: number;\n  // TODO(issue/24571): remove '!'.\n  private _placeholderRegistry !: PlaceholderRegistry;\n  // TODO(issue/24571): remove '!'.\n  private _placeholderToContent !: {[phName: string]: string};\n  // TODO(issue/24571): remove '!'.\n  private _placeholderToMessage !: {[phName: string]: i18n.Message};\n\n  constructor(\n      private _expressionParser: ExpressionParser,\n      private _interpolationConfig: InterpolationConfig) {}\n\n  public toI18nMessage(nodes: html.Node[], meaning: string, description: string, id: string):\n      i18n.Message {\n    this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;\n    this._icuDepth = 0;\n    this._placeholderRegistry = new PlaceholderRegistry();\n    this._placeholderToContent = {};\n    this._placeholderToMessage = {};\n\n    const i18nodes: i18n.Node[] = html.visitAll(this, nodes, {});\n\n    return new i18n.Message(\n        i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n  }\n\n  visitElement(el: html.Element, context: any): i18n.Node {\n    const children = html.visitAll(this, el.children);\n    const attrs: {[k: string]: string} = {};\n    el.attrs.forEach(attr => {\n      // Do not visit the attributes, translatable ones are top-level ASTs\n      attrs[attr.name] = attr.value;\n    });\n\n    const isVoid: boolean = getHtmlTagDefinition(el.name).isVoid;\n    const startPhName =\n        this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n    this._placeholderToContent[startPhName] = el.sourceSpan !.toString();\n\n    let closePhName = '';\n\n    if (!isVoid) {\n      closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n      this._placeholderToContent[closePhName] = `</${el.name}>`;\n    }\n\n    return new i18n.TagPlaceholder(\n        el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan !);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n  }\n\n  visitText(text: html.Text, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(text.value, text.sourceSpan !);\n  }\n\n  visitComment(comment: html.Comment, context: any): i18n.Node|null { return null; }\n\n  visitExpansion(icu: html.Expansion, context: any): i18n.Node {\n    this._icuDepth++;\n    const i18nIcuCases: {[k: string]: i18n.Node} = {};\n    const i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n    icu.cases.forEach((caze): void => {\n      i18nIcuCases[caze.value] = new i18n.Container(\n          caze.expression.map((node) => node.visit(this, {})), caze.expSourceSpan);\n    });\n    this._icuDepth--;\n\n    if (this._isIcu || this._icuDepth > 0) {\n      // Returns an ICU node when:\n      // - the message (vs a part of the message) is an ICU message, or\n      // - the ICU message is nested.\n      const expPh = this._placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n      i18nIcu.expressionPlaceholder = expPh;\n      this._placeholderToContent[expPh] = icu.switchValue;\n\n      return i18nIcu;\n    }\n\n    // Else returns a placeholder\n    // ICU placeholders should not be replaced with their original content but with the their\n    // translations. We need to create a new visitor (they are not re-entrant) to compute the\n    // message id.\n    // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n    const phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n    const visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n    this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\n    return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n  }\n\n  visitExpansionCase(icuCase: html.ExpansionCase, context: any): i18n.Node {\n    throw new Error('Unreachable code');\n  }\n\n  private _visitTextWithInterpolation(text: string, sourceSpan: ParseSourceSpan): i18n.Node {\n    const splitInterpolation = this._expressionParser.splitInterpolation(\n        text, sourceSpan.start.toString(), this._interpolationConfig);\n\n    if (!splitInterpolation) {\n      // No expression, return a single text\n      return new i18n.Text(text, sourceSpan);\n    }\n\n    // Return a group of text + expressions\n    const nodes: i18n.Node[] = [];\n    const container = new i18n.Container(nodes, sourceSpan);\n    const {start: sDelimiter, end: eDelimiter} = this._interpolationConfig;\n\n    for (let i = 0; i < splitInterpolation.strings.length - 1; i++) {\n      const expression = splitInterpolation.expressions[i];\n      const baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n      const phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n\n      if (splitInterpolation.strings[i].length) {\n        // No need to add empty strings\n        nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));\n      }\n\n      nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));\n      this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n    }\n\n    // The last index contains no expression\n    const lastStringIdx = splitInterpolation.strings.length - 1;\n    if (splitInterpolation.strings[lastStringIdx].length) {\n      nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));\n    }\n    return container;\n  }\n}\n\nconst _CUSTOM_PH_EXP =\n    /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\n\nfunction _extractPlaceholderName(input: string): string {\n  return input.split(_CUSTOM_PH_EXP)[2];\n}\n"],"sourceRoot":""}