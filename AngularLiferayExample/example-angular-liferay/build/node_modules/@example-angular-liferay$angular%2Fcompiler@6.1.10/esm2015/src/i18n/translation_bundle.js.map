{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/translation_bundle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MissingTranslationStrategy} from '../core';\nimport * as html from '../ml_parser/ast';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {Console} from '../util';\n\nimport * as i18n from './i18n_ast';\nimport {I18nError} from './parse_util';\nimport {PlaceholderMapper, Serializer} from './serializers/serializer';\nimport {escapeXml} from './serializers/xml_helper';\n\n\n/**\n * A container for translated messages\n */\nexport class TranslationBundle {\n  private _i18nToHtml: I18nToHtmlVisitor;\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {}, locale: string|null,\n      public digest: (m: i18n.Message) => string,\n      public mapperFactory?: (m: i18n.Message) => PlaceholderMapper,\n      missingTranslationStrategy: MissingTranslationStrategy = MissingTranslationStrategy.Warning,\n      console?: Console) {\n    this._i18nToHtml = new I18nToHtmlVisitor(\n        _i18nNodesByMsgId, locale, digest, mapperFactory !, missingTranslationStrategy, console);\n  }\n\n  // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n  static load(\n      content: string, url: string, serializer: Serializer,\n      missingTranslationStrategy: MissingTranslationStrategy,\n      console?: Console): TranslationBundle {\n    const {locale, i18nNodesByMsgId} = serializer.load(content, url);\n    const digestFn = (m: i18n.Message) => serializer.digest(m);\n    const mapperFactory = (m: i18n.Message) => serializer.createNameMapper(m) !;\n    return new TranslationBundle(\n        i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n  }\n\n  // Returns the translation as HTML nodes from the given source message.\n  get(srcMsg: i18n.Message): html.Node[] {\n    const html = this._i18nToHtml.convert(srcMsg);\n\n    if (html.errors.length) {\n      throw new Error(html.errors.join('\\n'));\n    }\n\n    return html.nodes;\n  }\n\n  has(srcMsg: i18n.Message): boolean { return this.digest(srcMsg) in this._i18nNodesByMsgId; }\n}\n\nclass I18nToHtmlVisitor implements i18n.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _srcMsg !: i18n.Message;\n  private _contextStack: {msg: i18n.Message, mapper: (name: string) => string}[] = [];\n  private _errors: I18nError[] = [];\n  // TODO(issue/24571): remove '!'.\n  private _mapper !: (name: string) => string;\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {}, private _locale: string|null,\n      private _digest: (m: i18n.Message) => string,\n      private _mapperFactory: (m: i18n.Message) => PlaceholderMapper,\n      private _missingTranslationStrategy: MissingTranslationStrategy, private _console?: Console) {\n  }\n\n  convert(srcMsg: i18n.Message): {nodes: html.Node[], errors: I18nError[]} {\n    this._contextStack.length = 0;\n    this._errors.length = 0;\n\n    // i18n to text\n    const text = this._convertToText(srcMsg);\n\n    // text to html\n    const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n    const html = new HtmlParser().parse(text, url, true);\n\n    return {\n      nodes: html.rootNodes,\n      errors: [...this._errors, ...html.errors],\n    };\n  }\n\n  visitText(text: i18n.Text, context?: any): string {\n    // `convert()` uses an `HtmlParser` to return `html.Node`s\n    // we should then make sure that any special characters are escaped\n    return escapeXml(text.value);\n  }\n\n  visitContainer(container: i18n.Container, context?: any): any {\n    return container.children.map(n => n.visit(this)).join('');\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): any {\n    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n\n    // TODO(vicb): Once all format switch to using expression placeholders\n    // we should throw when the placeholder is not in the source message\n    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n        this._srcMsg.placeholders[icu.expression] :\n        icu.expression;\n\n    return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): string {\n    const phName = this._mapper(ph.name);\n    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n      return this._srcMsg.placeholders[phName];\n    }\n\n    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n      return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n    }\n\n    this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n    return '';\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): string {\n    const tag = `${ph.tag}`;\n    const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n    if (ph.isVoid) {\n      return `<${tag} ${attrs}/>`;\n    }\n    const children = ph.children.map((c: i18n.Node) => c.visit(this)).join('');\n    return `<${tag} ${attrs}>${children}</${tag}>`;\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): string {\n    // An ICU placeholder references the source message to be serialized\n    return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n  }\n\n  /**\n   * Convert a source message to a translated text string:\n   * - text nodes are replaced with their translation,\n   * - placeholders are replaced with their content,\n   * - ICU nodes are converted to ICU expressions.\n   */\n  private _convertToText(srcMsg: i18n.Message): string {\n    const id = this._digest(srcMsg);\n    const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n    let nodes: i18n.Node[];\n\n    this._contextStack.push({msg: this._srcMsg, mapper: this._mapper});\n    this._srcMsg = srcMsg;\n\n    if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n      // When there is a translation use its nodes as the source\n      // And create a mapper to convert serialized placeholder names to internal names\n      nodes = this._i18nNodesByMsgId[id];\n      this._mapper = (name: string) => mapper ? mapper.toInternalName(name) ! : name;\n    } else {\n      // When no translation has been found\n      // - report an error / a warning / nothing,\n      // - use the nodes from the original message\n      // - placeholders are already internal and need no mapper\n      if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n      } else if (\n          this._console &&\n          this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n      }\n      nodes = srcMsg.nodes;\n      this._mapper = (name: string) => name;\n    }\n    const text = nodes.map(node => node.visit(this)).join('');\n    const context = this._contextStack.pop() !;\n    this._srcMsg = context.msg;\n    this._mapper = context.mapper;\n    return text;\n  }\n\n  private _addError(el: i18n.Node, msg: string) {\n    this._errors.push(new I18nError(el.sourceSpan, msg));\n  }\n}\n"],"sourceRoot":""}