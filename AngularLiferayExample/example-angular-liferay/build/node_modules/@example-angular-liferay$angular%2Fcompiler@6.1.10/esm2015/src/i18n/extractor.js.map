{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/extractor.ts"],"names":[],"mappings":";;;;;;;;;AASA;;;AAGA,aAAQ,2BAAR,QAA0C,iBAA1C;AACA,aAAQ,oBAAR,QAAmC,yBAAnC;AACA,aAAQ,eAAR,QAA8B,yBAA9B;AACA,aAAQ,iBAAR,QAAgC,sBAAhC;AACA,aAAQ,oBAAR,QAA6D,+BAA7D;AACA,aAAQ,kBAAR,QAAyD,yBAAzD;AAEA,aAAQ,cAAR,QAA6B,WAA7B;AACA,aAAQ,iBAAR,QAAgC,SAAhC;AACA,aAAQ,mBAAR,QAAkC,yBAAlC;AACA,aAAQ,iBAAR,QAAgC,uBAAhC;AACA,aAAQ,uBAAR,QAAsC,sBAAtC;AACA,aAAQ,UAAR,QAAyB,0BAAzB;AACA,aAAQ,mBAAR,QAAkC,mCAAlC;AACA,aAAQ,gBAAR,QAA+B,uBAA/B;AAEA,aAAQ,YAAR,QAA2B,kBAA3B;AACA,aAAQ,wBAAR,QAAuC,uCAAvC;AAGA,aAAQ,aAAR,QAA4B,kBAA5B;AAoBA,WAAM,MAAA,SAAA,CAAA;AACJ,oBACW,IADX,EACwC,oBADxC,EAEY,aAFZ,EAEkD,gBAFlD,EAE2F;AADhF,iBAAA,IAAA,GAAA,IAAA;AAA6B,iBAAA,oBAAA,GAAA,oBAAA;AAC5B,iBAAA,aAAA,GAAA,aAAA;AAAsC,iBAAA,gBAAA,GAAA,gBAAA;AAA6C;AAE/F,gBAAQ,SAAR,EAA2B;AACzB,kBAAM,EAAC,KAAD,EAAQ,SAAR,KAAqB,4BACvB,SADuB,EACZ,KAAK,IADO,EACD,KAAK,oBADJ,EAC0B,KAAK,gBAD/B,CAA3B;AAEA,mBAAO,QACF,GADE,CACE,UAAU,GAAV,CACD,YAAY,KAAK,gBAAL,CAAsB,oCAAtB,CACR,SAAS,IAAT,CAAc,SADN,EACiB,KADjB,CADX,CADF,EAIF,IAJE,CAIG,MAAK;AACT,sBAAM,SAAuB,EAA7B;AAEA,sBAAM,OAAN,CAAc,QAAO;AACnB,0BAAM,YAAwC,EAA9C;AACA,yBAAK,UAAL,CAAgB,OAAhB,CAAwB,iBAAgB;AACtC,8BAAM,UAAU,KAAK,gBAAL,CAAsB,oBAAtB,CAA2C,aAA3C,CAAhB;AACA,4BAAI,WAAW,QAAQ,WAAvB,EAAoC;AAClC,sCAAU,IAAV,CAAe,OAAf;AACD;AACF,qBALD;AAMA,8BAAU,OAAV,CAAkB,YAAW;AAC3B,8BAAM,OAAO,SAAS,QAAT,CAAoB,QAAjC;AACA;AACA;AACA;AACA,8BAAM,cAAc,SAAS,QAAT,CAAoB,WAAxC;AACA,8BAAM,sBACF,oBAAoB,SAApB,CAA8B,SAAS,QAAT,CAAoB,aAAlD,CADJ;AAEA,+BAAO,IAAP,CAAY,GAAG,KAAK,aAAL,CAAmB,kBAAnB,CACX,IADW,EACL,WADK,EACQ,mBADR,CAAf;AAED,qBAVD;AAWD,iBAnBD;AAqBA,oBAAI,OAAO,MAAX,EAAmB;AACjB,0BAAM,IAAI,KAAJ,CAAU,OAAO,GAAP,CAAW,KAAK,EAAE,QAAF,EAAhB,EAA8B,IAA9B,CAAmC,IAAnC,CAAV,CAAN;AACD;AAED,uBAAO,KAAK,aAAZ;AACD,aAjCE,CAAP;AAkCD;AAED,eAAO,MAAP,CAAc,IAAd,EAAmC,MAAnC,EAAsD;AAEpD,kBAAM,aAAa,IAAI,UAAJ,EAAnB;AAEA,kBAAM,cAAc,qBAAqB,IAArB,CAApB;AACA,kBAAM,cAAc,IAAI,iBAAJ,EAApB;AACA,kBAAM,kBAAkB,IAAI,kBAAJ,CAAuB,IAAvB,EAA6B,WAA7B,CAAxB;AACA,kBAAM,uBAAuB,IAAI,oBAAJ,CAAyB,IAAzB,EAA+B,WAA/B,EAA4C,eAA5C,CAA7B;AACA,kBAAM,kBAAkB,IAAI,eAAJ,CAAoB,eAApB,EAAqC,oBAArC,CAAxB;AAEA,kBAAM,SACF,IAAI,cAAJ,CAAmB,EAAC,sBAAsB,kBAAkB,QAAzC,EAAmD,QAAQ,KAA3D,EAAnB,CADJ;AAGA,kBAAM,aAAa,IAAI,mBAAJ,CACf,EAAC,KAAM,GAAD,IAAiB,KAAK,YAAL,CAAkB,GAAlB,CAAvB,EADe,EACiC,WADjC,EAC8C,UAD9C,EAC0D,MAD1D,CAAnB;AAEA,kBAAM,wBAAwB,IAAI,wBAAJ,EAA9B;AACA,kBAAM,WAAW,IAAI,uBAAJ,CACb,MADa,EACL,UADK,EACO,IAAI,gBAAJ,CAAqB,eAArB,CADP,EAEb,IAAI,iBAAJ,CAAsB,eAAtB,CAFa,EAE2B,IAAI,YAAJ,CAAiB,eAAjB,CAF3B,EAE8D,eAF9D,EAGb,qBAHa,EAGU,UAHV,EAGsB,OAHtB,EAG+B,WAH/B,EAG4C,eAH5C,CAAjB;AAKA;AACA,kBAAM,gBAAgB,IAAI,aAAJ,CAAkB,UAAlB,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,MAAtC,CAAtB;AAEA,kBAAM,YAAY,IAAI,SAAJ,CAAc,IAAd,EAAoB,oBAApB,EAA0C,aAA1C,EAAyD,QAAzD,CAAlB;AACA,mBAAO,EAAC,SAAD,EAAY,eAAZ,EAAP;AACD;AAtEG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\nimport {analyzeAndValidateNgModules} from '../aot/compiler';\nimport {createAotUrlResolver} from '../aot/compiler_factory';\nimport {StaticReflector} from '../aot/static_reflector';\nimport {StaticSymbolCache} from '../aot/static_symbol';\nimport {StaticSymbolResolver, StaticSymbolResolverHost} from '../aot/static_symbol_resolver';\nimport {AotSummaryResolver, AotSummaryResolverHost} from '../aot/summary_resolver';\nimport {CompileDirectiveMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {ViewEncapsulation} from '../core';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {ParseError} from '../parse_util';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {syntaxError} from '../util';\n\nimport {MessageBundle} from './message_bundle';\n\n\n\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface ExtractorHost extends StaticSymbolResolverHost, AotSummaryResolverHost {\n  /**\n   * Converts a path that refers to a resource into an absolute filePath\n   * that can be lateron used for loading the resource via `loadResource.\n   */\n  resourceNameToFileName(path: string, containingFile: string): string|null;\n  /**\n   * Loads a resource (e.g. html / css)\n   */\n  loadResource(path: string): Promise<string>|string;\n}\n\nexport class Extractor {\n  constructor(\n      public host: ExtractorHost, private staticSymbolResolver: StaticSymbolResolver,\n      private messageBundle: MessageBundle, private metadataResolver: CompileMetadataResolver) {}\n\n  extract(rootFiles: string[]): Promise<MessageBundle> {\n    const {files, ngModules} = analyzeAndValidateNgModules(\n        rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver);\n    return Promise\n        .all(ngModules.map(\n            ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, false)))\n        .then(() => {\n          const errors: ParseError[] = [];\n\n          files.forEach(file => {\n            const compMetas: CompileDirectiveMetadata[] = [];\n            file.directives.forEach(directiveType => {\n              const dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n              if (dirMeta && dirMeta.isComponent) {\n                compMetas.push(dirMeta);\n              }\n            });\n            compMetas.forEach(compMeta => {\n              const html = compMeta.template !.template !;\n              // Template URL points to either an HTML or TS file depending on\n              // whether the file is used with `templateUrl:` or `template:`,\n              // respectively.\n              const templateUrl = compMeta.template !.templateUrl !;\n              const interpolationConfig =\n                  InterpolationConfig.fromArray(compMeta.template !.interpolation);\n              errors.push(...this.messageBundle.updateFromTemplate(\n                  html, templateUrl, interpolationConfig) !);\n            });\n          });\n\n          if (errors.length) {\n            throw new Error(errors.map(e => e.toString()).join('\\n'));\n          }\n\n          return this.messageBundle;\n        });\n  }\n\n  static create(host: ExtractorHost, locale: string|null):\n      {extractor: Extractor, staticReflector: StaticReflector} {\n    const htmlParser = new HtmlParser();\n\n    const urlResolver = createAotUrlResolver(host);\n    const symbolCache = new StaticSymbolCache();\n    const summaryResolver = new AotSummaryResolver(host, symbolCache);\n    const staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n    const staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n\n    const config =\n        new CompilerConfig({defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false});\n\n    const normalizer = new DirectiveNormalizer(\n        {get: (url: string) => host.loadResource(url)}, urlResolver, htmlParser, config);\n    const elementSchemaRegistry = new DomElementSchemaRegistry();\n    const resolver = new CompileMetadataResolver(\n        config, htmlParser, new NgModuleResolver(staticReflector),\n        new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver,\n        elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);\n\n    // TODO(vicb): implicit tags & attributes\n    const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n\n    const extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n    return {extractor, staticReflector};\n  }\n}\n"],"sourceRoot":""}