{"version":3,"sources":["../../../../../../packages/compiler/src/metadata_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol, StaticSymbolCache} from './aot/static_symbol';\nimport {ngfactoryFilePath} from './aot/util';\nimport {assertArrayOfStrings, assertInterpolationSymbols} from './assertions';\nimport * as cpl from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {CompilerConfig} from './config';\nimport {ChangeDetectionStrategy, Component, Directive, Injectable, ModuleWithProviders, Provider, Query, SchemaMetadata, Type, ViewEncapsulation, createAttribute, createComponent, createHost, createInject, createInjectable, createInjectionToken, createNgModule, createOptional, createSelf, createSkipSelf} from './core';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {DirectiveResolver, findLast} from './directive_resolver';\nimport {Identifiers} from './identifiers';\nimport {getAllLifecycleHooks} from './lifecycle_reflector';\nimport {HtmlParser} from './ml_parser/html_parser';\nimport {NgModuleResolver} from './ng_module_resolver';\nimport {PipeResolver} from './pipe_resolver';\nimport {ElementSchemaRegistry} from './schema/element_schema_registry';\nimport {CssSelector} from './selector';\nimport {SummaryResolver} from './summary_resolver';\nimport {Console, SyncAsync, ValueTransformer, isPromise, noUndefined, resolveForwardRef, stringify, syntaxError, visitValue} from './util';\n\nexport type ErrorCollector = (error: any, type?: any) => void;\n\nexport const ERROR_COMPONENT_TYPE = 'ngComponentType';\n\n// Design notes:\n// - don't lazily create metadata:\n//   For some metadata, we need to do async work sometimes,\n//   so the user has to kick off this loading.\n//   But we want to report errors even when the async work is\n//   not required to check that the user would have been able\n//   to wait correctly.\nexport class CompileMetadataResolver {\n  private _nonNormalizedDirectiveCache =\n      new Map<Type, {annotation: Directive, metadata: cpl.CompileDirectiveMetadata}>();\n  private _directiveCache = new Map<Type, cpl.CompileDirectiveMetadata>();\n  private _summaryCache = new Map<Type, cpl.CompileTypeSummary|null>();\n  private _pipeCache = new Map<Type, cpl.CompilePipeMetadata>();\n  private _ngModuleCache = new Map<Type, cpl.CompileNgModuleMetadata>();\n  private _ngModuleOfTypes = new Map<Type, Type>();\n  private _shallowModuleCache = new Map<Type, cpl.CompileShallowModuleMetadata>();\n\n  constructor(\n      private _config: CompilerConfig, private _htmlParser: HtmlParser,\n      private _ngModuleResolver: NgModuleResolver, private _directiveResolver: DirectiveResolver,\n      private _pipeResolver: PipeResolver, private _summaryResolver: SummaryResolver<any>,\n      private _schemaRegistry: ElementSchemaRegistry,\n      private _directiveNormalizer: DirectiveNormalizer, private _console: Console,\n      private _staticSymbolCache: StaticSymbolCache, private _reflector: CompileReflector,\n      private _errorCollector?: ErrorCollector) {}\n\n  getReflector(): CompileReflector { return this._reflector; }\n\n  clearCacheFor(type: Type) {\n    const dirMeta = this._directiveCache.get(type);\n    this._directiveCache.delete(type);\n    this._nonNormalizedDirectiveCache.delete(type);\n    this._summaryCache.delete(type);\n    this._pipeCache.delete(type);\n    this._ngModuleOfTypes.delete(type);\n    // Clear all of the NgModule as they contain transitive information!\n    this._ngModuleCache.clear();\n    if (dirMeta) {\n      this._directiveNormalizer.clearCacheFor(dirMeta);\n    }\n  }\n\n  clearCache(): void {\n    this._directiveCache.clear();\n    this._nonNormalizedDirectiveCache.clear();\n    this._summaryCache.clear();\n    this._pipeCache.clear();\n    this._ngModuleCache.clear();\n    this._ngModuleOfTypes.clear();\n    this._directiveNormalizer.clearCache();\n  }\n\n  private _createProxyClass(baseType: any, name: string): cpl.ProxyClass {\n    let delegate: any = null;\n    const proxyClass: cpl.ProxyClass = <any>function() {\n      if (!delegate) {\n        throw new Error(\n            `Illegal state: Class ${name} for type ${stringify(baseType)} is not compiled yet!`);\n      }\n      return delegate.apply(this, arguments);\n    };\n    proxyClass.setDelegate = (d) => {\n      delegate = d;\n      (<any>proxyClass).prototype = d.prototype;\n    };\n    // Make stringify work correctly\n    (<any>proxyClass).overriddenName = name;\n    return proxyClass;\n  }\n\n  private getGeneratedClass(dirType: any, name: string): StaticSymbol|cpl.ProxyClass {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\n    } else {\n      return this._createProxyClass(dirType, name);\n    }\n  }\n\n  private getComponentViewClass(dirType: any): StaticSymbol|cpl.ProxyClass {\n    return this.getGeneratedClass(dirType, cpl.viewClassName(dirType, 0));\n  }\n\n  getHostComponentViewClass(dirType: any): StaticSymbol|cpl.ProxyClass {\n    return this.getGeneratedClass(dirType, cpl.hostViewClassName(dirType));\n  }\n\n  getHostComponentType(dirType: any): StaticSymbol|Type {\n    const name = `${cpl.identifierName({reference: dirType})}_Host`;\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(dirType.filePath, name);\n    } else {\n      const HostClass = <any>function HostClass() {};\n      HostClass.overriddenName = name;\n\n      return HostClass;\n    }\n  }\n\n  private getRendererType(dirType: any): StaticSymbol|object {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(\n          ngfactoryFilePath(dirType.filePath), cpl.rendererTypeName(dirType));\n    } else {\n      // returning an object as proxy,\n      // that we fill later during runtime compilation.\n      return <any>{};\n    }\n  }\n\n  private getComponentFactory(\n      selector: string, dirType: any, inputs: {[key: string]: string}|null,\n      outputs: {[key: string]: string}): StaticSymbol|object {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(\n          ngfactoryFilePath(dirType.filePath), cpl.componentFactoryName(dirType));\n    } else {\n      const hostView = this.getHostComponentViewClass(dirType);\n      // Note: ngContentSelectors will be filled later once the template is\n      // loaded.\n      const createComponentFactory =\n          this._reflector.resolveExternalReference(Identifiers.createComponentFactory);\n      return createComponentFactory(selector, dirType, <any>hostView, inputs, outputs, []);\n    }\n  }\n\n  private initComponentFactory(factory: StaticSymbol|object, ngContentSelectors: string[]) {\n    if (!(factory instanceof StaticSymbol)) {\n      (factory as any).ngContentSelectors.push(...ngContentSelectors);\n    }\n  }\n\n  private _loadSummary(type: any, kind: cpl.CompileSummaryKind): cpl.CompileTypeSummary|null {\n    let typeSummary = this._summaryCache.get(type);\n    if (!typeSummary) {\n      const summary = this._summaryResolver.resolveSummary(type);\n      typeSummary = summary ? summary.type : null;\n      this._summaryCache.set(type, typeSummary || null);\n    }\n    return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n  }\n\n  getHostComponentMetadata(\n      compMeta: cpl.CompileDirectiveMetadata,\n      hostViewType?: StaticSymbol|cpl.ProxyClass): cpl.CompileDirectiveMetadata {\n    const hostType = this.getHostComponentType(compMeta.type.reference);\n    if (!hostViewType) {\n      hostViewType = this.getHostComponentViewClass(hostType);\n    }\n    // Note: ! is ok here as this method should only be called with normalized directive\n    // metadata, which always fills in the selector.\n    const template = CssSelector.parse(compMeta.selector !)[0].getMatchingElementTemplate();\n    const templateUrl = '';\n    const htmlAst = this._htmlParser.parse(template, templateUrl);\n    return cpl.CompileDirectiveMetadata.create({\n      isHost: true,\n      type: {reference: hostType, diDeps: [], lifecycleHooks: []},\n      template: new cpl.CompileTemplateMetadata({\n        encapsulation: ViewEncapsulation.None,\n        template,\n        templateUrl,\n        htmlAst,\n        styles: [],\n        styleUrls: [],\n        ngContentSelectors: [],\n        animations: [],\n        isInline: true,\n        externalStylesheets: [],\n        interpolation: null,\n        preserveWhitespaces: false,\n      }),\n      exportAs: null,\n      changeDetection: ChangeDetectionStrategy.Default,\n      inputs: [],\n      outputs: [],\n      host: {},\n      isComponent: true,\n      selector: '*',\n      providers: [],\n      viewProviders: [],\n      queries: [],\n      guards: {},\n      viewQueries: [],\n      componentViewType: hostViewType,\n      rendererType:\n          {id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {}} as object,\n      entryComponents: [],\n      componentFactory: null\n    });\n  }\n\n  loadDirectiveMetadata(ngModuleType: any, directiveType: any, isSync: boolean): SyncAsync<null> {\n    if (this._directiveCache.has(directiveType)) {\n      return null;\n    }\n    directiveType = resolveForwardRef(directiveType);\n    const {annotation, metadata} = this.getNonNormalizedDirectiveMetadata(directiveType) !;\n\n    const createDirectiveMetadata = (templateMetadata: cpl.CompileTemplateMetadata | null) => {\n      const normalizedDirMeta = new cpl.CompileDirectiveMetadata({\n        isHost: false,\n        type: metadata.type,\n        isComponent: metadata.isComponent,\n        selector: metadata.selector,\n        exportAs: metadata.exportAs,\n        changeDetection: metadata.changeDetection,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        hostListeners: metadata.hostListeners,\n        hostProperties: metadata.hostProperties,\n        hostAttributes: metadata.hostAttributes,\n        providers: metadata.providers,\n        viewProviders: metadata.viewProviders,\n        queries: metadata.queries,\n        guards: metadata.guards,\n        viewQueries: metadata.viewQueries,\n        entryComponents: metadata.entryComponents,\n        componentViewType: metadata.componentViewType,\n        rendererType: metadata.rendererType,\n        componentFactory: metadata.componentFactory,\n        template: templateMetadata\n      });\n      if (templateMetadata) {\n        this.initComponentFactory(metadata.componentFactory !, templateMetadata.ngContentSelectors);\n      }\n      this._directiveCache.set(directiveType, normalizedDirMeta);\n      this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n      return null;\n    };\n\n    if (metadata.isComponent) {\n      const template = metadata.template !;\n      const templateMeta = this._directiveNormalizer.normalizeTemplate({\n        ngModuleType,\n        componentType: directiveType,\n        moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n        encapsulation: template.encapsulation,\n        template: template.template,\n        templateUrl: template.templateUrl,\n        styles: template.styles,\n        styleUrls: template.styleUrls,\n        animations: template.animations,\n        interpolation: template.interpolation,\n        preserveWhitespaces: template.preserveWhitespaces\n      });\n      if (isPromise(templateMeta) && isSync) {\n        this._reportError(componentStillLoadingError(directiveType), directiveType);\n        return null;\n      }\n      return SyncAsync.then(templateMeta, createDirectiveMetadata);\n    } else {\n      // directive\n      createDirectiveMetadata(null);\n      return null;\n    }\n  }\n\n  getNonNormalizedDirectiveMetadata(directiveType: any):\n      {annotation: Directive, metadata: cpl.CompileDirectiveMetadata}|null {\n    directiveType = resolveForwardRef(directiveType);\n    if (!directiveType) {\n      return null;\n    }\n    let cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n    const dirMeta = this._directiveResolver.resolve(directiveType, false);\n    if (!dirMeta) {\n      return null;\n    }\n    let nonNormalizedTemplateMetadata: cpl.CompileTemplateMetadata = undefined !;\n\n    if (createComponent.isTypeOf(dirMeta)) {\n      // component\n      const compMeta = dirMeta as Component;\n      assertArrayOfStrings('styles', compMeta.styles);\n      assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n      assertInterpolationSymbols('interpolation', compMeta.interpolation);\n\n      const animations = compMeta.animations;\n\n      nonNormalizedTemplateMetadata = new cpl.CompileTemplateMetadata({\n        encapsulation: noUndefined(compMeta.encapsulation),\n        template: noUndefined(compMeta.template),\n        templateUrl: noUndefined(compMeta.templateUrl),\n        htmlAst: null,\n        styles: compMeta.styles || [],\n        styleUrls: compMeta.styleUrls || [],\n        animations: animations || [],\n        interpolation: noUndefined(compMeta.interpolation),\n        isInline: !!compMeta.template,\n        externalStylesheets: [],\n        ngContentSelectors: [],\n        preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces),\n      });\n    }\n\n    let changeDetectionStrategy: ChangeDetectionStrategy = null !;\n    let viewProviders: cpl.CompileProviderMetadata[] = [];\n    let entryComponentMetadata: cpl.CompileEntryComponentMetadata[] = [];\n    let selector = dirMeta.selector;\n\n    if (createComponent.isTypeOf(dirMeta)) {\n      // Component\n      const compMeta = dirMeta as Component;\n      changeDetectionStrategy = compMeta.changeDetection !;\n      if (compMeta.viewProviders) {\n        viewProviders = this._getProvidersMetadata(\n            compMeta.viewProviders, entryComponentMetadata,\n            `viewProviders for \"${stringifyType(directiveType)}\"`, [], directiveType);\n      }\n      if (compMeta.entryComponents) {\n        entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)\n                                     .map((type) => this._getEntryComponentMetadata(type) !)\n                                     .concat(entryComponentMetadata);\n      }\n      if (!selector) {\n        selector = this._schemaRegistry.getDefaultComponentElementName();\n      }\n    } else {\n      // Directive\n      if (!selector) {\n        this._reportError(\n            syntaxError(\n                `Directive ${stringifyType(directiveType)} has no selector, please add it!`),\n            directiveType);\n        selector = 'error';\n      }\n    }\n\n    let providers: cpl.CompileProviderMetadata[] = [];\n    if (dirMeta.providers != null) {\n      providers = this._getProvidersMetadata(\n          dirMeta.providers, entryComponentMetadata,\n          `providers for \"${stringifyType(directiveType)}\"`, [], directiveType);\n    }\n    let queries: cpl.CompileQueryMetadata[] = [];\n    let viewQueries: cpl.CompileQueryMetadata[] = [];\n    if (dirMeta.queries != null) {\n      queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n      viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n    }\n\n    const metadata = cpl.CompileDirectiveMetadata.create({\n      isHost: false,\n      selector: selector,\n      exportAs: noUndefined(dirMeta.exportAs),\n      isComponent: !!nonNormalizedTemplateMetadata,\n      type: this._getTypeMetadata(directiveType),\n      template: nonNormalizedTemplateMetadata,\n      changeDetection: changeDetectionStrategy,\n      inputs: dirMeta.inputs || [],\n      outputs: dirMeta.outputs || [],\n      host: dirMeta.host || {},\n      providers: providers || [],\n      viewProviders: viewProviders || [],\n      queries: queries || [],\n      guards: dirMeta.guards || {},\n      viewQueries: viewQueries || [],\n      entryComponents: entryComponentMetadata,\n      componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\n                                                         null,\n      rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n      componentFactory: null\n    });\n    if (nonNormalizedTemplateMetadata) {\n      metadata.componentFactory =\n          this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n    }\n    cacheEntry = {metadata, annotation: dirMeta};\n    this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n    return cacheEntry;\n  }\n\n  /**\n   * Gets the metadata for the given directive.\n   * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n   */\n  getDirectiveMetadata(directiveType: any): cpl.CompileDirectiveMetadata {\n    const dirMeta = this._directiveCache.get(directiveType) !;\n    if (!dirMeta) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ${stringifyType(directiveType)}.`),\n          directiveType);\n    }\n    return dirMeta;\n  }\n\n  getDirectiveSummary(dirType: any): cpl.CompileDirectiveSummary {\n    const dirSummary =\n        <cpl.CompileDirectiveSummary>this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n    if (!dirSummary) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: Could not load the summary for directive ${stringifyType(dirType)}.`),\n          dirType);\n    }\n    return dirSummary;\n  }\n\n  isDirective(type: any) {\n    return !!this._loadSummary(type, cpl.CompileSummaryKind.Directive) ||\n        this._directiveResolver.isDirective(type);\n  }\n\n  isPipe(type: any) {\n    return !!this._loadSummary(type, cpl.CompileSummaryKind.Pipe) ||\n        this._pipeResolver.isPipe(type);\n  }\n\n  isNgModule(type: any) {\n    return !!this._loadSummary(type, cpl.CompileSummaryKind.NgModule) ||\n        this._ngModuleResolver.isNgModule(type);\n  }\n\n  getNgModuleSummary(moduleType: any, alreadyCollecting: Set<any>|null = null):\n      cpl.CompileNgModuleSummary|null {\n    let moduleSummary: cpl.CompileNgModuleSummary|null =\n        <cpl.CompileNgModuleSummary>this._loadSummary(moduleType, cpl.CompileSummaryKind.NgModule);\n    if (!moduleSummary) {\n      const moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n      moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n      if (moduleSummary) {\n        this._summaryCache.set(moduleType, moduleSummary);\n      }\n    }\n    return moduleSummary;\n  }\n\n  /**\n   * Loads the declared directives and pipes of an NgModule.\n   */\n  loadNgModuleDirectiveAndPipeMetadata(moduleType: any, isSync: boolean, throwIfNotFound = true):\n      Promise<any> {\n    const ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n    const loading: Promise<any>[] = [];\n    if (ngModule) {\n      ngModule.declaredDirectives.forEach((id) => {\n        const promise = this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n        if (promise) {\n          loading.push(promise);\n        }\n      });\n      ngModule.declaredPipes.forEach((id) => this._loadPipeMetadata(id.reference));\n    }\n    return Promise.all(loading);\n  }\n\n  getShallowModuleMetadata(moduleType: any): cpl.CompileShallowModuleMetadata|null {\n    let compileMeta = this._shallowModuleCache.get(moduleType);\n    if (compileMeta) {\n      return compileMeta;\n    }\n\n    const ngModuleMeta =\n        findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);\n\n    compileMeta = {\n      type: this._getTypeMetadata(moduleType),\n      rawExports: ngModuleMeta.exports,\n      rawImports: ngModuleMeta.imports,\n      rawProviders: ngModuleMeta.providers,\n    };\n\n    this._shallowModuleCache.set(moduleType, compileMeta);\n    return compileMeta;\n  }\n\n  getNgModuleMetadata(\n      moduleType: any, throwIfNotFound = true,\n      alreadyCollecting: Set<any>|null = null): cpl.CompileNgModuleMetadata|null {\n    moduleType = resolveForwardRef(moduleType);\n    let compileMeta = this._ngModuleCache.get(moduleType);\n    if (compileMeta) {\n      return compileMeta;\n    }\n    const meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n    if (!meta) {\n      return null;\n    }\n    const declaredDirectives: cpl.CompileIdentifierMetadata[] = [];\n    const exportedNonModuleIdentifiers: cpl.CompileIdentifierMetadata[] = [];\n    const declaredPipes: cpl.CompileIdentifierMetadata[] = [];\n    const importedModules: cpl.CompileNgModuleSummary[] = [];\n    const exportedModules: cpl.CompileNgModuleSummary[] = [];\n    const providers: cpl.CompileProviderMetadata[] = [];\n    const entryComponents: cpl.CompileEntryComponentMetadata[] = [];\n    const bootstrapComponents: cpl.CompileIdentifierMetadata[] = [];\n    const schemas: SchemaMetadata[] = [];\n\n    if (meta.imports) {\n      flattenAndDedupeArray(meta.imports).forEach((importedType) => {\n        let importedModuleType: Type = undefined !;\n        if (isValidType(importedType)) {\n          importedModuleType = importedType;\n        } else if (importedType && importedType.ngModule) {\n          const moduleWithProviders: ModuleWithProviders = importedType;\n          importedModuleType = moduleWithProviders.ngModule;\n          if (moduleWithProviders.providers) {\n            providers.push(...this._getProvidersMetadata(\n                moduleWithProviders.providers, entryComponents,\n                `provider for the NgModule '${stringifyType(importedModuleType)}'`, [],\n                importedType));\n          }\n        }\n\n        if (importedModuleType) {\n          if (this._checkSelfImport(moduleType, importedModuleType)) return;\n          if (!alreadyCollecting) alreadyCollecting = new Set();\n          if (alreadyCollecting.has(importedModuleType)) {\n            this._reportError(\n                syntaxError(\n                    `${this._getTypeDescriptor(importedModuleType)} '${stringifyType(importedType)}' is imported recursively by the module '${stringifyType(moduleType)}'.`),\n                moduleType);\n            return;\n          }\n          alreadyCollecting.add(importedModuleType);\n          const importedModuleSummary =\n              this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n          alreadyCollecting.delete(importedModuleType);\n          if (!importedModuleSummary) {\n            this._reportError(\n                syntaxError(\n                    `Unexpected ${this._getTypeDescriptor(importedType)} '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'. Please add a @NgModule annotation.`),\n                moduleType);\n            return;\n          }\n          importedModules.push(importedModuleSummary);\n        } else {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n      });\n    }\n\n    if (meta.exports) {\n      flattenAndDedupeArray(meta.exports).forEach((exportedType) => {\n        if (!isValidType(exportedType)) {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(exportedType)}' exported by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        if (!alreadyCollecting) alreadyCollecting = new Set();\n        if (alreadyCollecting.has(exportedType)) {\n          this._reportError(\n              syntaxError(\n                  `${this._getTypeDescriptor(exportedType)} '${stringify(exportedType)}' is exported recursively by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        alreadyCollecting.add(exportedType);\n        const exportedModuleSummary = this.getNgModuleSummary(exportedType, alreadyCollecting);\n        alreadyCollecting.delete(exportedType);\n        if (exportedModuleSummary) {\n          exportedModules.push(exportedModuleSummary);\n        } else {\n          exportedNonModuleIdentifiers.push(this._getIdentifierMetadata(exportedType));\n        }\n      });\n    }\n\n    // Note: This will be modified later, so we rely on\n    // getting a new instance every time!\n    const transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n    if (meta.declarations) {\n      flattenAndDedupeArray(meta.declarations).forEach((declaredType) => {\n        if (!isValidType(declaredType)) {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        const declaredIdentifier = this._getIdentifierMetadata(declaredType);\n        if (this.isDirective(declaredType)) {\n          transitiveModule.addDirective(declaredIdentifier);\n          declaredDirectives.push(declaredIdentifier);\n          this._addTypeToModule(declaredType, moduleType);\n        } else if (this.isPipe(declaredType)) {\n          transitiveModule.addPipe(declaredIdentifier);\n          transitiveModule.pipes.push(declaredIdentifier);\n          declaredPipes.push(declaredIdentifier);\n          this._addTypeToModule(declaredType, moduleType);\n        } else {\n          this._reportError(\n              syntaxError(\n                  `Unexpected ${this._getTypeDescriptor(declaredType)} '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`),\n              moduleType);\n          return;\n        }\n      });\n    }\n\n    const exportedDirectives: cpl.CompileIdentifierMetadata[] = [];\n    const exportedPipes: cpl.CompileIdentifierMetadata[] = [];\n    exportedNonModuleIdentifiers.forEach((exportedId) => {\n      if (transitiveModule.directivesSet.has(exportedId.reference)) {\n        exportedDirectives.push(exportedId);\n        transitiveModule.addExportedDirective(exportedId);\n      } else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n        exportedPipes.push(exportedId);\n        transitiveModule.addExportedPipe(exportedId);\n      } else {\n        this._reportError(\n            syntaxError(\n                `Can't export ${this._getTypeDescriptor(exportedId.reference)} ${stringifyType(exportedId.reference)} from ${stringifyType(moduleType)} as it was neither declared nor imported!`),\n            moduleType);\n        return;\n      }\n    });\n\n    // The providers of the module have to go last\n    // so that they overwrite any other provider we already added.\n    if (meta.providers) {\n      providers.push(...this._getProvidersMetadata(\n          meta.providers, entryComponents,\n          `provider for the NgModule '${stringifyType(moduleType)}'`, [], moduleType));\n    }\n\n    if (meta.entryComponents) {\n      entryComponents.push(...flattenAndDedupeArray(meta.entryComponents)\n                               .map(type => this._getEntryComponentMetadata(type) !));\n    }\n\n    if (meta.bootstrap) {\n      flattenAndDedupeArray(meta.bootstrap).forEach(type => {\n        if (!isValidType(type)) {\n          this._reportError(\n              syntaxError(\n                  `Unexpected value '${stringifyType(type)}' used in the bootstrap property of module '${stringifyType(moduleType)}'`),\n              moduleType);\n          return;\n        }\n        bootstrapComponents.push(this._getIdentifierMetadata(type));\n      });\n    }\n\n    entryComponents.push(\n        ...bootstrapComponents.map(type => this._getEntryComponentMetadata(type.reference) !));\n\n    if (meta.schemas) {\n      schemas.push(...flattenAndDedupeArray(meta.schemas));\n    }\n\n    compileMeta = new cpl.CompileNgModuleMetadata({\n      type: this._getTypeMetadata(moduleType),\n      providers,\n      entryComponents,\n      bootstrapComponents,\n      schemas,\n      declaredDirectives,\n      exportedDirectives,\n      declaredPipes,\n      exportedPipes,\n      importedModules,\n      exportedModules,\n      transitiveModule,\n      id: meta.id || null,\n    });\n\n    entryComponents.forEach((id) => transitiveModule.addEntryComponent(id));\n    providers.forEach((provider) => transitiveModule.addProvider(provider, compileMeta !.type));\n    transitiveModule.addModule(compileMeta.type);\n    this._ngModuleCache.set(moduleType, compileMeta);\n    return compileMeta;\n  }\n\n  private _checkSelfImport(moduleType: Type, importedModuleType: Type): boolean {\n    if (moduleType === importedModuleType) {\n      this._reportError(\n          syntaxError(`'${stringifyType(moduleType)}' module can't import itself`), moduleType);\n      return true;\n    }\n    return false;\n  }\n\n  private _getTypeDescriptor(type: Type): string {\n    if (isValidType(type)) {\n      if (this.isDirective(type)) {\n        return 'directive';\n      }\n\n      if (this.isPipe(type)) {\n        return 'pipe';\n      }\n\n      if (this.isNgModule(type)) {\n        return 'module';\n      }\n    }\n\n    if ((type as any).provide) {\n      return 'provider';\n    }\n\n    return 'value';\n  }\n\n\n  private _addTypeToModule(type: Type, moduleType: Type) {\n    const oldModule = this._ngModuleOfTypes.get(type);\n    if (oldModule && oldModule !== moduleType) {\n      this._reportError(\n          syntaxError(\n              `Type ${stringifyType(type)} is part of the declarations of 2 modules: ${stringifyType(oldModule)} and ${stringifyType(moduleType)}! ` +\n              `Please consider moving ${stringifyType(type)} to a higher module that imports ${stringifyType(oldModule)} and ${stringifyType(moduleType)}. ` +\n              `You can also create a new NgModule that exports and includes ${stringifyType(type)} then import that NgModule in ${stringifyType(oldModule)} and ${stringifyType(moduleType)}.`),\n          moduleType);\n      return;\n    }\n    this._ngModuleOfTypes.set(type, moduleType);\n  }\n\n  private _getTransitiveNgModuleMetadata(\n      importedModules: cpl.CompileNgModuleSummary[],\n      exportedModules: cpl.CompileNgModuleSummary[]): cpl.TransitiveCompileNgModuleMetadata {\n    // collect `providers` / `entryComponents` from all imported and all exported modules\n    const result = new cpl.TransitiveCompileNgModuleMetadata();\n    const modulesByToken = new Map<any, Set<any>>();\n    importedModules.concat(exportedModules).forEach((modSummary) => {\n      modSummary.modules.forEach((mod) => result.addModule(mod));\n      modSummary.entryComponents.forEach((comp) => result.addEntryComponent(comp));\n      const addedTokens = new Set<any>();\n      modSummary.providers.forEach((entry) => {\n        const tokenRef = cpl.tokenReference(entry.provider.token);\n        let prevModules = modulesByToken.get(tokenRef);\n        if (!prevModules) {\n          prevModules = new Set<any>();\n          modulesByToken.set(tokenRef, prevModules);\n        }\n        const moduleRef = entry.module.reference;\n        // Note: the providers of one module may still contain multiple providers\n        // per token (e.g. for multi providers), and we need to preserve these.\n        if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n          prevModules.add(moduleRef);\n          addedTokens.add(tokenRef);\n          result.addProvider(entry.provider, entry.module);\n        }\n      });\n    });\n    exportedModules.forEach((modSummary) => {\n      modSummary.exportedDirectives.forEach((id) => result.addExportedDirective(id));\n      modSummary.exportedPipes.forEach((id) => result.addExportedPipe(id));\n    });\n    importedModules.forEach((modSummary) => {\n      modSummary.exportedDirectives.forEach((id) => result.addDirective(id));\n      modSummary.exportedPipes.forEach((id) => result.addPipe(id));\n    });\n    return result;\n  }\n\n  private _getIdentifierMetadata(type: Type): cpl.CompileIdentifierMetadata {\n    type = resolveForwardRef(type);\n    return {reference: type};\n  }\n\n  isInjectable(type: any): boolean {\n    const annotations = this._reflector.tryAnnotations(type);\n    return annotations.some(ann => createInjectable.isTypeOf(ann));\n  }\n\n  getInjectableSummary(type: any): cpl.CompileTypeSummary {\n    return {\n      summaryKind: cpl.CompileSummaryKind.Injectable,\n      type: this._getTypeMetadata(type, null, false)\n    };\n  }\n\n  getInjectableMetadata(\n      type: any, dependencies: any[]|null = null,\n      throwOnUnknownDeps: boolean = true): cpl.CompileInjectableMetadata|null {\n    const typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n    const typeMetadata = typeSummary ?\n        typeSummary.type :\n        this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n\n    const annotations: Injectable[] =\n        this._reflector.annotations(type).filter(ann => createInjectable.isTypeOf(ann));\n\n    if (annotations.length === 0) {\n      return null;\n    }\n\n    const meta = annotations[annotations.length - 1];\n    return {\n      symbol: type,\n      type: typeMetadata,\n      providedIn: meta.providedIn,\n      useValue: meta.useValue,\n      useClass: meta.useClass,\n      useExisting: meta.useExisting,\n      useFactory: meta.useFactory,\n      deps: meta.deps,\n    };\n  }\n\n  private _getTypeMetadata(type: Type, dependencies: any[]|null = null, throwOnUnknownDeps = true):\n      cpl.CompileTypeMetadata {\n    const identifier = this._getIdentifierMetadata(type);\n    return {\n      reference: identifier.reference,\n      diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n      lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference),\n    };\n  }\n\n  private _getFactoryMetadata(factory: Function, dependencies: any[]|null = null):\n      cpl.CompileFactoryMetadata {\n    factory = resolveForwardRef(factory);\n    return {reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies)};\n  }\n\n  /**\n   * Gets the metadata for the given pipe.\n   * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n   */\n  getPipeMetadata(pipeType: any): cpl.CompilePipeMetadata|null {\n    const pipeMeta = this._pipeCache.get(pipeType);\n    if (!pipeMeta) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ${stringifyType(pipeType)}.`),\n          pipeType);\n    }\n    return pipeMeta || null;\n  }\n\n  getPipeSummary(pipeType: any): cpl.CompilePipeSummary {\n    const pipeSummary =\n        <cpl.CompilePipeSummary>this._loadSummary(pipeType, cpl.CompileSummaryKind.Pipe);\n    if (!pipeSummary) {\n      this._reportError(\n          syntaxError(\n              `Illegal state: Could not load the summary for pipe ${stringifyType(pipeType)}.`),\n          pipeType);\n    }\n    return pipeSummary;\n  }\n\n  getOrLoadPipeMetadata(pipeType: any): cpl.CompilePipeMetadata {\n    let pipeMeta = this._pipeCache.get(pipeType);\n    if (!pipeMeta) {\n      pipeMeta = this._loadPipeMetadata(pipeType);\n    }\n    return pipeMeta;\n  }\n\n  private _loadPipeMetadata(pipeType: any): cpl.CompilePipeMetadata {\n    pipeType = resolveForwardRef(pipeType);\n    const pipeAnnotation = this._pipeResolver.resolve(pipeType) !;\n\n    const pipeMeta = new cpl.CompilePipeMetadata({\n      type: this._getTypeMetadata(pipeType),\n      name: pipeAnnotation.name,\n      pure: !!pipeAnnotation.pure\n    });\n    this._pipeCache.set(pipeType, pipeMeta);\n    this._summaryCache.set(pipeType, pipeMeta.toSummary());\n    return pipeMeta;\n  }\n\n  private _getDependenciesMetadata(\n      typeOrFunc: Type|Function, dependencies: any[]|null,\n      throwOnUnknownDeps = true): cpl.CompileDiDependencyMetadata[] {\n    let hasUnknownDeps = false;\n    const params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n\n    const dependenciesMetadata: cpl.CompileDiDependencyMetadata[] = params.map((param) => {\n      let isAttribute = false;\n      let isHost = false;\n      let isSelf = false;\n      let isSkipSelf = false;\n      let isOptional = false;\n      let token: any = null;\n      if (Array.isArray(param)) {\n        param.forEach((paramEntry) => {\n          if (createHost.isTypeOf(paramEntry)) {\n            isHost = true;\n          } else if (createSelf.isTypeOf(paramEntry)) {\n            isSelf = true;\n          } else if (createSkipSelf.isTypeOf(paramEntry)) {\n            isSkipSelf = true;\n          } else if (createOptional.isTypeOf(paramEntry)) {\n            isOptional = true;\n          } else if (createAttribute.isTypeOf(paramEntry)) {\n            isAttribute = true;\n            token = paramEntry.attributeName;\n          } else if (createInject.isTypeOf(paramEntry)) {\n            token = paramEntry.token;\n          } else if (\n              createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {\n            token = paramEntry;\n          } else if (isValidType(paramEntry) && token == null) {\n            token = paramEntry;\n          }\n        });\n      } else {\n        token = param;\n      }\n      if (token == null) {\n        hasUnknownDeps = true;\n        return null !;\n      }\n\n      return {\n        isAttribute,\n        isHost,\n        isSelf,\n        isSkipSelf,\n        isOptional,\n        token: this._getTokenMetadata(token)\n      };\n\n    });\n\n    if (hasUnknownDeps) {\n      const depsTokens =\n          dependenciesMetadata.map((dep) => dep ? stringifyType(dep.token) : '?').join(', ');\n      const message =\n          `Can't resolve all parameters for ${stringifyType(typeOrFunc)}: (${depsTokens}).`;\n      if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n        this._reportError(syntaxError(message), typeOrFunc);\n      } else {\n        this._console.warn(`Warning: ${message} This will become an error in Angular v6.x`);\n      }\n    }\n\n    return dependenciesMetadata;\n  }\n\n  private _getTokenMetadata(token: any): cpl.CompileTokenMetadata {\n    token = resolveForwardRef(token);\n    let compileToken: cpl.CompileTokenMetadata;\n    if (typeof token === 'string') {\n      compileToken = {value: token};\n    } else {\n      compileToken = {identifier: {reference: token}};\n    }\n    return compileToken;\n  }\n\n  private _getProvidersMetadata(\n      providers: Provider[], targetEntryComponents: cpl.CompileEntryComponentMetadata[],\n      debugInfo?: string, compileProviders: cpl.CompileProviderMetadata[] = [],\n      type?: any): cpl.CompileProviderMetadata[] {\n    providers.forEach((provider: any, providerIdx: number) => {\n      if (Array.isArray(provider)) {\n        this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n      } else {\n        provider = resolveForwardRef(provider);\n        let providerMeta: cpl.ProviderMeta = undefined !;\n        if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n          this._validateProvider(provider);\n          providerMeta = new cpl.ProviderMeta(provider.provide, provider);\n        } else if (isValidType(provider)) {\n          providerMeta = new cpl.ProviderMeta(provider, {useClass: provider});\n        } else if (provider === void 0) {\n          this._reportError(syntaxError(\n              `Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files.`));\n          return;\n        } else {\n          const providersInfo =\n              (<string[]>providers.reduce(\n                   (soFar: string[], seenProvider: any, seenProviderIdx: number) => {\n                     if (seenProviderIdx < providerIdx) {\n                       soFar.push(`${stringifyType(seenProvider)}`);\n                     } else if (seenProviderIdx == providerIdx) {\n                       soFar.push(`?${stringifyType(seenProvider)}?`);\n                     } else if (seenProviderIdx == providerIdx + 1) {\n                       soFar.push('...');\n                     }\n                     return soFar;\n                   },\n                   []))\n                  .join(', ');\n          this._reportError(\n              syntaxError(\n                  `Invalid ${debugInfo ? debugInfo : 'provider'} - only instances of Provider and Type are allowed, got: [${providersInfo}]`),\n              type);\n          return;\n        }\n        if (providerMeta.token ===\n            this._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n          targetEntryComponents.push(...this._getEntryComponentsFromProvider(providerMeta, type));\n        } else {\n          compileProviders.push(this.getProviderMetadata(providerMeta));\n        }\n      }\n    });\n    return compileProviders;\n  }\n\n  private _validateProvider(provider: any): void {\n    if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n      this._reportError(syntaxError(\n          `Invalid provider for ${stringifyType(provider.provide)}. useClass cannot be ${provider.useClass}.\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case.`));\n    }\n  }\n\n  private _getEntryComponentsFromProvider(provider: cpl.ProviderMeta, type?: any):\n      cpl.CompileEntryComponentMetadata[] {\n    const components: cpl.CompileEntryComponentMetadata[] = [];\n    const collectedIdentifiers: cpl.CompileIdentifierMetadata[] = [];\n\n    if (provider.useFactory || provider.useExisting || provider.useClass) {\n      this._reportError(\n          syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!`), type);\n      return [];\n    }\n\n    if (!provider.multi) {\n      this._reportError(\n          syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!`),\n          type);\n      return [];\n    }\n\n    extractIdentifiers(provider.useValue, collectedIdentifiers);\n    collectedIdentifiers.forEach((identifier) => {\n      const entry = this._getEntryComponentMetadata(identifier.reference, false);\n      if (entry) {\n        components.push(entry);\n      }\n    });\n    return components;\n  }\n\n  private _getEntryComponentMetadata(dirType: any, throwIfNotFound = true):\n      cpl.CompileEntryComponentMetadata|null {\n    const dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n    if (dirMeta && dirMeta.metadata.isComponent) {\n      return {componentType: dirType, componentFactory: dirMeta.metadata.componentFactory !};\n    }\n    const dirSummary =\n        <cpl.CompileDirectiveSummary>this._loadSummary(dirType, cpl.CompileSummaryKind.Directive);\n    if (dirSummary && dirSummary.isComponent) {\n      return {componentType: dirType, componentFactory: dirSummary.componentFactory !};\n    }\n    if (throwIfNotFound) {\n      throw syntaxError(`${dirType.name} cannot be used as an entry component.`);\n    }\n    return null;\n  }\n\n  private _getInjectableTypeMetadata(type: Type, dependencies: any[]|null = null):\n      cpl.CompileTypeMetadata {\n    const typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n    if (typeSummary) {\n      return typeSummary.type;\n    }\n    return this._getTypeMetadata(type, dependencies);\n  }\n\n  getProviderMetadata(provider: cpl.ProviderMeta): cpl.CompileProviderMetadata {\n    let compileDeps: cpl.CompileDiDependencyMetadata[] = undefined !;\n    let compileTypeMetadata: cpl.CompileTypeMetadata = null !;\n    let compileFactoryMetadata: cpl.CompileFactoryMetadata = null !;\n    let token: cpl.CompileTokenMetadata = this._getTokenMetadata(provider.token);\n\n    if (provider.useClass) {\n      compileTypeMetadata =\n          this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n      compileDeps = compileTypeMetadata.diDeps;\n      if (provider.token === provider.useClass) {\n        // use the compileTypeMetadata as it contains information about lifecycleHooks...\n        token = {identifier: compileTypeMetadata};\n      }\n    } else if (provider.useFactory) {\n      compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n      compileDeps = compileFactoryMetadata.diDeps;\n    }\n\n    return {\n      token: token,\n      useClass: compileTypeMetadata,\n      useValue: provider.useValue,\n      useFactory: compileFactoryMetadata,\n      useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n      deps: compileDeps,\n      multi: provider.multi\n    };\n  }\n\n  private _getQueriesMetadata(\n      queries: {[key: string]: Query}, isViewQuery: boolean,\n      directiveType: Type): cpl.CompileQueryMetadata[] {\n    const res: cpl.CompileQueryMetadata[] = [];\n\n    Object.keys(queries).forEach((propertyName: string) => {\n      const query = queries[propertyName];\n      if (query.isViewQuery === isViewQuery) {\n        res.push(this._getQueryMetadata(query, propertyName, directiveType));\n      }\n    });\n\n    return res;\n  }\n\n  private _queryVarBindings(selector: any): string[] { return selector.split(/\\s*,\\s*/); }\n\n  private _getQueryMetadata(q: Query, propertyName: string, typeOrFunc: Type|Function):\n      cpl.CompileQueryMetadata {\n    let selectors: cpl.CompileTokenMetadata[];\n    if (typeof q.selector === 'string') {\n      selectors =\n          this._queryVarBindings(q.selector).map(varName => this._getTokenMetadata(varName));\n    } else {\n      if (!q.selector) {\n        this._reportError(\n            syntaxError(\n                `Can't construct a query for the property \"${propertyName}\" of \"${stringifyType(typeOrFunc)}\" since the query selector wasn't defined.`),\n            typeOrFunc);\n        selectors = [];\n      } else {\n        selectors = [this._getTokenMetadata(q.selector)];\n      }\n    }\n\n    return {\n      selectors,\n      first: q.first,\n      descendants: q.descendants, propertyName,\n      read: q.read ? this._getTokenMetadata(q.read) : null !\n    };\n  }\n\n  private _reportError(error: any, type?: any, otherType?: any) {\n    if (this._errorCollector) {\n      this._errorCollector(error, type);\n      if (otherType) {\n        this._errorCollector(error, otherType);\n      }\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction flattenArray(tree: any[], out: Array<any> = []): Array<any> {\n  if (tree) {\n    for (let i = 0; i < tree.length; i++) {\n      const item = resolveForwardRef(tree[i]);\n      if (Array.isArray(item)) {\n        flattenArray(item, out);\n      } else {\n        out.push(item);\n      }\n    }\n  }\n  return out;\n}\n\nfunction dedupeArray(array: any[]): Array<any> {\n  if (array) {\n    return Array.from(new Set(array));\n  }\n  return [];\n}\n\nfunction flattenAndDedupeArray(tree: any[]): Array<any> {\n  return dedupeArray(flattenArray(tree));\n}\n\nfunction isValidType(value: any): boolean {\n  return (value instanceof StaticSymbol) || (value instanceof Type);\n}\n\nfunction extractIdentifiers(value: any, targetIdentifiers: cpl.CompileIdentifierMetadata[]) {\n  visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n}\n\nclass _CompileValueConverter extends ValueTransformer {\n  visitOther(value: any, targetIdentifiers: cpl.CompileIdentifierMetadata[]): any {\n    targetIdentifiers.push({reference: value});\n  }\n}\n\nfunction stringifyType(type: any): string {\n  if (type instanceof StaticSymbol) {\n    return `${type.name} in ${type.filePath}`;\n  } else {\n    return stringify(type);\n  }\n}\n\n/**\n * Indicates that a component is still being loaded in a synchronous compile.\n */\nfunction componentStillLoadingError(compType: Type) {\n  const error =\n      Error(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\n  (error as any)[ERROR_COMPONENT_TYPE] = compType;\n  return error;\n}\n"],"sourceRoot":""}