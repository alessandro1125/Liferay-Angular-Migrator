{"version":3,"sources":["../../../../../../../packages/compiler/src/output/output_interpreter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {CompileReflector} from '../compile_reflector';\n\nimport * as o from './output_ast';\nimport {debugOutputAstAsTypeScript} from './ts_emitter';\n\nexport function interpretStatements(\n    statements: o.Statement[], reflector: CompileReflector): {[key: string]: any} {\n  const ctx = new _ExecutionContext(null, null, null, new Map<string, any>());\n  const visitor = new StatementInterpreter(reflector);\n  visitor.visitAllStatements(statements, ctx);\n  const result: {[key: string]: any} = {};\n  ctx.exports.forEach((exportName) => { result[exportName] = ctx.vars.get(exportName); });\n  return result;\n}\n\nfunction _executeFunctionStatements(\n    varNames: string[], varValues: any[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): any {\n  const childCtx = ctx.createChildWihtLocalVars();\n  for (let i = 0; i < varNames.length; i++) {\n    childCtx.vars.set(varNames[i], varValues[i]);\n  }\n  const result = visitor.visitAllStatements(statements, childCtx);\n  return result ? result.value : null;\n}\n\nclass _ExecutionContext {\n  exports: string[] = [];\n\n  constructor(\n      public parent: _ExecutionContext|null, public instance: any, public className: string|null,\n      public vars: Map<string, any>) {}\n\n  createChildWihtLocalVars(): _ExecutionContext {\n    return new _ExecutionContext(this, this.instance, this.className, new Map<string, any>());\n  }\n}\n\nclass ReturnValue {\n  constructor(public value: any) {}\n}\n\nfunction createDynamicClass(\n    _classStmt: o.ClassStmt, _ctx: _ExecutionContext, _visitor: StatementInterpreter): Function {\n  const propertyDescriptors: {[key: string]: any} = {};\n\n  _classStmt.getters.forEach((getter: o.ClassGetter) => {\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[getter.name] = {\n      configurable: false,\n      get: function() {\n        const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n      }\n    };\n  });\n  _classStmt.methods.forEach(function(method: o.ClassMethod) {\n    const paramNames = method.params.map(param => param.name);\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[method.name !] = {\n      writable: false,\n      configurable: false,\n      value: function(...args: any[]) {\n        const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n      }\n    };\n  });\n\n  const ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name);\n  // Note: use `function` instead of arrow function to capture `this`\n  const ctor = function(...args: any[]) {\n    const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n    _classStmt.fields.forEach((field) => { this[field.name] = undefined; });\n    _executeFunctionStatements(\n        ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n  };\n  const superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n  ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n  return ctor;\n}\n\nclass StatementInterpreter implements o.StatementVisitor, o.ExpressionVisitor {\n  constructor(private reflector: CompileReflector) {}\n  debugAst(ast: o.Expression|o.Statement|o.Type): string { return debugOutputAstAsTypeScript(ast); }\n\n  visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: _ExecutionContext): any {\n    const initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;\n    ctx.vars.set(stmt.name, initialValue);\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n  visitWriteVarExpr(expr: o.WriteVarExpr, ctx: _ExecutionContext): any {\n    const value = expr.value.visitExpression(this, ctx);\n    let currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(expr.name)) {\n        currCtx.vars.set(expr.name, value);\n        return value;\n      }\n      currCtx = currCtx.parent !;\n    }\n    throw new Error(`Not declared variable ${expr.name}`);\n  }\n  visitWrappedNodeExpr(ast: o.WrappedNodeExpr<any>, ctx: _ExecutionContext): never {\n    throw new Error('Cannot interpret a WrappedNodeExpr.');\n  }\n  visitTypeofExpr(ast: o.TypeofExpr, ctx: _ExecutionContext): never {\n    throw new Error('Cannot interpret a TypeofExpr');\n  }\n  visitReadVarExpr(ast: o.ReadVarExpr, ctx: _ExecutionContext): any {\n    let varName = ast.name !;\n    if (ast.builtin != null) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          return ctx.instance.__proto__;\n        case o.BuiltinVar.This:\n          return ctx.instance;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR;\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    let currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(varName)) {\n        return currCtx.vars.get(varName);\n      }\n      currCtx = currCtx.parent !;\n    }\n    throw new Error(`Not declared variable ${varName}`);\n  }\n  visitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: _ExecutionContext): any {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const index = expr.index.visitExpression(this, ctx);\n    const value = expr.value.visitExpression(this, ctx);\n    receiver[index] = value;\n    return value;\n  }\n  visitWritePropExpr(expr: o.WritePropExpr, ctx: _ExecutionContext): any {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const value = expr.value.visitExpression(this, ctx);\n    receiver[expr.name] = value;\n    return value;\n  }\n\n  visitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: _ExecutionContext): any {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const args = this.visitAllExpressions(expr.args, ctx);\n    let result: any;\n    if (expr.builtin != null) {\n      switch (expr.builtin) {\n        case o.BuiltinMethod.ConcatArray:\n          result = receiver.concat(...args);\n          break;\n        case o.BuiltinMethod.SubscribeObservable:\n          result = receiver.subscribe({next: args[0]});\n          break;\n        case o.BuiltinMethod.Bind:\n          result = receiver.bind(...args);\n          break;\n        default:\n          throw new Error(`Unknown builtin method ${expr.builtin}`);\n      }\n    } else {\n      result = receiver[expr.name !].apply(receiver, args);\n    }\n    return result;\n  }\n  visitInvokeFunctionExpr(stmt: o.InvokeFunctionExpr, ctx: _ExecutionContext): any {\n    const args = this.visitAllExpressions(stmt.args, ctx);\n    const fnExpr = stmt.fn;\n    if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n      ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n      return null;\n    } else {\n      const fn = stmt.fn.visitExpression(this, ctx);\n      return fn.apply(null, args);\n    }\n  }\n  visitReturnStmt(stmt: o.ReturnStatement, ctx: _ExecutionContext): any {\n    return new ReturnValue(stmt.value.visitExpression(this, ctx));\n  }\n  visitDeclareClassStmt(stmt: o.ClassStmt, ctx: _ExecutionContext): any {\n    const clazz = createDynamicClass(stmt, ctx, this);\n    ctx.vars.set(stmt.name, clazz);\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n  visitExpressionStmt(stmt: o.ExpressionStatement, ctx: _ExecutionContext): any {\n    return stmt.expr.visitExpression(this, ctx);\n  }\n  visitIfStmt(stmt: o.IfStmt, ctx: _ExecutionContext): any {\n    const condition = stmt.condition.visitExpression(this, ctx);\n    if (condition) {\n      return this.visitAllStatements(stmt.trueCase, ctx);\n    } else if (stmt.falseCase != null) {\n      return this.visitAllStatements(stmt.falseCase, ctx);\n    }\n    return null;\n  }\n  visitTryCatchStmt(stmt: o.TryCatchStmt, ctx: _ExecutionContext): any {\n    try {\n      return this.visitAllStatements(stmt.bodyStmts, ctx);\n    } catch (e) {\n      const childCtx = ctx.createChildWihtLocalVars();\n      childCtx.vars.set(CATCH_ERROR_VAR, e);\n      childCtx.vars.set(CATCH_STACK_VAR, e.stack);\n      return this.visitAllStatements(stmt.catchStmts, childCtx);\n    }\n  }\n  visitThrowStmt(stmt: o.ThrowStmt, ctx: _ExecutionContext): any {\n    throw stmt.error.visitExpression(this, ctx);\n  }\n  visitCommentStmt(stmt: o.CommentStmt, context?: any): any { return null; }\n  visitJSDocCommentStmt(stmt: o.JSDocCommentStmt, context?: any): any { return null; }\n  visitInstantiateExpr(ast: o.InstantiateExpr, ctx: _ExecutionContext): any {\n    const args = this.visitAllExpressions(ast.args, ctx);\n    const clazz = ast.classExpr.visitExpression(this, ctx);\n    return new clazz(...args);\n  }\n  visitLiteralExpr(ast: o.LiteralExpr, ctx: _ExecutionContext): any { return ast.value; }\n  visitExternalExpr(ast: o.ExternalExpr, ctx: _ExecutionContext): any {\n    return this.reflector.resolveExternalReference(ast.value);\n  }\n  visitConditionalExpr(ast: o.ConditionalExpr, ctx: _ExecutionContext): any {\n    if (ast.condition.visitExpression(this, ctx)) {\n      return ast.trueCase.visitExpression(this, ctx);\n    } else if (ast.falseCase != null) {\n      return ast.falseCase.visitExpression(this, ctx);\n    }\n    return null;\n  }\n  visitNotExpr(ast: o.NotExpr, ctx: _ExecutionContext): any {\n    return !ast.condition.visitExpression(this, ctx);\n  }\n  visitAssertNotNullExpr(ast: o.AssertNotNull, ctx: _ExecutionContext): any {\n    return ast.condition.visitExpression(this, ctx);\n  }\n  visitCastExpr(ast: o.CastExpr, ctx: _ExecutionContext): any {\n    return ast.value.visitExpression(this, ctx);\n  }\n  visitFunctionExpr(ast: o.FunctionExpr, ctx: _ExecutionContext): any {\n    const paramNames = ast.params.map((param) => param.name);\n    return _declareFn(paramNames, ast.statements, ctx, this);\n  }\n  visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: _ExecutionContext): any {\n    const paramNames = stmt.params.map((param) => param.name);\n    ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n  visitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: _ExecutionContext): any {\n    const lhs = () => ast.lhs.visitExpression(this, ctx);\n    const rhs = () => ast.rhs.visitExpression(this, ctx);\n\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        return lhs() == rhs();\n      case o.BinaryOperator.Identical:\n        return lhs() === rhs();\n      case o.BinaryOperator.NotEquals:\n        return lhs() != rhs();\n      case o.BinaryOperator.NotIdentical:\n        return lhs() !== rhs();\n      case o.BinaryOperator.And:\n        return lhs() && rhs();\n      case o.BinaryOperator.Or:\n        return lhs() || rhs();\n      case o.BinaryOperator.Plus:\n        return lhs() + rhs();\n      case o.BinaryOperator.Minus:\n        return lhs() - rhs();\n      case o.BinaryOperator.Divide:\n        return lhs() / rhs();\n      case o.BinaryOperator.Multiply:\n        return lhs() * rhs();\n      case o.BinaryOperator.Modulo:\n        return lhs() % rhs();\n      case o.BinaryOperator.Lower:\n        return lhs() < rhs();\n      case o.BinaryOperator.LowerEquals:\n        return lhs() <= rhs();\n      case o.BinaryOperator.Bigger:\n        return lhs() > rhs();\n      case o.BinaryOperator.BiggerEquals:\n        return lhs() >= rhs();\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n  }\n  visitReadPropExpr(ast: o.ReadPropExpr, ctx: _ExecutionContext): any {\n    let result: any;\n    const receiver = ast.receiver.visitExpression(this, ctx);\n    result = receiver[ast.name];\n    return result;\n  }\n  visitReadKeyExpr(ast: o.ReadKeyExpr, ctx: _ExecutionContext): any {\n    const receiver = ast.receiver.visitExpression(this, ctx);\n    const prop = ast.index.visitExpression(this, ctx);\n    return receiver[prop];\n  }\n  visitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: _ExecutionContext): any {\n    return this.visitAllExpressions(ast.entries, ctx);\n  }\n  visitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: _ExecutionContext): any {\n    const result: {[k: string]: any} = {};\n    ast.entries.forEach(entry => result[entry.key] = entry.value.visitExpression(this, ctx));\n    return result;\n  }\n  visitCommaExpr(ast: o.CommaExpr, context: any): any {\n    const values = this.visitAllExpressions(ast.parts, context);\n    return values[values.length - 1];\n  }\n  visitAllExpressions(expressions: o.Expression[], ctx: _ExecutionContext): any {\n    return expressions.map((expr) => expr.visitExpression(this, ctx));\n  }\n\n  visitAllStatements(statements: o.Statement[], ctx: _ExecutionContext): ReturnValue|null {\n    for (let i = 0; i < statements.length; i++) {\n      const stmt = statements[i];\n      const val = stmt.visitStatement(this, ctx);\n      if (val instanceof ReturnValue) {\n        return val;\n      }\n    }\n    return null;\n  }\n}\n\nfunction _declareFn(\n    varNames: string[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): Function {\n  return (...args: any[]) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n}\n\nconst CATCH_ERROR_VAR = 'error';\nconst CATCH_STACK_VAR = 'stack';\n"],"sourceRoot":""}