{"version":3,"sources":["../../../../../../../packages/compiler/src/output/value_util.ts"],"names":[],"mappings":";;;;;;;;;AASA,aAAyC,UAAzC,QAA0D,SAA1D;AAEA,WAAO,KAAK,CAAZ,MAAmB,cAAnB;AAEA,WAAO,MAAM,cAAc,UAApB;AAEP,WAAM,SAAA,uBAAA,CACF,GADE,EACkB,KADlB,EAC8B,OAAsB,IADpD,EACwD;AAC5D,eAAO,WAAW,KAAX,EAAkB,IAAI,0BAAJ,CAA+B,GAA/B,CAAlB,EAAuD,IAAvD,CAAP;AACD;AAED,UAAA,0BAAA,CAAA;AACE,oBAAoB,GAApB,EAAsC;AAAlB,iBAAA,GAAA,GAAA,GAAA;AAAsB;AAC1C,mBAAW,GAAX,EAAuB,IAAvB,EAAmC;AACjC,mBAAO,EAAE,UAAF,CAAa,IAAI,GAAJ,CAAQ,SAAS,WAAW,KAAX,EAAkB,IAAlB,EAAwB,IAAxB,CAAjB,CAAb,EAA8D,IAA9D,CAAP;AACD;AAED,uBAAe,GAAf,EAA0C,IAA1C,EAAyD;AACvD,kBAAM,UAA+B,EAArC;AACA,kBAAM,YAAY,IAAI,GAAJ,CAAgB,OAAO,IAAI,WAAJ,CAAvB,CAAlB;AACA,mBAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,OAAM;AAC7B,wBAAQ,IAAR,CACI,IAAI,EAAE,eAAN,CAAsB,GAAtB,EAA2B,WAAW,IAAI,GAAJ,CAAX,EAAqB,IAArB,EAA2B,IAA3B,CAA3B,EAA6D,UAAU,GAAV,CAAc,GAAd,CAA7D,CADJ;AAED,aAHD;AAIA,mBAAO,IAAI,EAAE,cAAN,CAAqB,OAArB,EAA8B,IAA9B,CAAP;AACD;AAED,uBAAe,KAAf,EAA2B,IAA3B,EAAuC;AAAkB,mBAAO,EAAE,OAAF,CAAU,KAAV,EAAiB,IAAjB,CAAP;AAAgC;AAEzF,mBAAW,KAAX,EAAuB,IAAvB,EAAmC;AACjC,gBAAI,iBAAiB,EAAE,UAAvB,EAAmC;AACjC,uBAAO,KAAP;AACD,aAFD,MAEO;AACL,uBAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,KAApB,CAAP;AACD;AACF;AAxBH","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OutputContext, ValueTransformer, visitValue} from '../util';\n\nimport * as o from './output_ast';\n\nexport const QUOTED_KEYS = '$quoted$';\n\nexport function convertValueToOutputAst(\n    ctx: OutputContext, value: any, type: o.Type | null = null): o.Expression {\n  return visitValue(value, new _ValueOutputAstTransformer(ctx), type);\n}\n\nclass _ValueOutputAstTransformer implements ValueTransformer {\n  constructor(private ctx: OutputContext) {}\n  visitArray(arr: any[], type: o.Type): o.Expression {\n    return o.literalArr(arr.map(value => visitValue(value, this, null)), type);\n  }\n\n  visitStringMap(map: {[key: string]: any}, type: o.MapType): o.Expression {\n    const entries: o.LiteralMapEntry[] = [];\n    const quotedSet = new Set<string>(map && map[QUOTED_KEYS]);\n    Object.keys(map).forEach(key => {\n      entries.push(\n          new o.LiteralMapEntry(key, visitValue(map[key], this, null), quotedSet.has(key)));\n    });\n    return new o.LiteralMapExpr(entries, type);\n  }\n\n  visitPrimitive(value: any, type: o.Type): o.Expression { return o.literal(value, type); }\n\n  visitOther(value: any, type: o.Type): o.Expression {\n    if (value instanceof o.Expression) {\n      return value;\n    } else {\n      return this.ctx.importExpr(value);\n    }\n  }\n}\n"],"sourceRoot":""}