{"version":3,"sources":["../../../../../../../packages/compiler/src/output/output_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ParseSourceSpan} from '../parse_util';\nimport {error} from '../util';\n\n//// Types\nexport enum TypeModifier {\n  Const\n}\n\nexport abstract class Type {\n  constructor(public modifiers: TypeModifier[]|null = null) {\n    if (!modifiers) {\n      this.modifiers = [];\n    }\n  }\n  abstract visitType(visitor: TypeVisitor, context: any): any;\n\n  hasModifier(modifier: TypeModifier): boolean { return this.modifiers !.indexOf(modifier) !== -1; }\n}\n\nexport enum BuiltinTypeName {\n  Dynamic,\n  Bool,\n  String,\n  Int,\n  Number,\n  Function,\n  Inferred,\n  None,\n}\n\nexport class BuiltinType extends Type {\n  constructor(public name: BuiltinTypeName, modifiers: TypeModifier[]|null = null) {\n    super(modifiers);\n  }\n  visitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitBuiltinType(this, context);\n  }\n}\n\nexport class ExpressionType extends Type {\n  constructor(\n      public value: Expression, modifiers: TypeModifier[]|null = null,\n      public typeParams: Type[]|null = null) {\n    super(modifiers);\n  }\n  visitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitExpressionType(this, context);\n  }\n}\n\n\nexport class ArrayType extends Type {\n  constructor(public of : Type, modifiers: TypeModifier[]|null = null) { super(modifiers); }\n  visitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitArrayType(this, context);\n  }\n}\n\n\nexport class MapType extends Type {\n  public valueType: Type|null;\n  constructor(valueType: Type|null|undefined, modifiers: TypeModifier[]|null = null) {\n    super(modifiers);\n    this.valueType = valueType || null;\n  }\n  visitType(visitor: TypeVisitor, context: any): any { return visitor.visitMapType(this, context); }\n}\n\nexport const DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nexport const INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nexport const BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nexport const INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nexport const NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nexport const STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nexport const FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\nexport const NONE_TYPE = new BuiltinType(BuiltinTypeName.None);\n\nexport interface TypeVisitor {\n  visitBuiltinType(type: BuiltinType, context: any): any;\n  visitExpressionType(type: ExpressionType, context: any): any;\n  visitArrayType(type: ArrayType, context: any): any;\n  visitMapType(type: MapType, context: any): any;\n}\n\n///// Expressions\n\nexport enum BinaryOperator {\n  Equals,\n  NotEquals,\n  Identical,\n  NotIdentical,\n  Minus,\n  Plus,\n  Divide,\n  Multiply,\n  Modulo,\n  And,\n  Or,\n  BitwiseAnd,\n  Lower,\n  LowerEquals,\n  Bigger,\n  BiggerEquals\n}\n\nexport function nullSafeIsEquivalent<T extends{isEquivalent(other: T): boolean}>(\n    base: T | null, other: T | null) {\n  if (base == null || other == null) {\n    return base == other;\n  }\n  return base.isEquivalent(other);\n}\n\nexport function areAllEquivalent<T extends{isEquivalent(other: T): boolean}>(\n    base: T[], other: T[]) {\n  const len = base.length;\n  if (len !== other.length) {\n    return false;\n  }\n  for (let i = 0; i < len; i++) {\n    if (!base[i].isEquivalent(other[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport abstract class Expression {\n  public type: Type|null;\n  public sourceSpan: ParseSourceSpan|null;\n\n  constructor(type: Type|null|undefined, sourceSpan?: ParseSourceSpan|null) {\n    this.type = type || null;\n    this.sourceSpan = sourceSpan || null;\n  }\n\n  abstract visitExpression(visitor: ExpressionVisitor, context: any): any;\n\n  /**\n   * Calculates whether this expression produces the same value as the given expression.\n   * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n   */\n  abstract isEquivalent(e: Expression): boolean;\n\n  /**\n   * Return true if the expression is constant.\n   */\n  abstract isConstant(): boolean;\n\n  prop(name: string, sourceSpan?: ParseSourceSpan|null): ReadPropExpr {\n    return new ReadPropExpr(this, name, null, sourceSpan);\n  }\n\n  key(index: Expression, type?: Type|null, sourceSpan?: ParseSourceSpan|null): ReadKeyExpr {\n    return new ReadKeyExpr(this, index, type, sourceSpan);\n  }\n\n  callMethod(name: string|BuiltinMethod, params: Expression[], sourceSpan?: ParseSourceSpan|null):\n      InvokeMethodExpr {\n    return new InvokeMethodExpr(this, name, params, null, sourceSpan);\n  }\n\n  callFn(params: Expression[], sourceSpan?: ParseSourceSpan|null): InvokeFunctionExpr {\n    return new InvokeFunctionExpr(this, params, null, sourceSpan);\n  }\n\n  instantiate(params: Expression[], type?: Type|null, sourceSpan?: ParseSourceSpan|null):\n      InstantiateExpr {\n    return new InstantiateExpr(this, params, type, sourceSpan);\n  }\n\n  conditional(\n      trueCase: Expression, falseCase: Expression|null = null,\n      sourceSpan?: ParseSourceSpan|null): ConditionalExpr {\n    return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n  }\n\n  equals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n  }\n  notEquals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n  }\n  identical(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n  }\n  notIdentical(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n  }\n  minus(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n  }\n  plus(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n  }\n  divide(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n  }\n  multiply(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n  }\n  modulo(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n  }\n  and(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n  }\n  bitwiseAnd(rhs: Expression, sourceSpan?: ParseSourceSpan|null, parens: boolean = true):\n      BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n  }\n  or(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n  }\n  lower(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n  }\n  lowerEquals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n  }\n  bigger(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n  }\n  biggerEquals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n  }\n  isBlank(sourceSpan?: ParseSourceSpan|null): Expression {\n    // Note: We use equals by purpose here to compare to null and undefined in JS.\n    // We use the typed null to allow strictNullChecks to narrow types.\n    return this.equals(TYPED_NULL_EXPR, sourceSpan);\n  }\n  cast(type: Type, sourceSpan?: ParseSourceSpan|null): Expression {\n    return new CastExpr(this, type, sourceSpan);\n  }\n\n  toStmt(): Statement { return new ExpressionStatement(this, null); }\n}\n\nexport enum BuiltinVar {\n  This,\n  Super,\n  CatchError,\n  CatchStack\n}\n\nexport class ReadVarExpr extends Expression {\n  public name: string|null;\n  public builtin: BuiltinVar|null;\n\n  constructor(name: string|BuiltinVar, type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n    if (typeof name === 'string') {\n      this.name = name;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = name;\n    }\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadVarExpr(this, context);\n  }\n\n  set(value: Expression): WriteVarExpr {\n    if (!this.name) {\n      throw new Error(`Built in variable ${this.builtin} can not be assigned to.`);\n    }\n    return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n  }\n}\n\nexport class TypeofExpr extends Expression {\n  constructor(public expr: Expression, type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  visitExpression(visitor: ExpressionVisitor, context: any) {\n    return visitor.visitTypeofExpr(this, context);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);\n  }\n\n  isConstant(): boolean { return this.expr.isConstant(); }\n}\n\nexport class WrappedNodeExpr<T> extends Expression {\n  constructor(public node: T, type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof WrappedNodeExpr && this.node === e.node;\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWrappedNodeExpr(this, context);\n  }\n}\n\nexport class WriteVarExpr extends Expression {\n  public value: Expression;\n  constructor(\n      public name: string, value: Expression, type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type || value.type, sourceSpan);\n    this.value = value;\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteVarExpr(this, context);\n  }\n\n  toDeclStmt(type?: Type|null, modifiers?: StmtModifier[]|null): DeclareVarStmt {\n    return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n  }\n}\n\n\nexport class WriteKeyExpr extends Expression {\n  public value: Expression;\n  constructor(\n      public receiver: Expression, public index: Expression, value: Expression, type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type || value.type, sourceSpan);\n    this.value = value;\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n        this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteKeyExpr(this, context);\n  }\n}\n\n\nexport class WritePropExpr extends Expression {\n  public value: Expression;\n  constructor(\n      public receiver: Expression, public name: string, value: Expression, type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type || value.type, sourceSpan);\n    this.value = value;\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&\n        this.name === e.name && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWritePropExpr(this, context);\n  }\n}\n\nexport enum BuiltinMethod {\n  ConcatArray,\n  SubscribeObservable,\n  Bind\n}\n\nexport class InvokeMethodExpr extends Expression {\n  public name: string|null;\n  public builtin: BuiltinMethod|null;\n  constructor(\n      public receiver: Expression, method: string|BuiltinMethod, public args: Expression[],\n      type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n    if (typeof method === 'string') {\n      this.name = method;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = <BuiltinMethod>method;\n    }\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) &&\n        this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeMethodExpr(this, context);\n  }\n}\n\n\nexport class InvokeFunctionExpr extends Expression {\n  constructor(\n      public fn: Expression, public args: Expression[], type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&\n        areAllEquivalent(this.args, e.args);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeFunctionExpr(this, context);\n  }\n}\n\n\nexport class InstantiateExpr extends Expression {\n  constructor(\n      public classExpr: Expression, public args: Expression[], type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&\n        areAllEquivalent(this.args, e.args);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInstantiateExpr(this, context);\n  }\n}\n\n\nexport class LiteralExpr extends Expression {\n  constructor(\n      public value: number|string|boolean|null|undefined, type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof LiteralExpr && this.value === e.value;\n  }\n\n  isConstant() { return true; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralExpr(this, context);\n  }\n}\n\n\nexport class ExternalExpr extends Expression {\n  constructor(\n      public value: ExternalReference, type?: Type|null, public typeParams: Type[]|null = null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof ExternalExpr && this.value.name === e.value.name &&\n        this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitExternalExpr(this, context);\n  }\n}\n\nexport class ExternalReference {\n  constructor(public moduleName: string|null, public name: string|null, public runtime?: any|null) {\n  }\n  // Note: no isEquivalent method here as we use this as an interface too.\n}\n\nexport class ConditionalExpr extends Expression {\n  public trueCase: Expression;\n\n  constructor(\n      public condition: Expression, trueCase: Expression, public falseCase: Expression|null = null,\n      type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type || trueCase.type, sourceSpan);\n    this.trueCase = trueCase;\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&\n        this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitConditionalExpr(this, context);\n  }\n}\n\n\nexport class NotExpr extends Expression {\n  constructor(public condition: Expression, sourceSpan?: ParseSourceSpan|null) {\n    super(BOOL_TYPE, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitNotExpr(this, context);\n  }\n}\n\nexport class AssertNotNull extends Expression {\n  constructor(public condition: Expression, sourceSpan?: ParseSourceSpan|null) {\n    super(condition.type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitAssertNotNullExpr(this, context);\n  }\n}\n\nexport class CastExpr extends Expression {\n  constructor(public value: Expression, type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof CastExpr && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitCastExpr(this, context);\n  }\n}\n\n\nexport class FnParam {\n  constructor(public name: string, public type: Type|null = null) {}\n\n  isEquivalent(param: FnParam): boolean { return this.name === param.name; }\n}\n\n\nexport class FunctionExpr extends Expression {\n  constructor(\n      public params: FnParam[], public statements: Statement[], type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null, public name?: string|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) &&\n        areAllEquivalent(this.statements, e.statements);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitFunctionExpr(this, context);\n  }\n\n  toDeclStmt(name: string, modifiers: StmtModifier[]|null = null): DeclareFunctionStmt {\n    return new DeclareFunctionStmt(\n        name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n  }\n}\n\n\nexport class BinaryOperatorExpr extends Expression {\n  public lhs: Expression;\n  constructor(\n      public operator: BinaryOperator, lhs: Expression, public rhs: Expression, type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null, public parens: boolean = true) {\n    super(type || lhs.type, sourceSpan);\n    this.lhs = lhs;\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof BinaryOperatorExpr && this.operator === e.operator &&\n        this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitBinaryOperatorExpr(this, context);\n  }\n}\n\n\nexport class ReadPropExpr extends Expression {\n  constructor(\n      public receiver: Expression, public name: string, type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&\n        this.name === e.name;\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadPropExpr(this, context);\n  }\n\n  set(value: Expression): WritePropExpr {\n    return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n  }\n}\n\n\nexport class ReadKeyExpr extends Expression {\n  constructor(\n      public receiver: Expression, public index: Expression, type?: Type|null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n        this.index.isEquivalent(e.index);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadKeyExpr(this, context);\n  }\n\n  set(value: Expression): WriteKeyExpr {\n    return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n  }\n}\n\n\nexport class LiteralArrayExpr extends Expression {\n  public entries: Expression[];\n  constructor(entries: Expression[], type?: Type|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n    this.entries = entries;\n  }\n\n  isConstant() { return this.entries.every(e => e.isConstant()); }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralArrayExpr(this, context);\n  }\n}\n\nexport class LiteralMapEntry {\n  constructor(public key: string, public value: Expression, public quoted: boolean) {}\n  isEquivalent(e: LiteralMapEntry): boolean {\n    return this.key === e.key && this.value.isEquivalent(e.value);\n  }\n}\n\nexport class LiteralMapExpr extends Expression {\n  public valueType: Type|null = null;\n  constructor(\n      public entries: LiteralMapEntry[], type?: MapType|null, sourceSpan?: ParseSourceSpan|null) {\n    super(type, sourceSpan);\n    if (type) {\n      this.valueType = type.valueType;\n    }\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n  }\n\n  isConstant() { return this.entries.every(e => e.value.isConstant()); }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralMapExpr(this, context);\n  }\n}\n\nexport class CommaExpr extends Expression {\n  constructor(public parts: Expression[], sourceSpan?: ParseSourceSpan|null) {\n    super(parts[parts.length - 1].type, sourceSpan);\n  }\n\n  isEquivalent(e: Expression): boolean {\n    return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n  }\n\n  isConstant() { return false; }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitCommaExpr(this, context);\n  }\n}\n\nexport interface ExpressionVisitor {\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any;\n  visitWriteVarExpr(expr: WriteVarExpr, context: any): any;\n  visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any;\n  visitWritePropExpr(expr: WritePropExpr, context: any): any;\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any;\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any;\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any;\n  visitLiteralExpr(ast: LiteralExpr, context: any): any;\n  visitExternalExpr(ast: ExternalExpr, context: any): any;\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any;\n  visitNotExpr(ast: NotExpr, context: any): any;\n  visitAssertNotNullExpr(ast: AssertNotNull, context: any): any;\n  visitCastExpr(ast: CastExpr, context: any): any;\n  visitFunctionExpr(ast: FunctionExpr, context: any): any;\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any;\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any;\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any;\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any;\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any;\n  visitCommaExpr(ast: CommaExpr, context: any): any;\n  visitWrappedNodeExpr(ast: WrappedNodeExpr<any>, context: any): any;\n  visitTypeofExpr(ast: TypeofExpr, context: any): any;\n}\n\nexport const THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);\nexport const SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);\nexport const CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);\nexport const CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);\nexport const NULL_EXPR = new LiteralExpr(null, null, null);\nexport const TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\n\n//// Statements\nexport enum StmtModifier {\n  Final,\n  Private,\n  Exported,\n  Static,\n}\n\nexport abstract class Statement {\n  public modifiers: StmtModifier[];\n  public sourceSpan: ParseSourceSpan|null;\n  constructor(modifiers?: StmtModifier[]|null, sourceSpan?: ParseSourceSpan|null) {\n    this.modifiers = modifiers || [];\n    this.sourceSpan = sourceSpan || null;\n  }\n  /**\n   * Calculates whether this statement produces the same value as the given statement.\n   * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n   */\n  abstract isEquivalent(stmt: Statement): boolean;\n\n  abstract visitStatement(visitor: StatementVisitor, context: any): any;\n\n  hasModifier(modifier: StmtModifier): boolean { return this.modifiers !.indexOf(modifier) !== -1; }\n}\n\n\nexport class DeclareVarStmt extends Statement {\n  public type: Type|null;\n  constructor(\n      public name: string, public value?: Expression, type?: Type|null,\n      modifiers: StmtModifier[]|null = null, sourceSpan?: ParseSourceSpan|null) {\n    super(modifiers, sourceSpan);\n    this.type = type || (value && value.type) || null;\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof DeclareVarStmt && this.name === stmt.name &&\n        (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareVarStmt(this, context);\n  }\n}\n\nexport class DeclareFunctionStmt extends Statement {\n  public type: Type|null;\n  constructor(\n      public name: string, public params: FnParam[], public statements: Statement[],\n      type?: Type|null, modifiers: StmtModifier[]|null = null, sourceSpan?: ParseSourceSpan|null) {\n    super(modifiers, sourceSpan);\n    this.type = type || null;\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&\n        areAllEquivalent(this.statements, stmt.statements);\n  }\n\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareFunctionStmt(this, context);\n  }\n}\n\nexport class ExpressionStatement extends Statement {\n  constructor(public expr: Expression, sourceSpan?: ParseSourceSpan|null) {\n    super(null, sourceSpan);\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n  }\n\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitExpressionStmt(this, context);\n  }\n}\n\n\nexport class ReturnStatement extends Statement {\n  constructor(public value: Expression, sourceSpan?: ParseSourceSpan|null) {\n    super(null, sourceSpan);\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitReturnStmt(this, context);\n  }\n}\n\nexport class AbstractClassPart {\n  public type: Type|null;\n  constructor(type: Type|null|undefined, public modifiers: StmtModifier[]|null) {\n    if (!modifiers) {\n      this.modifiers = [];\n    }\n    this.type = type || null;\n  }\n  hasModifier(modifier: StmtModifier): boolean { return this.modifiers !.indexOf(modifier) !== -1; }\n}\n\nexport class ClassField extends AbstractClassPart {\n  constructor(\n      public name: string, type?: Type|null, modifiers: StmtModifier[]|null = null,\n      public initializer?: Expression) {\n    super(type, modifiers);\n  }\n  isEquivalent(f: ClassField) { return this.name === f.name; }\n}\n\n\nexport class ClassMethod extends AbstractClassPart {\n  constructor(\n      public name: string|null, public params: FnParam[], public body: Statement[],\n      type?: Type|null, modifiers: StmtModifier[]|null = null) {\n    super(type, modifiers);\n  }\n  isEquivalent(m: ClassMethod) {\n    return this.name === m.name && areAllEquivalent(this.body, m.body);\n  }\n}\n\n\nexport class ClassGetter extends AbstractClassPart {\n  constructor(\n      public name: string, public body: Statement[], type?: Type|null,\n      modifiers: StmtModifier[]|null = null) {\n    super(type, modifiers);\n  }\n  isEquivalent(m: ClassGetter) {\n    return this.name === m.name && areAllEquivalent(this.body, m.body);\n  }\n}\n\n\nexport class ClassStmt extends Statement {\n  constructor(\n      public name: string, public parent: Expression|null, public fields: ClassField[],\n      public getters: ClassGetter[], public constructorMethod: ClassMethod,\n      public methods: ClassMethod[], modifiers: StmtModifier[]|null = null,\n      sourceSpan?: ParseSourceSpan|null) {\n    super(modifiers, sourceSpan);\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof ClassStmt && this.name === stmt.name &&\n        nullSafeIsEquivalent(this.parent, stmt.parent) &&\n        areAllEquivalent(this.fields, stmt.fields) &&\n        areAllEquivalent(this.getters, stmt.getters) &&\n        this.constructorMethod.isEquivalent(stmt.constructorMethod) &&\n        areAllEquivalent(this.methods, stmt.methods);\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareClassStmt(this, context);\n  }\n}\n\n\nexport class IfStmt extends Statement {\n  constructor(\n      public condition: Expression, public trueCase: Statement[],\n      public falseCase: Statement[] = [], sourceSpan?: ParseSourceSpan|null) {\n    super(null, sourceSpan);\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&\n        areAllEquivalent(this.trueCase, stmt.trueCase) &&\n        areAllEquivalent(this.falseCase, stmt.falseCase);\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitIfStmt(this, context);\n  }\n}\n\nexport class CommentStmt extends Statement {\n  constructor(public comment: string, public multiline = false, sourceSpan?: ParseSourceSpan|null) {\n    super(null, sourceSpan);\n  }\n  isEquivalent(stmt: Statement): boolean { return stmt instanceof CommentStmt; }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitCommentStmt(this, context);\n  }\n}\n\nexport class JSDocCommentStmt extends Statement {\n  constructor(public tags: JSDocTag[] = [], sourceSpan?: ParseSourceSpan|null) {\n    super(null, sourceSpan);\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof JSDocCommentStmt && this.toString() === stmt.toString();\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitJSDocCommentStmt(this, context);\n  }\n  toString(): string { return serializeTags(this.tags); }\n}\n\nexport class TryCatchStmt extends Statement {\n  constructor(\n      public bodyStmts: Statement[], public catchStmts: Statement[],\n      sourceSpan?: ParseSourceSpan|null) {\n    super(null, sourceSpan);\n  }\n  isEquivalent(stmt: Statement): boolean {\n    return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) &&\n        areAllEquivalent(this.catchStmts, stmt.catchStmts);\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitTryCatchStmt(this, context);\n  }\n}\n\n\nexport class ThrowStmt extends Statement {\n  constructor(public error: Expression, sourceSpan?: ParseSourceSpan|null) {\n    super(null, sourceSpan);\n  }\n  isEquivalent(stmt: ThrowStmt): boolean {\n    return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitThrowStmt(this, context);\n  }\n}\n\nexport interface StatementVisitor {\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any;\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any;\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any;\n  visitReturnStmt(stmt: ReturnStatement, context: any): any;\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any;\n  visitIfStmt(stmt: IfStmt, context: any): any;\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any;\n  visitThrowStmt(stmt: ThrowStmt, context: any): any;\n  visitCommentStmt(stmt: CommentStmt, context: any): any;\n  visitJSDocCommentStmt(stmt: JSDocCommentStmt, context: any): any;\n}\n\nexport class AstTransformer implements StatementVisitor, ExpressionVisitor {\n  transformExpr(expr: Expression, context: any): Expression { return expr; }\n\n  transformStmt(stmt: Statement, context: any): Statement { return stmt; }\n\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any { return this.transformExpr(ast, context); }\n\n  visitWrappedNodeExpr(ast: WrappedNodeExpr<any>, context: any): any {\n    return this.transformExpr(ast, context);\n  }\n\n  visitTypeofExpr(expr: TypeofExpr, context: any): any {\n    return this.transformExpr(\n        new TypeofExpr(expr.expr.visitExpression(this, context), expr.type, expr.sourceSpan),\n        context);\n  }\n\n  visitWriteVarExpr(expr: WriteVarExpr, context: any): any {\n    return this.transformExpr(\n        new WriteVarExpr(\n            expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan),\n        context);\n  }\n\n  visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any {\n    return this.transformExpr(\n        new WriteKeyExpr(\n            expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context),\n            expr.value.visitExpression(this, context), expr.type, expr.sourceSpan),\n        context);\n  }\n\n  visitWritePropExpr(expr: WritePropExpr, context: any): any {\n    return this.transformExpr(\n        new WritePropExpr(\n            expr.receiver.visitExpression(this, context), expr.name,\n            expr.value.visitExpression(this, context), expr.type, expr.sourceSpan),\n        context);\n  }\n\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    const method = ast.builtin || ast.name;\n    return this.transformExpr(\n        new InvokeMethodExpr(\n            ast.receiver.visitExpression(this, context), method !,\n            this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    return this.transformExpr(\n        new InvokeFunctionExpr(\n            ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context),\n            ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    return this.transformExpr(\n        new InstantiateExpr(\n            ast.classExpr.visitExpression(this, context),\n            this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitLiteralExpr(ast: LiteralExpr, context: any): any { return this.transformExpr(ast, context); }\n\n  visitExternalExpr(ast: ExternalExpr, context: any): any {\n    return this.transformExpr(ast, context);\n  }\n\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    return this.transformExpr(\n        new ConditionalExpr(\n            ast.condition.visitExpression(this, context),\n            ast.trueCase.visitExpression(this, context),\n            ast.falseCase !.visitExpression(this, context), ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitNotExpr(ast: NotExpr, context: any): any {\n    return this.transformExpr(\n        new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n  }\n\n  visitAssertNotNullExpr(ast: AssertNotNull, context: any): any {\n    return this.transformExpr(\n        new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n  }\n\n  visitCastExpr(ast: CastExpr, context: any): any {\n    return this.transformExpr(\n        new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitFunctionExpr(ast: FunctionExpr, context: any): any {\n    return this.transformExpr(\n        new FunctionExpr(\n            ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    return this.transformExpr(\n        new BinaryOperatorExpr(\n            ast.operator, ast.lhs.visitExpression(this, context),\n            ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    return this.transformExpr(\n        new ReadPropExpr(\n            ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    return this.transformExpr(\n        new ReadKeyExpr(\n            ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context),\n            ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    return this.transformExpr(\n        new LiteralArrayExpr(\n            this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan),\n        context);\n  }\n\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    const entries = ast.entries.map(\n        (entry): LiteralMapEntry => new LiteralMapEntry(\n            entry.key, entry.value.visitExpression(this, context), entry.quoted));\n    const mapType = new MapType(ast.valueType, null);\n    return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\n  }\n  visitCommaExpr(ast: CommaExpr, context: any): any {\n    return this.transformExpr(\n        new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\n  }\n  visitAllExpressions(exprs: Expression[], context: any): Expression[] {\n    return exprs.map(expr => expr.visitExpression(this, context));\n  }\n\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    const value = stmt.value && stmt.value.visitExpression(this, context);\n    return this.transformStmt(\n        new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan), context);\n  }\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    return this.transformStmt(\n        new DeclareFunctionStmt(\n            stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type,\n            stmt.modifiers, stmt.sourceSpan),\n        context);\n  }\n\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    return this.transformStmt(\n        new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan),\n        context);\n  }\n\n  visitReturnStmt(stmt: ReturnStatement, context: any): any {\n    return this.transformStmt(\n        new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);\n  }\n\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    const parent = stmt.parent !.visitExpression(this, context);\n    const getters = stmt.getters.map(\n        getter => new ClassGetter(\n            getter.name, this.visitAllStatements(getter.body, context), getter.type,\n            getter.modifiers));\n    const ctorMethod = stmt.constructorMethod &&\n        new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params,\n                        this.visitAllStatements(stmt.constructorMethod.body, context),\n                        stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\n    const methods = stmt.methods.map(\n        method => new ClassMethod(\n            method.name, method.params, this.visitAllStatements(method.body, context), method.type,\n            method.modifiers));\n    return this.transformStmt(\n        new ClassStmt(\n            stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers,\n            stmt.sourceSpan),\n        context);\n  }\n\n  visitIfStmt(stmt: IfStmt, context: any): any {\n    return this.transformStmt(\n        new IfStmt(\n            stmt.condition.visitExpression(this, context),\n            this.visitAllStatements(stmt.trueCase, context),\n            this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan),\n        context);\n  }\n\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    return this.transformStmt(\n        new TryCatchStmt(\n            this.visitAllStatements(stmt.bodyStmts, context),\n            this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan),\n        context);\n  }\n\n  visitThrowStmt(stmt: ThrowStmt, context: any): any {\n    return this.transformStmt(\n        new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);\n  }\n\n  visitCommentStmt(stmt: CommentStmt, context: any): any {\n    return this.transformStmt(stmt, context);\n  }\n\n  visitJSDocCommentStmt(stmt: JSDocCommentStmt, context: any): any {\n    return this.transformStmt(stmt, context);\n  }\n\n  visitAllStatements(stmts: Statement[], context: any): Statement[] {\n    return stmts.map(stmt => stmt.visitStatement(this, context));\n  }\n}\n\n\nexport class RecursiveAstVisitor implements StatementVisitor, ExpressionVisitor {\n  visitType(ast: Type, context: any): any { return ast; }\n  visitExpression(ast: Expression, context: any): any {\n    if (ast.type) {\n      ast.type.visitType(this, context);\n    }\n    return ast;\n  }\n  visitBuiltinType(type: BuiltinType, context: any): any { return this.visitType(type, context); }\n  visitExpressionType(type: ExpressionType, context: any): any {\n    type.value.visitExpression(this, context);\n    if (type.typeParams !== null) {\n      type.typeParams.forEach(param => this.visitType(param, context));\n    }\n    return this.visitType(type, context);\n  }\n  visitArrayType(type: ArrayType, context: any): any { return this.visitType(type, context); }\n  visitMapType(type: MapType, context: any): any { return this.visitType(type, context); }\n  visitWrappedNodeExpr(ast: WrappedNodeExpr<any>, context: any): any { return ast; }\n  visitTypeofExpr(ast: TypeofExpr, context: any): any { return this.visitExpression(ast, context); }\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    return this.visitExpression(ast, context);\n  }\n  visitWriteVarExpr(ast: WriteVarExpr, context: any): any {\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitWriteKeyExpr(ast: WriteKeyExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitWritePropExpr(ast: WritePropExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    ast.fn.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    ast.classExpr.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n  visitLiteralExpr(ast: LiteralExpr, context: any): any {\n    return this.visitExpression(ast, context);\n  }\n  visitExternalExpr(ast: ExternalExpr, context: any): any {\n    if (ast.typeParams) {\n      ast.typeParams.forEach(type => type.visitType(this, context));\n    }\n    return this.visitExpression(ast, context);\n  }\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    ast.trueCase.visitExpression(this, context);\n    ast.falseCase !.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitNotExpr(ast: NotExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitAssertNotNullExpr(ast: AssertNotNull, context: any): any {\n    ast.condition.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitCastExpr(ast: CastExpr, context: any): any {\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitFunctionExpr(ast: FunctionExpr, context: any): any {\n    this.visitAllStatements(ast.statements, context);\n    return this.visitExpression(ast, context);\n  }\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    ast.lhs.visitExpression(this, context);\n    ast.rhs.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    this.visitAllExpressions(ast.entries, context);\n    return this.visitExpression(ast, context);\n  }\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    ast.entries.forEach((entry) => entry.value.visitExpression(this, context));\n    return this.visitExpression(ast, context);\n  }\n  visitCommaExpr(ast: CommaExpr, context: any): any {\n    this.visitAllExpressions(ast.parts, context);\n    return this.visitExpression(ast, context);\n  }\n  visitAllExpressions(exprs: Expression[], context: any): void {\n    exprs.forEach(expr => expr.visitExpression(this, context));\n  }\n\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    if (stmt.value) {\n      stmt.value.visitExpression(this, context);\n    }\n    if (stmt.type) {\n      stmt.type.visitType(this, context);\n    }\n    return stmt;\n  }\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    this.visitAllStatements(stmt.statements, context);\n    if (stmt.type) {\n      stmt.type.visitType(this, context);\n    }\n    return stmt;\n  }\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    stmt.expr.visitExpression(this, context);\n    return stmt;\n  }\n  visitReturnStmt(stmt: ReturnStatement, context: any): any {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    stmt.parent !.visitExpression(this, context);\n    stmt.getters.forEach(getter => this.visitAllStatements(getter.body, context));\n    if (stmt.constructorMethod) {\n      this.visitAllStatements(stmt.constructorMethod.body, context);\n    }\n    stmt.methods.forEach(method => this.visitAllStatements(method.body, context));\n    return stmt;\n  }\n  visitIfStmt(stmt: IfStmt, context: any): any {\n    stmt.condition.visitExpression(this, context);\n    this.visitAllStatements(stmt.trueCase, context);\n    this.visitAllStatements(stmt.falseCase, context);\n    return stmt;\n  }\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    this.visitAllStatements(stmt.bodyStmts, context);\n    this.visitAllStatements(stmt.catchStmts, context);\n    return stmt;\n  }\n  visitThrowStmt(stmt: ThrowStmt, context: any): any {\n    stmt.error.visitExpression(this, context);\n    return stmt;\n  }\n  visitCommentStmt(stmt: CommentStmt, context: any): any { return stmt; }\n  visitJSDocCommentStmt(stmt: JSDocCommentStmt, context: any): any { return stmt; }\n  visitAllStatements(stmts: Statement[], context: any): void {\n    stmts.forEach(stmt => stmt.visitStatement(this, context));\n  }\n}\n\nexport function findReadVarNames(stmts: Statement[]): Set<string> {\n  const visitor = new _ReadVarVisitor();\n  visitor.visitAllStatements(stmts, null);\n  return visitor.varNames;\n}\n\nclass _ReadVarVisitor extends RecursiveAstVisitor {\n  varNames = new Set<string>();\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    // Don't descend into nested classes\n    return stmt;\n  }\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    if (ast.name) {\n      this.varNames.add(ast.name);\n    }\n    return null;\n  }\n}\n\nexport function collectExternalReferences(stmts: Statement[]): ExternalReference[] {\n  const visitor = new _FindExternalReferencesVisitor();\n  visitor.visitAllStatements(stmts, null);\n  return visitor.externalReferences;\n}\n\nclass _FindExternalReferencesVisitor extends RecursiveAstVisitor {\n  externalReferences: ExternalReference[] = [];\n  visitExternalExpr(e: ExternalExpr, context: any) {\n    this.externalReferences.push(e.value);\n    return super.visitExternalExpr(e, context);\n  }\n}\n\nexport function applySourceSpanToStatementIfNeeded(\n    stmt: Statement, sourceSpan: ParseSourceSpan | null): Statement {\n  if (!sourceSpan) {\n    return stmt;\n  }\n  const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n  return stmt.visitStatement(transformer, null);\n}\n\nexport function applySourceSpanToExpressionIfNeeded(\n    expr: Expression, sourceSpan: ParseSourceSpan | null): Expression {\n  if (!sourceSpan) {\n    return expr;\n  }\n  const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n  return expr.visitExpression(transformer, null);\n}\n\nclass _ApplySourceSpanTransformer extends AstTransformer {\n  constructor(private sourceSpan: ParseSourceSpan) { super(); }\n  private _clone(obj: any): any {\n    const clone = Object.create(obj.constructor.prototype);\n    for (let prop in obj) {\n      clone[prop] = obj[prop];\n    }\n    return clone;\n  }\n\n  transformExpr(expr: Expression, context: any): Expression {\n    if (!expr.sourceSpan) {\n      expr = this._clone(expr);\n      expr.sourceSpan = this.sourceSpan;\n    }\n    return expr;\n  }\n\n  transformStmt(stmt: Statement, context: any): Statement {\n    if (!stmt.sourceSpan) {\n      stmt = this._clone(stmt);\n      stmt.sourceSpan = this.sourceSpan;\n    }\n    return stmt;\n  }\n}\n\nexport function variable(\n    name: string, type?: Type | null, sourceSpan?: ParseSourceSpan | null): ReadVarExpr {\n  return new ReadVarExpr(name, type, sourceSpan);\n}\n\nexport function importExpr(\n    id: ExternalReference, typeParams: Type[] | null = null,\n    sourceSpan?: ParseSourceSpan | null): ExternalExpr {\n  return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\n\nexport function importType(\n    id: ExternalReference, typeParams: Type[] | null = null,\n    typeModifiers: TypeModifier[] | null = null): ExpressionType|null {\n  return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\n\nexport function expressionType(\n    expr: Expression, typeModifiers: TypeModifier[] | null = null,\n    typeParams: Type[] | null = null): ExpressionType {\n  return new ExpressionType(expr, typeModifiers, typeParams);\n}\n\nexport function typeofExpr(expr: Expression) {\n  return new TypeofExpr(expr);\n}\n\nexport function literalArr(\n    values: Expression[], type?: Type | null,\n    sourceSpan?: ParseSourceSpan | null): LiteralArrayExpr {\n  return new LiteralArrayExpr(values, type, sourceSpan);\n}\n\nexport function literalMap(\n    values: {key: string, quoted: boolean, value: Expression}[],\n    type: MapType | null = null): LiteralMapExpr {\n  return new LiteralMapExpr(\n      values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);\n}\n\nexport function not(expr: Expression, sourceSpan?: ParseSourceSpan | null): NotExpr {\n  return new NotExpr(expr, sourceSpan);\n}\n\nexport function assertNotNull(\n    expr: Expression, sourceSpan?: ParseSourceSpan | null): AssertNotNull {\n  return new AssertNotNull(expr, sourceSpan);\n}\n\nexport function fn(\n    params: FnParam[], body: Statement[], type?: Type | null, sourceSpan?: ParseSourceSpan | null,\n    name?: string | null): FunctionExpr {\n  return new FunctionExpr(params, body, type, sourceSpan, name);\n}\n\nexport function ifStmt(condition: Expression, thenClause: Statement[], elseClause?: Statement[]) {\n  return new IfStmt(condition, thenClause, elseClause);\n}\n\nexport function literal(\n    value: any, type?: Type | null, sourceSpan?: ParseSourceSpan | null): LiteralExpr {\n  return new LiteralExpr(value, type, sourceSpan);\n}\n\nexport function isNull(exp: Expression): boolean {\n  return exp instanceof LiteralExpr && exp.value === null;\n}\n\n// The list of JSDoc tags that we currently support. Extend it if needed.\nexport const enum JSDocTagName {\n  Desc = 'desc',\n  Id = 'id',\n  Meaning = 'meaning',\n}\n\n/*\n * TypeScript has an API for JSDoc already, but it's not exposed.\n * https://github.com/Microsoft/TypeScript/issues/7393\n * For now we create types that are similar to theirs so that migrating\n * to their API will be easier. See e.g. `ts.JSDocTag` and `ts.JSDocComment`.\n */\nexport type JSDocTag = {\n  // `tagName` is e.g. \"param\" in an `@param` declaration\n  tagName: JSDocTagName | string,\n  // Any remaining text on the tag, e.g. the description\n  text?: string,\n} | {\n  // no `tagName` for plain text documentation that occurs before any `@param` lines\n  tagName?: undefined,\n  text: string,\n};\n\n/*\n * Serializes a `Tag` into a string.\n * Returns a string like \" @foo {bar} baz\" (note the leading whitespace before `@foo`).\n */\nfunction tagToString(tag: JSDocTag): string {\n  let out = '';\n  if (tag.tagName) {\n    out += ` @${tag.tagName}`;\n  }\n  if (tag.text) {\n    if (tag.text.match(/\\/\\*|\\*\\//)) {\n      throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n    }\n    out += ' ' + tag.text.replace(/@/g, '\\\\@');\n  }\n  return out;\n}\n\nfunction serializeTags(tags: JSDocTag[]): string {\n  if (tags.length === 0) return '';\n\n  let out = '*\\n';\n  for (const tag of tags) {\n    out += ' *';\n    // If the tagToString is multi-line, insert \" * \" prefixes on subsequent lines.\n    out += tagToString(tag).replace(/\\n/g, '\\n * ');\n    out += '\\n';\n  }\n  out += ' ';\n  return out;\n}\n"],"sourceRoot":""}