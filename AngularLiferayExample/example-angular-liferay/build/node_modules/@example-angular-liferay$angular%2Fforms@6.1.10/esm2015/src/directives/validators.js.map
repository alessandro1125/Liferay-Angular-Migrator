{"version":3,"sources":["../../../../../../../packages/forms/src/directives/validators.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, SimpleChanges, StaticProvider, forwardRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n/**\n * @description\n * Defines the map of errors returned from failed validation checks\n *\n * @experimental\n */\nexport type ValidationErrors = {\n  [key: string]: any\n};\n\n/**\n * @description\n * An interface implemented by classes that perform synchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n */\nexport interface Validator {\n  /**\n   * @description\n   * Method that performs synchronous validation against the provided control.\n   *\n   * @param c The control to validate against.\n   *\n   * @returns A map of validation errors if validation fails,\n   * otherwise null.\n   */\n  validate(control: AbstractControl): ValidationErrors|null;\n\n  /**\n   * @description\n   * Registers a callback function to call when the validator inputs change.\n   *\n   * @param fn The callback function\n   */\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/**\n * @description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * import { of as observableOf } from 'rxjs';\n *\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return observableOf({'custom': true});\n *   }\n * }\n * ```\n *\n * @experimental\n */\nexport interface AsyncValidator extends Validator {\n  /**\n   * @description\n   * Method that performs async validation against the provided control.\n   *\n   * @param c The control to validate against.\n   *\n   * @returns A promise or observable that resolves a map of validation errors\n   * if validation fails, otherwise null.\n   */\n  validate(control: AbstractControl):\n      Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\nexport const REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\nexport const CHECKBOX_REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class RequiredValidator implements Validator {\n  // TODO(issue/24571): remove '!'.\n  private _required !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  @Input()\n  get required(): boolean|string { return this._required; }\n\n  set required(value: boolean|string) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.required(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n}\n\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @experimental\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class CheckboxRequiredValidator extends RequiredValidator {\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.requiredTrue(control) : null;\n  }\n}\n\n/**\n * Provider which adds `EmailValidator` to `NG_VALIDATORS`.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @experimental\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n})\nexport class EmailValidator implements Validator {\n  // TODO(issue/24571): remove '!'.\n  private _enabled !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  @Input()\n  set email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this._enabled ? Validators.email(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n}\n\nexport interface ValidatorFn { (control: AbstractControl): ValidationErrors|null; }\n\nexport interface AsyncValidatorFn {\n  (control: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\n/**\n * Provider which adds `MinLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the `MinLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n})\nexport class MinLengthValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() minlength !: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.minlength == null ? null : this._validator(control);\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\n}\n\n/**\n * Provider which adds `MaxLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the `MaxLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `maxlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n})\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() maxlength !: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.maxlength != null ? this._validator(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\n}\n\n\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the `NG_VALIDATORS` binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n})\nexport class PatternValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() pattern !: string | RegExp;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null { return this._validator(control); }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\n}\n"],"sourceRoot":""}