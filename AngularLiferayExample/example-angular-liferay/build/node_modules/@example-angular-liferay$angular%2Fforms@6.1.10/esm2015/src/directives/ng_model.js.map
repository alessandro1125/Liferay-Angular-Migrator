{"version":3,"sources":["../../../../../../../packages/forms/src/directives/ng_model.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl, FormHooks} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @description\n *\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated `FormControl` (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in `AbstractControlDirective`.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * @ngModule FormsModule\n */\n@Directive({\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n})\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n  public readonly control: FormControl = new FormControl();\n  /** @internal */\n  _registered = false;\n  viewModel: any;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() name !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input('disabled') isDisabled !: boolean;\n  @Input('ngModel') model: any;\n\n  /**\n   * Options object for this `ngModel` instance. You can configure the following properties:\n   *\n   * **name**: An alternative to setting the name attribute on the form control element.\n   * Sometimes, especially with custom form components, the name attribute might be used\n   * as an `@Input` property for a different purpose. In cases like these, you can configure\n   * the `ngModel` name through this option.\n   *\n   * ```html\n   * <form>\n   *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n   *   </my-person-control>\n   * </form>\n   * <!-- form value: {user: ''} -->\n   * ```\n   *\n   * **standalone**: Defaults to false. If this is set to true, the `ngModel` will not\n   * register itself with its parent form, and will act as if it's not in the form. This\n   * can be handy if you have form meta-controls, a.k.a. form elements nested in\n   * the `<form>` tag that control the display of the form, but don't contain form data.\n   *\n   * ```html\n   * <form>\n   *   <input name=\"login\" ngModel placeholder=\"Login\">\n   *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n   * </form>\n   * <!-- form value: {login: ''} -->\n   * ```\n   *\n   * **updateOn**: Defaults to `'change'`. Defines the event upon which the form control\n   * value and validity will update. Also accepts `'blur'` and `'submit'`.\n   *\n   * ```html\n   * <input [(ngModel)]=\"firstName\" [ngModelOptions]=\"{updateOn: 'blur'}\">\n   * ```\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelOptions')\n  options !: {name?: string, standalone?: boolean, updateOn?: FormHooks};\n\n  @Output('ngModelChange') update = new EventEmitter();\n\n  constructor(@Optional() @Host() parent: ControlContainer,\n              @Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n              @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n              @Optional() @Self() @Inject(NG_VALUE_ACCESSOR)\n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n\n              ngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n\n              get path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n\n              get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n              get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n              get asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n\n              private _setUpControl(): void {\n                this._setUpdateStrategy();\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n\n              private _setUpdateStrategy(): void {\n                if (this.options && this.options.updateOn != null) {\n                  this.control._updateOn = this.options.updateOn;\n                }\n              }\n\n              private _isStandalone(): boolean {\n                return !this._parent || !!(this.options && this.options.standalone);\n              }\n\n              private _setUpStandalone(): void {\n                setUpControl(this.control, this);\n                this.control.updateValueAndValidity({emitEvent: false});\n              }\n\n              private _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n\n              private _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n\n              private _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n\n              private _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n\n              private _updateDisabled(changes: SimpleChanges) {\n                const disabledValue = changes['isDisabled'].currentValue;\n\n                const isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\n}\n"],"sourceRoot":""}