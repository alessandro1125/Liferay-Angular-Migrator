{"version":3,"sources":["../../../../../../../../packages/forms/src/directives/reactive_directives/form_control_name.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,WAAQ,SAAR,EAAmB,YAAnB,EAAiC,IAAjC,EAAuC,MAAvC,EAA+C,KAA/C,EAA4E,QAA5E,EAAsF,MAAtF,EAA8F,IAA9F,EAAmH,QAAnH,EAA6H,UAA7H,QAA8I,eAA9I;AAGA,WAAQ,mBAAR,EAA6B,aAA7B,QAAiD,kBAAjD;AACA,WAAQ,0BAAR,QAAyC,kCAAzC;AACA,WAAQ,gBAAR,QAA+B,sBAA/B;AACA,WAA8B,iBAA9B,QAAsD,2BAAtD;AACA,WAAQ,SAAR,QAAwB,eAAxB;AACA,WAAQ,cAAR,QAA6B,oBAA7B;AACA,WAAQ,eAAR,EAAyB,sBAAzB,EAAiD,iBAAjD,EAAoE,WAApE,EAAiF,iBAAjF,EAAoG,mBAApG,QAA8H,WAA9H;AAGA,WAAQ,kCAAR,QAAiD,0BAAjD;AACA,WAAQ,kBAAR,QAAiC,wBAAjC;AACA,WAAQ,aAAR,EAAuB,aAAvB,QAA2C,mBAA3C;;AAEA,SAAA,MAAa,qBAA0B;AACrC,aAAS,SAD4B;AAErC,iBAAa,WAAW,MAAM,eAAjB;AAFwB,GAAvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA,SAAM,MAAA,eAAA,SAA+B,SAA/B,CAAwC;;;;;;;;AAqC5C,gBACoC,MADpC,EAE+C,UAF/C,EAGqD,eAHrD,EAKmD,cALnD,EAMoE,qBANpE,EAOQ;AACN;AAFkE,WAAA,qBAAA,GAAA,qBAAA;oBA1CnD,K;;;;oBAkBiB,IAAI,YAAJ,E;;;;;;;iCAgBZ,K;AAWpB,WAAK,OAAL,GAAe,MAAf;AACA,WAAK,cAAL,GAAsB,cAAc,EAApC;AACA,WAAK,mBAAL,GAA2B,mBAAmB,EAA9C;AACA,WAAK,aAAL,GAAqB,oBAAoB,IAApB,EAA0B,cAA1B,CAArB;AACD;;;;;AAxCD,QACI,UADJ,CACe,UADf,EACkC;AAAI,qBAAe,mBAAf;AAAuC;;;;;AAyC7E,gBAAY,OAAZ,EAAkC;AAChC,UAAI,CAAC,KAAK,MAAV,EAAkB,KAAK,aAAL;AAClB,UAAI,kBAAkB,OAAlB,EAA2B,KAAK,SAAhC,CAAJ,EAAgD;AAC9C,wBAAgB,iBAAhB,EAAmC,eAAnC,EAAoD,IAApD,EAA0D,KAAK,qBAA/D;AACA,aAAK,SAAL,GAAiB,KAAK,KAAtB;AACA,aAAK,aAAL,CAAmB,WAAnB,CAA+B,IAA/B,EAAqC,KAAK,KAA1C;AACD;AACF;;;;AAED,kBAAW;AACT,UAAI,KAAK,aAAT,EAAwB;AACtB,aAAK,aAAL,CAAmB,aAAnB,CAAiC,IAAjC;AACD;AACF;;;;;AAED,sBAAkB,QAAlB,EAA+B;AAC7B,WAAK,SAAL,GAAiB,QAAjB;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,QAAjB;AACD;;;;AAED,QAAI,IAAJ,GAAQ;AAAe,aAAO,YAAY,KAAK,IAAjB,EAAqB,gBAAE,KAAK,OAA5B,CAAP;AAAgD;;;;AAEvE,QAAI,aAAJ,GAAiB;AAAU,aAAO,KAAK,OAAL,GAAe,KAAK,OAAL,CAAa,aAA5B,GAA4C,IAAnD;AAA0D;;;;AAErF,QAAI,SAAJ,GAAa;AAAuB,aAAO,kBAAkB,KAAK,cAAvB,CAAP;AAAgD;;;;AAEpF,QAAI,cAAJ,GAAkB;AAChB,aAAA,iBAAO,uBAAuB,KAAK,mBAA5B;AAAP;AACD;;;;AAEO,uBAAgB;AACtB,UAAI,EAAE,KAAK,OAAL,YAAwB,aAA1B,KACA,KAAK,OAAL,YAAwB,0BAD5B,EACwD;AACtD,uBAAe,qBAAf;AACD,OAHD,MAGO,IACH,EAAE,KAAK,OAAL,YAAwB,aAA1B,KAA4C,EAAE,KAAK,OAAL,YAAwB,kBAA1B,CAA5C,IACA,EAAE,KAAK,OAAL,YAAwB,aAA1B,CAFG,EAEuC;AAC5C,uBAAe,sBAAf;AACD;;;;;AAGK,oBAAa;AACnB,WAAK,gBAAL;AACA,sBAAC,IAAD,CAAgC,OAAhC,GAA0C,KAAK,aAAL,CAAmB,UAAnB,CAA8B,IAA9B,CAA1C;AACA,UAAI,KAAK,OAAL,CAAa,QAAb,IAAqB,gBAAI,KAAK,aAAT,CAAyB,gBAAlD,EAAoE;yCAClE,KAAK,a,CAAgB,gB,CAAmB,I;AACzC;AACD,WAAK,MAAL,GAAc,IAAd;;AAnG0C;;;;;;;4CA2BX,K;wCA5BlC,S,EAAS,MAAA,CAAC,EAAC,UAAU,mBAAX,EAAgC,WAAW,CAAC,kBAAD,CAA3C,EAAD,C;;kDAvIF,gB,EAAgB,YAAA,CAAA,EAAA,MA8KjB,QA9KiB,EAAA,EA8KT,EAAA,MAAI,IAAJ,EA9KS,EA8KD,EAAA,MAAI,QAAJ,EA9KC,C,YA+KqC,K,EAAK,YAAA,CAAA,EAAA,MAA3D,QAA2D,EAAA,EAAnD,EAAA,MAAI,IAAJ,EAAmD,EAA3C,EAAA,MAAI,MAAJ,EAAU,MAAA,CAAC,aAAD,CAAV,EAA2C,C,YAExD,K,EAAK,YAAA,CAAA,EAAA,MADR,QACQ,EAAA,EADA,EAAA,MAAI,IAAJ,EACA,EADQ,EAAA,MAAI,MAAJ,EAAU,MAAA,CAAC,mBAAD,CAAV,EACR,C,wCACR,Q,IAAQ,EAAA,MAAI,IAAJ,E,EAAQ,EAAA,MAAI,MAAJ,EAAU,MAAA,CAAC,iBAAD,CAAV,E,6CAChB,Q,IAAQ,EAAA,MAAI,MAAJ,EAAU,MAAA,CAAC,kCAAD,CAAV,E;;mBAnCZ,K,EAAK,MAAA,CAAC,iBAAD,C;yBAEL,K,EAAK,MAAA,CAAC,UAAD,C;oBAML,K,EAAK,MAAA,CAAC,SAAD,C;qBAGL,M,EAAM,MAAA,CAAC,eAAD,C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {_ngModelWarning, composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {NG_MODEL_WITH_FORM_CONTROL_WARNING} from './form_control_directive';\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n\n/**\n * @description\n *\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * @usageNotes\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the `FormControl` instance you want to\n * link, and will look for a `FormControl` registered with that name in the\n * closest `FormGroup` or `FormArray` above it.\n *\n * **Access the control**: You can access the `FormControl` associated with\n * this directive by using the {@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the `FormControl`.\n * See a full list of available properties in `AbstractControl`.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  `FormControl`, or you can set it programmatically later using\n *  {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formControlName]', providers: [controlNameBinding]})\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  private _added = false;\n  /** @internal */\n  viewModel: any;\n  // TODO(issue/24571): remove '!'.\n  readonly control !: FormControl;\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formControlName') name !: string;\n\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlName. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlName instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          Array<AsyncValidator|AsyncValidatorFn>,\n      @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n      @Optional() @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING) private _ngModelWarningConfig: string|\n      null) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n\n  viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent !); }\n\n  get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n  get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n  get asyncValidator(): AsyncValidatorFn {\n    return composeAsyncValidators(this._rawAsyncValidators) !;\n  }\n\n  private _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n\n  private _setUpControl() {\n    this._checkParentType();\n    (this as{control: FormControl}).control = this.formDirective.addControl(this);\n    if (this.control.disabled && this.valueAccessor !.setDisabledState) {\n      this.valueAccessor !.setDisabledState !(true);\n    }\n    this._added = true;\n  }\n}\n"],"sourceRoot":""}