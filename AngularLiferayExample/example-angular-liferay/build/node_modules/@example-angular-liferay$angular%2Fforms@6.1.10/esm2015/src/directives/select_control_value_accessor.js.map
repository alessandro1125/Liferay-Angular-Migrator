{"version":3,"sources":["../../../../../../../packages/forms/src/directives/select_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider, forwardRef, ÉµlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string | null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/**\n * @description\n *\n * Writes values and listens to changes on a select element.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n})\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, any> = new Map<string, any>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    const id: string|null = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const valueString = _buildValueString(id, value);\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = this._getOptionValue(valueString);\n      fn(this.value);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(): string { return (this._idCounter++).toString(); }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\n}\n\n/**\n * @description\n *\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * See docs for `SelectControlValueAccessor` for usage examples.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: 'option'})\nexport class NgSelectOption implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  id !: string;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  @Input('value')\n  set value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n"],"sourceRoot":""}