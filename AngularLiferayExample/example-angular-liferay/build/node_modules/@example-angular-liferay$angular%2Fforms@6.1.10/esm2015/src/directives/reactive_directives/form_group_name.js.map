{"version":3,"sources":["../../../../../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormGroup` you want to link, and\n * will look for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * @usageNotes\n * **Access the group**: You can access the associated `FormGroup` using the\n * {@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormGroup`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormGroup`, or you can set it programmatically later using\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formGroupName]', providers: [formGroupNameProvider]})\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @Input('formGroupName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * @usageNotes\n * **Access the array**: You can access the associated `FormArray` using the\n * {@link AbstractControl#get get} method on the parent `FormGroup`.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormArray`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormArray`, or you can set the value programmatically later using the\n * `FormArray`'s {@link AbstractControl#setValue setValue} or\n * {@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the `FormArray`'s {@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the `FormArray` dynamically by calling\n * its {@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formArrayName]', providers: [formArrayNameProvider]})\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formArrayName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective !.addFormArray(this);\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n\n  get control(): FormArray { return this.formDirective !.getFormArray(this); }\n\n  get formDirective(): FormGroupDirective|null {\n    return this._parent ? <FormGroupDirective>this._parent.formDirective : null;\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  get validator(): ValidatorFn|null { return composeValidators(this._validators); }\n\n  get asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n\n  private _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\n}\n\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n"],"sourceRoot":""}