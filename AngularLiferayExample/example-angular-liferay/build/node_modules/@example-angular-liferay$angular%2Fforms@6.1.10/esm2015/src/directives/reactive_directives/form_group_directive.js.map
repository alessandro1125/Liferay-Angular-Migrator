{"version":3,"sources":["../../../../../../../../packages/forms/src/directives/reactive_directives/form_group_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls} from '../shared';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @usageNotes\n * **Set value**: You can set the form's initial value when instantiating the\n * `FormGroup`, or you can set it programmatically later using the `FormGroup`'s\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the `FormGroup`'s {@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n})\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\n  public readonly submitted: boolean = false;\n\n  // TODO(issue/24571): remove '!'.\n  private _oldForm !: FormGroup;\n  directives: FormControlName[] = [];\n\n  @Input('formGroup') form: FormGroup = null !;\n  @Output() ngSubmit = new EventEmitter();\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) private _validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) private _asyncValidators: any[]) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n    }\n  }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  addControl(dir: FormControlName): FormControl {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  getControl(dir: FormControlName): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: FormControlName): void { removeDir<FormControlName>(this.directives, dir); }\n\n  addFormGroup(dir: FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormGroup(dir: FormGroupName): void {}\n\n  getFormGroup(dir: FormGroupName): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  addFormArray(dir: FormArrayName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormArray(dir: FormArrayName): void {}\n\n  getFormArray(dir: FormArrayName): FormArray { return <FormArray>this.form.get(dir.path); }\n\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrlÂ  = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  onSubmit($event: Event): boolean {\n    (this as{submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this.directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as{submitted: boolean}).submitted = false;\n  }\n\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      const newCtrl: any = this.form.get(dir.path);\n      if (dir.control !== newCtrl) {\n        cleanUpControl(dir.control, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        (dir as{control: FormControl}).control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) this._oldForm._registerOnCollectionChange(() => {});\n    this._oldForm = this.form;\n  }\n\n  private _updateValidators() {\n    const sync = composeValidators(this._validators);\n    this.form.validator = Validators.compose([this.form.validator !, sync !]);\n\n    const async = composeAsyncValidators(this._asyncValidators);\n    this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator !, async !]);\n  }\n\n  private _checkFormPresent() {\n    if (!this.form) {\n      ReactiveErrors.missingFormException();\n    }\n  }\n}\n"],"sourceRoot":""}