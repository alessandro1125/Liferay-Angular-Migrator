{"version":3,"sources":["../../../../../../../packages/forms/src/directives/checkbox_value_accessor.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,WAAQ,SAAR,EAAmB,UAAnB,EAA+B,SAA/B,EAA0C,UAA1C,QAA2D,eAA3D;AAEA,WAA8B,iBAA9B,QAAsD,0BAAtD;;AAEA,SAAA,MAAa,0BAA+B;AAC1C,aAAS,iBADiC;AAE1C,iBAAa,WAAW,MAAM,4BAAjB,CAF6B;AAG1C,WAAO;AAHmC,GAA5C;;;;;;;;;;;;;;AAyBA,SAAM,MAAA,4BAAA,CAAA;;;;;AAIJ,gBAAoB,SAApB,EAAkD,WAAlD,EAAyE;AAArD,WAAA,SAAA,GAAA,SAAA;AAA8B,WAAA,WAAA,GAAA,WAAA;sBAHtC,CAAD,IAAW,CAAG,C;uBACb,MAAK,CAAG,C;AAEyD;;;;;AAE7E,eAAW,KAAX,EAAqB;AACnB,WAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,SAA3D,EAAsE,KAAtE;AACD;;;;;AACD,qBAAiB,EAAjB,EAAmC;AAAU,WAAK,QAAL,GAAgB,EAAhB;AAAqB;;;;;AAClE,sBAAkB,EAAlB,EAA8B;AAAU,WAAK,SAAL,GAAiB,EAAjB;AAAsB;;;;;AAE9D,qBAAiB,UAAjB,EAAoC;AAClC,WAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,UAA3D,EAAuE,UAAvE;AACD;AAdG;qDANL,S,EAAS,MAAA,CAAC;AACT,gBACI,uGAFK;AAGT,YAAM,EAAC,YAAY,iCAAb,EAAgD,UAAU,aAA1D,EAHG;AAIT,iBAAW,CAAC,uBAAD;AAJF,KAAD,C;;+DAvBqB,S,YAAZ,U","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n  registerOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n"],"sourceRoot":""}