{"version":3,"sources":["../../../../../../../packages/forms/src/directives/ng_control_status.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,WAAQ,SAAR,EAAmB,IAAnB,QAA8B,eAA9B;AAGA,WAAQ,gBAAR,QAA+B,qBAA/B;AACA,WAAQ,SAAR,QAAwB,cAAxB;AAEA,SAAM,MAAA,qBAAA,CAAA;;;;AAGJ,gBAAY,EAAZ,EAAwC;AAAI,WAAK,GAAL,GAAW,EAAX;AAAgB;;;;AAE5D,QAAI,gBAAJ,GAAoB;AAAc,aAAO,KAAK,GAAL,CAAS,OAAT,GAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,SAApC,GAAgD,KAAvD;AAA+D;;;;AACjG,QAAI,cAAJ,GAAkB;AAAc,aAAO,KAAK,GAAL,CAAS,OAAT,GAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,OAApC,GAA8C,KAArD;AAA6D;;;;AAC7F,QAAI,eAAJ,GAAmB;AAAc,aAAO,KAAK,GAAL,CAAS,OAAT,GAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,QAApC,GAA+C,KAAtD;AAA8D;;;;AAC/F,QAAI,YAAJ,GAAgB;AAAc,aAAO,KAAK,GAAL,CAAS,OAAT,GAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,KAApC,GAA4C,KAAnD;AAA2D;;;;AACzF,QAAI,YAAJ,GAAgB;AAAc,aAAO,KAAK,GAAL,CAAS,OAAT,GAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,KAApC,GAA4C,KAAnD;AAA2D;;;;AACzF,QAAI,cAAJ,GAAkB;AAAc,aAAO,KAAK,GAAL,CAAS,OAAT,GAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,OAApC,GAA8C,KAArD;AAA6D;;;;AAC7F,QAAI,cAAJ,GAAkB;AAAc,aAAO,KAAK,GAAL,CAAS,OAAT,GAAmB,KAAK,GAAL,CAAS,OAAT,CAAiB,OAApC,GAA8C,KAArD;AAA6D;AAXzF;;;;;;AAcN,SAAA,MAAa,sBAAsB;AACjC,4BAAwB,kBADS;AAEjC,0BAAsB,gBAFW;AAGjC,2BAAuB,iBAHU;AAIjC,wBAAoB,cAJa;AAKjC,wBAAoB,cALa;AAMjC,0BAAsB,gBANW;AAOjC,0BAAsB;AAPW,GAAnC;;;;;;;;;;;;;;;;;AA2BA,SAAM,MAAA,eAAA,SAA+B,qBAA/B,CAAoD;;;;AACxD,gBAAoB,EAApB,EAAiC;AAAI,YAAM,EAAN;AAAY;AADO;wCADzD,S,EAAS,MAAA,CAAC,EAAC,UAAU,2CAAX,EAAwD,MAAM,mBAA9D,EAAD,C;;kDA1CF,S,EAAS,YAAA,CAAA,EAAA,MA4CF,IA5CE,EAAA,C;;;;;;;;AA2DjB,SAAM,MAAA,oBAAA,SAAoC,qBAApC,CAAyD;;;;AAC7D,gBAAoB,EAApB,EAAwC;AAAI,YAAM,EAAN;AAAY;AADK;6CAL9D,S,EAAS,MAAA,CAAC;AACT,gBACI,0FAFK;AAGT,YAAM;AAHG,KAAD,C;;uDAvDF,gB,EAAgB,YAAA,CAAA,EAAA,MA6DT,IA7DS,EAAA,C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Self} from '@angular/core';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {NgControl} from './ng_control';\n\nexport class AbstractControlStatus {\n  private _cd: AbstractControlDirective;\n\n  constructor(cd: AbstractControlDirective) { this._cd = cd; }\n\n  get ngClassUntouched(): boolean { return this._cd.control ? this._cd.control.untouched : false; }\n  get ngClassTouched(): boolean { return this._cd.control ? this._cd.control.touched : false; }\n  get ngClassPristine(): boolean { return this._cd.control ? this._cd.control.pristine : false; }\n  get ngClassDirty(): boolean { return this._cd.control ? this._cd.control.dirty : false; }\n  get ngClassValid(): boolean { return this._cd.control ? this._cd.control.valid : false; }\n  get ngClassInvalid(): boolean { return this._cd.control ? this._cd.control.invalid : false; }\n  get ngClassPending(): boolean { return this._cd.control ? this._cd.control.pending : false; }\n}\n\nexport const ngControlStatusHost = {\n  '[class.ng-untouched]': 'ngClassUntouched',\n  '[class.ng-touched]': 'ngClassTouched',\n  '[class.ng-pristine]': 'ngClassPristine',\n  '[class.ng-dirty]': 'ngClassDirty',\n  '[class.ng-valid]': 'ngClassValid',\n  '[class.ng-invalid]': 'ngClassInvalid',\n  '[class.ng-pending]': 'ngClassPending',\n};\n\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost})\nexport class NgControlStatus extends AbstractControlStatus {\n  constructor(@Self() cd: NgControl) { super(cd); }\n}\n\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n  host: ngControlStatusHost\n})\nexport class NgControlStatusGroup extends AbstractControlStatus {\n  constructor(@Self() cd: ControlContainer) { super(cd); }\n}\n"],"sourceRoot":""}