{"version":3,"sources":["../../../../../../../packages/forms/src/directives/ng_form.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, EventEmitter, Inject, Input, Optional, Self, forwardRef} from '@angular/core';\n\nimport {AbstractControl, FormControl, FormGroup, FormHooks} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls} from './shared';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @description\n *\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use `NgModel` with a\n * `name` attribute.  You can also use `NgModelGroup` if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * **npm package**: `@angular/forms`\n *\n * @ngModule FormsModule\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n})\nexport class NgForm extends ControlContainer implements Form,\n    AfterViewInit {\n  public readonly submitted: boolean = false;\n\n  private _directives: NgModel[] = [];\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n\n  /**\n   * Options for the `NgForm` instance. Accepts the following properties:\n   *\n   * **updateOn**: Serves as the default `updateOn` value for all child `NgModels` below it\n   * (unless a child has explicitly set its own value for this in `ngModelOptions`).\n   * Potential values: `'change'` | `'blur'` | `'submit'`\n   *\n   * ```html\n   * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n   *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n   * </form>\n   * ```\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngFormOptions') options !: {updateOn?: FormHooks};\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n\n  ngAfterViewInit() { this._setUpdateStrategy(); }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  get controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n\n  addControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      (dir as{control: FormControl}).control =\n          <FormControl>container.registerControl(dir.name, dir.control);\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n      this._directives.push(dir);\n    });\n  }\n\n  getControl(dir: NgModel): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n      removeDir<NgModel>(this._directives, dir);\n    });\n  }\n\n  addFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  removeFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  getFormGroup(dir: NgModelGroup): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  updateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const ctrl = <FormControl>this.form.get(dir.path !);\n      ctrl.setValue(value);\n    });\n  }\n\n  setValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n\n  onSubmit($event: Event): boolean {\n    (this as{submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this._directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as{submitted: boolean}).submitted = false;\n  }\n\n  private _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.form._updateOn = this.options.updateOn;\n    }\n  }\n\n  /** @internal */\n  _findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? <FormGroup>this.form.get(path) : this.form;\n  }\n}\n"],"sourceRoot":""}