Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/reactive_directives/form_group_name', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, Host, Inject, Input, Optional, Self, SkipSelf, forwardRef } from '@angular/core';
    import { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';
    import { AbstractFormGroupDirective } from '../abstract_form_group_directive';
    import { ControlContainer } from '../control_container';
    import { ReactiveErrors } from '../reactive_errors';
    import { composeAsyncValidators, composeValidators, controlPath } from '../shared';
    import { FormGroupDirective } from './form_group_directive';
    export var formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () {
            return FormGroupName;
        })
    };
    /**
     * @description
     *
     * Syncs a nested `FormGroup` to a DOM element.
     *
     * This directive can only be used with a parent `FormGroupDirective` (selector:
     * `[formGroup]`).
     *
     * It accepts the string name of the nested `FormGroup` you want to link, and
     * will look for a `FormGroup` registered with that name in the parent
     * `FormGroup` instance you passed into `FormGroupDirective`.
     *
     * Nested form groups can come in handy when you want to validate a sub-group of a
     * form separately from the rest or when you'd like to group the values of certain
     * controls into their own nested object.
     *
     * @usageNotes
     * **Access the group**: You can access the associated `FormGroup` using the
     * {@link AbstractControl#get get} method. Ex: `this.form.get('name')`.
     *
     * You can also access individual controls within the group using dot syntax.
     * Ex: `this.form.get('name.first')`
     *
     * **Get the value**: the `value` property is always synced and available on the
     * `FormGroup`. See a full list of available properties in `AbstractControl`.
     *
     * **Set the value**: You can set an initial value for each child control when instantiating
     * the `FormGroup`, or you can set it programmatically later using
     * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.
     *
     * **Listen to value**: If you want to listen to changes in the value of the group, you can
     * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to
     * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is
     * re-calculated.
     *
     * ### Example
     *
     * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
     *
     * @ngModule ReactiveFormsModule
     */
    var FormGroupName = /** @class */function (_super) {
        tslib_1.__extends(FormGroupName, _super);
        function FormGroupName(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        /** @internal */
        FormGroupName.prototype._checkParentType = function () {
            if (_hasInvalidParent(this._parent)) {
                ReactiveErrors.groupParentException();
            }
        };
        tslib_1.__decorate([Input('formGroupName'), tslib_1.__metadata("design:type", String)], FormGroupName.prototype, "name", void 0);
        FormGroupName = tslib_1.__decorate([Directive({ selector: '[formGroupName]', providers: [formGroupNameProvider] }), tslib_1.__param(0, Optional()), tslib_1.__param(0, Host()), tslib_1.__param(0, SkipSelf()), tslib_1.__param(1, Optional()), tslib_1.__param(1, Self()), tslib_1.__param(1, Inject(NG_VALIDATORS)), tslib_1.__param(2, Optional()), tslib_1.__param(2, Self()), tslib_1.__param(2, Inject(NG_ASYNC_VALIDATORS)), tslib_1.__metadata("design:paramtypes", [ControlContainer, Array, Array])], FormGroupName);
        return FormGroupName;
    }(AbstractFormGroupDirective);
    export { FormGroupName };
    export var formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () {
            return FormArrayName;
        })
    };
    /**
     * @description
     *
     * Syncs a nested `FormArray` to a DOM element.
     *
     * This directive is designed to be used with a parent `FormGroupDirective` (selector:
     * `[formGroup]`).
     *
     * It accepts the string name of the nested `FormArray` you want to link, and
     * will look for a `FormArray` registered with that name in the parent
     * `FormGroup` instance you passed into `FormGroupDirective`.
     *
     * Nested form arrays can come in handy when you have a group of form controls but
     * you're not sure how many there will be. Form arrays allow you to create new
     * form controls dynamically.
     *
     * @usageNotes
     * **Access the array**: You can access the associated `FormArray` using the
     * {@link AbstractControl#get get} method on the parent `FormGroup`.
     * Ex: `this.form.get('cities')`.
     *
     * **Get the value**: the `value` property is always synced and available on the
     * `FormArray`. See a full list of available properties in `AbstractControl`.
     *
     * **Set the value**: You can set an initial value for each child control when instantiating
     * the `FormArray`, or you can set the value programmatically later using the
     * `FormArray`'s {@link AbstractControl#setValue setValue} or
     * {@link AbstractControl#patchValue patchValue} methods.
     *
     * **Listen to value**: If you want to listen to changes in the value of the array, you can
     * subscribe to the `FormArray`'s {@link AbstractControl#valueChanges valueChanges} event.
     * You can also listen to its {@link AbstractControl#statusChanges statusChanges} event to be
     * notified when the validation status is re-calculated.
     *
     * **Add new controls**: You can add new controls to the `FormArray` dynamically by calling
     * its {@link FormArray#push push} method.
     * Ex: `this.form.get('cities').push(new FormControl());`
     *
     * ### Example
     *
     * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
     *
     * @ngModule ReactiveFormsModule
     */
    var FormArrayName = /** @class */function (_super) {
        tslib_1.__extends(FormArrayName, _super);
        function FormArrayName(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        FormArrayName.prototype.ngOnInit = function () {
            this._checkParentType();
            this.formDirective.addFormArray(this);
        };
        FormArrayName.prototype.ngOnDestroy = function () {
            if (this.formDirective) {
                this.formDirective.removeFormArray(this);
            }
        };
        Object.defineProperty(FormArrayName.prototype, "control", {
            get: function () {
                return this.formDirective.getFormArray(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "formDirective", {
            get: function () {
                return this._parent ? this._parent.formDirective : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "path", {
            get: function () {
                return controlPath(this.name, this._parent);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "validator", {
            get: function () {
                return composeValidators(this._validators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
            get: function () {
                return composeAsyncValidators(this._asyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        FormArrayName.prototype._checkParentType = function () {
            if (_hasInvalidParent(this._parent)) {
                ReactiveErrors.arrayParentException();
            }
        };
        tslib_1.__decorate([Input('formArrayName'), tslib_1.__metadata("design:type", String)], FormArrayName.prototype, "name", void 0);
        FormArrayName = tslib_1.__decorate([Directive({ selector: '[formArrayName]', providers: [formArrayNameProvider] }), tslib_1.__param(0, Optional()), tslib_1.__param(0, Host()), tslib_1.__param(0, SkipSelf()), tslib_1.__param(1, Optional()), tslib_1.__param(1, Self()), tslib_1.__param(1, Inject(NG_VALIDATORS)), tslib_1.__param(2, Optional()), tslib_1.__param(2, Self()), tslib_1.__param(2, Inject(NG_ASYNC_VALIDATORS)), tslib_1.__metadata("design:paramtypes", [ControlContainer, Array, Array])], FormArrayName);
        return FormArrayName;
    }(ControlContainer);
    export { FormArrayName };
    function _hasInvalidParent(parent) {
        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
    }
});
//# sourceMappingURL=form_group_name.js.map