Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/shared', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { isDevMode, ÉµlooseIdentical as looseIdentical } from '@angular/core';
    import { Validators } from '../validators';
    import { CheckboxControlValueAccessor } from './checkbox_value_accessor';
    import { DefaultValueAccessor } from './default_value_accessor';
    import { normalizeAsyncValidator, normalizeValidator } from './normalize_validator';
    import { NumberValueAccessor } from './number_value_accessor';
    import { RadioControlValueAccessor } from './radio_control_value_accessor';
    import { RangeValueAccessor } from './range_value_accessor';
    import { ReactiveErrors } from './reactive_errors';
    import { SelectControlValueAccessor } from './select_control_value_accessor';
    import { SelectMultipleControlValueAccessor } from './select_multiple_control_value_accessor';
    export function controlPath(name, parent) {
        return tslib_1.__spread(parent.path, [name]);
    }
    export function setUpControl(control, dir) {
        if (!control) _throwError(dir, 'Cannot find control with');
        if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
        dir.valueAccessor.writeValue(control.value);
        setUpViewChangePipeline(control, dir);
        setUpModelChangePipeline(control, dir);
        setUpBlurPipeline(control, dir);
        if (dir.valueAccessor.setDisabledState) {
            control.registerOnDisabledChange(function (isDisabled) {
                dir.valueAccessor.setDisabledState(isDisabled);
            });
        }
        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
        dir._rawValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function () {
                return control.updateValueAndValidity();
            });
        });
        dir._rawAsyncValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function () {
                return control.updateValueAndValidity();
            });
        });
    }
    export function cleanUpControl(control, dir) {
        dir.valueAccessor.registerOnChange(function () {
            return _noControlError(dir);
        });
        dir.valueAccessor.registerOnTouched(function () {
            return _noControlError(dir);
        });
        dir._rawValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) {
                validator.registerOnValidatorChange(null);
            }
        });
        dir._rawAsyncValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) {
                validator.registerOnValidatorChange(null);
            }
        });
        if (control) control._clearChangeFns();
    }
    function setUpViewChangePipeline(control, dir) {
        dir.valueAccessor.registerOnChange(function (newValue) {
            control._pendingValue = newValue;
            control._pendingChange = true;
            control._pendingDirty = true;
            if (control.updateOn === 'change') updateControl(control, dir);
        });
    }
    function setUpBlurPipeline(control, dir) {
        dir.valueAccessor.registerOnTouched(function () {
            control._pendingTouched = true;
            if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);
            if (control.updateOn !== 'submit') control.markAsTouched();
        });
    }
    function updateControl(control, dir) {
        if (control._pendingDirty) control.markAsDirty();
        control.setValue(control._pendingValue, { emitModelToViewChange: false });
        dir.viewToModelUpdate(control._pendingValue);
        control._pendingChange = false;
    }
    function setUpModelChangePipeline(control, dir) {
        control.registerOnChange(function (newValue, emitModelEvent) {
            // control -> view
            dir.valueAccessor.writeValue(newValue);
            // control -> ngModel
            if (emitModelEvent) dir.viewToModelUpdate(newValue);
        });
    }
    export function setUpFormContainer(control, dir) {
        if (control == null) _throwError(dir, 'Cannot find control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    }
    function _noControlError(dir) {
        return _throwError(dir, 'There is no FormControl instance attached to form control element with');
    }
    function _throwError(dir, message) {
        var messageEnd;
        if (dir.path.length > 1) {
            messageEnd = "path: '" + dir.path.join(' -> ') + "'";
        } else if (dir.path[0]) {
            messageEnd = "name: '" + dir.path + "'";
        } else {
            messageEnd = 'unspecified name attribute';
        }
        throw new Error(message + " " + messageEnd);
    }
    export function composeValidators(validators) {
        return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
    }
    export function composeAsyncValidators(validators) {
        return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
    }
    export function isPropertyUpdated(changes, viewModel) {
        if (!changes.hasOwnProperty('model')) return false;
        var change = changes['model'];
        if (change.isFirstChange()) return true;
        return !looseIdentical(viewModel, change.currentValue);
    }
    var BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor];
    export function isBuiltInAccessor(valueAccessor) {
        return BUILTIN_ACCESSORS.some(function (a) {
            return valueAccessor.constructor === a;
        });
    }
    export function syncPendingControls(form, directives) {
        form._syncPendingControls();
        directives.forEach(function (dir) {
            var control = dir.control;
            if (control.updateOn === 'submit' && control._pendingChange) {
                dir.viewToModelUpdate(control._pendingValue);
                control._pendingChange = false;
            }
        });
    }
    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
    export function selectValueAccessor(dir, valueAccessors) {
        if (!valueAccessors) return null;
        if (!Array.isArray(valueAccessors)) _throwError(dir, 'Value accessor was not provided as an array for form control with');
        var defaultAccessor = undefined;
        var builtinAccessor = undefined;
        var customAccessor = undefined;
        valueAccessors.forEach(function (v) {
            if (v.constructor === DefaultValueAccessor) {
                defaultAccessor = v;
            } else if (isBuiltInAccessor(v)) {
                if (builtinAccessor) _throwError(dir, 'More than one built-in value accessor matches form control with');
                builtinAccessor = v;
            } else {
                if (customAccessor) _throwError(dir, 'More than one custom value accessor matches form control with');
                customAccessor = v;
            }
        });
        if (customAccessor) return customAccessor;
        if (builtinAccessor) return builtinAccessor;
        if (defaultAccessor) return defaultAccessor;
        _throwError(dir, 'No valid value accessor for form control with');
        return null;
    }
    export function removeDir(list, el) {
        var index = list.indexOf(el);
        if (index > -1) list.splice(index, 1);
    }
    // TODO(kara): remove after deprecation period
    export function _ngModelWarning(name, type, instance, warningConfig) {
        if (!isDevMode() || warningConfig === 'never') return;
        if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {
            ReactiveErrors.ngModelWarning(name);
            type._ngModelWarningSentOnce = true;
            instance._ngModelWarningSent = true;
        }
    }
});
//# sourceMappingURL=shared.js.map