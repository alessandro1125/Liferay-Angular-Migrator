{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/default_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, Optional, Renderer2, forwardRef} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const DEFAULT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n  const userAgent = getDOM() ? getDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * @experimental\n */\nexport const COMPOSITION_BUFFER_MODE = new InjectionToken<boolean>('CompositionEventMode');\n\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"text\" name=\"searchQuery\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngModel],[formControl],[formControlName]',\n  host: {\n    '(input)': '$any(this)._handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '$any(this)._compositionStart()',\n    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n  },\n  providers: [DEFAULT_VALUE_ACCESSOR]\n})\nexport class DefaultValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  /** Whether the user is creating a composition string (IME events). */\n  private _composing = false;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _handleInput(value: any): void {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this.onChange(value);\n    }\n  }\n\n  /** @internal */\n  _compositionStart(): void { this._composing = true; }\n\n  /** @internal */\n  _compositionEnd(value: any): void {\n    this._composing = false;\n    this._compositionMode && this.onChange(value);\n  }\n}\n"],"sourceRoot":""}