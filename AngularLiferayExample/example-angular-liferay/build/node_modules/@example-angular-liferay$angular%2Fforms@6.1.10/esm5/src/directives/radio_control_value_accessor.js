Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/radio_control_value_accessor', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, ElementRef, Injectable, Injector, Input, Renderer2, forwardRef } from '@angular/core';
    import { NG_VALUE_ACCESSOR } from './control_value_accessor';
    import { NgControl } from './ng_control';
    export var RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () {
            return RadioControlValueAccessor;
        }),
        multi: true
    };
    /**
     * Internal class used by Angular to uncheck radio buttons with the matching name.
     */
    var RadioControlRegistry = /** @class */function () {
        function RadioControlRegistry() {
            this._accessors = [];
        }
        RadioControlRegistry.prototype.add = function (control, accessor) {
            this._accessors.push([control, accessor]);
        };
        RadioControlRegistry.prototype.remove = function (accessor) {
            for (var i = this._accessors.length - 1; i >= 0; --i) {
                if (this._accessors[i][1] === accessor) {
                    this._accessors.splice(i, 1);
                    return;
                }
            }
        };
        RadioControlRegistry.prototype.select = function (accessor) {
            var _this = this;
            this._accessors.forEach(function (c) {
                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
                    c[1].fireUncheck(accessor.value);
                }
            });
        };
        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
            if (!controlPair[0].control) return false;
            return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
        };
        RadioControlRegistry = tslib_1.__decorate([Injectable()], RadioControlRegistry);
        return RadioControlRegistry;
    }();
    export { RadioControlRegistry };
    /**
     * @description
     *
     * Writes radio control values and listens to radio control changes.
     *
     * Used by `NgModel`, `FormControlDirective`, and `FormControlName`
     * to keep the view synced with the `FormControl` model.
     *
     * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this
     * value accessor will be active on any radio control that has a form directive. You do
     * **not** need to add a special selector to activate it.
     *
     * @usageNotes
     * ### How to use radio buttons with form directives
     *
     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons
     * in the same group have the same `name` attribute.  Radio buttons with different `name`
     * attributes do not affect each other.
     *
     * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}
     *
     * When using radio buttons in a reactive form, radio buttons in the same group should have the
     * same `formControlName`. You can also add a `name` attribute, but it's optional.
     *
     * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var RadioControlValueAccessor = /** @class */function () {
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._registry = _registry;
            this._injector = _injector;
            this.onChange = function () {};
            this.onTouched = function () {};
        }
        RadioControlValueAccessor.prototype.ngOnInit = function () {
            this._control = this._injector.get(NgControl);
            this._checkName();
            this._registry.add(this._control, this);
        };
        RadioControlValueAccessor.prototype.ngOnDestroy = function () {
            this._registry.remove(this);
        };
        RadioControlValueAccessor.prototype.writeValue = function (value) {
            this._state = value === this.value;
            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);
        };
        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this._fn = fn;
            this.onChange = function () {
                fn(_this.value);
                _this._registry.select(_this);
            };
        };
        RadioControlValueAccessor.prototype.fireUncheck = function (value) {
            this.writeValue(value);
        };
        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        RadioControlValueAccessor.prototype._checkName = function () {
            if (this.name && this.formControlName && this.name !== this.formControlName) {
                this._throwNameError();
            }
            if (!this.name && this.formControlName) this.name = this.formControlName;
        };
        RadioControlValueAccessor.prototype._throwNameError = function () {
            throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], RadioControlValueAccessor.prototype, "name", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], RadioControlValueAccessor.prototype, "formControlName", void 0);
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object)], RadioControlValueAccessor.prototype, "value", void 0);
        RadioControlValueAccessor = tslib_1.__decorate([Directive({
            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
            host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
            providers: [RADIO_VALUE_ACCESSOR]
        }), tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef, RadioControlRegistry, Injector])], RadioControlValueAccessor);
        return RadioControlValueAccessor;
    }();
    export { RadioControlValueAccessor };
});
//# sourceMappingURL=radio_control_value_accessor.js.map