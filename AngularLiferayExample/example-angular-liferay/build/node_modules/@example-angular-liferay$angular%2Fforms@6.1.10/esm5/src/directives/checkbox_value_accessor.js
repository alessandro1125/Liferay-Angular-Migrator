Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/checkbox_value_accessor', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, ElementRef, Renderer2, forwardRef } from '@angular/core';
    import { NG_VALUE_ACCESSOR } from './control_value_accessor';
    export var CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () {
            return CheckboxControlValueAccessor;
        }),
        multi: true
    };
    /**
     * The accessor for writing a value and listening to changes on a checkbox input element.
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * <input type="checkbox" name="rememberLogin" ngModel>
     * ```
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var CheckboxControlValueAccessor = /** @class */function () {
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) {};
            this.onTouched = function () {};
        }
        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);
        };
        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        CheckboxControlValueAccessor = tslib_1.__decorate([Directive({
            selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
            host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
            providers: [CHECKBOX_VALUE_ACCESSOR]
        }), tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])], CheckboxControlValueAccessor);
        return CheckboxControlValueAccessor;
    }();
    export { CheckboxControlValueAccessor };
});
//# sourceMappingURL=checkbox_value_accessor.js.map