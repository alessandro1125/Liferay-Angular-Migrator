{"version":3,"sources":["../../../../../../../../../../../packages/forms/src/directives/reactive_directives/form_group_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls} from '../shared';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @usageNotes\n * **Set value**: You can set the form's initial value when instantiating the\n * `FormGroup`, or you can set it programmatically later using the `FormGroup`'s\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the `FormGroup`'s {@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n})\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\n  public readonly submitted: boolean = false;\n\n  // TODO(issue/24571): remove '!'.\n  private _oldForm !: FormGroup;\n  directives: FormControlName[] = [];\n\n  @Input('formGroup') form: FormGroup = null !;\n  @Output() ngSubmit = new EventEmitter();\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) private _validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) private _asyncValidators: any[]) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n    }\n  }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  addControl(dir: FormControlName): FormControl {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  getControl(dir: FormControlName): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: FormControlName): void { removeDir<FormControlName>(this.directives, dir); }\n\n  addFormGroup(dir: FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormGroup(dir: FormGroupName): void {}\n\n  getFormGroup(dir: FormGroupName): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  addFormArray(dir: FormArrayName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormArray(dir: FormArrayName): void {}\n\n  getFormArray(dir: FormArrayName): FormArray { return <FormArray>this.form.get(dir.path); }\n\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrlÂ  = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  onSubmit($event: Event): boolean {\n    (this as{submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this.directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as{submitted: boolean}).submitted = false;\n  }\n\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      const newCtrl: any = this.form.get(dir.path);\n      if (dir.control !== newCtrl) {\n        cleanUpControl(dir.control, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        (dir as{control: FormControl}).control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) this._oldForm._registerOnCollectionChange(() => {});\n    this._oldForm = this.form;\n  }\n\n  private _updateValidators() {\n    const sync = composeValidators(this._validators);\n    this.form.validator = Validators.compose([this.form.validator !, sync !]);\n\n    const async = composeAsyncValidators(this._asyncValidators);\n    this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator !, async !]);\n  }\n\n  private _checkFormPresent() {\n    if (!this.form) {\n      ReactiveErrors.missingFormException();\n    }\n  }\n}\n"],"sourceRoot":""}