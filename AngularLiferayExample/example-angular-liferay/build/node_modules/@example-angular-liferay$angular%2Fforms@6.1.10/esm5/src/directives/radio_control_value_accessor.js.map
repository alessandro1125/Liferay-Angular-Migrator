{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/radio_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\n@Injectable()\nexport class RadioControlRegistry {\n  private _accessors: any[] = [];\n\n  add(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n\n  remove(accessor: RadioControlValueAccessor) {\n    for (let i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  select(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n\n  private _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\n}\n\n/**\n * @description\n *\n * Writes radio control values and listens to radio control changes.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n})\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _state !: boolean;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _control !: NgControl;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _fn !: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n  // TODO(issue/24571): remove '!'.\n  @Input() name !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input() formControlName !: string;\n  @Input() value: any;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      private _registry: RadioControlRegistry, private _injector: Injector) {}\n\n  ngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n\n  ngOnDestroy(): void { this._registry.remove(this); }\n\n  writeValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n\n  fireUncheck(value: any): void { this.writeValue(value); }\n\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  private _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n\n  private _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\n}\n"],"sourceRoot":""}