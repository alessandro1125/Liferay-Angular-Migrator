Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/ng_form', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, EventEmitter, Inject, Input, Optional, Self, forwardRef } from '@angular/core';
    import { FormGroup } from '../model';
    import { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';
    import { ControlContainer } from './control_container';
    import { composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls } from './shared';
    export var formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () {
            return NgForm;
        })
    };
    var resolvedPromise = Promise.resolve(null);
    /**
     * @description
     *
     * Creates a top-level `FormGroup` instance and binds it to a form
     * to track aggregate form value and validation status.
     *
     * As soon as you import the `FormsModule`, this directive becomes active by default on
     * all `<form>` tags.  You don't need to add a special selector.
     *
     * You can export the directive into a local template variable using `ngForm` as the key
     * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
     * `FormGroup` instance are duplicated on the directive itself, so a reference to it
     * will give you access to the aggregate value and validity status of the form, as well as
     * user interaction properties like `dirty` and `touched`.
     *
     * To register child controls with the form, you'll want to use `NgModel` with a
     * `name` attribute.  You can also use `NgModelGroup` if you'd like to create
     * sub-groups within the form.
     *
     * You can listen to the directive's `ngSubmit` event to be notified when the user has
     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
     * submission event.
     *
     * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
     * If you want to import the `FormsModule` but skip its usage in some forms,
     * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`
     * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
     * unnecessary because the `<form>` tags are inert. In that case, you would
     * refrain from using the `formGroup` directive.
     *
     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
     *
     * **npm package**: `@angular/forms`
     *
     * @ngModule FormsModule
     */
    var NgForm = /** @class */function (_super) {
        tslib_1.__extends(NgForm, _super);
        function NgForm(validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this.submitted = false;
            _this._directives = [];
            _this.ngSubmit = new EventEmitter();
            _this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
            return _this;
        }
        NgForm.prototype.ngAfterViewInit = function () {
            this._setUpdateStrategy();
        };
        Object.defineProperty(NgForm.prototype, "formDirective", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "control", {
            get: function () {
                return this.form;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "path", {
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "controls", {
            get: function () {
                return this.form.controls;
            },
            enumerable: true,
            configurable: true
        });
        NgForm.prototype.addControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                dir.control = container.registerControl(dir.name, dir.control);
                setUpControl(dir.control, dir);
                dir.control.updateValueAndValidity({ emitEvent: false });
                _this._directives.push(dir);
            });
        };
        NgForm.prototype.getControl = function (dir) {
            return this.form.get(dir.path);
        };
        NgForm.prototype.removeControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                if (container) {
                    container.removeControl(dir.name);
                }
                removeDir(_this._directives, dir);
            });
        };
        NgForm.prototype.addFormGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                var group = new FormGroup({});
                setUpFormContainer(group, dir);
                container.registerControl(dir.name, group);
                group.updateValueAndValidity({ emitEvent: false });
            });
        };
        NgForm.prototype.removeFormGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                if (container) {
                    container.removeControl(dir.name);
                }
            });
        };
        NgForm.prototype.getFormGroup = function (dir) {
            return this.form.get(dir.path);
        };
        NgForm.prototype.updateModel = function (dir, value) {
            var _this = this;
            resolvedPromise.then(function () {
                var ctrl = _this.form.get(dir.path);
                ctrl.setValue(value);
            });
        };
        NgForm.prototype.setValue = function (value) {
            this.control.setValue(value);
        };
        NgForm.prototype.onSubmit = function ($event) {
            this.submitted = true;
            syncPendingControls(this.form, this._directives);
            this.ngSubmit.emit($event);
            return false;
        };
        NgForm.prototype.onReset = function () {
            this.resetForm();
        };
        NgForm.prototype.resetForm = function (value) {
            if (value === void 0) {
                value = undefined;
            }
            this.form.reset(value);
            this.submitted = false;
        };
        NgForm.prototype._setUpdateStrategy = function () {
            if (this.options && this.options.updateOn != null) {
                this.form._updateOn = this.options.updateOn;
            }
        };
        /** @internal */
        NgForm.prototype._findContainer = function (path) {
            path.pop();
            return path.length ? this.form.get(path) : this.form;
        };
        tslib_1.__decorate([Input('ngFormOptions'), tslib_1.__metadata("design:type", Object)], NgForm.prototype, "options", void 0);
        NgForm = tslib_1.__decorate([Directive({
            selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
            providers: [formDirectiveProvider],
            host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
            outputs: ['ngSubmit'],
            exportAs: 'ngForm'
        }), tslib_1.__param(0, Optional()), tslib_1.__param(0, Self()), tslib_1.__param(0, Inject(NG_VALIDATORS)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Self()), tslib_1.__param(1, Inject(NG_ASYNC_VALIDATORS)), tslib_1.__metadata("design:paramtypes", [Array, Array])], NgForm);
        return NgForm;
    }(ControlContainer);
    export { NgForm };
});
//# sourceMappingURL=ng_form.js.map