Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/validators', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, Input, forwardRef } from '@angular/core';
    import { NG_VALIDATORS, Validators } from '../validators';
    export var REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () {
            return RequiredValidator;
        }),
        multi: true
    };
    export var CHECKBOX_REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () {
            return CheckboxRequiredValidator;
        }),
        multi: true
    };
    /**
     * A Directive that adds the `required` validator to any controls marked with the
     * `required` attribute, via the `NG_VALIDATORS` binding.
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * <input name="fullName" ngModel required>
     * ```
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var RequiredValidator = /** @class */function () {
        function RequiredValidator() {}
        Object.defineProperty(RequiredValidator.prototype, "required", {
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = value != null && value !== false && "" + value !== 'false';
                if (this._onChange) this._onChange();
            },
            enumerable: true,
            configurable: true
        });
        RequiredValidator.prototype.validate = function (control) {
            return this.required ? Validators.required(control) : null;
        };
        RequiredValidator.prototype.registerOnValidatorChange = function (fn) {
            this._onChange = fn;
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], RequiredValidator.prototype, "required", null);
        RequiredValidator = tslib_1.__decorate([Directive({
            selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
            providers: [REQUIRED_VALIDATOR],
            host: { '[attr.required]': 'required ? "" : null' }
        })], RequiredValidator);
        return RequiredValidator;
    }();
    export { RequiredValidator };
    /**
     * A Directive that adds the `required` validator to checkbox controls marked with the
     * `required` attribute, via the `NG_VALIDATORS` binding.
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * <input type="checkbox" name="active" ngModel required>
     * ```
     *
     * @experimental
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var CheckboxRequiredValidator = /** @class */function (_super) {
        tslib_1.__extends(CheckboxRequiredValidator, _super);
        function CheckboxRequiredValidator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CheckboxRequiredValidator.prototype.validate = function (control) {
            return this.required ? Validators.requiredTrue(control) : null;
        };
        CheckboxRequiredValidator = tslib_1.__decorate([Directive({
            selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
            providers: [CHECKBOX_REQUIRED_VALIDATOR],
            host: { '[attr.required]': 'required ? "" : null' }
        })], CheckboxRequiredValidator);
        return CheckboxRequiredValidator;
    }(RequiredValidator);
    export { CheckboxRequiredValidator };
    /**
     * Provider which adds `EmailValidator` to `NG_VALIDATORS`.
     */
    export var EMAIL_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () {
            return EmailValidator;
        }),
        multi: true
    };
    /**
     * A Directive that adds the `email` validator to controls marked with the
     * `email` attribute, via the `NG_VALIDATORS` binding.
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * <input type="email" name="email" ngModel email>
     * <input type="email" name="email" ngModel email="true">
     * <input type="email" name="email" ngModel [email]="true">
     * ```
     *
     * @experimental
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var EmailValidator = /** @class */function () {
        function EmailValidator() {}
        Object.defineProperty(EmailValidator.prototype, "email", {
            set: function (value) {
                this._enabled = value === '' || value === true || value === 'true';
                if (this._onChange) this._onChange();
            },
            enumerable: true,
            configurable: true
        });
        EmailValidator.prototype.validate = function (control) {
            return this._enabled ? Validators.email(control) : null;
        };
        EmailValidator.prototype.registerOnValidatorChange = function (fn) {
            this._onChange = fn;
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], EmailValidator.prototype, "email", null);
        EmailValidator = tslib_1.__decorate([Directive({
            selector: '[email][formControlName],[email][formControl],[email][ngModel]',
            providers: [EMAIL_VALIDATOR]
        })], EmailValidator);
        return EmailValidator;
    }();
    export { EmailValidator };
    /**
     * Provider which adds `MinLengthValidator` to `NG_VALIDATORS`.
     *
     * @usageNotes
     * ### Example:
     *
     * {@example common/forms/ts/validators/validators.ts region='min'}
     */
    export var MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () {
            return MinLengthValidator;
        }),
        multi: true
    };
    /**
     * A directive which installs the `MinLengthValidator` for any `formControlName`,
     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var MinLengthValidator = /** @class */function () {
        function MinLengthValidator() {}
        MinLengthValidator.prototype.ngOnChanges = function (changes) {
            if ('minlength' in changes) {
                this._createValidator();
                if (this._onChange) this._onChange();
            }
        };
        MinLengthValidator.prototype.validate = function (control) {
            return this.minlength == null ? null : this._validator(control);
        };
        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) {
            this._onChange = fn;
        };
        MinLengthValidator.prototype._createValidator = function () {
            this._validator = Validators.minLength(parseInt(this.minlength, 10));
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], MinLengthValidator.prototype, "minlength", void 0);
        MinLengthValidator = tslib_1.__decorate([Directive({
            selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
            providers: [MIN_LENGTH_VALIDATOR],
            host: { '[attr.minlength]': 'minlength ? minlength : null' }
        })], MinLengthValidator);
        return MinLengthValidator;
    }();
    export { MinLengthValidator };
    /**
     * Provider which adds `MaxLengthValidator` to `NG_VALIDATORS`.
     *
     * @usageNotes
     * ### Example:
     *
     * {@example common/forms/ts/validators/validators.ts region='max'}
     */
    export var MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () {
            return MaxLengthValidator;
        }),
        multi: true
    };
    /**
     * A directive which installs the `MaxLengthValidator` for any `formControlName`,
     * `formControl`, or control with `ngModel` that also has a `maxlength` attribute.
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var MaxLengthValidator = /** @class */function () {
        function MaxLengthValidator() {}
        MaxLengthValidator.prototype.ngOnChanges = function (changes) {
            if ('maxlength' in changes) {
                this._createValidator();
                if (this._onChange) this._onChange();
            }
        };
        MaxLengthValidator.prototype.validate = function (control) {
            return this.maxlength != null ? this._validator(control) : null;
        };
        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) {
            this._onChange = fn;
        };
        MaxLengthValidator.prototype._createValidator = function () {
            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", String)], MaxLengthValidator.prototype, "maxlength", void 0);
        MaxLengthValidator = tslib_1.__decorate([Directive({
            selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
            providers: [MAX_LENGTH_VALIDATOR],
            host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
        })], MaxLengthValidator);
        return MaxLengthValidator;
    }();
    export { MaxLengthValidator };
    export var PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () {
            return PatternValidator;
        }),
        multi: true
    };
    /**
     * A Directive that adds the `pattern` validator to any controls marked with the
     * `pattern` attribute, via the `NG_VALIDATORS` binding. Uses attribute value
     * as the regex to validate Control value against.  Follows pattern attribute
     * semantics; i.e. regex must match entire Control value.
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * <input [name]="fullName" pattern="[a-zA-Z ]*" ngModel>
     * ```
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var PatternValidator = /** @class */function () {
        function PatternValidator() {}
        PatternValidator.prototype.ngOnChanges = function (changes) {
            if ('pattern' in changes) {
                this._createValidator();
                if (this._onChange) this._onChange();
            }
        };
        PatternValidator.prototype.validate = function (control) {
            return this._validator(control);
        };
        PatternValidator.prototype.registerOnValidatorChange = function (fn) {
            this._onChange = fn;
        };
        PatternValidator.prototype._createValidator = function () {
            this._validator = Validators.pattern(this.pattern);
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Object)], PatternValidator.prototype, "pattern", void 0);
        PatternValidator = tslib_1.__decorate([Directive({
            selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
            providers: [PATTERN_VALIDATOR],
            host: { '[attr.pattern]': 'pattern ? pattern : null' }
        })], PatternValidator);
        return PatternValidator;
    }();
    export { PatternValidator };
});
//# sourceMappingURL=validators.js.map