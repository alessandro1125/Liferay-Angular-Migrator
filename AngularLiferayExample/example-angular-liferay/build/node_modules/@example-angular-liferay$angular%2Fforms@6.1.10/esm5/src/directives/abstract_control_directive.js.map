{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/abstract_control_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {AbstractControl} from '../model';\nimport {ValidationErrors} from './validators';\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n */\nexport abstract class AbstractControlDirective {\n  /**\n   * @description\n   * A reference to the underlying control.\n   *\n   * @returns the control that backs this directive. Most properties fall through to that instance.\n   */\n  abstract get control(): AbstractControl|null;\n\n  /**\n   * @description\n   * Reports the value of the control if it is present, otherwise null.\n   */\n  get value(): any { return this.control ? this.control.value : null; }\n\n  /**\n   * @description\n   * Reports whether the control is valid. A control is considered valid if no\n   * validation errors exist with the current value.\n   * If the control is not present, null is returned.\n   */\n  get valid(): boolean|null { return this.control ? this.control.valid : null; }\n\n  /**\n   * @description\n   * Reports whether the control is invalid, meaning that an error exists in the input value.\n   * If the control is not present, null is returned.\n   */\n  get invalid(): boolean|null { return this.control ? this.control.invalid : null; }\n\n  /**\n   * @description\n   * Reports whether a control is pending, meaning that that async validation is occurring and\n   * errors are not yet available for the input value. If the control is not present, null is\n   * returned.\n   */\n  get pending(): boolean|null { return this.control ? this.control.pending : null; }\n\n  /**\n   * @description\n   * Reports whether the control is disabled, meaning that the control is disabled\n   * in the UI and is exempt from validation checks and excluded from aggregate\n   * values of ancestor controls. If the control is not present, null is returned.\n   */\n  get disabled(): boolean|null { return this.control ? this.control.disabled : null; }\n\n  /**\n   * @description\n   * Reports whether the control is enabled, meaning that the control is included in ancestor\n   * calculations of validity or value. If the control is not present, null is returned.\n   */\n  get enabled(): boolean|null { return this.control ? this.control.enabled : null; }\n\n  /**\n   * @description\n   * Reports the control's validation errors. If the control is not present, null is returned.\n   */\n  get errors(): ValidationErrors|null { return this.control ? this.control.errors : null; }\n\n  /**\n   * @description\n   * Reports whether the control is pristine, meaning that the user has not yet changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get pristine(): boolean|null { return this.control ? this.control.pristine : null; }\n\n  /**\n   * @description\n   * Reports whether the control is dirty, meaning that the user has changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get dirty(): boolean|null { return this.control ? this.control.dirty : null; }\n\n  /**\n   * @description\n   * Reports whether the control is touched, meaning that the user has triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get touched(): boolean|null { return this.control ? this.control.touched : null; }\n\n  /**\n   * @description\n   * Reports the validation status of the control. Possible values include:\n   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n   * If the control is not present, null is returned.\n   */\n  get status(): string|null { return this.control ? this.control.status : null; }\n\n  /**\n   * @description\n   * Reports whether the control is untouched, meaning that the user has not yet triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get untouched(): boolean|null { return this.control ? this.control.untouched : null; }\n\n  /**\n   * @description\n   * Returns a multicasting observable that emits a validation status whenever it is\n   * calculated for the control. If the control is not present, null is returned.\n   */\n  get statusChanges(): Observable<any>|null {\n    return this.control ? this.control.statusChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns a multicasting observable of value changes for the control that emits every time the\n   * value of the control changes in the UI or programmatically.\n   * If the control is not present, null is returned.\n   */\n  get valueChanges(): Observable<any>|null {\n    return this.control ? this.control.valueChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[]|null { return null; }\n\n  /**\n   * @description\n   * Resets the control with the provided value if the control is present.\n   */\n  reset(value: any = undefined): void {\n    if (this.control) this.control.reset(value);\n  }\n\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   * If no path is given, it checks for the error on the present control.\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode: string, path?: string[]): boolean {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   * If the control is not present, null is returned.\n   */\n  getError(errorCode: string, path?: string[]): any {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n"],"sourceRoot":""}