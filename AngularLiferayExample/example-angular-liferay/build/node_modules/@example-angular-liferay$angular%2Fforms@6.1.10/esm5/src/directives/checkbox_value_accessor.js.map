{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/checkbox_value_accessor.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,SAAR,EAAmB,UAAnB,EAA+B,SAA/B,EAA0C,UAA1C,QAA2D,eAA3D;AAEA,aAA8B,iBAA9B,QAAsD,0BAAtD;AAEA,WAAO,IAAM,0BAA+B;AAC1C,iBAAS,iBADiC;AAE1C,qBAAa,WAAW,YAAA;AAAM,mBAAA,4BAAA;AAA4B,SAA7C,CAF6B;AAG1C,eAAO;AAHmC,KAArC;AAMP;;;;;;;;;;;;;AAmBA,QAAA,+BAAA,aAAA,YAAA;AAIE,iBAAA,4BAAA,CAAoB,SAApB,EAAkD,WAAlD,EAAyE;AAArD,iBAAA,SAAA,GAAA,SAAA;AAA8B,iBAAA,WAAA,GAAA,WAAA;AAHlD,iBAAA,QAAA,GAAW,UAAC,CAAD,EAAO,CAAO,CAAzB;AACA,iBAAA,SAAA,GAAY,YAAA,CAAQ,CAApB;AAE6E;AAE7E,qCAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAAqB;AACnB,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,SAA3D,EAAsE,KAAtE;AACD,SAFD;AAGA,qCAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,EAAjB,EAAmC;AAAU,iBAAK,QAAL,GAAgB,EAAhB;AAAqB,SAAlE;AACA,qCAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,EAAlB,EAA8B;AAAU,iBAAK,SAAL,GAAiB,EAAjB;AAAsB,SAA9D;AAEA,qCAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,UAAjB,EAAoC;AAClC,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,UAA3D,EAAuE,UAAvE;AACD,SAFD;AAZW,uCAA4B,QAAA,UAAA,CAAA,CANxC,UAAU;AACT,sBACI,uGAFK;AAGT,kBAAM,EAAC,YAAY,iCAAb,EAAgD,UAAU,aAA1D,EAHG;AAIT,uBAAW,CAAC,uBAAD;AAJF,SAAV,CAMwC,E,yCAIR,S,EAAgC,U,EAJxB,CAAA,EAA5B,4BAA4B,CAA5B;AAeb,eAAA,4BAAA;AAAC,KAfD,EAAA;aAAa,4B","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n  registerOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n"],"sourceRoot":""}