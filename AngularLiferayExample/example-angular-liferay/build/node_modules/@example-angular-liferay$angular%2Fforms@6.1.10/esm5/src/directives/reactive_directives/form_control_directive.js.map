{"version":3,"sources":["../../../../../../../../../../../packages/forms/src/directives/reactive_directives/form_control_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Inject, InjectionToken, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {_ngModelWarning, composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nexport const NG_MODEL_WITH_FORM_CONTROL_WARNING =\n    new InjectionToken('NgModelWithFormControlWarning');\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n\n/**\n * @description\n *\n * Syncs a standalone `FormControl` instance to a form control element.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * @usageNotes\n * Use this directive if you'd like to create and manage a `FormControl` instance directly.\n * Simply create a `FormControl`, save it to your component class, and pass it into the\n * `FormControlDirective`.\n *\n * This directive is designed to be used as a standalone control.  Unlike `FormControlName`,\n * it does not require that your `FormControl` instance be part of any parent\n * `FormGroup`, and it won't be registered to any `FormGroupDirective` that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormControl` instance. See a full list of available properties in\n * `AbstractControl`.\n *\n * **Set the value**: You can pass in an initial value when instantiating the `FormControl`,\n * or you can set it programmatically later using {@link AbstractControl#setValue setValue} or\n * {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'})\n\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formControl') form !: FormControl;\n\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlDirective. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlDirective instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(@Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n              @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n              @Optional() @Self() @Inject(NG_VALUE_ACCESSOR)\n              valueAccessors: ControlValueAccessor[],\n              @Optional() @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING) private _ngModelWarningConfig: string|null) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && this.valueAccessor !.setDisabledState) {\n                    this.valueAccessor !.setDisabledState !(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  _ngModelWarning(\n                      'formControl', FormControlDirective, this, this._ngModelWarningConfig);\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n\n              get path(): string[] { return []; }\n\n              get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n              get asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n\n              get control(): FormControl { return this.form; }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n\n              private _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\n}\n"],"sourceRoot":""}