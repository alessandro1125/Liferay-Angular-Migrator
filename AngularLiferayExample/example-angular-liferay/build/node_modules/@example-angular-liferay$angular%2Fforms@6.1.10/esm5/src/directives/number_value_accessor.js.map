{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/number_value_accessor.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,SAAR,EAAmB,UAAnB,EAA+B,SAA/B,EAA0C,UAA1C,QAA2D,eAA3D;AAEA,aAA8B,iBAA9B,QAAsD,0BAAtD;AAEA,WAAO,IAAM,wBAA6B;AACxC,iBAAS,iBAD+B;AAExC,qBAAa,WAAW,YAAA;AAAM,mBAAA,mBAAA;AAAmB,SAApC,CAF2B;AAGxC,eAAO;AAHiC,KAAnC;AAMP;;;;;;;;;;;;;;AAwBA,QAAA,sBAAA,aAAA,YAAA;AAIE,iBAAA,mBAAA,CAAoB,SAApB,EAAkD,WAAlD,EAAyE;AAArD,iBAAA,SAAA,GAAA,SAAA;AAA8B,iBAAA,WAAA,GAAA,WAAA;AAHlD,iBAAA,QAAA,GAAW,UAAC,CAAD,EAAO,CAAO,CAAzB;AACA,iBAAA,SAAA,GAAY,YAAA,CAAQ,CAApB;AAE6E;AAE7E,4BAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAAwB;AACtB;AACA,gBAAM,kBAAkB,SAAS,IAAT,GAAgB,EAAhB,GAAqB,KAA7C;AACA,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,OAA3D,EAAoE,eAApE;AACD,SAJD;AAMA,4BAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,EAAjB,EAA6C;AAC3C,iBAAK,QAAL,GAAgB,UAAC,KAAD,EAAM;AAAO,mBAAG,SAAS,EAAT,GAAc,IAAd,GAAqB,WAAW,KAAX,CAAxB;AAA6C,aAA1E;AACD,SAFD;AAGA,4BAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,EAAlB,EAAgC;AAAU,iBAAK,SAAL,GAAiB,EAAjB;AAAsB,SAAhE;AAEA,4BAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,UAAjB,EAAoC;AAClC,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,UAA3D,EAAuE,UAAvE;AACD,SAFD;AAjBW,8BAAmB,QAAA,UAAA,CAAA,CAV/B,UAAU;AACT,sBACI,iGAFK;AAGT,kBAAM;AACJ,4BAAY,+BADR;AAEJ,2BAAW,+BAFP;AAGJ,0BAAU;AAHN,aAHG;AAQT,uBAAW,CAAC,qBAAD;AARF,SAAV,CAU+B,E,yCAIC,S,EAAgC,U,EAJjC,CAAA,EAAnB,mBAAmB,CAAnB;AAoBb,eAAA,mBAAA;AAAC,KApBD,EAAA;aAAa,mB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const NUMBER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"number\" [(ngModel)]=\"age\">\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [NUMBER_VALUE_ACCESSOR]\n})\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  registerOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n"],"sourceRoot":""}