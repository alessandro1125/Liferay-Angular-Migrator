Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/select_control_value_accessor', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, ElementRef, Host, Input, Optional, Renderer2, forwardRef, ÉµlooseIdentical as looseIdentical } from '@angular/core';
    import { NG_VALUE_ACCESSOR } from './control_value_accessor';
    export var SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () {
            return SelectControlValueAccessor;
        }),
        multi: true
    };
    function _buildValueString(id, value) {
        if (id == null) return "" + value;
        if (value && typeof value === 'object') value = 'Object';
        return (id + ": " + value).slice(0, 50);
    }
    function _extractId(valueString) {
        return valueString.split(':')[0];
    }
    /**
     * @description
     *
     * Writes values and listens to changes on a select element.
     *
     * Used by `NgModel`, `FormControlDirective`, and `FormControlName`
     * to keep the view synced with the `FormControl` model.
     *
     * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this
     * value accessor will be active on any select control that has a form directive. You do
     * **not** need to add a special selector to activate it.
     *
     * @usageNotes
     * ### How to use select controls with form directives
     *
     * To use a select in a template-driven form, simply add an `ngModel` and a `name`
     * attribute to the main `<select>` tag.
     *
     * If your option values are simple strings, you can bind to the normal `value` property
     * on the option.  If your option values happen to be objects (and you'd like to save the
     * selection in your form as an object), use `ngValue` instead:
     *
     * {@example forms/ts/selectControl/select_control_example.ts region='Component'}
     *
     * In reactive forms, you'll also want to add your form directive (`formControlName` or
     * `formControl`) on the main `<select>` tag. Like in the former example, you have the
     * choice of binding to the  `value` or `ngValue` property on the select's options.
     *
     * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
     *
     * ### Caveat: Option selection
     *
     * Angular uses object identity to select option. It's possible for the identities of items
     * to change while the data does not. This can happen, for example, if the items are produced
     * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
     * second response will produce objects with different identities.
     *
     * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
     * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
     * If `compareWith` is given, Angular selects option by the return value of the function.
     *
     * ### Syntax
     *
     * ```
     * <select [compareWith]="compareFn"  [(ngModel)]="selectedCountries">
     *     <option *ngFor="let country of countries" [ngValue]="country">
     *         {{country.name}}
     *     </option>
     * </select>
     *
     * compareFn(c1: Country, c2: Country): boolean {
     *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
     * }
     * ```
     *
     * Note: We listen to the 'change' event because 'input' events aren't fired
     * for selects in Firefox and IE:
     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var SelectControlValueAccessor = /** @class */function () {
        function SelectControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            /** @internal */
            this._optionMap = new Map();
            /** @internal */
            this._idCounter = 0;
            this.onChange = function (_) {};
            this.onTouched = function () {};
            this._compareWith = looseIdentical;
        }
        Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", {
            set: function (fn) {
                if (typeof fn !== 'function') {
                    throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
                }
                this._compareWith = fn;
            },
            enumerable: true,
            configurable: true
        });
        SelectControlValueAccessor.prototype.writeValue = function (value) {
            this.value = value;
            var id = this._getOptionId(value);
            if (id == null) {
                this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
            }
            var valueString = _buildValueString(id, value);
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);
        };
        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (valueString) {
                _this.value = _this._getOptionValue(valueString);
                fn(_this.value);
            };
        };
        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        /** @internal */
        SelectControlValueAccessor.prototype._registerOption = function () {
            return (this._idCounter++).toString();
        };
        /** @internal */
        SelectControlValueAccessor.prototype._getOptionId = function (value) {
            var e_1, _a;
            try {
                for (var _b = tslib_1.__values(Array.from(this._optionMap.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var id = _c.value;
                    if (this._compareWith(this._optionMap.get(id), value)) return id;
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
            return null;
        };
        /** @internal */
        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
            var id = _extractId(valueString);
            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
        };
        tslib_1.__decorate([Input(), tslib_1.__metadata("design:type", Function), tslib_1.__metadata("design:paramtypes", [Function])], SelectControlValueAccessor.prototype, "compareWith", null);
        SelectControlValueAccessor = tslib_1.__decorate([Directive({
            selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
            host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
            providers: [SELECT_VALUE_ACCESSOR]
        }), tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])], SelectControlValueAccessor);
        return SelectControlValueAccessor;
    }();
    export { SelectControlValueAccessor };
    /**
     * @description
     *
     * Marks `<option>` as dynamic, so Angular can be notified when options change.
     *
     * See docs for `SelectControlValueAccessor` for usage examples.
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var NgSelectOption = /** @class */function () {
        function NgSelectOption(_element, _renderer, _select) {
            this._element = _element;
            this._renderer = _renderer;
            this._select = _select;
            if (this._select) this.id = this._select._registerOption();
        }
        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
            set: function (value) {
                if (this._select == null) return;
                this._select._optionMap.set(this.id, value);
                this._setElementValue(_buildValueString(this.id, value));
                this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectOption.prototype, "value", {
            set: function (value) {
                this._setElementValue(value);
                if (this._select) this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        /** @internal */
        NgSelectOption.prototype._setElementValue = function (value) {
            this._renderer.setProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectOption.prototype.ngOnDestroy = function () {
            if (this._select) {
                this._select._optionMap.delete(this.id);
                this._select.writeValue(this._select.value);
            }
        };
        tslib_1.__decorate([Input('ngValue'), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], NgSelectOption.prototype, "ngValue", null);
        tslib_1.__decorate([Input('value'), tslib_1.__metadata("design:type", Object), tslib_1.__metadata("design:paramtypes", [Object])], NgSelectOption.prototype, "value", null);
        NgSelectOption = tslib_1.__decorate([Directive({ selector: 'option' }), tslib_1.__param(2, Optional()), tslib_1.__param(2, Host()), tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2, SelectControlValueAccessor])], NgSelectOption);
        return NgSelectOption;
    }();
    export { NgSelectOption };
});
//# sourceMappingURL=select_control_value_accessor.js.map