{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/ng_control.ts"],"names":[],"mappings":";;;;;;;;;;AASA,WAAQ,wBAAR,QAAuC,8BAAvC;AAKA,WAAA,aAAA,GAAA;AACE,UAAM,IAAI,KAAJ,CAAU,eAAV,CAAN;AACD;AAED;;;;;AAKA,MAAA,YAAA,aAAA,UAAA,MAAA,EAAA;AAAwC,YAAA,SAAA,CAAA,SAAA,EAAA,MAAA;AAAxC,aAAA,SAAA,GAAA;AAAA,UAAA,QAAA,WAAA,IAAA,IAAA,OAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;;;;AAMA,YAAA,OAAA,GAAiC,IAAjC;AAEA;;;;AAIA,YAAA,IAAA,GAAoB,IAApB;AAEA;;;;AAIA,YAAA,aAAA,GAA2C,IAA3C;AAEA;;;;;;AAMA,YAAA,cAAA,GAA+C,EAA/C;AAEA;;;;;;AAMA,YAAA,mBAAA,GAA8D,EAA9D;;AAyBD;AAjBC,WAAA,cAAA,CAAI,UAAA,SAAJ,EAAI,WAAJ,EAAa;AANb;;;;;;WAMA,YAAA;AAAoC,eAAoB,eAApB;AAAsC,OAA7D;sBAAA;;AAAA,KAAb;AAQA,WAAA,cAAA,CAAI,UAAA,SAAJ,EAAI,gBAAJ,EAAkB;AANlB;;;;;;WAMA,YAAA;AAA8C,eAAyB,eAAzB;AAA2C,OAAvE;sBAAA;;AAAA,KAAlB;AASF,WAAA,SAAA;AAAC,GA5DD,CAAwC,wBAAxC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nfunction unimplemented(): any {\n  throw new Error('unimplemented');\n}\n\n/**\n * @description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n */\nexport abstract class NgControl extends AbstractControlDirective {\n  /**\n   * @description\n   * The parent form for the control.\n   *\n   * @internal\n   */\n  _parent: ControlContainer|null = null;\n\n  /**\n   * @description\n   * The name for the control\n   */\n  name: string|null = null;\n\n  /**\n   * @description\n   * The value accessor for the control\n   */\n  valueAccessor: ControlValueAccessor|null = null;\n\n  /**\n   * @description\n   * The uncomposed array of synchronous validators for the control\n   *\n   * @internal\n   */\n  _rawValidators: Array<Validator|ValidatorFn> = [];\n\n  /**\n   * @description\n   * The uncomposed array of async validators for the control\n   *\n   * @internal\n   */\n  _rawAsyncValidators: Array<AsyncValidator|AsyncValidatorFn> = [];\n\n  /**\n   * @description\n   * The registered synchronous validator function for the control\n   *\n   * @throws An exception that this method is not implemented\n   */\n  get validator(): ValidatorFn|null { return <ValidatorFn>unimplemented(); }\n\n  /**\n   * @description\n   * The registered async validator function for the control\n   *\n   * @throws An exception that this method is not implemented\n   */\n  get asyncValidator(): AsyncValidatorFn|null { return <AsyncValidatorFn>unimplemented(); }\n\n  /**\n   * @description\n   * The callback method to update the model from the view when requested\n   *\n   * @param newValue The new value for the view\n   */\n  abstract viewToModelUpdate(newValue: any): void;\n}\n"],"sourceRoot":""}