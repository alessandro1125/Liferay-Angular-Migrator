{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/range_value_accessor.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,SAAR,EAAmB,UAAnB,EAA+B,SAA/B,EAA0D,UAA1D,QAA2E,eAA3E;AAEA,aAA8B,iBAA9B,QAAsD,0BAAtD;AAEA,WAAO,IAAM,uBAAuC;AAClD,iBAAS,iBADyC;AAElD,qBAAa,WAAW,YAAA;AAAM,mBAAA,kBAAA;AAAkB,SAAnC,CAFqC;AAGlD,eAAO;AAH2C,KAA7C;AAMP;;;;;;;;;;;;;;AAwBA,QAAA,qBAAA,aAAA,YAAA;AAIE,iBAAA,kBAAA,CAAoB,SAApB,EAAkD,WAAlD,EAAyE;AAArD,iBAAA,SAAA,GAAA,SAAA;AAA8B,iBAAA,WAAA,GAAA,WAAA;AAHlD,iBAAA,QAAA,GAAW,UAAC,CAAD,EAAO,CAAO,CAAzB;AACA,iBAAA,SAAA,GAAY,YAAA,CAAQ,CAApB;AAE6E;AAE7E,2BAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAAqB;AACnB,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,OAA3D,EAAoE,WAAW,KAAX,CAApE;AACD,SAFD;AAIA,2BAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,EAAjB,EAA6C;AAC3C,iBAAK,QAAL,GAAgB,UAAC,KAAD,EAAM;AAAO,mBAAG,SAAS,EAAT,GAAc,IAAd,GAAqB,WAAW,KAAX,CAAxB;AAA6C,aAA1E;AACD,SAFD;AAIA,2BAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,EAAlB,EAAgC;AAAU,iBAAK,SAAL,GAAiB,EAAjB;AAAsB,SAAhE;AAEA,2BAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,UAAjB,EAAoC;AAClC,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,UAA3D,EAAuE,UAAvE;AACD,SAFD;AAhBW,6BAAkB,QAAA,UAAA,CAAA,CAV9B,UAAU;AACT,sBACI,8FAFK;AAGT,kBAAM;AACJ,4BAAY,+BADR;AAEJ,2BAAW,+BAFP;AAGJ,0BAAU;AAHN,aAHG;AAQT,uBAAW,CAAC,oBAAD;AARF,SAAV,CAU8B,E,yCAIE,S,EAAgC,U,EAJlC,CAAA,EAAlB,kBAAkB,CAAlB;AAmBb,eAAA,kBAAA;AAAC,KAnBD,EAAA;aAAa,kB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, StaticProvider, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const RANGE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"range\" [(ngModel)]=\"age\" >\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n})\nexport class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n\n  registerOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n"],"sourceRoot":""}