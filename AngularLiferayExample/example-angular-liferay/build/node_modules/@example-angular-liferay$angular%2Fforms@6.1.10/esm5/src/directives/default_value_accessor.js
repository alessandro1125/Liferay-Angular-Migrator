Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/default_value_accessor', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, ElementRef, Inject, InjectionToken, Optional, Renderer2, forwardRef } from '@angular/core';
    import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
    import { NG_VALUE_ACCESSOR } from './control_value_accessor';
    export var DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () {
            return DefaultValueAccessor;
        }),
        multi: true
    };
    /**
     * We must check whether the agent is Android because composition events
     * behave differently between iOS and Android.
     */
    function _isAndroid() {
        var userAgent = getDOM() ? getDOM().getUserAgent() : '';
        return (/android (\d+)/.test(userAgent.toLowerCase())
        );
    }
    /**
     * Turn this mode on if you want form directives to buffer IME input until compositionend
     * @experimental
     */
    export var COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');
    /**
     * The default accessor for writing a value and listening to changes that is used by the
     * `NgModel`, `FormControlDirective`, and `FormControlName` directives.
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * <input type="text" name="searchQuery" ngModel>
     * ```
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var DefaultValueAccessor = /** @class */function () {
        function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.onChange = function (_) {};
            this.onTouched = function () {};
            /** Whether the user is creating a composition string (IME events). */
            this._composing = false;
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        DefaultValueAccessor.prototype.writeValue = function (value) {
            var normalizedValue = value == null ? '' : value;
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        DefaultValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        DefaultValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        /** @internal */
        DefaultValueAccessor.prototype._handleInput = function (value) {
            if (!this._compositionMode || this._compositionMode && !this._composing) {
                this.onChange(value);
            }
        };
        /** @internal */
        DefaultValueAccessor.prototype._compositionStart = function () {
            this._composing = true;
        };
        /** @internal */
        DefaultValueAccessor.prototype._compositionEnd = function (value) {
            this._composing = false;
            this._compositionMode && this.onChange(value);
        };
        DefaultValueAccessor = tslib_1.__decorate([Directive({
            selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
            // TODO: vsavkin replace the above selector with the one below it once
            // https://github.com/angular/angular/issues/3011 is implemented
            // selector: '[ngModel],[formControl],[formControlName]',
            host: {
                '(input)': '$any(this)._handleInput($event.target.value)',
                '(blur)': 'onTouched()',
                '(compositionstart)': '$any(this)._compositionStart()',
                '(compositionend)': '$any(this)._compositionEnd($event.target.value)'
            },
            providers: [DEFAULT_VALUE_ACCESSOR]
        }), tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(COMPOSITION_BUFFER_MODE)), tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef, Boolean])], DefaultValueAccessor);
        return DefaultValueAccessor;
    }();
    export { DefaultValueAccessor };
});
//# sourceMappingURL=default_value_accessor.js.map