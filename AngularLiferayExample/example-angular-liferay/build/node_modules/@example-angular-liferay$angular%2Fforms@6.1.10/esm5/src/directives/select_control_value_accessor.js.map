{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/select_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider, forwardRef, ÉµlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string | null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/**\n * @description\n *\n * Writes values and listens to changes on a select element.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n})\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, any> = new Map<string, any>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    const id: string|null = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const valueString = _buildValueString(id, value);\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = this._getOptionValue(valueString);\n      fn(this.value);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(): string { return (this._idCounter++).toString(); }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\n}\n\n/**\n * @description\n *\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * See docs for `SelectControlValueAccessor` for usage examples.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: 'option'})\nexport class NgSelectOption implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  id !: string;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  @Input('value')\n  set value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n"],"sourceRoot":""}