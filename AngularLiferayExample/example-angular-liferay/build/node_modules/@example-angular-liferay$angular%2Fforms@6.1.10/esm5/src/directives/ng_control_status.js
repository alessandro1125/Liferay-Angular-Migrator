Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/ng_control_status', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, Self } from '@angular/core';
    import { ControlContainer } from './control_container';
    import { NgControl } from './ng_control';
    var AbstractControlStatus = /** @class */function () {
        function AbstractControlStatus(cd) {
            this._cd = cd;
        }
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
            get: function () {
                return this._cd.control ? this._cd.control.untouched : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
            get: function () {
                return this._cd.control ? this._cd.control.touched : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
            get: function () {
                return this._cd.control ? this._cd.control.pristine : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
            get: function () {
                return this._cd.control ? this._cd.control.dirty : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
            get: function () {
                return this._cd.control ? this._cd.control.valid : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
            get: function () {
                return this._cd.control ? this._cd.control.invalid : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
            get: function () {
                return this._cd.control ? this._cd.control.pending : false;
            },
            enumerable: true,
            configurable: true
        });
        return AbstractControlStatus;
    }();
    export { AbstractControlStatus };
    export var ngControlStatusHost = {
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid',
        '[class.ng-pending]': 'ngClassPending'
    };
    /**
     * Directive automatically applied to Angular form controls that sets CSS classes
     * based on control status. The following classes are applied as the properties
     * become true:
     *
     * * ng-valid
     * * ng-invalid
     * * ng-pending
     * * ng-pristine
     * * ng-dirty
     * * ng-untouched
     * * ng-touched
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var NgControlStatus = /** @class */function (_super) {
        tslib_1.__extends(NgControlStatus, _super);
        function NgControlStatus(cd) {
            return _super.call(this, cd) || this;
        }
        NgControlStatus = tslib_1.__decorate([Directive({ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }), tslib_1.__param(0, Self()), tslib_1.__metadata("design:paramtypes", [NgControl])], NgControlStatus);
        return NgControlStatus;
    }(AbstractControlStatus);
    export { NgControlStatus };
    /**
     * Directive automatically applied to Angular form groups that sets CSS classes
     * based on control status (valid/invalid/dirty/etc).
     *
     * @ngModule FormsModule
     * @ngModule ReactiveFormsModule
     */
    var NgControlStatusGroup = /** @class */function (_super) {
        tslib_1.__extends(NgControlStatusGroup, _super);
        function NgControlStatusGroup(cd) {
            return _super.call(this, cd) || this;
        }
        NgControlStatusGroup = tslib_1.__decorate([Directive({
            selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
            host: ngControlStatusHost
        }), tslib_1.__param(0, Self()), tslib_1.__metadata("design:paramtypes", [ControlContainer])], NgControlStatusGroup);
        return NgControlStatusGroup;
    }(AbstractControlStatus);
    export { NgControlStatusGroup };
});
//# sourceMappingURL=ng_control_status.js.map