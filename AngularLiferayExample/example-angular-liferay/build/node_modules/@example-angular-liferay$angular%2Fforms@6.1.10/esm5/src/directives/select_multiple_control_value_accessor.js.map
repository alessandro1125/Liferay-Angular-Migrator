{"version":3,"sources":["../../../../../../../../../../packages/forms/src/directives/select_multiple_control_value_accessor.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,SAAR,EAAmB,UAAnB,EAA+B,IAA/B,EAAqC,KAArC,EAAuD,QAAvD,EAAiE,SAAjE,EAA4F,UAA5F,EAAwG,mBAAmB,cAA3H,QAAgJ,eAAhJ;AAEA,aAA8B,iBAA9B,QAAsD,0BAAtD;AAEA,WAAO,IAAM,iCAAiD;AAC5D,iBAAS,iBADmD;AAE5D,qBAAa,WAAW,YAAA;AAAM,mBAAA,kCAAA;AAAkC,SAAnD,CAF+C;AAG5D,eAAO;AAHqD,KAAvD;AAMP,aAAA,iBAAA,CAA2B,EAA3B,EAAuC,KAAvC,EAAiD;AAC/C,YAAI,MAAM,IAAV,EAAgB,OAAO,KAAG,KAAV;AAChB,YAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B,QAAQ,MAAI,KAAJ,GAAS,GAAjB;AAC/B,YAAI,SAAS,OAAO,KAAP,KAAiB,QAA9B,EAAwC,QAAQ,QAAR;AACxC,eAAO,CAAG,KAAE,IAAF,GAAO,KAAV,EAAkB,KAAlB,CAAwB,CAAxB,EAA2B,EAA3B,CAAP;AACD;AAED,aAAA,UAAA,CAAoB,WAApB,EAAuC;AACrC,eAAO,YAAY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAP;AACD;AAQD;AACA,QAAA,iBAAA,aAAA,YAAA;AAAA,iBAAA,cAAA,GAAA,CAIC;AAAD,eAAA,cAAA;AAAC,KAJD,EAAA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,QAAA,qCAAA,aAAA,YAAA;AAoBE,iBAAA,kCAAA,CAAoB,SAApB,EAAkD,WAAlD,EAAyE;AAArD,iBAAA,SAAA,GAAA,SAAA;AAA8B,iBAAA,WAAA,GAAA,WAAA;AAlBlD;AACA,iBAAA,UAAA,GAAkD,IAAI,GAAJ,EAAlD;AACA;AACA,iBAAA,UAAA,GAAqB,CAArB;AAEA,iBAAA,QAAA,GAAW,UAAC,CAAD,EAAO,CAAO,CAAzB;AACA,iBAAA,SAAA,GAAY,YAAA,CAAQ,CAApB;AAUQ,iBAAA,YAAA,GAA8C,cAA9C;AAEqE;AAT7E,eAAA,cAAA,CAAI,mCAAA,SAAJ,EAAI,aAAJ,EAAe;iBAAf,UAAgB,EAAhB,EAAiD;AAC/C,oBAAI,OAAO,EAAP,KAAc,UAAlB,EAA8B;AAC5B,0BAAM,IAAI,KAAJ,CAAU,kDAAgD,KAAK,SAAL,CAAe,EAAf,CAA1D,CAAN;AACD;AACD,qBAAK,YAAL,GAAoB,EAApB;AACD,aALc;4BAAA;;AAAA,SAAf;AAWA,2CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAAqB;AAArB,gBAAA,QAAA,IAAA;AACE,iBAAK,KAAL,GAAa,KAAb;AACA,gBAAI,yBAAJ;AACA,gBAAI,MAAM,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB;AACA,oBAAM,QAAM,MAAM,GAAN,CAAU,UAAC,CAAD,EAAE;AAAK,2BAAA,MAAK,YAAL,CAAA,CAAA,CAAA;AAAoB,iBAArC,CAAZ;AACA,4CAA4B,UAAC,GAAD,EAAM,CAAN,EAAO;AAAO,wBAAI,YAAJ,CAAiB,MAAI,OAAJ,CAAY,EAAE,QAAF,EAAZ,IAA4B,CAAC,CAA9C;AAAmD,iBAA7F;AACD,aAJD,MAIO;AACL,4CAA4B,UAAC,GAAD,EAAM,CAAN,EAAO;AAAO,wBAAI,YAAJ,CAAiB,KAAjB;AAA0B,iBAApE;AACD;AACD,iBAAK,UAAL,CAAgB,OAAhB,CAAwB,yBAAxB;AACD,SAXD;AAaA,2CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,EAAjB,EAAwC;AAAxC,gBAAA,QAAA,IAAA;AACE,iBAAK,QAAL,GAAgB,UAAC,CAAD,EAAO;AACrB,oBAAM,WAAuB,EAA7B;AACA,oBAAI,EAAE,cAAF,CAAiB,iBAAjB,CAAJ,EAAyC;AACvC,wBAAM,UAA0B,EAAE,eAAlC;AACA,yBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,4BAAM,MAAW,QAAQ,IAAR,CAAa,CAAb,CAAjB;AACA,4BAAM,MAAW,MAAK,eAAL,CAAqB,IAAI,KAAzB,CAAjB;AACA,iCAAS,IAAT,CAAc,GAAd;AACD;AACF;AACD;AARA,qBASK;AACH,4BAAM,UAA0C,EAAE,OAAlD;AACA,6BAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,gCAAM,MAAkB,QAAQ,IAAR,CAAa,CAAb,CAAxB;AACA,gCAAI,IAAI,QAAR,EAAkB;AAChB,oCAAM,MAAW,MAAK,eAAL,CAAqB,IAAI,KAAzB,CAAjB;AACA,yCAAS,IAAT,CAAc,GAAd;AACD;AACF;AACF;AACD,sBAAK,KAAL,GAAa,QAAb;AACA,mBAAG,QAAH;AACD,aAvBD;AAwBD,SAzBD;AA0BA,2CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,EAAlB,EAA+B;AAAU,iBAAK,SAAL,GAAiB,EAAjB;AAAsB,SAA/D;AAEA,2CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,UAAjB,EAAoC;AAClC,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,WAAL,CAAiB,aAA5C,EAA2D,UAA3D,EAAuE,UAAvE;AACD,SAFD;AAIA;AACA,2CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,KAAhB,EAA6C;AAC3C,gBAAM,KAAa,CAAC,KAAK,UAAL,EAAD,EAAoB,QAApB,EAAnB;AACA,iBAAK,UAAL,CAAgB,GAAhB,CAAoB,EAApB,EAAwB,KAAxB;AACA,mBAAO,EAAP;AACD,SAJD;AAMA;AACA,2CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAAuB;;;AACrB,qBAAiB,IAAA,KAAA,QAAA,QAAA,CAAA,MAAM,IAAN,CAAW,KAAK,UAAL,CAAgB,IAAhB,EAAX,CAAA,CAAA,EAAkC,KAAA,GAAA,IAAA,EAAnD,EAAmD,CAAA,GAAA,IAAnD,EAAmD,KAAA,GAAA,IAAA,EAAnD,EAAqD;AAAhD,wBAAM,KAAE,GAAA,KAAR;AACH,wBAAI,KAAK,YAAL,CAAkB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,EAApB,EAA0B,MAA5C,EAAoD,KAApD,CAAJ,EAAgE,OAAO,EAAP;AACjE;;;;;;;;;;AACD,mBAAO,IAAP;AACD,SALD;AAOA;AACA,2CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,WAAhB,EAAmC;AACjC,gBAAM,KAAa,WAAW,WAAX,CAAnB;AACA,mBAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,EAApB,IAA0B,KAAK,UAAL,CAAgB,GAAhB,CAAoB,EAApB,EAA0B,MAApD,GAA6D,WAApE;AACD,SAHD;AAxEA,gBAAA,UAAA,CAAA,CADC,OACD,E,2CAAA,E,mDAAA,CAAA,E,4CAAA,E,aAAA,EAKC,IALD;AAXW,6CAAkC,QAAA,UAAA,CAAA,CAN9C,UAAU;AACT,sBACI,2FAFK;AAGT,kBAAM,EAAC,YAAY,yBAAb,EAAwC,UAAU,aAAlD,EAHG;AAIT,uBAAW,CAAC,8BAAD;AAJF,SAAV,CAM8C,E,yCAoBd,S,EAAgC,U,EApBlB,CAAA,EAAlC,kCAAkC,CAAlC;AAuFb,eAAA,kCAAA;AAAC,KAvFD,EAAA;aAAa,kC;AAyFb;;;;;;;;;;;;;;AAeA,QAAA,yBAAA,aAAA,YAAA;AAME,iBAAA,sBAAA,CACY,QADZ,EAC0C,SAD1C,EAEgC,OAFhC,EAE2E;AAD/D,iBAAA,QAAA,GAAA,QAAA;AAA8B,iBAAA,SAAA,GAAA,SAAA;AACV,iBAAA,OAAA,GAAA,OAAA;AAC9B,gBAAI,KAAK,OAAT,EAAkB;AAChB,qBAAK,EAAL,GAAU,KAAK,OAAL,CAAa,eAAb,CAA6B,IAA7B,CAAV;AACD;AACF;AAGD,eAAA,cAAA,CAAI,uBAAA,SAAJ,EAAI,SAAJ,EAAW;iBAAX,UAAY,KAAZ,EAAsB;AACpB,oBAAI,KAAK,OAAL,IAAgB,IAApB,EAA0B;AAC1B,qBAAK,MAAL,GAAc,KAAd;AACA,qBAAK,gBAAL,CAAsB,kBAAkB,KAAK,EAAvB,EAA2B,KAA3B,CAAtB;AACA,qBAAK,OAAL,CAAa,UAAb,CAAwB,KAAK,OAAL,CAAa,KAArC;AACD,aALU;4BAAA;;AAAA,SAAX;AAQA,eAAA,cAAA,CAAI,uBAAA,SAAJ,EAAI,OAAJ,EAAS;iBAAT,UAAU,KAAV,EAAoB;AAClB,oBAAI,KAAK,OAAT,EAAkB;AAChB,yBAAK,MAAL,GAAc,KAAd;AACA,yBAAK,gBAAL,CAAsB,kBAAkB,KAAK,EAAvB,EAA2B,KAA3B,CAAtB;AACA,yBAAK,OAAL,CAAa,UAAb,CAAwB,KAAK,OAAL,CAAa,KAArC;AACD,iBAJD,MAIO;AACL,yBAAK,gBAAL,CAAsB,KAAtB;AACD;AACF,aARQ;4BAAA;;AAAA,SAAT;AAUA;AACA,+BAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,KAAjB,EAA8B;AAC5B,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,QAAL,CAAc,aAAzC,EAAwD,OAAxD,EAAiE,KAAjE;AACD,SAFD;AAIA;AACA,+BAAA,SAAA,CAAA,YAAA,GAAA,UAAa,QAAb,EAA8B;AAC5B,iBAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,QAAL,CAAc,aAAzC,EAAwD,UAAxD,EAAoE,QAApE;AACD,SAFD;AAIA,+BAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,gBAAI,KAAK,OAAT,EAAkB;AAChB,qBAAK,OAAL,CAAa,UAAb,CAAwB,MAAxB,CAA+B,KAAK,EAApC;AACA,qBAAK,OAAL,CAAa,UAAb,CAAwB,KAAK,OAAL,CAAa,KAArC;AACD;AACF,SALD;AA5BA,gBAAA,UAAA,CAAA,CADC,MAAM,SAAN,CACD,E,yCAAA,E,iDAAA,CAAA,E,gCAAA,E,SAAA,EAKC,IALD;AAQA,gBAAA,UAAA,CAAA,CADC,MAAM,OAAN,CACD,E,yCAAA,E,iDAAA,CAAA,E,gCAAA,E,OAAA,EAQC,IARD;AAvBW,iCAAsB,QAAA,UAAA,CAAA,CADlC,UAAU,EAAC,UAAU,QAAX,EAAV,CACkC,EAQ5B,QAAA,OAAA,CAAA,CAAA,EAAA,UAAA,CAR4B,EAQhB,QAAA,OAAA,CAAA,CAAA,EAAA,MAAA,CARgB,E,yCAOX,U,EAA+B,S,EACZ,kC,EARR,CAAA,EAAtB,sBAAsB,CAAtB;AAiDb,eAAA,sBAAA;AAAC,KAjDD,EAAA;aAAa,sB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider, forwardRef, ÉµlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_MULTIPLE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n\n/** Mock interface for HTMLCollection */\nabstract class HTMLCollection {\n  // TODO(issue/24571): remove '!'.\n  length !: number;\n  abstract item(_: number): HTMLOption;\n}\n\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n * @usageNotes\n * ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\n@Directive({\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(change)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n})\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, NgSelectMultipleOption> = new Map<string, NgSelectMultipleOption>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    let optionSelectedStateSetter: (opt: NgSelectMultipleOption, o: any) => void;\n    if (Array.isArray(value)) {\n      // convert values to ids\n      const ids = value.map((v) => this._getOptionId(v));\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\n    } else {\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\n    }\n    this._optionMap.forEach(optionSelectedStateSetter);\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      const selected: Array<any> = [];\n      if (_.hasOwnProperty('selectedOptions')) {\n        const options: HTMLCollection = _.selectedOptions;\n        for (let i = 0; i < options.length; i++) {\n          const opt: any = options.item(i);\n          const val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        const options: HTMLCollection = <HTMLCollection>_.options;\n        for (let i = 0; i < options.length; i++) {\n          const opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            const val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      this.value = selected;\n      fn(selected);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(value: NgSelectMultipleOption): string {\n    const id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id) !._value, value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) !._value : valueString;\n  }\n}\n\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: 'option'})\nexport class NgSelectMultipleOption implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  id !: string;\n  /** @internal */\n  _value: any;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectMultipleControlValueAccessor) {\n    if (this._select) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  @Input('value')\n  set value(value: any) {\n    if (this._select) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @internal */\n  _setSelected(selected: boolean) {\n    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n"],"sourceRoot":""}