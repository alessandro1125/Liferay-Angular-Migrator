Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/directives/reactive_directives/form_group_directive', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Directive, EventEmitter, Inject, Input, Optional, Output, Self, forwardRef } from '@angular/core';
    import { FormGroup } from '../../model';
    import { NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators } from '../../validators';
    import { ControlContainer } from '../control_container';
    import { ReactiveErrors } from '../reactive_errors';
    import { cleanUpControl, composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls } from '../shared';
    export var formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () {
            return FormGroupDirective;
        })
    };
    /**
     * @description
     *
     * Binds an existing `FormGroup` to a DOM element.
     *
     * This directive accepts an existing `FormGroup` instance. It will then use this
     * `FormGroup` instance to match any child `FormControl`, `FormGroup`,
     * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
     * and `FormArrayName` directives.
     *
     * @usageNotes
     * **Set value**: You can set the form's initial value when instantiating the
     * `FormGroup`, or you can set it programmatically later using the `FormGroup`'s
     * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}
     * methods.
     *
     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe
     * to the `FormGroup`'s {@link AbstractControl#valueChanges valueChanges} event.  You can also
     * listen to its {@link AbstractControl#statusChanges statusChanges} event to be notified when the
     * validation status is re-calculated.
     *
     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has
     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
     * submission event.
     *
     * ### Example
     *
     * In this example, we create form controls for first name and last name.
     *
     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
     *
     * @ngModule ReactiveFormsModule
     */
    var FormGroupDirective = /** @class */function (_super) {
        tslib_1.__extends(FormGroupDirective, _super);
        function FormGroupDirective(_validators, _asyncValidators) {
            var _this = _super.call(this) || this;
            _this._validators = _validators;
            _this._asyncValidators = _asyncValidators;
            _this.submitted = false;
            _this.directives = [];
            _this.form = null;
            _this.ngSubmit = new EventEmitter();
            return _this;
        }
        FormGroupDirective.prototype.ngOnChanges = function (changes) {
            this._checkFormPresent();
            if (changes.hasOwnProperty('form')) {
                this._updateValidators();
                this._updateDomValue();
                this._updateRegistrations();
            }
        };
        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "control", {
            get: function () {
                return this.form;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "path", {
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        FormGroupDirective.prototype.addControl = function (dir) {
            var ctrl = this.form.get(dir.path);
            setUpControl(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
            this.directives.push(dir);
            return ctrl;
        };
        FormGroupDirective.prototype.getControl = function (dir) {
            return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.removeControl = function (dir) {
            removeDir(this.directives, dir);
        };
        FormGroupDirective.prototype.addFormGroup = function (dir) {
            var ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype.removeFormGroup = function (dir) {};
        FormGroupDirective.prototype.getFormGroup = function (dir) {
            return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.addFormArray = function (dir) {
            var ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype.removeFormArray = function (dir) {};
        FormGroupDirective.prototype.getFormArray = function (dir) {
            return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.updateModel = function (dir, value) {
            var ctrl = this.form.get(dir.path);
            ctrl.setValue(value);
        };
        FormGroupDirective.prototype.onSubmit = function ($event) {
            this.submitted = true;
            syncPendingControls(this.form, this.directives);
            this.ngSubmit.emit($event);
            return false;
        };
        FormGroupDirective.prototype.onReset = function () {
            this.resetForm();
        };
        FormGroupDirective.prototype.resetForm = function (value) {
            if (value === void 0) {
                value = undefined;
            }
            this.form.reset(value);
            this.submitted = false;
        };
        /** @internal */
        FormGroupDirective.prototype._updateDomValue = function () {
            var _this = this;
            this.directives.forEach(function (dir) {
                var newCtrl = _this.form.get(dir.path);
                if (dir.control !== newCtrl) {
                    cleanUpControl(dir.control, dir);
                    if (newCtrl) setUpControl(newCtrl, dir);
                    dir.control = newCtrl;
                }
            });
            this.form._updateTreeValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype._updateRegistrations = function () {
            var _this = this;
            this.form._registerOnCollectionChange(function () {
                return _this._updateDomValue();
            });
            if (this._oldForm) this._oldForm._registerOnCollectionChange(function () {});
            this._oldForm = this.form;
        };
        FormGroupDirective.prototype._updateValidators = function () {
            var sync = composeValidators(this._validators);
            this.form.validator = Validators.compose([this.form.validator, sync]);
            var async = composeAsyncValidators(this._asyncValidators);
            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
        };
        FormGroupDirective.prototype._checkFormPresent = function () {
            if (!this.form) {
                ReactiveErrors.missingFormException();
            }
        };
        tslib_1.__decorate([Input('formGroup'), tslib_1.__metadata("design:type", FormGroup)], FormGroupDirective.prototype, "form", void 0);
        tslib_1.__decorate([Output(), tslib_1.__metadata("design:type", Object)], FormGroupDirective.prototype, "ngSubmit", void 0);
        FormGroupDirective = tslib_1.__decorate([Directive({
            selector: '[formGroup]',
            providers: [formDirectiveProvider],
            host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
            exportAs: 'ngForm'
        }), tslib_1.__param(0, Optional()), tslib_1.__param(0, Self()), tslib_1.__param(0, Inject(NG_VALIDATORS)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Self()), tslib_1.__param(1, Inject(NG_ASYNC_VALIDATORS)), tslib_1.__metadata("design:paramtypes", [Array, Array])], FormGroupDirective);
        return FormGroupDirective;
    }(ControlContainer);
    export { FormGroupDirective };
});
//# sourceMappingURL=form_group_directive.js.map