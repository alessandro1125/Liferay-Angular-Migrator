{"version":3,"sources":["../../../../../../../../../packages/forms/src/form_builder.ts"],"names":[],"mappings":";;;;;;;;;;AAQA,aAAQ,UAAR,QAAyB,eAAzB;AAGA,aAAyB,SAAzB,EAAoC,WAApC,EAAiD,SAAjD,QAAiE,SAAjE;AAEA;;;;;;;;;;;AAYA,QAAA,cAAA,aAAA,YAAA;AAAA,iBAAA,WAAA,GAAA,CA6FC;AA5FC;;;;;;;;;;;;AAYA,oBAAA,SAAA,CAAA,KAAA,GAAA,UAAM,cAAN,EAA4C,KAA5C,EAAmF;AAAvC,gBAAA,UAAA,KAAA,CAAA,EAAA;AAAA,wBAAA,IAAA;AAAuC;AACjF,gBAAM,WAAW,KAAK,eAAL,CAAqB,cAArB,CAAjB;AACA,gBAAM,YAAyB,SAAS,IAAT,GAAgB,MAAM,WAAN,CAAhB,GAAqC,IAApE;AACA,gBAAM,iBAAmC,SAAS,IAAT,GAAgB,MAAM,gBAAN,CAAhB,GAA0C,IAAnF;AACA,mBAAO,IAAI,SAAJ,CAAc,QAAd,EAAwB,SAAxB,EAAmC,cAAnC,CAAP;AACD,SALD;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,oBAAA,SAAA,CAAA,OAAA,GAAA,UACI,SADJ,EACoB,SADpB,EAEI,cAFJ,EAE6D;AAC3D,mBAAO,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,SAA3B,EAAsC,cAAtC,CAAP;AACD,SAJD;AAMA;;;;;;;;;;;;AAYA,oBAAA,SAAA,CAAA,KAAA,GAAA,UACI,cADJ,EAC2B,SAD3B,EAEI,cAFJ,EAE6D;AAF7D,gBAAA,QAAA,IAAA;AAGE,gBAAM,WAAW,eAAe,GAAf,CAAmB,UAAA,CAAA,EAAC;AAAI,uBAAA,MAAK,cAAL,CAAA,CAAA,CAAA;AAAsB,aAA9C,CAAjB;AACA,mBAAO,IAAI,SAAJ,CAAc,QAAd,EAAwB,SAAxB,EAAmC,cAAnC,CAAP;AACD,SALD;AAOA;AACA,oBAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,cAAhB,EAAkD;AAAlD,gBAAA,QAAA,IAAA;AACE,gBAAM,WAA6C,EAAnD;AACA,mBAAO,IAAP,CAAY,cAAZ,EAA4B,OAA5B,CAAoC,UAAA,WAAA,EAAW;AAC7C,yBAAS,WAAT,IAAwB,MAAK,cAAL,CAAoB,eAAe,WAAf,CAApB,CAAxB;AACD,aAFD;AAGA,mBAAO,QAAP;AACD,SAND;AAQA;AACA,oBAAA,SAAA,CAAA,cAAA,GAAA,UAAe,aAAf,EAAiC;AAC/B,gBAAI,yBAAyB,WAAzB,IAAwC,yBAAyB,SAAjE,IACA,yBAAyB,SAD7B,EACwC;AACtC,uBAAO,aAAP;AAED,aAJD,MAIO,IAAI,MAAM,OAAN,CAAc,aAAd,CAAJ,EAAkC;AACvC,oBAAM,QAAQ,cAAc,CAAd,CAAd;AACA,oBAAM,YAAyB,cAAc,MAAd,GAAuB,CAAvB,GAA2B,cAAc,CAAd,CAA3B,GAA8C,IAA7E;AACA,oBAAM,iBAAmC,cAAc,MAAd,GAAuB,CAAvB,GAA2B,cAAc,CAAd,CAA3B,GAA8C,IAAvF;AACA,uBAAO,KAAK,OAAL,CAAa,KAAb,EAAoB,SAApB,EAA+B,cAA/B,CAAP;AAED,aANM,MAMA;AACL,uBAAO,KAAK,OAAL,CAAa,aAAb,CAAP;AACD;AACF,SAdD;AA9EW,sBAAW,QAAA,UAAA,CAAA,CADvB,YACuB,CAAA,EAAX,WAAW,CAAX;AA6Fb,eAAA,WAAA;AAAC,KA7FD,EAAA;aAAa,W","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n */\n@Injectable()\nexport class FormBuilder {\n  /**\n   * @description\n   * Construct a new `FormGroup` instance.\n   *\n   * @param controlsConfig A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param extra An object of configuration options for the `FormGroup`.\n   * * `validator`: A synchronous validator function, or an array of validator functions\n   * * `asyncValidator`: A single async validator or array of async validator functions\n   *\n   */\n  group(controlsConfig: {[key: string]: any}, extra: {[key: string]: any}|null = null): FormGroup {\n    const controls = this._reduceControls(controlsConfig);\n    const validator: ValidatorFn = extra != null ? extra['validator'] : null;\n    const asyncValidator: AsyncValidatorFn = extra != null ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n\n  /**\n   * @description\n   * Construct a new `FormControl` instance.\n   *\n   * @param formState Initializes the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param validator A synchronous validator function, or an array of synchronous validator\n   * functions.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   * @usageNotes\n   *\n   * ### Initialize a control as disabled\n   *\n   * The following example returns a control with an initial value in a disabled state.\n   *\n   * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\"\n   *   linenums=\"false\" region=\"disabled-control\">\n   * </code-example>\n   *\n   */\n  control(\n      formState: any, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n\n  /**\n   * @description\n   * Construct a new `FormArray` instance.\n   *\n   * @param controlsConfig An array of child controls. The key for each child control is its index\n   * in the array.\n   *\n   * @param validator A synchronous validator function, or an array of synchronous validator\n   * functions.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   */\n  array(\n      controlsConfig: any[], validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormArray {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const value = controlConfig[0];\n      const validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\n}\n"],"sourceRoot":""}