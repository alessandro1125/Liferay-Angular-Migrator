Liferay.Loader.define('@example-angular-liferay$angular/forms@6.1.10/esm5/src/form_builder', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import * as tslib_1 from "tslib";
    import { Injectable } from '@angular/core';
    import { FormArray, FormControl, FormGroup } from './model';
    /**
     * @description
     * Creates an `AbstractControl` from a user-specified configuration.
     *
     * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,
     * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex
     * forms.
     *
     * @see [Reactive Forms Guide](/guide/reactive-forms)
     *
     */
    var FormBuilder = /** @class */function () {
        function FormBuilder() {}
        /**
         * @description
         * Construct a new `FormGroup` instance.
         *
         * @param controlsConfig A collection of child controls. The key for each child is the name
         * under which it is registered.
         *
         * @param extra An object of configuration options for the `FormGroup`.
         * * `validator`: A synchronous validator function, or an array of validator functions
         * * `asyncValidator`: A single async validator or array of async validator functions
         *
         */
        FormBuilder.prototype.group = function (controlsConfig, extra) {
            if (extra === void 0) {
                extra = null;
            }
            var controls = this._reduceControls(controlsConfig);
            var validator = extra != null ? extra['validator'] : null;
            var asyncValidator = extra != null ? extra['asyncValidator'] : null;
            return new FormGroup(controls, validator, asyncValidator);
        };
        /**
         * @description
         * Construct a new `FormControl` instance.
         *
         * @param formState Initializes the control with an initial value,
         * or an object that defines the initial value and disabled state.
         *
         * @param validator A synchronous validator function, or an array of synchronous validator
         * functions.
         *
         * @param asyncValidator A single async validator or array of async validator functions
         *
         * @usageNotes
         *
         * ### Initialize a control as disabled
         *
         * The following example returns a control with an initial value in a disabled state.
         *
         * <code-example path="forms/ts/formBuilder/form_builder_example.ts"
         *   linenums="false" region="disabled-control">
         * </code-example>
         *
         */
        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
            return new FormControl(formState, validator, asyncValidator);
        };
        /**
         * @description
         * Construct a new `FormArray` instance.
         *
         * @param controlsConfig An array of child controls. The key for each child control is its index
         * in the array.
         *
         * @param validator A synchronous validator function, or an array of synchronous validator
         * functions.
         *
         * @param asyncValidator A single async validator or array of async validator functions
         */
        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
            var _this = this;
            var controls = controlsConfig.map(function (c) {
                return _this._createControl(c);
            });
            return new FormArray(controls, validator, asyncValidator);
        };
        /** @internal */
        FormBuilder.prototype._reduceControls = function (controlsConfig) {
            var _this = this;
            var controls = {};
            Object.keys(controlsConfig).forEach(function (controlName) {
                controls[controlName] = _this._createControl(controlsConfig[controlName]);
            });
            return controls;
        };
        /** @internal */
        FormBuilder.prototype._createControl = function (controlConfig) {
            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
                return controlConfig;
            } else if (Array.isArray(controlConfig)) {
                var value = controlConfig[0];
                var validator = controlConfig.length > 1 ? controlConfig[1] : null;
                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
                return this.control(value, validator, asyncValidator);
            } else {
                return this.control(controlConfig);
            }
        };
        FormBuilder = tslib_1.__decorate([Injectable()], FormBuilder);
        return FormBuilder;
    }();
    export { FormBuilder };
});
//# sourceMappingURL=form_builder.js.map